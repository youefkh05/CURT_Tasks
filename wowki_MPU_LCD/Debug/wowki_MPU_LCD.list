
wowki_MPU_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078a4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08007968  08007968  00008968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007de0  08007de0  000091d4  2**0
                  CONTENTS
  4 .ARM          00000000  08007de0  08007de0  000091d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007de0  08007de0  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007de0  08007de0  00008de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007de4  08007de4  00008de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007de8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  200001d4  08007fbc  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08007fbc  000093bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d9a  00000000  00000000  000091fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b2e  00000000  00000000  00010f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  00012ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000062d  00000000  00000000  00013300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013c81  00000000  00000000  0001392d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b50d  00000000  00000000  000275ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074ada  00000000  00000000  00032abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a7595  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ce0  00000000  00000000  000a75d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000aa2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800794c 	.word	0x0800794c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	0800794c 	.word	0x0800794c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f9d5 	bl	80017ec <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f915 	bl	800167c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f9c7 	bl	80017ec <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f9bd 	bl	80017ec <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f93f 	bl	8001704 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f935 	bl	8001704 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 f9cb 	bl	800084c <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 f94b 	bl	800075c <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 f9bd 	bl	800084c <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 f9b3 	bl	800084c <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 f959 	bl	80007ac <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 f94f 	bl	80007ac <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_fdiv>:
 800051c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051e:	464f      	mov	r7, r9
 8000520:	4646      	mov	r6, r8
 8000522:	46d6      	mov	lr, sl
 8000524:	0244      	lsls	r4, r0, #9
 8000526:	b5c0      	push	{r6, r7, lr}
 8000528:	0047      	lsls	r7, r0, #1
 800052a:	1c0e      	adds	r6, r1, #0
 800052c:	0a64      	lsrs	r4, r4, #9
 800052e:	0e3f      	lsrs	r7, r7, #24
 8000530:	0fc5      	lsrs	r5, r0, #31
 8000532:	2f00      	cmp	r7, #0
 8000534:	d03c      	beq.n	80005b0 <__aeabi_fdiv+0x94>
 8000536:	2fff      	cmp	r7, #255	@ 0xff
 8000538:	d042      	beq.n	80005c0 <__aeabi_fdiv+0xa4>
 800053a:	2300      	movs	r3, #0
 800053c:	2280      	movs	r2, #128	@ 0x80
 800053e:	4699      	mov	r9, r3
 8000540:	469a      	mov	sl, r3
 8000542:	00e4      	lsls	r4, r4, #3
 8000544:	04d2      	lsls	r2, r2, #19
 8000546:	4314      	orrs	r4, r2
 8000548:	3f7f      	subs	r7, #127	@ 0x7f
 800054a:	0273      	lsls	r3, r6, #9
 800054c:	0a5b      	lsrs	r3, r3, #9
 800054e:	4698      	mov	r8, r3
 8000550:	0073      	lsls	r3, r6, #1
 8000552:	0e1b      	lsrs	r3, r3, #24
 8000554:	0ff6      	lsrs	r6, r6, #31
 8000556:	2b00      	cmp	r3, #0
 8000558:	d01b      	beq.n	8000592 <__aeabi_fdiv+0x76>
 800055a:	2bff      	cmp	r3, #255	@ 0xff
 800055c:	d013      	beq.n	8000586 <__aeabi_fdiv+0x6a>
 800055e:	4642      	mov	r2, r8
 8000560:	2180      	movs	r1, #128	@ 0x80
 8000562:	00d2      	lsls	r2, r2, #3
 8000564:	04c9      	lsls	r1, r1, #19
 8000566:	4311      	orrs	r1, r2
 8000568:	4688      	mov	r8, r1
 800056a:	2000      	movs	r0, #0
 800056c:	3b7f      	subs	r3, #127	@ 0x7f
 800056e:	0029      	movs	r1, r5
 8000570:	1aff      	subs	r7, r7, r3
 8000572:	464b      	mov	r3, r9
 8000574:	4071      	eors	r1, r6
 8000576:	b2c9      	uxtb	r1, r1
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d900      	bls.n	800057e <__aeabi_fdiv+0x62>
 800057c:	e0b5      	b.n	80006ea <__aeabi_fdiv+0x1ce>
 800057e:	4a74      	ldr	r2, [pc, #464]	@ (8000750 <__aeabi_fdiv+0x234>)
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	58d3      	ldr	r3, [r2, r3]
 8000584:	469f      	mov	pc, r3
 8000586:	4643      	mov	r3, r8
 8000588:	2b00      	cmp	r3, #0
 800058a:	d13f      	bne.n	800060c <__aeabi_fdiv+0xf0>
 800058c:	3fff      	subs	r7, #255	@ 0xff
 800058e:	3302      	adds	r3, #2
 8000590:	e003      	b.n	800059a <__aeabi_fdiv+0x7e>
 8000592:	4643      	mov	r3, r8
 8000594:	2b00      	cmp	r3, #0
 8000596:	d12d      	bne.n	80005f4 <__aeabi_fdiv+0xd8>
 8000598:	2301      	movs	r3, #1
 800059a:	0029      	movs	r1, r5
 800059c:	464a      	mov	r2, r9
 800059e:	4071      	eors	r1, r6
 80005a0:	b2c9      	uxtb	r1, r1
 80005a2:	431a      	orrs	r2, r3
 80005a4:	2a0e      	cmp	r2, #14
 80005a6:	d838      	bhi.n	800061a <__aeabi_fdiv+0xfe>
 80005a8:	486a      	ldr	r0, [pc, #424]	@ (8000754 <__aeabi_fdiv+0x238>)
 80005aa:	0092      	lsls	r2, r2, #2
 80005ac:	5882      	ldr	r2, [r0, r2]
 80005ae:	4697      	mov	pc, r2
 80005b0:	2c00      	cmp	r4, #0
 80005b2:	d113      	bne.n	80005dc <__aeabi_fdiv+0xc0>
 80005b4:	2304      	movs	r3, #4
 80005b6:	4699      	mov	r9, r3
 80005b8:	3b03      	subs	r3, #3
 80005ba:	2700      	movs	r7, #0
 80005bc:	469a      	mov	sl, r3
 80005be:	e7c4      	b.n	800054a <__aeabi_fdiv+0x2e>
 80005c0:	2c00      	cmp	r4, #0
 80005c2:	d105      	bne.n	80005d0 <__aeabi_fdiv+0xb4>
 80005c4:	2308      	movs	r3, #8
 80005c6:	4699      	mov	r9, r3
 80005c8:	3b06      	subs	r3, #6
 80005ca:	27ff      	movs	r7, #255	@ 0xff
 80005cc:	469a      	mov	sl, r3
 80005ce:	e7bc      	b.n	800054a <__aeabi_fdiv+0x2e>
 80005d0:	230c      	movs	r3, #12
 80005d2:	4699      	mov	r9, r3
 80005d4:	3b09      	subs	r3, #9
 80005d6:	27ff      	movs	r7, #255	@ 0xff
 80005d8:	469a      	mov	sl, r3
 80005da:	e7b6      	b.n	800054a <__aeabi_fdiv+0x2e>
 80005dc:	0020      	movs	r0, r4
 80005de:	f002 f88b 	bl	80026f8 <__clzsi2>
 80005e2:	2776      	movs	r7, #118	@ 0x76
 80005e4:	1f43      	subs	r3, r0, #5
 80005e6:	409c      	lsls	r4, r3
 80005e8:	2300      	movs	r3, #0
 80005ea:	427f      	negs	r7, r7
 80005ec:	4699      	mov	r9, r3
 80005ee:	469a      	mov	sl, r3
 80005f0:	1a3f      	subs	r7, r7, r0
 80005f2:	e7aa      	b.n	800054a <__aeabi_fdiv+0x2e>
 80005f4:	4640      	mov	r0, r8
 80005f6:	f002 f87f 	bl	80026f8 <__clzsi2>
 80005fa:	4642      	mov	r2, r8
 80005fc:	1f43      	subs	r3, r0, #5
 80005fe:	409a      	lsls	r2, r3
 8000600:	2376      	movs	r3, #118	@ 0x76
 8000602:	425b      	negs	r3, r3
 8000604:	1a1b      	subs	r3, r3, r0
 8000606:	4690      	mov	r8, r2
 8000608:	2000      	movs	r0, #0
 800060a:	e7b0      	b.n	800056e <__aeabi_fdiv+0x52>
 800060c:	2303      	movs	r3, #3
 800060e:	464a      	mov	r2, r9
 8000610:	431a      	orrs	r2, r3
 8000612:	4691      	mov	r9, r2
 8000614:	2003      	movs	r0, #3
 8000616:	33fc      	adds	r3, #252	@ 0xfc
 8000618:	e7a9      	b.n	800056e <__aeabi_fdiv+0x52>
 800061a:	000d      	movs	r5, r1
 800061c:	20ff      	movs	r0, #255	@ 0xff
 800061e:	2200      	movs	r2, #0
 8000620:	05c0      	lsls	r0, r0, #23
 8000622:	07ed      	lsls	r5, r5, #31
 8000624:	4310      	orrs	r0, r2
 8000626:	4328      	orrs	r0, r5
 8000628:	bce0      	pop	{r5, r6, r7}
 800062a:	46ba      	mov	sl, r7
 800062c:	46b1      	mov	r9, r6
 800062e:	46a8      	mov	r8, r5
 8000630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000632:	000d      	movs	r5, r1
 8000634:	2000      	movs	r0, #0
 8000636:	2200      	movs	r2, #0
 8000638:	e7f2      	b.n	8000620 <__aeabi_fdiv+0x104>
 800063a:	4653      	mov	r3, sl
 800063c:	2b02      	cmp	r3, #2
 800063e:	d0ed      	beq.n	800061c <__aeabi_fdiv+0x100>
 8000640:	2b03      	cmp	r3, #3
 8000642:	d033      	beq.n	80006ac <__aeabi_fdiv+0x190>
 8000644:	46a0      	mov	r8, r4
 8000646:	2b01      	cmp	r3, #1
 8000648:	d105      	bne.n	8000656 <__aeabi_fdiv+0x13a>
 800064a:	2000      	movs	r0, #0
 800064c:	2200      	movs	r2, #0
 800064e:	e7e7      	b.n	8000620 <__aeabi_fdiv+0x104>
 8000650:	0035      	movs	r5, r6
 8000652:	2803      	cmp	r0, #3
 8000654:	d07a      	beq.n	800074c <__aeabi_fdiv+0x230>
 8000656:	003b      	movs	r3, r7
 8000658:	337f      	adds	r3, #127	@ 0x7f
 800065a:	2b00      	cmp	r3, #0
 800065c:	dd2d      	ble.n	80006ba <__aeabi_fdiv+0x19e>
 800065e:	4642      	mov	r2, r8
 8000660:	0752      	lsls	r2, r2, #29
 8000662:	d007      	beq.n	8000674 <__aeabi_fdiv+0x158>
 8000664:	220f      	movs	r2, #15
 8000666:	4641      	mov	r1, r8
 8000668:	400a      	ands	r2, r1
 800066a:	2a04      	cmp	r2, #4
 800066c:	d002      	beq.n	8000674 <__aeabi_fdiv+0x158>
 800066e:	2204      	movs	r2, #4
 8000670:	4694      	mov	ip, r2
 8000672:	44e0      	add	r8, ip
 8000674:	4642      	mov	r2, r8
 8000676:	0112      	lsls	r2, r2, #4
 8000678:	d505      	bpl.n	8000686 <__aeabi_fdiv+0x16a>
 800067a:	4642      	mov	r2, r8
 800067c:	4b36      	ldr	r3, [pc, #216]	@ (8000758 <__aeabi_fdiv+0x23c>)
 800067e:	401a      	ands	r2, r3
 8000680:	003b      	movs	r3, r7
 8000682:	4690      	mov	r8, r2
 8000684:	3380      	adds	r3, #128	@ 0x80
 8000686:	2bfe      	cmp	r3, #254	@ 0xfe
 8000688:	dcc8      	bgt.n	800061c <__aeabi_fdiv+0x100>
 800068a:	4642      	mov	r2, r8
 800068c:	0192      	lsls	r2, r2, #6
 800068e:	0a52      	lsrs	r2, r2, #9
 8000690:	b2d8      	uxtb	r0, r3
 8000692:	e7c5      	b.n	8000620 <__aeabi_fdiv+0x104>
 8000694:	2280      	movs	r2, #128	@ 0x80
 8000696:	2500      	movs	r5, #0
 8000698:	20ff      	movs	r0, #255	@ 0xff
 800069a:	03d2      	lsls	r2, r2, #15
 800069c:	e7c0      	b.n	8000620 <__aeabi_fdiv+0x104>
 800069e:	2280      	movs	r2, #128	@ 0x80
 80006a0:	03d2      	lsls	r2, r2, #15
 80006a2:	4214      	tst	r4, r2
 80006a4:	d002      	beq.n	80006ac <__aeabi_fdiv+0x190>
 80006a6:	4643      	mov	r3, r8
 80006a8:	4213      	tst	r3, r2
 80006aa:	d049      	beq.n	8000740 <__aeabi_fdiv+0x224>
 80006ac:	2280      	movs	r2, #128	@ 0x80
 80006ae:	03d2      	lsls	r2, r2, #15
 80006b0:	4322      	orrs	r2, r4
 80006b2:	0252      	lsls	r2, r2, #9
 80006b4:	20ff      	movs	r0, #255	@ 0xff
 80006b6:	0a52      	lsrs	r2, r2, #9
 80006b8:	e7b2      	b.n	8000620 <__aeabi_fdiv+0x104>
 80006ba:	2201      	movs	r2, #1
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	2b1b      	cmp	r3, #27
 80006c0:	dcc3      	bgt.n	800064a <__aeabi_fdiv+0x12e>
 80006c2:	4642      	mov	r2, r8
 80006c4:	40da      	lsrs	r2, r3
 80006c6:	4643      	mov	r3, r8
 80006c8:	379e      	adds	r7, #158	@ 0x9e
 80006ca:	40bb      	lsls	r3, r7
 80006cc:	1e59      	subs	r1, r3, #1
 80006ce:	418b      	sbcs	r3, r1
 80006d0:	431a      	orrs	r2, r3
 80006d2:	0753      	lsls	r3, r2, #29
 80006d4:	d004      	beq.n	80006e0 <__aeabi_fdiv+0x1c4>
 80006d6:	230f      	movs	r3, #15
 80006d8:	4013      	ands	r3, r2
 80006da:	2b04      	cmp	r3, #4
 80006dc:	d000      	beq.n	80006e0 <__aeabi_fdiv+0x1c4>
 80006de:	3204      	adds	r2, #4
 80006e0:	0153      	lsls	r3, r2, #5
 80006e2:	d529      	bpl.n	8000738 <__aeabi_fdiv+0x21c>
 80006e4:	2001      	movs	r0, #1
 80006e6:	2200      	movs	r2, #0
 80006e8:	e79a      	b.n	8000620 <__aeabi_fdiv+0x104>
 80006ea:	4642      	mov	r2, r8
 80006ec:	0163      	lsls	r3, r4, #5
 80006ee:	0155      	lsls	r5, r2, #5
 80006f0:	42ab      	cmp	r3, r5
 80006f2:	d215      	bcs.n	8000720 <__aeabi_fdiv+0x204>
 80006f4:	201b      	movs	r0, #27
 80006f6:	2200      	movs	r2, #0
 80006f8:	3f01      	subs	r7, #1
 80006fa:	2601      	movs	r6, #1
 80006fc:	001c      	movs	r4, r3
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	2c00      	cmp	r4, #0
 8000704:	db01      	blt.n	800070a <__aeabi_fdiv+0x1ee>
 8000706:	429d      	cmp	r5, r3
 8000708:	d801      	bhi.n	800070e <__aeabi_fdiv+0x1f2>
 800070a:	1b5b      	subs	r3, r3, r5
 800070c:	4332      	orrs	r2, r6
 800070e:	3801      	subs	r0, #1
 8000710:	2800      	cmp	r0, #0
 8000712:	d1f3      	bne.n	80006fc <__aeabi_fdiv+0x1e0>
 8000714:	1e58      	subs	r0, r3, #1
 8000716:	4183      	sbcs	r3, r0
 8000718:	4313      	orrs	r3, r2
 800071a:	4698      	mov	r8, r3
 800071c:	000d      	movs	r5, r1
 800071e:	e79a      	b.n	8000656 <__aeabi_fdiv+0x13a>
 8000720:	201a      	movs	r0, #26
 8000722:	2201      	movs	r2, #1
 8000724:	1b5b      	subs	r3, r3, r5
 8000726:	e7e8      	b.n	80006fa <__aeabi_fdiv+0x1de>
 8000728:	3b02      	subs	r3, #2
 800072a:	425a      	negs	r2, r3
 800072c:	4153      	adcs	r3, r2
 800072e:	425b      	negs	r3, r3
 8000730:	0035      	movs	r5, r6
 8000732:	2200      	movs	r2, #0
 8000734:	b2d8      	uxtb	r0, r3
 8000736:	e773      	b.n	8000620 <__aeabi_fdiv+0x104>
 8000738:	0192      	lsls	r2, r2, #6
 800073a:	2000      	movs	r0, #0
 800073c:	0a52      	lsrs	r2, r2, #9
 800073e:	e76f      	b.n	8000620 <__aeabi_fdiv+0x104>
 8000740:	431a      	orrs	r2, r3
 8000742:	0252      	lsls	r2, r2, #9
 8000744:	0035      	movs	r5, r6
 8000746:	20ff      	movs	r0, #255	@ 0xff
 8000748:	0a52      	lsrs	r2, r2, #9
 800074a:	e769      	b.n	8000620 <__aeabi_fdiv+0x104>
 800074c:	4644      	mov	r4, r8
 800074e:	e7ad      	b.n	80006ac <__aeabi_fdiv+0x190>
 8000750:	08007970 	.word	0x08007970
 8000754:	080079b0 	.word	0x080079b0
 8000758:	f7ffffff 	.word	0xf7ffffff

0800075c <__eqsf2>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	0042      	lsls	r2, r0, #1
 8000760:	024e      	lsls	r6, r1, #9
 8000762:	004c      	lsls	r4, r1, #1
 8000764:	0245      	lsls	r5, r0, #9
 8000766:	0a6d      	lsrs	r5, r5, #9
 8000768:	0e12      	lsrs	r2, r2, #24
 800076a:	0fc3      	lsrs	r3, r0, #31
 800076c:	0a76      	lsrs	r6, r6, #9
 800076e:	0e24      	lsrs	r4, r4, #24
 8000770:	0fc9      	lsrs	r1, r1, #31
 8000772:	2aff      	cmp	r2, #255	@ 0xff
 8000774:	d010      	beq.n	8000798 <__eqsf2+0x3c>
 8000776:	2cff      	cmp	r4, #255	@ 0xff
 8000778:	d00c      	beq.n	8000794 <__eqsf2+0x38>
 800077a:	2001      	movs	r0, #1
 800077c:	42a2      	cmp	r2, r4
 800077e:	d10a      	bne.n	8000796 <__eqsf2+0x3a>
 8000780:	42b5      	cmp	r5, r6
 8000782:	d108      	bne.n	8000796 <__eqsf2+0x3a>
 8000784:	428b      	cmp	r3, r1
 8000786:	d00f      	beq.n	80007a8 <__eqsf2+0x4c>
 8000788:	2a00      	cmp	r2, #0
 800078a:	d104      	bne.n	8000796 <__eqsf2+0x3a>
 800078c:	0028      	movs	r0, r5
 800078e:	1e43      	subs	r3, r0, #1
 8000790:	4198      	sbcs	r0, r3
 8000792:	e000      	b.n	8000796 <__eqsf2+0x3a>
 8000794:	2001      	movs	r0, #1
 8000796:	bd70      	pop	{r4, r5, r6, pc}
 8000798:	2001      	movs	r0, #1
 800079a:	2cff      	cmp	r4, #255	@ 0xff
 800079c:	d1fb      	bne.n	8000796 <__eqsf2+0x3a>
 800079e:	4335      	orrs	r5, r6
 80007a0:	d1f9      	bne.n	8000796 <__eqsf2+0x3a>
 80007a2:	404b      	eors	r3, r1
 80007a4:	0018      	movs	r0, r3
 80007a6:	e7f6      	b.n	8000796 <__eqsf2+0x3a>
 80007a8:	2000      	movs	r0, #0
 80007aa:	e7f4      	b.n	8000796 <__eqsf2+0x3a>

080007ac <__gesf2>:
 80007ac:	b530      	push	{r4, r5, lr}
 80007ae:	0042      	lsls	r2, r0, #1
 80007b0:	0244      	lsls	r4, r0, #9
 80007b2:	024d      	lsls	r5, r1, #9
 80007b4:	0fc3      	lsrs	r3, r0, #31
 80007b6:	0048      	lsls	r0, r1, #1
 80007b8:	0a64      	lsrs	r4, r4, #9
 80007ba:	0e12      	lsrs	r2, r2, #24
 80007bc:	0a6d      	lsrs	r5, r5, #9
 80007be:	0e00      	lsrs	r0, r0, #24
 80007c0:	0fc9      	lsrs	r1, r1, #31
 80007c2:	2aff      	cmp	r2, #255	@ 0xff
 80007c4:	d019      	beq.n	80007fa <__gesf2+0x4e>
 80007c6:	28ff      	cmp	r0, #255	@ 0xff
 80007c8:	d00b      	beq.n	80007e2 <__gesf2+0x36>
 80007ca:	2a00      	cmp	r2, #0
 80007cc:	d11e      	bne.n	800080c <__gesf2+0x60>
 80007ce:	2800      	cmp	r0, #0
 80007d0:	d10b      	bne.n	80007ea <__gesf2+0x3e>
 80007d2:	2d00      	cmp	r5, #0
 80007d4:	d027      	beq.n	8000826 <__gesf2+0x7a>
 80007d6:	2c00      	cmp	r4, #0
 80007d8:	d134      	bne.n	8000844 <__gesf2+0x98>
 80007da:	2900      	cmp	r1, #0
 80007dc:	d02f      	beq.n	800083e <__gesf2+0x92>
 80007de:	0008      	movs	r0, r1
 80007e0:	bd30      	pop	{r4, r5, pc}
 80007e2:	2d00      	cmp	r5, #0
 80007e4:	d128      	bne.n	8000838 <__gesf2+0x8c>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	d101      	bne.n	80007ee <__gesf2+0x42>
 80007ea:	2c00      	cmp	r4, #0
 80007ec:	d0f5      	beq.n	80007da <__gesf2+0x2e>
 80007ee:	428b      	cmp	r3, r1
 80007f0:	d107      	bne.n	8000802 <__gesf2+0x56>
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d023      	beq.n	800083e <__gesf2+0x92>
 80007f6:	0018      	movs	r0, r3
 80007f8:	e7f2      	b.n	80007e0 <__gesf2+0x34>
 80007fa:	2c00      	cmp	r4, #0
 80007fc:	d11c      	bne.n	8000838 <__gesf2+0x8c>
 80007fe:	28ff      	cmp	r0, #255	@ 0xff
 8000800:	d014      	beq.n	800082c <__gesf2+0x80>
 8000802:	1e58      	subs	r0, r3, #1
 8000804:	2302      	movs	r3, #2
 8000806:	4018      	ands	r0, r3
 8000808:	3801      	subs	r0, #1
 800080a:	e7e9      	b.n	80007e0 <__gesf2+0x34>
 800080c:	2800      	cmp	r0, #0
 800080e:	d0f8      	beq.n	8000802 <__gesf2+0x56>
 8000810:	428b      	cmp	r3, r1
 8000812:	d1f6      	bne.n	8000802 <__gesf2+0x56>
 8000814:	4282      	cmp	r2, r0
 8000816:	dcf4      	bgt.n	8000802 <__gesf2+0x56>
 8000818:	dbeb      	blt.n	80007f2 <__gesf2+0x46>
 800081a:	42ac      	cmp	r4, r5
 800081c:	d8f1      	bhi.n	8000802 <__gesf2+0x56>
 800081e:	2000      	movs	r0, #0
 8000820:	42ac      	cmp	r4, r5
 8000822:	d2dd      	bcs.n	80007e0 <__gesf2+0x34>
 8000824:	e7e5      	b.n	80007f2 <__gesf2+0x46>
 8000826:	2c00      	cmp	r4, #0
 8000828:	d0da      	beq.n	80007e0 <__gesf2+0x34>
 800082a:	e7ea      	b.n	8000802 <__gesf2+0x56>
 800082c:	2d00      	cmp	r5, #0
 800082e:	d103      	bne.n	8000838 <__gesf2+0x8c>
 8000830:	428b      	cmp	r3, r1
 8000832:	d1e6      	bne.n	8000802 <__gesf2+0x56>
 8000834:	2000      	movs	r0, #0
 8000836:	e7d3      	b.n	80007e0 <__gesf2+0x34>
 8000838:	2002      	movs	r0, #2
 800083a:	4240      	negs	r0, r0
 800083c:	e7d0      	b.n	80007e0 <__gesf2+0x34>
 800083e:	2001      	movs	r0, #1
 8000840:	4240      	negs	r0, r0
 8000842:	e7cd      	b.n	80007e0 <__gesf2+0x34>
 8000844:	428b      	cmp	r3, r1
 8000846:	d0e8      	beq.n	800081a <__gesf2+0x6e>
 8000848:	e7db      	b.n	8000802 <__gesf2+0x56>
 800084a:	46c0      	nop			@ (mov r8, r8)

0800084c <__lesf2>:
 800084c:	b530      	push	{r4, r5, lr}
 800084e:	0042      	lsls	r2, r0, #1
 8000850:	0244      	lsls	r4, r0, #9
 8000852:	024d      	lsls	r5, r1, #9
 8000854:	0fc3      	lsrs	r3, r0, #31
 8000856:	0048      	lsls	r0, r1, #1
 8000858:	0a64      	lsrs	r4, r4, #9
 800085a:	0e12      	lsrs	r2, r2, #24
 800085c:	0a6d      	lsrs	r5, r5, #9
 800085e:	0e00      	lsrs	r0, r0, #24
 8000860:	0fc9      	lsrs	r1, r1, #31
 8000862:	2aff      	cmp	r2, #255	@ 0xff
 8000864:	d01a      	beq.n	800089c <__lesf2+0x50>
 8000866:	28ff      	cmp	r0, #255	@ 0xff
 8000868:	d00e      	beq.n	8000888 <__lesf2+0x3c>
 800086a:	2a00      	cmp	r2, #0
 800086c:	d11e      	bne.n	80008ac <__lesf2+0x60>
 800086e:	2800      	cmp	r0, #0
 8000870:	d10e      	bne.n	8000890 <__lesf2+0x44>
 8000872:	2d00      	cmp	r5, #0
 8000874:	d02a      	beq.n	80008cc <__lesf2+0x80>
 8000876:	2c00      	cmp	r4, #0
 8000878:	d00c      	beq.n	8000894 <__lesf2+0x48>
 800087a:	428b      	cmp	r3, r1
 800087c:	d01d      	beq.n	80008ba <__lesf2+0x6e>
 800087e:	1e58      	subs	r0, r3, #1
 8000880:	2302      	movs	r3, #2
 8000882:	4018      	ands	r0, r3
 8000884:	3801      	subs	r0, #1
 8000886:	e010      	b.n	80008aa <__lesf2+0x5e>
 8000888:	2d00      	cmp	r5, #0
 800088a:	d10d      	bne.n	80008a8 <__lesf2+0x5c>
 800088c:	2a00      	cmp	r2, #0
 800088e:	d120      	bne.n	80008d2 <__lesf2+0x86>
 8000890:	2c00      	cmp	r4, #0
 8000892:	d11e      	bne.n	80008d2 <__lesf2+0x86>
 8000894:	2900      	cmp	r1, #0
 8000896:	d023      	beq.n	80008e0 <__lesf2+0x94>
 8000898:	0008      	movs	r0, r1
 800089a:	e006      	b.n	80008aa <__lesf2+0x5e>
 800089c:	2c00      	cmp	r4, #0
 800089e:	d103      	bne.n	80008a8 <__lesf2+0x5c>
 80008a0:	28ff      	cmp	r0, #255	@ 0xff
 80008a2:	d1ec      	bne.n	800087e <__lesf2+0x32>
 80008a4:	2d00      	cmp	r5, #0
 80008a6:	d017      	beq.n	80008d8 <__lesf2+0x8c>
 80008a8:	2002      	movs	r0, #2
 80008aa:	bd30      	pop	{r4, r5, pc}
 80008ac:	2800      	cmp	r0, #0
 80008ae:	d0e6      	beq.n	800087e <__lesf2+0x32>
 80008b0:	428b      	cmp	r3, r1
 80008b2:	d1e4      	bne.n	800087e <__lesf2+0x32>
 80008b4:	4282      	cmp	r2, r0
 80008b6:	dce2      	bgt.n	800087e <__lesf2+0x32>
 80008b8:	db04      	blt.n	80008c4 <__lesf2+0x78>
 80008ba:	42ac      	cmp	r4, r5
 80008bc:	d8df      	bhi.n	800087e <__lesf2+0x32>
 80008be:	2000      	movs	r0, #0
 80008c0:	42ac      	cmp	r4, r5
 80008c2:	d2f2      	bcs.n	80008aa <__lesf2+0x5e>
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d00b      	beq.n	80008e0 <__lesf2+0x94>
 80008c8:	0018      	movs	r0, r3
 80008ca:	e7ee      	b.n	80008aa <__lesf2+0x5e>
 80008cc:	2c00      	cmp	r4, #0
 80008ce:	d0ec      	beq.n	80008aa <__lesf2+0x5e>
 80008d0:	e7d5      	b.n	800087e <__lesf2+0x32>
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d1d3      	bne.n	800087e <__lesf2+0x32>
 80008d6:	e7f5      	b.n	80008c4 <__lesf2+0x78>
 80008d8:	2000      	movs	r0, #0
 80008da:	428b      	cmp	r3, r1
 80008dc:	d0e5      	beq.n	80008aa <__lesf2+0x5e>
 80008de:	e7ce      	b.n	800087e <__lesf2+0x32>
 80008e0:	2001      	movs	r0, #1
 80008e2:	4240      	negs	r0, r0
 80008e4:	e7e1      	b.n	80008aa <__lesf2+0x5e>
 80008e6:	46c0      	nop			@ (mov r8, r8)

080008e8 <__aeabi_i2f>:
 80008e8:	b570      	push	{r4, r5, r6, lr}
 80008ea:	2800      	cmp	r0, #0
 80008ec:	d013      	beq.n	8000916 <__aeabi_i2f+0x2e>
 80008ee:	17c3      	asrs	r3, r0, #31
 80008f0:	18c5      	adds	r5, r0, r3
 80008f2:	405d      	eors	r5, r3
 80008f4:	0fc4      	lsrs	r4, r0, #31
 80008f6:	0028      	movs	r0, r5
 80008f8:	f001 fefe 	bl	80026f8 <__clzsi2>
 80008fc:	239e      	movs	r3, #158	@ 0x9e
 80008fe:	0001      	movs	r1, r0
 8000900:	1a1b      	subs	r3, r3, r0
 8000902:	2b96      	cmp	r3, #150	@ 0x96
 8000904:	dc0f      	bgt.n	8000926 <__aeabi_i2f+0x3e>
 8000906:	2808      	cmp	r0, #8
 8000908:	d034      	beq.n	8000974 <__aeabi_i2f+0x8c>
 800090a:	3908      	subs	r1, #8
 800090c:	408d      	lsls	r5, r1
 800090e:	026d      	lsls	r5, r5, #9
 8000910:	0a6d      	lsrs	r5, r5, #9
 8000912:	b2d8      	uxtb	r0, r3
 8000914:	e002      	b.n	800091c <__aeabi_i2f+0x34>
 8000916:	2400      	movs	r4, #0
 8000918:	2000      	movs	r0, #0
 800091a:	2500      	movs	r5, #0
 800091c:	05c0      	lsls	r0, r0, #23
 800091e:	4328      	orrs	r0, r5
 8000920:	07e4      	lsls	r4, r4, #31
 8000922:	4320      	orrs	r0, r4
 8000924:	bd70      	pop	{r4, r5, r6, pc}
 8000926:	2b99      	cmp	r3, #153	@ 0x99
 8000928:	dc16      	bgt.n	8000958 <__aeabi_i2f+0x70>
 800092a:	1f42      	subs	r2, r0, #5
 800092c:	2805      	cmp	r0, #5
 800092e:	d000      	beq.n	8000932 <__aeabi_i2f+0x4a>
 8000930:	4095      	lsls	r5, r2
 8000932:	002a      	movs	r2, r5
 8000934:	4811      	ldr	r0, [pc, #68]	@ (800097c <__aeabi_i2f+0x94>)
 8000936:	4002      	ands	r2, r0
 8000938:	076e      	lsls	r6, r5, #29
 800093a:	d009      	beq.n	8000950 <__aeabi_i2f+0x68>
 800093c:	260f      	movs	r6, #15
 800093e:	4035      	ands	r5, r6
 8000940:	2d04      	cmp	r5, #4
 8000942:	d005      	beq.n	8000950 <__aeabi_i2f+0x68>
 8000944:	3204      	adds	r2, #4
 8000946:	0155      	lsls	r5, r2, #5
 8000948:	d502      	bpl.n	8000950 <__aeabi_i2f+0x68>
 800094a:	239f      	movs	r3, #159	@ 0x9f
 800094c:	4002      	ands	r2, r0
 800094e:	1a5b      	subs	r3, r3, r1
 8000950:	0192      	lsls	r2, r2, #6
 8000952:	0a55      	lsrs	r5, r2, #9
 8000954:	b2d8      	uxtb	r0, r3
 8000956:	e7e1      	b.n	800091c <__aeabi_i2f+0x34>
 8000958:	2205      	movs	r2, #5
 800095a:	1a12      	subs	r2, r2, r0
 800095c:	0028      	movs	r0, r5
 800095e:	40d0      	lsrs	r0, r2
 8000960:	0002      	movs	r2, r0
 8000962:	0008      	movs	r0, r1
 8000964:	301b      	adds	r0, #27
 8000966:	4085      	lsls	r5, r0
 8000968:	0028      	movs	r0, r5
 800096a:	1e45      	subs	r5, r0, #1
 800096c:	41a8      	sbcs	r0, r5
 800096e:	4302      	orrs	r2, r0
 8000970:	0015      	movs	r5, r2
 8000972:	e7de      	b.n	8000932 <__aeabi_i2f+0x4a>
 8000974:	026d      	lsls	r5, r5, #9
 8000976:	2096      	movs	r0, #150	@ 0x96
 8000978:	0a6d      	lsrs	r5, r5, #9
 800097a:	e7cf      	b.n	800091c <__aeabi_i2f+0x34>
 800097c:	fbffffff 	.word	0xfbffffff

08000980 <__aeabi_dadd>:
 8000980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000982:	4657      	mov	r7, sl
 8000984:	464e      	mov	r6, r9
 8000986:	4645      	mov	r5, r8
 8000988:	46de      	mov	lr, fp
 800098a:	b5e0      	push	{r5, r6, r7, lr}
 800098c:	b083      	sub	sp, #12
 800098e:	9000      	str	r0, [sp, #0]
 8000990:	9101      	str	r1, [sp, #4]
 8000992:	030c      	lsls	r4, r1, #12
 8000994:	004f      	lsls	r7, r1, #1
 8000996:	0fce      	lsrs	r6, r1, #31
 8000998:	0a61      	lsrs	r1, r4, #9
 800099a:	9c00      	ldr	r4, [sp, #0]
 800099c:	031d      	lsls	r5, r3, #12
 800099e:	0f64      	lsrs	r4, r4, #29
 80009a0:	430c      	orrs	r4, r1
 80009a2:	9900      	ldr	r1, [sp, #0]
 80009a4:	9200      	str	r2, [sp, #0]
 80009a6:	9301      	str	r3, [sp, #4]
 80009a8:	00c8      	lsls	r0, r1, #3
 80009aa:	0059      	lsls	r1, r3, #1
 80009ac:	0d4b      	lsrs	r3, r1, #21
 80009ae:	4699      	mov	r9, r3
 80009b0:	9a00      	ldr	r2, [sp, #0]
 80009b2:	9b01      	ldr	r3, [sp, #4]
 80009b4:	0a6d      	lsrs	r5, r5, #9
 80009b6:	0fd9      	lsrs	r1, r3, #31
 80009b8:	0f53      	lsrs	r3, r2, #29
 80009ba:	432b      	orrs	r3, r5
 80009bc:	469a      	mov	sl, r3
 80009be:	9b00      	ldr	r3, [sp, #0]
 80009c0:	0d7f      	lsrs	r7, r7, #21
 80009c2:	00da      	lsls	r2, r3, #3
 80009c4:	4694      	mov	ip, r2
 80009c6:	464a      	mov	r2, r9
 80009c8:	46b0      	mov	r8, r6
 80009ca:	1aba      	subs	r2, r7, r2
 80009cc:	428e      	cmp	r6, r1
 80009ce:	d100      	bne.n	80009d2 <__aeabi_dadd+0x52>
 80009d0:	e0b0      	b.n	8000b34 <__aeabi_dadd+0x1b4>
 80009d2:	2a00      	cmp	r2, #0
 80009d4:	dc00      	bgt.n	80009d8 <__aeabi_dadd+0x58>
 80009d6:	e078      	b.n	8000aca <__aeabi_dadd+0x14a>
 80009d8:	4649      	mov	r1, r9
 80009da:	2900      	cmp	r1, #0
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x60>
 80009de:	e0e9      	b.n	8000bb4 <__aeabi_dadd+0x234>
 80009e0:	49c9      	ldr	r1, [pc, #804]	@ (8000d08 <__aeabi_dadd+0x388>)
 80009e2:	428f      	cmp	r7, r1
 80009e4:	d100      	bne.n	80009e8 <__aeabi_dadd+0x68>
 80009e6:	e195      	b.n	8000d14 <__aeabi_dadd+0x394>
 80009e8:	2501      	movs	r5, #1
 80009ea:	2a38      	cmp	r2, #56	@ 0x38
 80009ec:	dc16      	bgt.n	8000a1c <__aeabi_dadd+0x9c>
 80009ee:	2180      	movs	r1, #128	@ 0x80
 80009f0:	4653      	mov	r3, sl
 80009f2:	0409      	lsls	r1, r1, #16
 80009f4:	430b      	orrs	r3, r1
 80009f6:	469a      	mov	sl, r3
 80009f8:	2a1f      	cmp	r2, #31
 80009fa:	dd00      	ble.n	80009fe <__aeabi_dadd+0x7e>
 80009fc:	e1e7      	b.n	8000dce <__aeabi_dadd+0x44e>
 80009fe:	2120      	movs	r1, #32
 8000a00:	4655      	mov	r5, sl
 8000a02:	1a8b      	subs	r3, r1, r2
 8000a04:	4661      	mov	r1, ip
 8000a06:	409d      	lsls	r5, r3
 8000a08:	40d1      	lsrs	r1, r2
 8000a0a:	430d      	orrs	r5, r1
 8000a0c:	4661      	mov	r1, ip
 8000a0e:	4099      	lsls	r1, r3
 8000a10:	1e4b      	subs	r3, r1, #1
 8000a12:	4199      	sbcs	r1, r3
 8000a14:	4653      	mov	r3, sl
 8000a16:	40d3      	lsrs	r3, r2
 8000a18:	430d      	orrs	r5, r1
 8000a1a:	1ae4      	subs	r4, r4, r3
 8000a1c:	1b45      	subs	r5, r0, r5
 8000a1e:	42a8      	cmp	r0, r5
 8000a20:	4180      	sbcs	r0, r0
 8000a22:	4240      	negs	r0, r0
 8000a24:	1a24      	subs	r4, r4, r0
 8000a26:	0223      	lsls	r3, r4, #8
 8000a28:	d400      	bmi.n	8000a2c <__aeabi_dadd+0xac>
 8000a2a:	e10f      	b.n	8000c4c <__aeabi_dadd+0x2cc>
 8000a2c:	0264      	lsls	r4, r4, #9
 8000a2e:	0a64      	lsrs	r4, r4, #9
 8000a30:	2c00      	cmp	r4, #0
 8000a32:	d100      	bne.n	8000a36 <__aeabi_dadd+0xb6>
 8000a34:	e139      	b.n	8000caa <__aeabi_dadd+0x32a>
 8000a36:	0020      	movs	r0, r4
 8000a38:	f001 fe5e 	bl	80026f8 <__clzsi2>
 8000a3c:	0003      	movs	r3, r0
 8000a3e:	3b08      	subs	r3, #8
 8000a40:	2120      	movs	r1, #32
 8000a42:	0028      	movs	r0, r5
 8000a44:	1aca      	subs	r2, r1, r3
 8000a46:	40d0      	lsrs	r0, r2
 8000a48:	409c      	lsls	r4, r3
 8000a4a:	0002      	movs	r2, r0
 8000a4c:	409d      	lsls	r5, r3
 8000a4e:	4322      	orrs	r2, r4
 8000a50:	429f      	cmp	r7, r3
 8000a52:	dd00      	ble.n	8000a56 <__aeabi_dadd+0xd6>
 8000a54:	e173      	b.n	8000d3e <__aeabi_dadd+0x3be>
 8000a56:	1bd8      	subs	r0, r3, r7
 8000a58:	3001      	adds	r0, #1
 8000a5a:	1a09      	subs	r1, r1, r0
 8000a5c:	002c      	movs	r4, r5
 8000a5e:	408d      	lsls	r5, r1
 8000a60:	40c4      	lsrs	r4, r0
 8000a62:	1e6b      	subs	r3, r5, #1
 8000a64:	419d      	sbcs	r5, r3
 8000a66:	0013      	movs	r3, r2
 8000a68:	40c2      	lsrs	r2, r0
 8000a6a:	408b      	lsls	r3, r1
 8000a6c:	4325      	orrs	r5, r4
 8000a6e:	2700      	movs	r7, #0
 8000a70:	0014      	movs	r4, r2
 8000a72:	431d      	orrs	r5, r3
 8000a74:	076b      	lsls	r3, r5, #29
 8000a76:	d009      	beq.n	8000a8c <__aeabi_dadd+0x10c>
 8000a78:	230f      	movs	r3, #15
 8000a7a:	402b      	ands	r3, r5
 8000a7c:	2b04      	cmp	r3, #4
 8000a7e:	d005      	beq.n	8000a8c <__aeabi_dadd+0x10c>
 8000a80:	1d2b      	adds	r3, r5, #4
 8000a82:	42ab      	cmp	r3, r5
 8000a84:	41ad      	sbcs	r5, r5
 8000a86:	426d      	negs	r5, r5
 8000a88:	1964      	adds	r4, r4, r5
 8000a8a:	001d      	movs	r5, r3
 8000a8c:	0223      	lsls	r3, r4, #8
 8000a8e:	d400      	bmi.n	8000a92 <__aeabi_dadd+0x112>
 8000a90:	e12d      	b.n	8000cee <__aeabi_dadd+0x36e>
 8000a92:	4a9d      	ldr	r2, [pc, #628]	@ (8000d08 <__aeabi_dadd+0x388>)
 8000a94:	3701      	adds	r7, #1
 8000a96:	4297      	cmp	r7, r2
 8000a98:	d100      	bne.n	8000a9c <__aeabi_dadd+0x11c>
 8000a9a:	e0d3      	b.n	8000c44 <__aeabi_dadd+0x2c4>
 8000a9c:	4646      	mov	r6, r8
 8000a9e:	499b      	ldr	r1, [pc, #620]	@ (8000d0c <__aeabi_dadd+0x38c>)
 8000aa0:	08ed      	lsrs	r5, r5, #3
 8000aa2:	4021      	ands	r1, r4
 8000aa4:	074a      	lsls	r2, r1, #29
 8000aa6:	432a      	orrs	r2, r5
 8000aa8:	057c      	lsls	r4, r7, #21
 8000aaa:	024d      	lsls	r5, r1, #9
 8000aac:	0b2d      	lsrs	r5, r5, #12
 8000aae:	0d64      	lsrs	r4, r4, #21
 8000ab0:	0524      	lsls	r4, r4, #20
 8000ab2:	432c      	orrs	r4, r5
 8000ab4:	07f6      	lsls	r6, r6, #31
 8000ab6:	4334      	orrs	r4, r6
 8000ab8:	0010      	movs	r0, r2
 8000aba:	0021      	movs	r1, r4
 8000abc:	b003      	add	sp, #12
 8000abe:	bcf0      	pop	{r4, r5, r6, r7}
 8000ac0:	46bb      	mov	fp, r7
 8000ac2:	46b2      	mov	sl, r6
 8000ac4:	46a9      	mov	r9, r5
 8000ac6:	46a0      	mov	r8, r4
 8000ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_dadd+0x150>
 8000ace:	e084      	b.n	8000bda <__aeabi_dadd+0x25a>
 8000ad0:	464a      	mov	r2, r9
 8000ad2:	1bd2      	subs	r2, r2, r7
 8000ad4:	2f00      	cmp	r7, #0
 8000ad6:	d000      	beq.n	8000ada <__aeabi_dadd+0x15a>
 8000ad8:	e16d      	b.n	8000db6 <__aeabi_dadd+0x436>
 8000ada:	0025      	movs	r5, r4
 8000adc:	4305      	orrs	r5, r0
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dadd+0x162>
 8000ae0:	e127      	b.n	8000d32 <__aeabi_dadd+0x3b2>
 8000ae2:	1e56      	subs	r6, r2, #1
 8000ae4:	2a01      	cmp	r2, #1
 8000ae6:	d100      	bne.n	8000aea <__aeabi_dadd+0x16a>
 8000ae8:	e23b      	b.n	8000f62 <__aeabi_dadd+0x5e2>
 8000aea:	4d87      	ldr	r5, [pc, #540]	@ (8000d08 <__aeabi_dadd+0x388>)
 8000aec:	42aa      	cmp	r2, r5
 8000aee:	d100      	bne.n	8000af2 <__aeabi_dadd+0x172>
 8000af0:	e26a      	b.n	8000fc8 <__aeabi_dadd+0x648>
 8000af2:	2501      	movs	r5, #1
 8000af4:	2e38      	cmp	r6, #56	@ 0x38
 8000af6:	dc12      	bgt.n	8000b1e <__aeabi_dadd+0x19e>
 8000af8:	0032      	movs	r2, r6
 8000afa:	2a1f      	cmp	r2, #31
 8000afc:	dd00      	ble.n	8000b00 <__aeabi_dadd+0x180>
 8000afe:	e1f8      	b.n	8000ef2 <__aeabi_dadd+0x572>
 8000b00:	2620      	movs	r6, #32
 8000b02:	0025      	movs	r5, r4
 8000b04:	1ab6      	subs	r6, r6, r2
 8000b06:	0007      	movs	r7, r0
 8000b08:	4653      	mov	r3, sl
 8000b0a:	40b0      	lsls	r0, r6
 8000b0c:	40d4      	lsrs	r4, r2
 8000b0e:	40b5      	lsls	r5, r6
 8000b10:	40d7      	lsrs	r7, r2
 8000b12:	1e46      	subs	r6, r0, #1
 8000b14:	41b0      	sbcs	r0, r6
 8000b16:	1b1b      	subs	r3, r3, r4
 8000b18:	469a      	mov	sl, r3
 8000b1a:	433d      	orrs	r5, r7
 8000b1c:	4305      	orrs	r5, r0
 8000b1e:	4662      	mov	r2, ip
 8000b20:	1b55      	subs	r5, r2, r5
 8000b22:	45ac      	cmp	ip, r5
 8000b24:	4192      	sbcs	r2, r2
 8000b26:	4653      	mov	r3, sl
 8000b28:	4252      	negs	r2, r2
 8000b2a:	000e      	movs	r6, r1
 8000b2c:	464f      	mov	r7, r9
 8000b2e:	4688      	mov	r8, r1
 8000b30:	1a9c      	subs	r4, r3, r2
 8000b32:	e778      	b.n	8000a26 <__aeabi_dadd+0xa6>
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	dc00      	bgt.n	8000b3a <__aeabi_dadd+0x1ba>
 8000b38:	e08e      	b.n	8000c58 <__aeabi_dadd+0x2d8>
 8000b3a:	4649      	mov	r1, r9
 8000b3c:	2900      	cmp	r1, #0
 8000b3e:	d175      	bne.n	8000c2c <__aeabi_dadd+0x2ac>
 8000b40:	4661      	mov	r1, ip
 8000b42:	4653      	mov	r3, sl
 8000b44:	4319      	orrs	r1, r3
 8000b46:	d100      	bne.n	8000b4a <__aeabi_dadd+0x1ca>
 8000b48:	e0f6      	b.n	8000d38 <__aeabi_dadd+0x3b8>
 8000b4a:	1e51      	subs	r1, r2, #1
 8000b4c:	2a01      	cmp	r2, #1
 8000b4e:	d100      	bne.n	8000b52 <__aeabi_dadd+0x1d2>
 8000b50:	e191      	b.n	8000e76 <__aeabi_dadd+0x4f6>
 8000b52:	4d6d      	ldr	r5, [pc, #436]	@ (8000d08 <__aeabi_dadd+0x388>)
 8000b54:	42aa      	cmp	r2, r5
 8000b56:	d100      	bne.n	8000b5a <__aeabi_dadd+0x1da>
 8000b58:	e0dc      	b.n	8000d14 <__aeabi_dadd+0x394>
 8000b5a:	2501      	movs	r5, #1
 8000b5c:	2938      	cmp	r1, #56	@ 0x38
 8000b5e:	dc14      	bgt.n	8000b8a <__aeabi_dadd+0x20a>
 8000b60:	000a      	movs	r2, r1
 8000b62:	2a1f      	cmp	r2, #31
 8000b64:	dd00      	ble.n	8000b68 <__aeabi_dadd+0x1e8>
 8000b66:	e1a2      	b.n	8000eae <__aeabi_dadd+0x52e>
 8000b68:	2120      	movs	r1, #32
 8000b6a:	4653      	mov	r3, sl
 8000b6c:	1a89      	subs	r1, r1, r2
 8000b6e:	408b      	lsls	r3, r1
 8000b70:	001d      	movs	r5, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	40d3      	lsrs	r3, r2
 8000b76:	431d      	orrs	r5, r3
 8000b78:	4663      	mov	r3, ip
 8000b7a:	408b      	lsls	r3, r1
 8000b7c:	0019      	movs	r1, r3
 8000b7e:	1e4b      	subs	r3, r1, #1
 8000b80:	4199      	sbcs	r1, r3
 8000b82:	4653      	mov	r3, sl
 8000b84:	40d3      	lsrs	r3, r2
 8000b86:	430d      	orrs	r5, r1
 8000b88:	18e4      	adds	r4, r4, r3
 8000b8a:	182d      	adds	r5, r5, r0
 8000b8c:	4285      	cmp	r5, r0
 8000b8e:	4180      	sbcs	r0, r0
 8000b90:	4240      	negs	r0, r0
 8000b92:	1824      	adds	r4, r4, r0
 8000b94:	0223      	lsls	r3, r4, #8
 8000b96:	d559      	bpl.n	8000c4c <__aeabi_dadd+0x2cc>
 8000b98:	4b5b      	ldr	r3, [pc, #364]	@ (8000d08 <__aeabi_dadd+0x388>)
 8000b9a:	3701      	adds	r7, #1
 8000b9c:	429f      	cmp	r7, r3
 8000b9e:	d051      	beq.n	8000c44 <__aeabi_dadd+0x2c4>
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4b5a      	ldr	r3, [pc, #360]	@ (8000d0c <__aeabi_dadd+0x38c>)
 8000ba4:	086a      	lsrs	r2, r5, #1
 8000ba6:	401c      	ands	r4, r3
 8000ba8:	4029      	ands	r1, r5
 8000baa:	430a      	orrs	r2, r1
 8000bac:	07e5      	lsls	r5, r4, #31
 8000bae:	4315      	orrs	r5, r2
 8000bb0:	0864      	lsrs	r4, r4, #1
 8000bb2:	e75f      	b.n	8000a74 <__aeabi_dadd+0xf4>
 8000bb4:	4661      	mov	r1, ip
 8000bb6:	4653      	mov	r3, sl
 8000bb8:	4319      	orrs	r1, r3
 8000bba:	d100      	bne.n	8000bbe <__aeabi_dadd+0x23e>
 8000bbc:	e0bc      	b.n	8000d38 <__aeabi_dadd+0x3b8>
 8000bbe:	1e51      	subs	r1, r2, #1
 8000bc0:	2a01      	cmp	r2, #1
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_dadd+0x246>
 8000bc4:	e164      	b.n	8000e90 <__aeabi_dadd+0x510>
 8000bc6:	4d50      	ldr	r5, [pc, #320]	@ (8000d08 <__aeabi_dadd+0x388>)
 8000bc8:	42aa      	cmp	r2, r5
 8000bca:	d100      	bne.n	8000bce <__aeabi_dadd+0x24e>
 8000bcc:	e16a      	b.n	8000ea4 <__aeabi_dadd+0x524>
 8000bce:	2501      	movs	r5, #1
 8000bd0:	2938      	cmp	r1, #56	@ 0x38
 8000bd2:	dd00      	ble.n	8000bd6 <__aeabi_dadd+0x256>
 8000bd4:	e722      	b.n	8000a1c <__aeabi_dadd+0x9c>
 8000bd6:	000a      	movs	r2, r1
 8000bd8:	e70e      	b.n	80009f8 <__aeabi_dadd+0x78>
 8000bda:	4a4d      	ldr	r2, [pc, #308]	@ (8000d10 <__aeabi_dadd+0x390>)
 8000bdc:	1c7d      	adds	r5, r7, #1
 8000bde:	4215      	tst	r5, r2
 8000be0:	d000      	beq.n	8000be4 <__aeabi_dadd+0x264>
 8000be2:	e0d0      	b.n	8000d86 <__aeabi_dadd+0x406>
 8000be4:	0025      	movs	r5, r4
 8000be6:	4662      	mov	r2, ip
 8000be8:	4653      	mov	r3, sl
 8000bea:	4305      	orrs	r5, r0
 8000bec:	431a      	orrs	r2, r3
 8000bee:	2f00      	cmp	r7, #0
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_dadd+0x274>
 8000bf2:	e137      	b.n	8000e64 <__aeabi_dadd+0x4e4>
 8000bf4:	2d00      	cmp	r5, #0
 8000bf6:	d100      	bne.n	8000bfa <__aeabi_dadd+0x27a>
 8000bf8:	e1a8      	b.n	8000f4c <__aeabi_dadd+0x5cc>
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_dadd+0x280>
 8000bfe:	e16a      	b.n	8000ed6 <__aeabi_dadd+0x556>
 8000c00:	4663      	mov	r3, ip
 8000c02:	1ac5      	subs	r5, r0, r3
 8000c04:	4653      	mov	r3, sl
 8000c06:	1ae2      	subs	r2, r4, r3
 8000c08:	42a8      	cmp	r0, r5
 8000c0a:	419b      	sbcs	r3, r3
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	021a      	lsls	r2, r3, #8
 8000c12:	d400      	bmi.n	8000c16 <__aeabi_dadd+0x296>
 8000c14:	e203      	b.n	800101e <__aeabi_dadd+0x69e>
 8000c16:	4663      	mov	r3, ip
 8000c18:	1a1d      	subs	r5, r3, r0
 8000c1a:	45ac      	cmp	ip, r5
 8000c1c:	4192      	sbcs	r2, r2
 8000c1e:	4653      	mov	r3, sl
 8000c20:	4252      	negs	r2, r2
 8000c22:	1b1c      	subs	r4, r3, r4
 8000c24:	000e      	movs	r6, r1
 8000c26:	4688      	mov	r8, r1
 8000c28:	1aa4      	subs	r4, r4, r2
 8000c2a:	e723      	b.n	8000a74 <__aeabi_dadd+0xf4>
 8000c2c:	4936      	ldr	r1, [pc, #216]	@ (8000d08 <__aeabi_dadd+0x388>)
 8000c2e:	428f      	cmp	r7, r1
 8000c30:	d070      	beq.n	8000d14 <__aeabi_dadd+0x394>
 8000c32:	2501      	movs	r5, #1
 8000c34:	2a38      	cmp	r2, #56	@ 0x38
 8000c36:	dca8      	bgt.n	8000b8a <__aeabi_dadd+0x20a>
 8000c38:	2180      	movs	r1, #128	@ 0x80
 8000c3a:	4653      	mov	r3, sl
 8000c3c:	0409      	lsls	r1, r1, #16
 8000c3e:	430b      	orrs	r3, r1
 8000c40:	469a      	mov	sl, r3
 8000c42:	e78e      	b.n	8000b62 <__aeabi_dadd+0x1e2>
 8000c44:	003c      	movs	r4, r7
 8000c46:	2500      	movs	r5, #0
 8000c48:	2200      	movs	r2, #0
 8000c4a:	e731      	b.n	8000ab0 <__aeabi_dadd+0x130>
 8000c4c:	2307      	movs	r3, #7
 8000c4e:	402b      	ands	r3, r5
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d000      	beq.n	8000c56 <__aeabi_dadd+0x2d6>
 8000c54:	e710      	b.n	8000a78 <__aeabi_dadd+0xf8>
 8000c56:	e093      	b.n	8000d80 <__aeabi_dadd+0x400>
 8000c58:	2a00      	cmp	r2, #0
 8000c5a:	d074      	beq.n	8000d46 <__aeabi_dadd+0x3c6>
 8000c5c:	464a      	mov	r2, r9
 8000c5e:	1bd2      	subs	r2, r2, r7
 8000c60:	2f00      	cmp	r7, #0
 8000c62:	d100      	bne.n	8000c66 <__aeabi_dadd+0x2e6>
 8000c64:	e0c7      	b.n	8000df6 <__aeabi_dadd+0x476>
 8000c66:	4928      	ldr	r1, [pc, #160]	@ (8000d08 <__aeabi_dadd+0x388>)
 8000c68:	4589      	cmp	r9, r1
 8000c6a:	d100      	bne.n	8000c6e <__aeabi_dadd+0x2ee>
 8000c6c:	e185      	b.n	8000f7a <__aeabi_dadd+0x5fa>
 8000c6e:	2501      	movs	r5, #1
 8000c70:	2a38      	cmp	r2, #56	@ 0x38
 8000c72:	dc12      	bgt.n	8000c9a <__aeabi_dadd+0x31a>
 8000c74:	2180      	movs	r1, #128	@ 0x80
 8000c76:	0409      	lsls	r1, r1, #16
 8000c78:	430c      	orrs	r4, r1
 8000c7a:	2a1f      	cmp	r2, #31
 8000c7c:	dd00      	ble.n	8000c80 <__aeabi_dadd+0x300>
 8000c7e:	e1ab      	b.n	8000fd8 <__aeabi_dadd+0x658>
 8000c80:	2120      	movs	r1, #32
 8000c82:	0025      	movs	r5, r4
 8000c84:	1a89      	subs	r1, r1, r2
 8000c86:	0007      	movs	r7, r0
 8000c88:	4088      	lsls	r0, r1
 8000c8a:	408d      	lsls	r5, r1
 8000c8c:	40d7      	lsrs	r7, r2
 8000c8e:	1e41      	subs	r1, r0, #1
 8000c90:	4188      	sbcs	r0, r1
 8000c92:	40d4      	lsrs	r4, r2
 8000c94:	433d      	orrs	r5, r7
 8000c96:	4305      	orrs	r5, r0
 8000c98:	44a2      	add	sl, r4
 8000c9a:	4465      	add	r5, ip
 8000c9c:	4565      	cmp	r5, ip
 8000c9e:	4192      	sbcs	r2, r2
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	4452      	add	r2, sl
 8000ca4:	0014      	movs	r4, r2
 8000ca6:	464f      	mov	r7, r9
 8000ca8:	e774      	b.n	8000b94 <__aeabi_dadd+0x214>
 8000caa:	0028      	movs	r0, r5
 8000cac:	f001 fd24 	bl	80026f8 <__clzsi2>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	3318      	adds	r3, #24
 8000cb4:	2b1f      	cmp	r3, #31
 8000cb6:	dc00      	bgt.n	8000cba <__aeabi_dadd+0x33a>
 8000cb8:	e6c2      	b.n	8000a40 <__aeabi_dadd+0xc0>
 8000cba:	002a      	movs	r2, r5
 8000cbc:	3808      	subs	r0, #8
 8000cbe:	4082      	lsls	r2, r0
 8000cc0:	429f      	cmp	r7, r3
 8000cc2:	dd00      	ble.n	8000cc6 <__aeabi_dadd+0x346>
 8000cc4:	e0a9      	b.n	8000e1a <__aeabi_dadd+0x49a>
 8000cc6:	1bdb      	subs	r3, r3, r7
 8000cc8:	1c58      	adds	r0, r3, #1
 8000cca:	281f      	cmp	r0, #31
 8000ccc:	dc00      	bgt.n	8000cd0 <__aeabi_dadd+0x350>
 8000cce:	e1ac      	b.n	800102a <__aeabi_dadd+0x6aa>
 8000cd0:	0015      	movs	r5, r2
 8000cd2:	3b1f      	subs	r3, #31
 8000cd4:	40dd      	lsrs	r5, r3
 8000cd6:	2820      	cmp	r0, #32
 8000cd8:	d005      	beq.n	8000ce6 <__aeabi_dadd+0x366>
 8000cda:	2340      	movs	r3, #64	@ 0x40
 8000cdc:	1a1b      	subs	r3, r3, r0
 8000cde:	409a      	lsls	r2, r3
 8000ce0:	1e53      	subs	r3, r2, #1
 8000ce2:	419a      	sbcs	r2, r3
 8000ce4:	4315      	orrs	r5, r2
 8000ce6:	2307      	movs	r3, #7
 8000ce8:	2700      	movs	r7, #0
 8000cea:	402b      	ands	r3, r5
 8000cec:	e7b0      	b.n	8000c50 <__aeabi_dadd+0x2d0>
 8000cee:	08ed      	lsrs	r5, r5, #3
 8000cf0:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <__aeabi_dadd+0x388>)
 8000cf2:	0762      	lsls	r2, r4, #29
 8000cf4:	432a      	orrs	r2, r5
 8000cf6:	08e4      	lsrs	r4, r4, #3
 8000cf8:	429f      	cmp	r7, r3
 8000cfa:	d00f      	beq.n	8000d1c <__aeabi_dadd+0x39c>
 8000cfc:	0324      	lsls	r4, r4, #12
 8000cfe:	0b25      	lsrs	r5, r4, #12
 8000d00:	057c      	lsls	r4, r7, #21
 8000d02:	0d64      	lsrs	r4, r4, #21
 8000d04:	e6d4      	b.n	8000ab0 <__aeabi_dadd+0x130>
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	000007ff 	.word	0x000007ff
 8000d0c:	ff7fffff 	.word	0xff7fffff
 8000d10:	000007fe 	.word	0x000007fe
 8000d14:	08c0      	lsrs	r0, r0, #3
 8000d16:	0762      	lsls	r2, r4, #29
 8000d18:	4302      	orrs	r2, r0
 8000d1a:	08e4      	lsrs	r4, r4, #3
 8000d1c:	0013      	movs	r3, r2
 8000d1e:	4323      	orrs	r3, r4
 8000d20:	d100      	bne.n	8000d24 <__aeabi_dadd+0x3a4>
 8000d22:	e186      	b.n	8001032 <__aeabi_dadd+0x6b2>
 8000d24:	2580      	movs	r5, #128	@ 0x80
 8000d26:	032d      	lsls	r5, r5, #12
 8000d28:	4325      	orrs	r5, r4
 8000d2a:	032d      	lsls	r5, r5, #12
 8000d2c:	4cc3      	ldr	r4, [pc, #780]	@ (800103c <__aeabi_dadd+0x6bc>)
 8000d2e:	0b2d      	lsrs	r5, r5, #12
 8000d30:	e6be      	b.n	8000ab0 <__aeabi_dadd+0x130>
 8000d32:	4660      	mov	r0, ip
 8000d34:	4654      	mov	r4, sl
 8000d36:	000e      	movs	r6, r1
 8000d38:	0017      	movs	r7, r2
 8000d3a:	08c5      	lsrs	r5, r0, #3
 8000d3c:	e7d8      	b.n	8000cf0 <__aeabi_dadd+0x370>
 8000d3e:	4cc0      	ldr	r4, [pc, #768]	@ (8001040 <__aeabi_dadd+0x6c0>)
 8000d40:	1aff      	subs	r7, r7, r3
 8000d42:	4014      	ands	r4, r2
 8000d44:	e696      	b.n	8000a74 <__aeabi_dadd+0xf4>
 8000d46:	4abf      	ldr	r2, [pc, #764]	@ (8001044 <__aeabi_dadd+0x6c4>)
 8000d48:	1c79      	adds	r1, r7, #1
 8000d4a:	4211      	tst	r1, r2
 8000d4c:	d16b      	bne.n	8000e26 <__aeabi_dadd+0x4a6>
 8000d4e:	0022      	movs	r2, r4
 8000d50:	4302      	orrs	r2, r0
 8000d52:	2f00      	cmp	r7, #0
 8000d54:	d000      	beq.n	8000d58 <__aeabi_dadd+0x3d8>
 8000d56:	e0db      	b.n	8000f10 <__aeabi_dadd+0x590>
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_dadd+0x3de>
 8000d5c:	e12d      	b.n	8000fba <__aeabi_dadd+0x63a>
 8000d5e:	4662      	mov	r2, ip
 8000d60:	4653      	mov	r3, sl
 8000d62:	431a      	orrs	r2, r3
 8000d64:	d100      	bne.n	8000d68 <__aeabi_dadd+0x3e8>
 8000d66:	e0b6      	b.n	8000ed6 <__aeabi_dadd+0x556>
 8000d68:	4663      	mov	r3, ip
 8000d6a:	18c5      	adds	r5, r0, r3
 8000d6c:	4285      	cmp	r5, r0
 8000d6e:	4180      	sbcs	r0, r0
 8000d70:	4454      	add	r4, sl
 8000d72:	4240      	negs	r0, r0
 8000d74:	1824      	adds	r4, r4, r0
 8000d76:	0223      	lsls	r3, r4, #8
 8000d78:	d502      	bpl.n	8000d80 <__aeabi_dadd+0x400>
 8000d7a:	000f      	movs	r7, r1
 8000d7c:	4bb0      	ldr	r3, [pc, #704]	@ (8001040 <__aeabi_dadd+0x6c0>)
 8000d7e:	401c      	ands	r4, r3
 8000d80:	003a      	movs	r2, r7
 8000d82:	0028      	movs	r0, r5
 8000d84:	e7d8      	b.n	8000d38 <__aeabi_dadd+0x3b8>
 8000d86:	4662      	mov	r2, ip
 8000d88:	1a85      	subs	r5, r0, r2
 8000d8a:	42a8      	cmp	r0, r5
 8000d8c:	4192      	sbcs	r2, r2
 8000d8e:	4653      	mov	r3, sl
 8000d90:	4252      	negs	r2, r2
 8000d92:	4691      	mov	r9, r2
 8000d94:	1ae3      	subs	r3, r4, r3
 8000d96:	001a      	movs	r2, r3
 8000d98:	464b      	mov	r3, r9
 8000d9a:	1ad2      	subs	r2, r2, r3
 8000d9c:	0013      	movs	r3, r2
 8000d9e:	4691      	mov	r9, r2
 8000da0:	021a      	lsls	r2, r3, #8
 8000da2:	d454      	bmi.n	8000e4e <__aeabi_dadd+0x4ce>
 8000da4:	464a      	mov	r2, r9
 8000da6:	464c      	mov	r4, r9
 8000da8:	432a      	orrs	r2, r5
 8000daa:	d000      	beq.n	8000dae <__aeabi_dadd+0x42e>
 8000dac:	e640      	b.n	8000a30 <__aeabi_dadd+0xb0>
 8000dae:	2600      	movs	r6, #0
 8000db0:	2400      	movs	r4, #0
 8000db2:	2500      	movs	r5, #0
 8000db4:	e67c      	b.n	8000ab0 <__aeabi_dadd+0x130>
 8000db6:	4da1      	ldr	r5, [pc, #644]	@ (800103c <__aeabi_dadd+0x6bc>)
 8000db8:	45a9      	cmp	r9, r5
 8000dba:	d100      	bne.n	8000dbe <__aeabi_dadd+0x43e>
 8000dbc:	e090      	b.n	8000ee0 <__aeabi_dadd+0x560>
 8000dbe:	2501      	movs	r5, #1
 8000dc0:	2a38      	cmp	r2, #56	@ 0x38
 8000dc2:	dd00      	ble.n	8000dc6 <__aeabi_dadd+0x446>
 8000dc4:	e6ab      	b.n	8000b1e <__aeabi_dadd+0x19e>
 8000dc6:	2580      	movs	r5, #128	@ 0x80
 8000dc8:	042d      	lsls	r5, r5, #16
 8000dca:	432c      	orrs	r4, r5
 8000dcc:	e695      	b.n	8000afa <__aeabi_dadd+0x17a>
 8000dce:	0011      	movs	r1, r2
 8000dd0:	4655      	mov	r5, sl
 8000dd2:	3920      	subs	r1, #32
 8000dd4:	40cd      	lsrs	r5, r1
 8000dd6:	46a9      	mov	r9, r5
 8000dd8:	2a20      	cmp	r2, #32
 8000dda:	d006      	beq.n	8000dea <__aeabi_dadd+0x46a>
 8000ddc:	2140      	movs	r1, #64	@ 0x40
 8000dde:	4653      	mov	r3, sl
 8000de0:	1a8a      	subs	r2, r1, r2
 8000de2:	4093      	lsls	r3, r2
 8000de4:	4662      	mov	r2, ip
 8000de6:	431a      	orrs	r2, r3
 8000de8:	4694      	mov	ip, r2
 8000dea:	4665      	mov	r5, ip
 8000dec:	1e6b      	subs	r3, r5, #1
 8000dee:	419d      	sbcs	r5, r3
 8000df0:	464b      	mov	r3, r9
 8000df2:	431d      	orrs	r5, r3
 8000df4:	e612      	b.n	8000a1c <__aeabi_dadd+0x9c>
 8000df6:	0021      	movs	r1, r4
 8000df8:	4301      	orrs	r1, r0
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_dadd+0x47e>
 8000dfc:	e0c4      	b.n	8000f88 <__aeabi_dadd+0x608>
 8000dfe:	1e51      	subs	r1, r2, #1
 8000e00:	2a01      	cmp	r2, #1
 8000e02:	d100      	bne.n	8000e06 <__aeabi_dadd+0x486>
 8000e04:	e0fb      	b.n	8000ffe <__aeabi_dadd+0x67e>
 8000e06:	4d8d      	ldr	r5, [pc, #564]	@ (800103c <__aeabi_dadd+0x6bc>)
 8000e08:	42aa      	cmp	r2, r5
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_dadd+0x48e>
 8000e0c:	e0b5      	b.n	8000f7a <__aeabi_dadd+0x5fa>
 8000e0e:	2501      	movs	r5, #1
 8000e10:	2938      	cmp	r1, #56	@ 0x38
 8000e12:	dd00      	ble.n	8000e16 <__aeabi_dadd+0x496>
 8000e14:	e741      	b.n	8000c9a <__aeabi_dadd+0x31a>
 8000e16:	000a      	movs	r2, r1
 8000e18:	e72f      	b.n	8000c7a <__aeabi_dadd+0x2fa>
 8000e1a:	4c89      	ldr	r4, [pc, #548]	@ (8001040 <__aeabi_dadd+0x6c0>)
 8000e1c:	1aff      	subs	r7, r7, r3
 8000e1e:	4014      	ands	r4, r2
 8000e20:	0762      	lsls	r2, r4, #29
 8000e22:	08e4      	lsrs	r4, r4, #3
 8000e24:	e76a      	b.n	8000cfc <__aeabi_dadd+0x37c>
 8000e26:	4a85      	ldr	r2, [pc, #532]	@ (800103c <__aeabi_dadd+0x6bc>)
 8000e28:	4291      	cmp	r1, r2
 8000e2a:	d100      	bne.n	8000e2e <__aeabi_dadd+0x4ae>
 8000e2c:	e0e3      	b.n	8000ff6 <__aeabi_dadd+0x676>
 8000e2e:	4663      	mov	r3, ip
 8000e30:	18c2      	adds	r2, r0, r3
 8000e32:	4282      	cmp	r2, r0
 8000e34:	4180      	sbcs	r0, r0
 8000e36:	0023      	movs	r3, r4
 8000e38:	4240      	negs	r0, r0
 8000e3a:	4453      	add	r3, sl
 8000e3c:	181b      	adds	r3, r3, r0
 8000e3e:	07dd      	lsls	r5, r3, #31
 8000e40:	085c      	lsrs	r4, r3, #1
 8000e42:	2307      	movs	r3, #7
 8000e44:	0852      	lsrs	r2, r2, #1
 8000e46:	4315      	orrs	r5, r2
 8000e48:	000f      	movs	r7, r1
 8000e4a:	402b      	ands	r3, r5
 8000e4c:	e700      	b.n	8000c50 <__aeabi_dadd+0x2d0>
 8000e4e:	4663      	mov	r3, ip
 8000e50:	1a1d      	subs	r5, r3, r0
 8000e52:	45ac      	cmp	ip, r5
 8000e54:	4192      	sbcs	r2, r2
 8000e56:	4653      	mov	r3, sl
 8000e58:	4252      	negs	r2, r2
 8000e5a:	1b1c      	subs	r4, r3, r4
 8000e5c:	000e      	movs	r6, r1
 8000e5e:	4688      	mov	r8, r1
 8000e60:	1aa4      	subs	r4, r4, r2
 8000e62:	e5e5      	b.n	8000a30 <__aeabi_dadd+0xb0>
 8000e64:	2d00      	cmp	r5, #0
 8000e66:	d000      	beq.n	8000e6a <__aeabi_dadd+0x4ea>
 8000e68:	e091      	b.n	8000f8e <__aeabi_dadd+0x60e>
 8000e6a:	2a00      	cmp	r2, #0
 8000e6c:	d138      	bne.n	8000ee0 <__aeabi_dadd+0x560>
 8000e6e:	2480      	movs	r4, #128	@ 0x80
 8000e70:	2600      	movs	r6, #0
 8000e72:	0324      	lsls	r4, r4, #12
 8000e74:	e756      	b.n	8000d24 <__aeabi_dadd+0x3a4>
 8000e76:	4663      	mov	r3, ip
 8000e78:	18c5      	adds	r5, r0, r3
 8000e7a:	4285      	cmp	r5, r0
 8000e7c:	4180      	sbcs	r0, r0
 8000e7e:	4454      	add	r4, sl
 8000e80:	4240      	negs	r0, r0
 8000e82:	1824      	adds	r4, r4, r0
 8000e84:	2701      	movs	r7, #1
 8000e86:	0223      	lsls	r3, r4, #8
 8000e88:	d400      	bmi.n	8000e8c <__aeabi_dadd+0x50c>
 8000e8a:	e6df      	b.n	8000c4c <__aeabi_dadd+0x2cc>
 8000e8c:	2702      	movs	r7, #2
 8000e8e:	e687      	b.n	8000ba0 <__aeabi_dadd+0x220>
 8000e90:	4663      	mov	r3, ip
 8000e92:	1ac5      	subs	r5, r0, r3
 8000e94:	42a8      	cmp	r0, r5
 8000e96:	4180      	sbcs	r0, r0
 8000e98:	4653      	mov	r3, sl
 8000e9a:	4240      	negs	r0, r0
 8000e9c:	1ae4      	subs	r4, r4, r3
 8000e9e:	2701      	movs	r7, #1
 8000ea0:	1a24      	subs	r4, r4, r0
 8000ea2:	e5c0      	b.n	8000a26 <__aeabi_dadd+0xa6>
 8000ea4:	0762      	lsls	r2, r4, #29
 8000ea6:	08c0      	lsrs	r0, r0, #3
 8000ea8:	4302      	orrs	r2, r0
 8000eaa:	08e4      	lsrs	r4, r4, #3
 8000eac:	e736      	b.n	8000d1c <__aeabi_dadd+0x39c>
 8000eae:	0011      	movs	r1, r2
 8000eb0:	4653      	mov	r3, sl
 8000eb2:	3920      	subs	r1, #32
 8000eb4:	40cb      	lsrs	r3, r1
 8000eb6:	4699      	mov	r9, r3
 8000eb8:	2a20      	cmp	r2, #32
 8000eba:	d006      	beq.n	8000eca <__aeabi_dadd+0x54a>
 8000ebc:	2140      	movs	r1, #64	@ 0x40
 8000ebe:	4653      	mov	r3, sl
 8000ec0:	1a8a      	subs	r2, r1, r2
 8000ec2:	4093      	lsls	r3, r2
 8000ec4:	4662      	mov	r2, ip
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	4694      	mov	ip, r2
 8000eca:	4665      	mov	r5, ip
 8000ecc:	1e6b      	subs	r3, r5, #1
 8000ece:	419d      	sbcs	r5, r3
 8000ed0:	464b      	mov	r3, r9
 8000ed2:	431d      	orrs	r5, r3
 8000ed4:	e659      	b.n	8000b8a <__aeabi_dadd+0x20a>
 8000ed6:	0762      	lsls	r2, r4, #29
 8000ed8:	08c0      	lsrs	r0, r0, #3
 8000eda:	4302      	orrs	r2, r0
 8000edc:	08e4      	lsrs	r4, r4, #3
 8000ede:	e70d      	b.n	8000cfc <__aeabi_dadd+0x37c>
 8000ee0:	4653      	mov	r3, sl
 8000ee2:	075a      	lsls	r2, r3, #29
 8000ee4:	4663      	mov	r3, ip
 8000ee6:	08d8      	lsrs	r0, r3, #3
 8000ee8:	4653      	mov	r3, sl
 8000eea:	000e      	movs	r6, r1
 8000eec:	4302      	orrs	r2, r0
 8000eee:	08dc      	lsrs	r4, r3, #3
 8000ef0:	e714      	b.n	8000d1c <__aeabi_dadd+0x39c>
 8000ef2:	0015      	movs	r5, r2
 8000ef4:	0026      	movs	r6, r4
 8000ef6:	3d20      	subs	r5, #32
 8000ef8:	40ee      	lsrs	r6, r5
 8000efa:	2a20      	cmp	r2, #32
 8000efc:	d003      	beq.n	8000f06 <__aeabi_dadd+0x586>
 8000efe:	2540      	movs	r5, #64	@ 0x40
 8000f00:	1aaa      	subs	r2, r5, r2
 8000f02:	4094      	lsls	r4, r2
 8000f04:	4320      	orrs	r0, r4
 8000f06:	1e42      	subs	r2, r0, #1
 8000f08:	4190      	sbcs	r0, r2
 8000f0a:	0005      	movs	r5, r0
 8000f0c:	4335      	orrs	r5, r6
 8000f0e:	e606      	b.n	8000b1e <__aeabi_dadd+0x19e>
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d07c      	beq.n	800100e <__aeabi_dadd+0x68e>
 8000f14:	4662      	mov	r2, ip
 8000f16:	4653      	mov	r3, sl
 8000f18:	08c0      	lsrs	r0, r0, #3
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_dadd+0x5a0>
 8000f1e:	e6fa      	b.n	8000d16 <__aeabi_dadd+0x396>
 8000f20:	0762      	lsls	r2, r4, #29
 8000f22:	4310      	orrs	r0, r2
 8000f24:	2280      	movs	r2, #128	@ 0x80
 8000f26:	08e4      	lsrs	r4, r4, #3
 8000f28:	0312      	lsls	r2, r2, #12
 8000f2a:	4214      	tst	r4, r2
 8000f2c:	d008      	beq.n	8000f40 <__aeabi_dadd+0x5c0>
 8000f2e:	08d9      	lsrs	r1, r3, #3
 8000f30:	4211      	tst	r1, r2
 8000f32:	d105      	bne.n	8000f40 <__aeabi_dadd+0x5c0>
 8000f34:	4663      	mov	r3, ip
 8000f36:	08d8      	lsrs	r0, r3, #3
 8000f38:	4653      	mov	r3, sl
 8000f3a:	000c      	movs	r4, r1
 8000f3c:	075b      	lsls	r3, r3, #29
 8000f3e:	4318      	orrs	r0, r3
 8000f40:	0f42      	lsrs	r2, r0, #29
 8000f42:	00c0      	lsls	r0, r0, #3
 8000f44:	08c0      	lsrs	r0, r0, #3
 8000f46:	0752      	lsls	r2, r2, #29
 8000f48:	4302      	orrs	r2, r0
 8000f4a:	e6e7      	b.n	8000d1c <__aeabi_dadd+0x39c>
 8000f4c:	2a00      	cmp	r2, #0
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_dadd+0x5d2>
 8000f50:	e72d      	b.n	8000dae <__aeabi_dadd+0x42e>
 8000f52:	4663      	mov	r3, ip
 8000f54:	08d8      	lsrs	r0, r3, #3
 8000f56:	4653      	mov	r3, sl
 8000f58:	075a      	lsls	r2, r3, #29
 8000f5a:	000e      	movs	r6, r1
 8000f5c:	4302      	orrs	r2, r0
 8000f5e:	08dc      	lsrs	r4, r3, #3
 8000f60:	e6cc      	b.n	8000cfc <__aeabi_dadd+0x37c>
 8000f62:	4663      	mov	r3, ip
 8000f64:	1a1d      	subs	r5, r3, r0
 8000f66:	45ac      	cmp	ip, r5
 8000f68:	4192      	sbcs	r2, r2
 8000f6a:	4653      	mov	r3, sl
 8000f6c:	4252      	negs	r2, r2
 8000f6e:	1b1c      	subs	r4, r3, r4
 8000f70:	000e      	movs	r6, r1
 8000f72:	4688      	mov	r8, r1
 8000f74:	1aa4      	subs	r4, r4, r2
 8000f76:	3701      	adds	r7, #1
 8000f78:	e555      	b.n	8000a26 <__aeabi_dadd+0xa6>
 8000f7a:	4663      	mov	r3, ip
 8000f7c:	08d9      	lsrs	r1, r3, #3
 8000f7e:	4653      	mov	r3, sl
 8000f80:	075a      	lsls	r2, r3, #29
 8000f82:	430a      	orrs	r2, r1
 8000f84:	08dc      	lsrs	r4, r3, #3
 8000f86:	e6c9      	b.n	8000d1c <__aeabi_dadd+0x39c>
 8000f88:	4660      	mov	r0, ip
 8000f8a:	4654      	mov	r4, sl
 8000f8c:	e6d4      	b.n	8000d38 <__aeabi_dadd+0x3b8>
 8000f8e:	08c0      	lsrs	r0, r0, #3
 8000f90:	2a00      	cmp	r2, #0
 8000f92:	d100      	bne.n	8000f96 <__aeabi_dadd+0x616>
 8000f94:	e6bf      	b.n	8000d16 <__aeabi_dadd+0x396>
 8000f96:	0762      	lsls	r2, r4, #29
 8000f98:	4310      	orrs	r0, r2
 8000f9a:	2280      	movs	r2, #128	@ 0x80
 8000f9c:	08e4      	lsrs	r4, r4, #3
 8000f9e:	0312      	lsls	r2, r2, #12
 8000fa0:	4214      	tst	r4, r2
 8000fa2:	d0cd      	beq.n	8000f40 <__aeabi_dadd+0x5c0>
 8000fa4:	08dd      	lsrs	r5, r3, #3
 8000fa6:	4215      	tst	r5, r2
 8000fa8:	d1ca      	bne.n	8000f40 <__aeabi_dadd+0x5c0>
 8000faa:	4663      	mov	r3, ip
 8000fac:	08d8      	lsrs	r0, r3, #3
 8000fae:	4653      	mov	r3, sl
 8000fb0:	075b      	lsls	r3, r3, #29
 8000fb2:	000e      	movs	r6, r1
 8000fb4:	002c      	movs	r4, r5
 8000fb6:	4318      	orrs	r0, r3
 8000fb8:	e7c2      	b.n	8000f40 <__aeabi_dadd+0x5c0>
 8000fba:	4663      	mov	r3, ip
 8000fbc:	08d9      	lsrs	r1, r3, #3
 8000fbe:	4653      	mov	r3, sl
 8000fc0:	075a      	lsls	r2, r3, #29
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	08dc      	lsrs	r4, r3, #3
 8000fc6:	e699      	b.n	8000cfc <__aeabi_dadd+0x37c>
 8000fc8:	4663      	mov	r3, ip
 8000fca:	08d8      	lsrs	r0, r3, #3
 8000fcc:	4653      	mov	r3, sl
 8000fce:	075a      	lsls	r2, r3, #29
 8000fd0:	000e      	movs	r6, r1
 8000fd2:	4302      	orrs	r2, r0
 8000fd4:	08dc      	lsrs	r4, r3, #3
 8000fd6:	e6a1      	b.n	8000d1c <__aeabi_dadd+0x39c>
 8000fd8:	0011      	movs	r1, r2
 8000fda:	0027      	movs	r7, r4
 8000fdc:	3920      	subs	r1, #32
 8000fde:	40cf      	lsrs	r7, r1
 8000fe0:	2a20      	cmp	r2, #32
 8000fe2:	d003      	beq.n	8000fec <__aeabi_dadd+0x66c>
 8000fe4:	2140      	movs	r1, #64	@ 0x40
 8000fe6:	1a8a      	subs	r2, r1, r2
 8000fe8:	4094      	lsls	r4, r2
 8000fea:	4320      	orrs	r0, r4
 8000fec:	1e42      	subs	r2, r0, #1
 8000fee:	4190      	sbcs	r0, r2
 8000ff0:	0005      	movs	r5, r0
 8000ff2:	433d      	orrs	r5, r7
 8000ff4:	e651      	b.n	8000c9a <__aeabi_dadd+0x31a>
 8000ff6:	000c      	movs	r4, r1
 8000ff8:	2500      	movs	r5, #0
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	e558      	b.n	8000ab0 <__aeabi_dadd+0x130>
 8000ffe:	4460      	add	r0, ip
 8001000:	4560      	cmp	r0, ip
 8001002:	4192      	sbcs	r2, r2
 8001004:	4454      	add	r4, sl
 8001006:	4252      	negs	r2, r2
 8001008:	0005      	movs	r5, r0
 800100a:	18a4      	adds	r4, r4, r2
 800100c:	e73a      	b.n	8000e84 <__aeabi_dadd+0x504>
 800100e:	4653      	mov	r3, sl
 8001010:	075a      	lsls	r2, r3, #29
 8001012:	4663      	mov	r3, ip
 8001014:	08d9      	lsrs	r1, r3, #3
 8001016:	4653      	mov	r3, sl
 8001018:	430a      	orrs	r2, r1
 800101a:	08dc      	lsrs	r4, r3, #3
 800101c:	e67e      	b.n	8000d1c <__aeabi_dadd+0x39c>
 800101e:	001a      	movs	r2, r3
 8001020:	001c      	movs	r4, r3
 8001022:	432a      	orrs	r2, r5
 8001024:	d000      	beq.n	8001028 <__aeabi_dadd+0x6a8>
 8001026:	e6ab      	b.n	8000d80 <__aeabi_dadd+0x400>
 8001028:	e6c1      	b.n	8000dae <__aeabi_dadd+0x42e>
 800102a:	2120      	movs	r1, #32
 800102c:	2500      	movs	r5, #0
 800102e:	1a09      	subs	r1, r1, r0
 8001030:	e519      	b.n	8000a66 <__aeabi_dadd+0xe6>
 8001032:	2200      	movs	r2, #0
 8001034:	2500      	movs	r5, #0
 8001036:	4c01      	ldr	r4, [pc, #4]	@ (800103c <__aeabi_dadd+0x6bc>)
 8001038:	e53a      	b.n	8000ab0 <__aeabi_dadd+0x130>
 800103a:	46c0      	nop			@ (mov r8, r8)
 800103c:	000007ff 	.word	0x000007ff
 8001040:	ff7fffff 	.word	0xff7fffff
 8001044:	000007fe 	.word	0x000007fe

08001048 <__aeabi_ddiv>:
 8001048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104a:	46de      	mov	lr, fp
 800104c:	4645      	mov	r5, r8
 800104e:	4657      	mov	r7, sl
 8001050:	464e      	mov	r6, r9
 8001052:	b5e0      	push	{r5, r6, r7, lr}
 8001054:	b087      	sub	sp, #28
 8001056:	9200      	str	r2, [sp, #0]
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	030b      	lsls	r3, r1, #12
 800105c:	0b1b      	lsrs	r3, r3, #12
 800105e:	469b      	mov	fp, r3
 8001060:	0fca      	lsrs	r2, r1, #31
 8001062:	004b      	lsls	r3, r1, #1
 8001064:	0004      	movs	r4, r0
 8001066:	4680      	mov	r8, r0
 8001068:	0d5b      	lsrs	r3, r3, #21
 800106a:	9202      	str	r2, [sp, #8]
 800106c:	d100      	bne.n	8001070 <__aeabi_ddiv+0x28>
 800106e:	e16a      	b.n	8001346 <__aeabi_ddiv+0x2fe>
 8001070:	4ad4      	ldr	r2, [pc, #848]	@ (80013c4 <__aeabi_ddiv+0x37c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d100      	bne.n	8001078 <__aeabi_ddiv+0x30>
 8001076:	e18c      	b.n	8001392 <__aeabi_ddiv+0x34a>
 8001078:	4659      	mov	r1, fp
 800107a:	0f42      	lsrs	r2, r0, #29
 800107c:	00c9      	lsls	r1, r1, #3
 800107e:	430a      	orrs	r2, r1
 8001080:	2180      	movs	r1, #128	@ 0x80
 8001082:	0409      	lsls	r1, r1, #16
 8001084:	4311      	orrs	r1, r2
 8001086:	00c2      	lsls	r2, r0, #3
 8001088:	4690      	mov	r8, r2
 800108a:	4acf      	ldr	r2, [pc, #828]	@ (80013c8 <__aeabi_ddiv+0x380>)
 800108c:	4689      	mov	r9, r1
 800108e:	4692      	mov	sl, r2
 8001090:	449a      	add	sl, r3
 8001092:	2300      	movs	r3, #0
 8001094:	2400      	movs	r4, #0
 8001096:	9303      	str	r3, [sp, #12]
 8001098:	9e00      	ldr	r6, [sp, #0]
 800109a:	9f01      	ldr	r7, [sp, #4]
 800109c:	033b      	lsls	r3, r7, #12
 800109e:	0b1b      	lsrs	r3, r3, #12
 80010a0:	469b      	mov	fp, r3
 80010a2:	007b      	lsls	r3, r7, #1
 80010a4:	0030      	movs	r0, r6
 80010a6:	0d5b      	lsrs	r3, r3, #21
 80010a8:	0ffd      	lsrs	r5, r7, #31
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d100      	bne.n	80010b0 <__aeabi_ddiv+0x68>
 80010ae:	e128      	b.n	8001302 <__aeabi_ddiv+0x2ba>
 80010b0:	4ac4      	ldr	r2, [pc, #784]	@ (80013c4 <__aeabi_ddiv+0x37c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d100      	bne.n	80010b8 <__aeabi_ddiv+0x70>
 80010b6:	e177      	b.n	80013a8 <__aeabi_ddiv+0x360>
 80010b8:	4659      	mov	r1, fp
 80010ba:	0f72      	lsrs	r2, r6, #29
 80010bc:	00c9      	lsls	r1, r1, #3
 80010be:	430a      	orrs	r2, r1
 80010c0:	2180      	movs	r1, #128	@ 0x80
 80010c2:	0409      	lsls	r1, r1, #16
 80010c4:	4311      	orrs	r1, r2
 80010c6:	468b      	mov	fp, r1
 80010c8:	49bf      	ldr	r1, [pc, #764]	@ (80013c8 <__aeabi_ddiv+0x380>)
 80010ca:	00f2      	lsls	r2, r6, #3
 80010cc:	468c      	mov	ip, r1
 80010ce:	4651      	mov	r1, sl
 80010d0:	4463      	add	r3, ip
 80010d2:	1acb      	subs	r3, r1, r3
 80010d4:	469a      	mov	sl, r3
 80010d6:	2300      	movs	r3, #0
 80010d8:	9e02      	ldr	r6, [sp, #8]
 80010da:	406e      	eors	r6, r5
 80010dc:	2c0f      	cmp	r4, #15
 80010de:	d827      	bhi.n	8001130 <__aeabi_ddiv+0xe8>
 80010e0:	49ba      	ldr	r1, [pc, #744]	@ (80013cc <__aeabi_ddiv+0x384>)
 80010e2:	00a4      	lsls	r4, r4, #2
 80010e4:	5909      	ldr	r1, [r1, r4]
 80010e6:	468f      	mov	pc, r1
 80010e8:	46cb      	mov	fp, r9
 80010ea:	4642      	mov	r2, r8
 80010ec:	9e02      	ldr	r6, [sp, #8]
 80010ee:	9b03      	ldr	r3, [sp, #12]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d016      	beq.n	8001122 <__aeabi_ddiv+0xda>
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	d100      	bne.n	80010fa <__aeabi_ddiv+0xb2>
 80010f8:	e2a6      	b.n	8001648 <__aeabi_ddiv+0x600>
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d000      	beq.n	8001100 <__aeabi_ddiv+0xb8>
 80010fe:	e0df      	b.n	80012c0 <__aeabi_ddiv+0x278>
 8001100:	2200      	movs	r2, #0
 8001102:	2300      	movs	r3, #0
 8001104:	2400      	movs	r4, #0
 8001106:	4690      	mov	r8, r2
 8001108:	051b      	lsls	r3, r3, #20
 800110a:	4323      	orrs	r3, r4
 800110c:	07f6      	lsls	r6, r6, #31
 800110e:	4333      	orrs	r3, r6
 8001110:	4640      	mov	r0, r8
 8001112:	0019      	movs	r1, r3
 8001114:	b007      	add	sp, #28
 8001116:	bcf0      	pop	{r4, r5, r6, r7}
 8001118:	46bb      	mov	fp, r7
 800111a:	46b2      	mov	sl, r6
 800111c:	46a9      	mov	r9, r5
 800111e:	46a0      	mov	r8, r4
 8001120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001122:	2200      	movs	r2, #0
 8001124:	2400      	movs	r4, #0
 8001126:	4690      	mov	r8, r2
 8001128:	4ba6      	ldr	r3, [pc, #664]	@ (80013c4 <__aeabi_ddiv+0x37c>)
 800112a:	e7ed      	b.n	8001108 <__aeabi_ddiv+0xc0>
 800112c:	002e      	movs	r6, r5
 800112e:	e7df      	b.n	80010f0 <__aeabi_ddiv+0xa8>
 8001130:	45cb      	cmp	fp, r9
 8001132:	d200      	bcs.n	8001136 <__aeabi_ddiv+0xee>
 8001134:	e1d4      	b.n	80014e0 <__aeabi_ddiv+0x498>
 8001136:	d100      	bne.n	800113a <__aeabi_ddiv+0xf2>
 8001138:	e1cf      	b.n	80014da <__aeabi_ddiv+0x492>
 800113a:	2301      	movs	r3, #1
 800113c:	425b      	negs	r3, r3
 800113e:	469c      	mov	ip, r3
 8001140:	4644      	mov	r4, r8
 8001142:	4648      	mov	r0, r9
 8001144:	2700      	movs	r7, #0
 8001146:	44e2      	add	sl, ip
 8001148:	465b      	mov	r3, fp
 800114a:	0e15      	lsrs	r5, r2, #24
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	431d      	orrs	r5, r3
 8001150:	0c19      	lsrs	r1, r3, #16
 8001152:	042b      	lsls	r3, r5, #16
 8001154:	0212      	lsls	r2, r2, #8
 8001156:	9500      	str	r5, [sp, #0]
 8001158:	0c1d      	lsrs	r5, r3, #16
 800115a:	4691      	mov	r9, r2
 800115c:	9102      	str	r1, [sp, #8]
 800115e:	9503      	str	r5, [sp, #12]
 8001160:	f7ff f874 	bl	800024c <__aeabi_uidivmod>
 8001164:	0002      	movs	r2, r0
 8001166:	436a      	muls	r2, r5
 8001168:	040b      	lsls	r3, r1, #16
 800116a:	0c21      	lsrs	r1, r4, #16
 800116c:	4680      	mov	r8, r0
 800116e:	4319      	orrs	r1, r3
 8001170:	428a      	cmp	r2, r1
 8001172:	d909      	bls.n	8001188 <__aeabi_ddiv+0x140>
 8001174:	9d00      	ldr	r5, [sp, #0]
 8001176:	2301      	movs	r3, #1
 8001178:	46ac      	mov	ip, r5
 800117a:	425b      	negs	r3, r3
 800117c:	4461      	add	r1, ip
 800117e:	469c      	mov	ip, r3
 8001180:	44e0      	add	r8, ip
 8001182:	428d      	cmp	r5, r1
 8001184:	d800      	bhi.n	8001188 <__aeabi_ddiv+0x140>
 8001186:	e1fb      	b.n	8001580 <__aeabi_ddiv+0x538>
 8001188:	1a88      	subs	r0, r1, r2
 800118a:	9902      	ldr	r1, [sp, #8]
 800118c:	f7ff f85e 	bl	800024c <__aeabi_uidivmod>
 8001190:	9a03      	ldr	r2, [sp, #12]
 8001192:	0424      	lsls	r4, r4, #16
 8001194:	4342      	muls	r2, r0
 8001196:	0409      	lsls	r1, r1, #16
 8001198:	0c24      	lsrs	r4, r4, #16
 800119a:	0003      	movs	r3, r0
 800119c:	430c      	orrs	r4, r1
 800119e:	42a2      	cmp	r2, r4
 80011a0:	d906      	bls.n	80011b0 <__aeabi_ddiv+0x168>
 80011a2:	9900      	ldr	r1, [sp, #0]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	468c      	mov	ip, r1
 80011a8:	4464      	add	r4, ip
 80011aa:	42a1      	cmp	r1, r4
 80011ac:	d800      	bhi.n	80011b0 <__aeabi_ddiv+0x168>
 80011ae:	e1e1      	b.n	8001574 <__aeabi_ddiv+0x52c>
 80011b0:	1aa0      	subs	r0, r4, r2
 80011b2:	4642      	mov	r2, r8
 80011b4:	0412      	lsls	r2, r2, #16
 80011b6:	431a      	orrs	r2, r3
 80011b8:	4693      	mov	fp, r2
 80011ba:	464b      	mov	r3, r9
 80011bc:	4659      	mov	r1, fp
 80011be:	0c1b      	lsrs	r3, r3, #16
 80011c0:	001d      	movs	r5, r3
 80011c2:	9304      	str	r3, [sp, #16]
 80011c4:	040b      	lsls	r3, r1, #16
 80011c6:	4649      	mov	r1, r9
 80011c8:	0409      	lsls	r1, r1, #16
 80011ca:	0c09      	lsrs	r1, r1, #16
 80011cc:	000c      	movs	r4, r1
 80011ce:	0c1b      	lsrs	r3, r3, #16
 80011d0:	435c      	muls	r4, r3
 80011d2:	0c12      	lsrs	r2, r2, #16
 80011d4:	436b      	muls	r3, r5
 80011d6:	4688      	mov	r8, r1
 80011d8:	4351      	muls	r1, r2
 80011da:	436a      	muls	r2, r5
 80011dc:	0c25      	lsrs	r5, r4, #16
 80011de:	46ac      	mov	ip, r5
 80011e0:	185b      	adds	r3, r3, r1
 80011e2:	4463      	add	r3, ip
 80011e4:	4299      	cmp	r1, r3
 80011e6:	d903      	bls.n	80011f0 <__aeabi_ddiv+0x1a8>
 80011e8:	2180      	movs	r1, #128	@ 0x80
 80011ea:	0249      	lsls	r1, r1, #9
 80011ec:	468c      	mov	ip, r1
 80011ee:	4462      	add	r2, ip
 80011f0:	0c19      	lsrs	r1, r3, #16
 80011f2:	0424      	lsls	r4, r4, #16
 80011f4:	041b      	lsls	r3, r3, #16
 80011f6:	0c24      	lsrs	r4, r4, #16
 80011f8:	188a      	adds	r2, r1, r2
 80011fa:	191c      	adds	r4, r3, r4
 80011fc:	4290      	cmp	r0, r2
 80011fe:	d302      	bcc.n	8001206 <__aeabi_ddiv+0x1be>
 8001200:	d116      	bne.n	8001230 <__aeabi_ddiv+0x1e8>
 8001202:	42a7      	cmp	r7, r4
 8001204:	d214      	bcs.n	8001230 <__aeabi_ddiv+0x1e8>
 8001206:	465b      	mov	r3, fp
 8001208:	9d00      	ldr	r5, [sp, #0]
 800120a:	3b01      	subs	r3, #1
 800120c:	444f      	add	r7, r9
 800120e:	9305      	str	r3, [sp, #20]
 8001210:	454f      	cmp	r7, r9
 8001212:	419b      	sbcs	r3, r3
 8001214:	46ac      	mov	ip, r5
 8001216:	425b      	negs	r3, r3
 8001218:	4463      	add	r3, ip
 800121a:	18c0      	adds	r0, r0, r3
 800121c:	4285      	cmp	r5, r0
 800121e:	d300      	bcc.n	8001222 <__aeabi_ddiv+0x1da>
 8001220:	e1a1      	b.n	8001566 <__aeabi_ddiv+0x51e>
 8001222:	4282      	cmp	r2, r0
 8001224:	d900      	bls.n	8001228 <__aeabi_ddiv+0x1e0>
 8001226:	e1f6      	b.n	8001616 <__aeabi_ddiv+0x5ce>
 8001228:	d100      	bne.n	800122c <__aeabi_ddiv+0x1e4>
 800122a:	e1f1      	b.n	8001610 <__aeabi_ddiv+0x5c8>
 800122c:	9b05      	ldr	r3, [sp, #20]
 800122e:	469b      	mov	fp, r3
 8001230:	1b3c      	subs	r4, r7, r4
 8001232:	42a7      	cmp	r7, r4
 8001234:	41bf      	sbcs	r7, r7
 8001236:	9d00      	ldr	r5, [sp, #0]
 8001238:	1a80      	subs	r0, r0, r2
 800123a:	427f      	negs	r7, r7
 800123c:	1bc0      	subs	r0, r0, r7
 800123e:	4285      	cmp	r5, r0
 8001240:	d100      	bne.n	8001244 <__aeabi_ddiv+0x1fc>
 8001242:	e1d0      	b.n	80015e6 <__aeabi_ddiv+0x59e>
 8001244:	9902      	ldr	r1, [sp, #8]
 8001246:	f7ff f801 	bl	800024c <__aeabi_uidivmod>
 800124a:	9a03      	ldr	r2, [sp, #12]
 800124c:	040b      	lsls	r3, r1, #16
 800124e:	4342      	muls	r2, r0
 8001250:	0c21      	lsrs	r1, r4, #16
 8001252:	0007      	movs	r7, r0
 8001254:	4319      	orrs	r1, r3
 8001256:	428a      	cmp	r2, r1
 8001258:	d900      	bls.n	800125c <__aeabi_ddiv+0x214>
 800125a:	e178      	b.n	800154e <__aeabi_ddiv+0x506>
 800125c:	1a88      	subs	r0, r1, r2
 800125e:	9902      	ldr	r1, [sp, #8]
 8001260:	f7fe fff4 	bl	800024c <__aeabi_uidivmod>
 8001264:	9a03      	ldr	r2, [sp, #12]
 8001266:	0424      	lsls	r4, r4, #16
 8001268:	4342      	muls	r2, r0
 800126a:	0409      	lsls	r1, r1, #16
 800126c:	0c24      	lsrs	r4, r4, #16
 800126e:	0003      	movs	r3, r0
 8001270:	430c      	orrs	r4, r1
 8001272:	42a2      	cmp	r2, r4
 8001274:	d900      	bls.n	8001278 <__aeabi_ddiv+0x230>
 8001276:	e15d      	b.n	8001534 <__aeabi_ddiv+0x4ec>
 8001278:	4641      	mov	r1, r8
 800127a:	1aa4      	subs	r4, r4, r2
 800127c:	043a      	lsls	r2, r7, #16
 800127e:	431a      	orrs	r2, r3
 8001280:	9d04      	ldr	r5, [sp, #16]
 8001282:	0413      	lsls	r3, r2, #16
 8001284:	0c1b      	lsrs	r3, r3, #16
 8001286:	4359      	muls	r1, r3
 8001288:	4647      	mov	r7, r8
 800128a:	436b      	muls	r3, r5
 800128c:	469c      	mov	ip, r3
 800128e:	0c10      	lsrs	r0, r2, #16
 8001290:	4347      	muls	r7, r0
 8001292:	0c0b      	lsrs	r3, r1, #16
 8001294:	44bc      	add	ip, r7
 8001296:	4463      	add	r3, ip
 8001298:	4368      	muls	r0, r5
 800129a:	429f      	cmp	r7, r3
 800129c:	d903      	bls.n	80012a6 <__aeabi_ddiv+0x25e>
 800129e:	2580      	movs	r5, #128	@ 0x80
 80012a0:	026d      	lsls	r5, r5, #9
 80012a2:	46ac      	mov	ip, r5
 80012a4:	4460      	add	r0, ip
 80012a6:	0c1f      	lsrs	r7, r3, #16
 80012a8:	0409      	lsls	r1, r1, #16
 80012aa:	041b      	lsls	r3, r3, #16
 80012ac:	0c09      	lsrs	r1, r1, #16
 80012ae:	183f      	adds	r7, r7, r0
 80012b0:	185b      	adds	r3, r3, r1
 80012b2:	42bc      	cmp	r4, r7
 80012b4:	d200      	bcs.n	80012b8 <__aeabi_ddiv+0x270>
 80012b6:	e102      	b.n	80014be <__aeabi_ddiv+0x476>
 80012b8:	d100      	bne.n	80012bc <__aeabi_ddiv+0x274>
 80012ba:	e0fd      	b.n	80014b8 <__aeabi_ddiv+0x470>
 80012bc:	2301      	movs	r3, #1
 80012be:	431a      	orrs	r2, r3
 80012c0:	4b43      	ldr	r3, [pc, #268]	@ (80013d0 <__aeabi_ddiv+0x388>)
 80012c2:	4453      	add	r3, sl
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	dc00      	bgt.n	80012ca <__aeabi_ddiv+0x282>
 80012c8:	e0ae      	b.n	8001428 <__aeabi_ddiv+0x3e0>
 80012ca:	0751      	lsls	r1, r2, #29
 80012cc:	d000      	beq.n	80012d0 <__aeabi_ddiv+0x288>
 80012ce:	e198      	b.n	8001602 <__aeabi_ddiv+0x5ba>
 80012d0:	4659      	mov	r1, fp
 80012d2:	01c9      	lsls	r1, r1, #7
 80012d4:	d506      	bpl.n	80012e4 <__aeabi_ddiv+0x29c>
 80012d6:	4659      	mov	r1, fp
 80012d8:	4b3e      	ldr	r3, [pc, #248]	@ (80013d4 <__aeabi_ddiv+0x38c>)
 80012da:	4019      	ands	r1, r3
 80012dc:	2380      	movs	r3, #128	@ 0x80
 80012de:	468b      	mov	fp, r1
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	4453      	add	r3, sl
 80012e4:	493c      	ldr	r1, [pc, #240]	@ (80013d8 <__aeabi_ddiv+0x390>)
 80012e6:	428b      	cmp	r3, r1
 80012e8:	dd00      	ble.n	80012ec <__aeabi_ddiv+0x2a4>
 80012ea:	e71a      	b.n	8001122 <__aeabi_ddiv+0xda>
 80012ec:	4659      	mov	r1, fp
 80012ee:	08d2      	lsrs	r2, r2, #3
 80012f0:	0749      	lsls	r1, r1, #29
 80012f2:	4311      	orrs	r1, r2
 80012f4:	465a      	mov	r2, fp
 80012f6:	055b      	lsls	r3, r3, #21
 80012f8:	0254      	lsls	r4, r2, #9
 80012fa:	4688      	mov	r8, r1
 80012fc:	0b24      	lsrs	r4, r4, #12
 80012fe:	0d5b      	lsrs	r3, r3, #21
 8001300:	e702      	b.n	8001108 <__aeabi_ddiv+0xc0>
 8001302:	465a      	mov	r2, fp
 8001304:	9b00      	ldr	r3, [sp, #0]
 8001306:	431a      	orrs	r2, r3
 8001308:	d100      	bne.n	800130c <__aeabi_ddiv+0x2c4>
 800130a:	e07e      	b.n	800140a <__aeabi_ddiv+0x3c2>
 800130c:	465b      	mov	r3, fp
 800130e:	2b00      	cmp	r3, #0
 8001310:	d100      	bne.n	8001314 <__aeabi_ddiv+0x2cc>
 8001312:	e100      	b.n	8001516 <__aeabi_ddiv+0x4ce>
 8001314:	4658      	mov	r0, fp
 8001316:	f001 f9ef 	bl	80026f8 <__clzsi2>
 800131a:	0002      	movs	r2, r0
 800131c:	0003      	movs	r3, r0
 800131e:	3a0b      	subs	r2, #11
 8001320:	271d      	movs	r7, #29
 8001322:	9e00      	ldr	r6, [sp, #0]
 8001324:	1aba      	subs	r2, r7, r2
 8001326:	0019      	movs	r1, r3
 8001328:	4658      	mov	r0, fp
 800132a:	40d6      	lsrs	r6, r2
 800132c:	3908      	subs	r1, #8
 800132e:	4088      	lsls	r0, r1
 8001330:	0032      	movs	r2, r6
 8001332:	4302      	orrs	r2, r0
 8001334:	4693      	mov	fp, r2
 8001336:	9a00      	ldr	r2, [sp, #0]
 8001338:	408a      	lsls	r2, r1
 800133a:	4928      	ldr	r1, [pc, #160]	@ (80013dc <__aeabi_ddiv+0x394>)
 800133c:	4453      	add	r3, sl
 800133e:	468a      	mov	sl, r1
 8001340:	449a      	add	sl, r3
 8001342:	2300      	movs	r3, #0
 8001344:	e6c8      	b.n	80010d8 <__aeabi_ddiv+0x90>
 8001346:	465b      	mov	r3, fp
 8001348:	4303      	orrs	r3, r0
 800134a:	4699      	mov	r9, r3
 800134c:	d056      	beq.n	80013fc <__aeabi_ddiv+0x3b4>
 800134e:	465b      	mov	r3, fp
 8001350:	2b00      	cmp	r3, #0
 8001352:	d100      	bne.n	8001356 <__aeabi_ddiv+0x30e>
 8001354:	e0cd      	b.n	80014f2 <__aeabi_ddiv+0x4aa>
 8001356:	4658      	mov	r0, fp
 8001358:	f001 f9ce 	bl	80026f8 <__clzsi2>
 800135c:	230b      	movs	r3, #11
 800135e:	425b      	negs	r3, r3
 8001360:	469c      	mov	ip, r3
 8001362:	0002      	movs	r2, r0
 8001364:	4484      	add	ip, r0
 8001366:	4666      	mov	r6, ip
 8001368:	231d      	movs	r3, #29
 800136a:	1b9b      	subs	r3, r3, r6
 800136c:	0026      	movs	r6, r4
 800136e:	0011      	movs	r1, r2
 8001370:	4658      	mov	r0, fp
 8001372:	40de      	lsrs	r6, r3
 8001374:	3908      	subs	r1, #8
 8001376:	4088      	lsls	r0, r1
 8001378:	0033      	movs	r3, r6
 800137a:	4303      	orrs	r3, r0
 800137c:	4699      	mov	r9, r3
 800137e:	0023      	movs	r3, r4
 8001380:	408b      	lsls	r3, r1
 8001382:	4698      	mov	r8, r3
 8001384:	4b16      	ldr	r3, [pc, #88]	@ (80013e0 <__aeabi_ddiv+0x398>)
 8001386:	2400      	movs	r4, #0
 8001388:	1a9b      	subs	r3, r3, r2
 800138a:	469a      	mov	sl, r3
 800138c:	2300      	movs	r3, #0
 800138e:	9303      	str	r3, [sp, #12]
 8001390:	e682      	b.n	8001098 <__aeabi_ddiv+0x50>
 8001392:	465a      	mov	r2, fp
 8001394:	4302      	orrs	r2, r0
 8001396:	4691      	mov	r9, r2
 8001398:	d12a      	bne.n	80013f0 <__aeabi_ddiv+0x3a8>
 800139a:	2200      	movs	r2, #0
 800139c:	469a      	mov	sl, r3
 800139e:	2302      	movs	r3, #2
 80013a0:	4690      	mov	r8, r2
 80013a2:	2408      	movs	r4, #8
 80013a4:	9303      	str	r3, [sp, #12]
 80013a6:	e677      	b.n	8001098 <__aeabi_ddiv+0x50>
 80013a8:	465a      	mov	r2, fp
 80013aa:	9b00      	ldr	r3, [sp, #0]
 80013ac:	431a      	orrs	r2, r3
 80013ae:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <__aeabi_ddiv+0x39c>)
 80013b0:	469c      	mov	ip, r3
 80013b2:	44e2      	add	sl, ip
 80013b4:	2a00      	cmp	r2, #0
 80013b6:	d117      	bne.n	80013e8 <__aeabi_ddiv+0x3a0>
 80013b8:	2302      	movs	r3, #2
 80013ba:	431c      	orrs	r4, r3
 80013bc:	2300      	movs	r3, #0
 80013be:	469b      	mov	fp, r3
 80013c0:	3302      	adds	r3, #2
 80013c2:	e689      	b.n	80010d8 <__aeabi_ddiv+0x90>
 80013c4:	000007ff 	.word	0x000007ff
 80013c8:	fffffc01 	.word	0xfffffc01
 80013cc:	080079ec 	.word	0x080079ec
 80013d0:	000003ff 	.word	0x000003ff
 80013d4:	feffffff 	.word	0xfeffffff
 80013d8:	000007fe 	.word	0x000007fe
 80013dc:	000003f3 	.word	0x000003f3
 80013e0:	fffffc0d 	.word	0xfffffc0d
 80013e4:	fffff801 	.word	0xfffff801
 80013e8:	2303      	movs	r3, #3
 80013ea:	0032      	movs	r2, r6
 80013ec:	431c      	orrs	r4, r3
 80013ee:	e673      	b.n	80010d8 <__aeabi_ddiv+0x90>
 80013f0:	469a      	mov	sl, r3
 80013f2:	2303      	movs	r3, #3
 80013f4:	46d9      	mov	r9, fp
 80013f6:	240c      	movs	r4, #12
 80013f8:	9303      	str	r3, [sp, #12]
 80013fa:	e64d      	b.n	8001098 <__aeabi_ddiv+0x50>
 80013fc:	2300      	movs	r3, #0
 80013fe:	4698      	mov	r8, r3
 8001400:	469a      	mov	sl, r3
 8001402:	3301      	adds	r3, #1
 8001404:	2404      	movs	r4, #4
 8001406:	9303      	str	r3, [sp, #12]
 8001408:	e646      	b.n	8001098 <__aeabi_ddiv+0x50>
 800140a:	2301      	movs	r3, #1
 800140c:	431c      	orrs	r4, r3
 800140e:	2300      	movs	r3, #0
 8001410:	469b      	mov	fp, r3
 8001412:	3301      	adds	r3, #1
 8001414:	e660      	b.n	80010d8 <__aeabi_ddiv+0x90>
 8001416:	2300      	movs	r3, #0
 8001418:	2480      	movs	r4, #128	@ 0x80
 800141a:	4698      	mov	r8, r3
 800141c:	2600      	movs	r6, #0
 800141e:	4b92      	ldr	r3, [pc, #584]	@ (8001668 <__aeabi_ddiv+0x620>)
 8001420:	0324      	lsls	r4, r4, #12
 8001422:	e671      	b.n	8001108 <__aeabi_ddiv+0xc0>
 8001424:	2201      	movs	r2, #1
 8001426:	4252      	negs	r2, r2
 8001428:	2101      	movs	r1, #1
 800142a:	1ac9      	subs	r1, r1, r3
 800142c:	2938      	cmp	r1, #56	@ 0x38
 800142e:	dd00      	ble.n	8001432 <__aeabi_ddiv+0x3ea>
 8001430:	e666      	b.n	8001100 <__aeabi_ddiv+0xb8>
 8001432:	291f      	cmp	r1, #31
 8001434:	dc00      	bgt.n	8001438 <__aeabi_ddiv+0x3f0>
 8001436:	e0ab      	b.n	8001590 <__aeabi_ddiv+0x548>
 8001438:	201f      	movs	r0, #31
 800143a:	4240      	negs	r0, r0
 800143c:	1ac3      	subs	r3, r0, r3
 800143e:	4658      	mov	r0, fp
 8001440:	40d8      	lsrs	r0, r3
 8001442:	0003      	movs	r3, r0
 8001444:	2920      	cmp	r1, #32
 8001446:	d004      	beq.n	8001452 <__aeabi_ddiv+0x40a>
 8001448:	4658      	mov	r0, fp
 800144a:	4988      	ldr	r1, [pc, #544]	@ (800166c <__aeabi_ddiv+0x624>)
 800144c:	4451      	add	r1, sl
 800144e:	4088      	lsls	r0, r1
 8001450:	4302      	orrs	r2, r0
 8001452:	1e51      	subs	r1, r2, #1
 8001454:	418a      	sbcs	r2, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	2307      	movs	r3, #7
 800145a:	0019      	movs	r1, r3
 800145c:	2400      	movs	r4, #0
 800145e:	4011      	ands	r1, r2
 8001460:	4213      	tst	r3, r2
 8001462:	d00c      	beq.n	800147e <__aeabi_ddiv+0x436>
 8001464:	230f      	movs	r3, #15
 8001466:	4013      	ands	r3, r2
 8001468:	2b04      	cmp	r3, #4
 800146a:	d100      	bne.n	800146e <__aeabi_ddiv+0x426>
 800146c:	e0f9      	b.n	8001662 <__aeabi_ddiv+0x61a>
 800146e:	1d11      	adds	r1, r2, #4
 8001470:	4291      	cmp	r1, r2
 8001472:	419b      	sbcs	r3, r3
 8001474:	000a      	movs	r2, r1
 8001476:	425b      	negs	r3, r3
 8001478:	0759      	lsls	r1, r3, #29
 800147a:	025b      	lsls	r3, r3, #9
 800147c:	0b1c      	lsrs	r4, r3, #12
 800147e:	08d2      	lsrs	r2, r2, #3
 8001480:	430a      	orrs	r2, r1
 8001482:	4690      	mov	r8, r2
 8001484:	2300      	movs	r3, #0
 8001486:	e63f      	b.n	8001108 <__aeabi_ddiv+0xc0>
 8001488:	2480      	movs	r4, #128	@ 0x80
 800148a:	464b      	mov	r3, r9
 800148c:	0324      	lsls	r4, r4, #12
 800148e:	4223      	tst	r3, r4
 8001490:	d009      	beq.n	80014a6 <__aeabi_ddiv+0x45e>
 8001492:	465b      	mov	r3, fp
 8001494:	4223      	tst	r3, r4
 8001496:	d106      	bne.n	80014a6 <__aeabi_ddiv+0x45e>
 8001498:	431c      	orrs	r4, r3
 800149a:	0324      	lsls	r4, r4, #12
 800149c:	002e      	movs	r6, r5
 800149e:	4690      	mov	r8, r2
 80014a0:	4b71      	ldr	r3, [pc, #452]	@ (8001668 <__aeabi_ddiv+0x620>)
 80014a2:	0b24      	lsrs	r4, r4, #12
 80014a4:	e630      	b.n	8001108 <__aeabi_ddiv+0xc0>
 80014a6:	2480      	movs	r4, #128	@ 0x80
 80014a8:	464b      	mov	r3, r9
 80014aa:	0324      	lsls	r4, r4, #12
 80014ac:	431c      	orrs	r4, r3
 80014ae:	0324      	lsls	r4, r4, #12
 80014b0:	9e02      	ldr	r6, [sp, #8]
 80014b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001668 <__aeabi_ddiv+0x620>)
 80014b4:	0b24      	lsrs	r4, r4, #12
 80014b6:	e627      	b.n	8001108 <__aeabi_ddiv+0xc0>
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d100      	bne.n	80014be <__aeabi_ddiv+0x476>
 80014bc:	e700      	b.n	80012c0 <__aeabi_ddiv+0x278>
 80014be:	9800      	ldr	r0, [sp, #0]
 80014c0:	1e51      	subs	r1, r2, #1
 80014c2:	4684      	mov	ip, r0
 80014c4:	4464      	add	r4, ip
 80014c6:	4284      	cmp	r4, r0
 80014c8:	d200      	bcs.n	80014cc <__aeabi_ddiv+0x484>
 80014ca:	e084      	b.n	80015d6 <__aeabi_ddiv+0x58e>
 80014cc:	42bc      	cmp	r4, r7
 80014ce:	d200      	bcs.n	80014d2 <__aeabi_ddiv+0x48a>
 80014d0:	e0ae      	b.n	8001630 <__aeabi_ddiv+0x5e8>
 80014d2:	d100      	bne.n	80014d6 <__aeabi_ddiv+0x48e>
 80014d4:	e0c1      	b.n	800165a <__aeabi_ddiv+0x612>
 80014d6:	000a      	movs	r2, r1
 80014d8:	e6f0      	b.n	80012bc <__aeabi_ddiv+0x274>
 80014da:	4542      	cmp	r2, r8
 80014dc:	d900      	bls.n	80014e0 <__aeabi_ddiv+0x498>
 80014de:	e62c      	b.n	800113a <__aeabi_ddiv+0xf2>
 80014e0:	464b      	mov	r3, r9
 80014e2:	07dc      	lsls	r4, r3, #31
 80014e4:	0858      	lsrs	r0, r3, #1
 80014e6:	4643      	mov	r3, r8
 80014e8:	085b      	lsrs	r3, r3, #1
 80014ea:	431c      	orrs	r4, r3
 80014ec:	4643      	mov	r3, r8
 80014ee:	07df      	lsls	r7, r3, #31
 80014f0:	e62a      	b.n	8001148 <__aeabi_ddiv+0x100>
 80014f2:	f001 f901 	bl	80026f8 <__clzsi2>
 80014f6:	2315      	movs	r3, #21
 80014f8:	469c      	mov	ip, r3
 80014fa:	4484      	add	ip, r0
 80014fc:	0002      	movs	r2, r0
 80014fe:	4663      	mov	r3, ip
 8001500:	3220      	adds	r2, #32
 8001502:	2b1c      	cmp	r3, #28
 8001504:	dc00      	bgt.n	8001508 <__aeabi_ddiv+0x4c0>
 8001506:	e72e      	b.n	8001366 <__aeabi_ddiv+0x31e>
 8001508:	0023      	movs	r3, r4
 800150a:	3808      	subs	r0, #8
 800150c:	4083      	lsls	r3, r0
 800150e:	4699      	mov	r9, r3
 8001510:	2300      	movs	r3, #0
 8001512:	4698      	mov	r8, r3
 8001514:	e736      	b.n	8001384 <__aeabi_ddiv+0x33c>
 8001516:	f001 f8ef 	bl	80026f8 <__clzsi2>
 800151a:	0002      	movs	r2, r0
 800151c:	0003      	movs	r3, r0
 800151e:	3215      	adds	r2, #21
 8001520:	3320      	adds	r3, #32
 8001522:	2a1c      	cmp	r2, #28
 8001524:	dc00      	bgt.n	8001528 <__aeabi_ddiv+0x4e0>
 8001526:	e6fb      	b.n	8001320 <__aeabi_ddiv+0x2d8>
 8001528:	9900      	ldr	r1, [sp, #0]
 800152a:	3808      	subs	r0, #8
 800152c:	4081      	lsls	r1, r0
 800152e:	2200      	movs	r2, #0
 8001530:	468b      	mov	fp, r1
 8001532:	e702      	b.n	800133a <__aeabi_ddiv+0x2f2>
 8001534:	9900      	ldr	r1, [sp, #0]
 8001536:	3b01      	subs	r3, #1
 8001538:	468c      	mov	ip, r1
 800153a:	4464      	add	r4, ip
 800153c:	42a1      	cmp	r1, r4
 800153e:	d900      	bls.n	8001542 <__aeabi_ddiv+0x4fa>
 8001540:	e69a      	b.n	8001278 <__aeabi_ddiv+0x230>
 8001542:	42a2      	cmp	r2, r4
 8001544:	d800      	bhi.n	8001548 <__aeabi_ddiv+0x500>
 8001546:	e697      	b.n	8001278 <__aeabi_ddiv+0x230>
 8001548:	1e83      	subs	r3, r0, #2
 800154a:	4464      	add	r4, ip
 800154c:	e694      	b.n	8001278 <__aeabi_ddiv+0x230>
 800154e:	46ac      	mov	ip, r5
 8001550:	4461      	add	r1, ip
 8001552:	3f01      	subs	r7, #1
 8001554:	428d      	cmp	r5, r1
 8001556:	d900      	bls.n	800155a <__aeabi_ddiv+0x512>
 8001558:	e680      	b.n	800125c <__aeabi_ddiv+0x214>
 800155a:	428a      	cmp	r2, r1
 800155c:	d800      	bhi.n	8001560 <__aeabi_ddiv+0x518>
 800155e:	e67d      	b.n	800125c <__aeabi_ddiv+0x214>
 8001560:	1e87      	subs	r7, r0, #2
 8001562:	4461      	add	r1, ip
 8001564:	e67a      	b.n	800125c <__aeabi_ddiv+0x214>
 8001566:	4285      	cmp	r5, r0
 8001568:	d000      	beq.n	800156c <__aeabi_ddiv+0x524>
 800156a:	e65f      	b.n	800122c <__aeabi_ddiv+0x1e4>
 800156c:	45b9      	cmp	r9, r7
 800156e:	d900      	bls.n	8001572 <__aeabi_ddiv+0x52a>
 8001570:	e65c      	b.n	800122c <__aeabi_ddiv+0x1e4>
 8001572:	e656      	b.n	8001222 <__aeabi_ddiv+0x1da>
 8001574:	42a2      	cmp	r2, r4
 8001576:	d800      	bhi.n	800157a <__aeabi_ddiv+0x532>
 8001578:	e61a      	b.n	80011b0 <__aeabi_ddiv+0x168>
 800157a:	1e83      	subs	r3, r0, #2
 800157c:	4464      	add	r4, ip
 800157e:	e617      	b.n	80011b0 <__aeabi_ddiv+0x168>
 8001580:	428a      	cmp	r2, r1
 8001582:	d800      	bhi.n	8001586 <__aeabi_ddiv+0x53e>
 8001584:	e600      	b.n	8001188 <__aeabi_ddiv+0x140>
 8001586:	46ac      	mov	ip, r5
 8001588:	1e83      	subs	r3, r0, #2
 800158a:	4698      	mov	r8, r3
 800158c:	4461      	add	r1, ip
 800158e:	e5fb      	b.n	8001188 <__aeabi_ddiv+0x140>
 8001590:	4837      	ldr	r0, [pc, #220]	@ (8001670 <__aeabi_ddiv+0x628>)
 8001592:	0014      	movs	r4, r2
 8001594:	4450      	add	r0, sl
 8001596:	4082      	lsls	r2, r0
 8001598:	465b      	mov	r3, fp
 800159a:	0017      	movs	r7, r2
 800159c:	4083      	lsls	r3, r0
 800159e:	40cc      	lsrs	r4, r1
 80015a0:	1e7a      	subs	r2, r7, #1
 80015a2:	4197      	sbcs	r7, r2
 80015a4:	4323      	orrs	r3, r4
 80015a6:	433b      	orrs	r3, r7
 80015a8:	001a      	movs	r2, r3
 80015aa:	465b      	mov	r3, fp
 80015ac:	40cb      	lsrs	r3, r1
 80015ae:	0751      	lsls	r1, r2, #29
 80015b0:	d009      	beq.n	80015c6 <__aeabi_ddiv+0x57e>
 80015b2:	210f      	movs	r1, #15
 80015b4:	4011      	ands	r1, r2
 80015b6:	2904      	cmp	r1, #4
 80015b8:	d005      	beq.n	80015c6 <__aeabi_ddiv+0x57e>
 80015ba:	1d11      	adds	r1, r2, #4
 80015bc:	4291      	cmp	r1, r2
 80015be:	4192      	sbcs	r2, r2
 80015c0:	4252      	negs	r2, r2
 80015c2:	189b      	adds	r3, r3, r2
 80015c4:	000a      	movs	r2, r1
 80015c6:	0219      	lsls	r1, r3, #8
 80015c8:	d400      	bmi.n	80015cc <__aeabi_ddiv+0x584>
 80015ca:	e755      	b.n	8001478 <__aeabi_ddiv+0x430>
 80015cc:	2200      	movs	r2, #0
 80015ce:	2301      	movs	r3, #1
 80015d0:	2400      	movs	r4, #0
 80015d2:	4690      	mov	r8, r2
 80015d4:	e598      	b.n	8001108 <__aeabi_ddiv+0xc0>
 80015d6:	000a      	movs	r2, r1
 80015d8:	42bc      	cmp	r4, r7
 80015da:	d000      	beq.n	80015de <__aeabi_ddiv+0x596>
 80015dc:	e66e      	b.n	80012bc <__aeabi_ddiv+0x274>
 80015de:	454b      	cmp	r3, r9
 80015e0:	d000      	beq.n	80015e4 <__aeabi_ddiv+0x59c>
 80015e2:	e66b      	b.n	80012bc <__aeabi_ddiv+0x274>
 80015e4:	e66c      	b.n	80012c0 <__aeabi_ddiv+0x278>
 80015e6:	4b23      	ldr	r3, [pc, #140]	@ (8001674 <__aeabi_ddiv+0x62c>)
 80015e8:	4a23      	ldr	r2, [pc, #140]	@ (8001678 <__aeabi_ddiv+0x630>)
 80015ea:	4453      	add	r3, sl
 80015ec:	4592      	cmp	sl, r2
 80015ee:	da00      	bge.n	80015f2 <__aeabi_ddiv+0x5aa>
 80015f0:	e718      	b.n	8001424 <__aeabi_ddiv+0x3dc>
 80015f2:	2101      	movs	r1, #1
 80015f4:	4249      	negs	r1, r1
 80015f6:	1d0a      	adds	r2, r1, #4
 80015f8:	428a      	cmp	r2, r1
 80015fa:	4189      	sbcs	r1, r1
 80015fc:	4249      	negs	r1, r1
 80015fe:	448b      	add	fp, r1
 8001600:	e666      	b.n	80012d0 <__aeabi_ddiv+0x288>
 8001602:	210f      	movs	r1, #15
 8001604:	4011      	ands	r1, r2
 8001606:	2904      	cmp	r1, #4
 8001608:	d100      	bne.n	800160c <__aeabi_ddiv+0x5c4>
 800160a:	e661      	b.n	80012d0 <__aeabi_ddiv+0x288>
 800160c:	0011      	movs	r1, r2
 800160e:	e7f2      	b.n	80015f6 <__aeabi_ddiv+0x5ae>
 8001610:	42bc      	cmp	r4, r7
 8001612:	d800      	bhi.n	8001616 <__aeabi_ddiv+0x5ce>
 8001614:	e60a      	b.n	800122c <__aeabi_ddiv+0x1e4>
 8001616:	2302      	movs	r3, #2
 8001618:	425b      	negs	r3, r3
 800161a:	469c      	mov	ip, r3
 800161c:	9900      	ldr	r1, [sp, #0]
 800161e:	444f      	add	r7, r9
 8001620:	454f      	cmp	r7, r9
 8001622:	419b      	sbcs	r3, r3
 8001624:	44e3      	add	fp, ip
 8001626:	468c      	mov	ip, r1
 8001628:	425b      	negs	r3, r3
 800162a:	4463      	add	r3, ip
 800162c:	18c0      	adds	r0, r0, r3
 800162e:	e5ff      	b.n	8001230 <__aeabi_ddiv+0x1e8>
 8001630:	4649      	mov	r1, r9
 8001632:	9d00      	ldr	r5, [sp, #0]
 8001634:	0048      	lsls	r0, r1, #1
 8001636:	4548      	cmp	r0, r9
 8001638:	4189      	sbcs	r1, r1
 800163a:	46ac      	mov	ip, r5
 800163c:	4249      	negs	r1, r1
 800163e:	4461      	add	r1, ip
 8001640:	4681      	mov	r9, r0
 8001642:	3a02      	subs	r2, #2
 8001644:	1864      	adds	r4, r4, r1
 8001646:	e7c7      	b.n	80015d8 <__aeabi_ddiv+0x590>
 8001648:	2480      	movs	r4, #128	@ 0x80
 800164a:	465b      	mov	r3, fp
 800164c:	0324      	lsls	r4, r4, #12
 800164e:	431c      	orrs	r4, r3
 8001650:	0324      	lsls	r4, r4, #12
 8001652:	4690      	mov	r8, r2
 8001654:	4b04      	ldr	r3, [pc, #16]	@ (8001668 <__aeabi_ddiv+0x620>)
 8001656:	0b24      	lsrs	r4, r4, #12
 8001658:	e556      	b.n	8001108 <__aeabi_ddiv+0xc0>
 800165a:	4599      	cmp	r9, r3
 800165c:	d3e8      	bcc.n	8001630 <__aeabi_ddiv+0x5e8>
 800165e:	000a      	movs	r2, r1
 8001660:	e7bd      	b.n	80015de <__aeabi_ddiv+0x596>
 8001662:	2300      	movs	r3, #0
 8001664:	e708      	b.n	8001478 <__aeabi_ddiv+0x430>
 8001666:	46c0      	nop			@ (mov r8, r8)
 8001668:	000007ff 	.word	0x000007ff
 800166c:	0000043e 	.word	0x0000043e
 8001670:	0000041e 	.word	0x0000041e
 8001674:	000003ff 	.word	0x000003ff
 8001678:	fffffc02 	.word	0xfffffc02

0800167c <__eqdf2>:
 800167c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800167e:	4657      	mov	r7, sl
 8001680:	46de      	mov	lr, fp
 8001682:	464e      	mov	r6, r9
 8001684:	4645      	mov	r5, r8
 8001686:	b5e0      	push	{r5, r6, r7, lr}
 8001688:	000d      	movs	r5, r1
 800168a:	0004      	movs	r4, r0
 800168c:	0fe8      	lsrs	r0, r5, #31
 800168e:	4683      	mov	fp, r0
 8001690:	0309      	lsls	r1, r1, #12
 8001692:	0fd8      	lsrs	r0, r3, #31
 8001694:	0b09      	lsrs	r1, r1, #12
 8001696:	4682      	mov	sl, r0
 8001698:	4819      	ldr	r0, [pc, #100]	@ (8001700 <__eqdf2+0x84>)
 800169a:	468c      	mov	ip, r1
 800169c:	031f      	lsls	r7, r3, #12
 800169e:	0069      	lsls	r1, r5, #1
 80016a0:	005e      	lsls	r6, r3, #1
 80016a2:	0d49      	lsrs	r1, r1, #21
 80016a4:	0b3f      	lsrs	r7, r7, #12
 80016a6:	0d76      	lsrs	r6, r6, #21
 80016a8:	4281      	cmp	r1, r0
 80016aa:	d018      	beq.n	80016de <__eqdf2+0x62>
 80016ac:	4286      	cmp	r6, r0
 80016ae:	d00f      	beq.n	80016d0 <__eqdf2+0x54>
 80016b0:	2001      	movs	r0, #1
 80016b2:	42b1      	cmp	r1, r6
 80016b4:	d10d      	bne.n	80016d2 <__eqdf2+0x56>
 80016b6:	45bc      	cmp	ip, r7
 80016b8:	d10b      	bne.n	80016d2 <__eqdf2+0x56>
 80016ba:	4294      	cmp	r4, r2
 80016bc:	d109      	bne.n	80016d2 <__eqdf2+0x56>
 80016be:	45d3      	cmp	fp, sl
 80016c0:	d01c      	beq.n	80016fc <__eqdf2+0x80>
 80016c2:	2900      	cmp	r1, #0
 80016c4:	d105      	bne.n	80016d2 <__eqdf2+0x56>
 80016c6:	4660      	mov	r0, ip
 80016c8:	4320      	orrs	r0, r4
 80016ca:	1e43      	subs	r3, r0, #1
 80016cc:	4198      	sbcs	r0, r3
 80016ce:	e000      	b.n	80016d2 <__eqdf2+0x56>
 80016d0:	2001      	movs	r0, #1
 80016d2:	bcf0      	pop	{r4, r5, r6, r7}
 80016d4:	46bb      	mov	fp, r7
 80016d6:	46b2      	mov	sl, r6
 80016d8:	46a9      	mov	r9, r5
 80016da:	46a0      	mov	r8, r4
 80016dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016de:	2001      	movs	r0, #1
 80016e0:	428e      	cmp	r6, r1
 80016e2:	d1f6      	bne.n	80016d2 <__eqdf2+0x56>
 80016e4:	4661      	mov	r1, ip
 80016e6:	4339      	orrs	r1, r7
 80016e8:	000f      	movs	r7, r1
 80016ea:	4317      	orrs	r7, r2
 80016ec:	4327      	orrs	r7, r4
 80016ee:	d1f0      	bne.n	80016d2 <__eqdf2+0x56>
 80016f0:	465b      	mov	r3, fp
 80016f2:	4652      	mov	r2, sl
 80016f4:	1a98      	subs	r0, r3, r2
 80016f6:	1e43      	subs	r3, r0, #1
 80016f8:	4198      	sbcs	r0, r3
 80016fa:	e7ea      	b.n	80016d2 <__eqdf2+0x56>
 80016fc:	2000      	movs	r0, #0
 80016fe:	e7e8      	b.n	80016d2 <__eqdf2+0x56>
 8001700:	000007ff 	.word	0x000007ff

08001704 <__gedf2>:
 8001704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001706:	4657      	mov	r7, sl
 8001708:	464e      	mov	r6, r9
 800170a:	4645      	mov	r5, r8
 800170c:	46de      	mov	lr, fp
 800170e:	b5e0      	push	{r5, r6, r7, lr}
 8001710:	000d      	movs	r5, r1
 8001712:	030f      	lsls	r7, r1, #12
 8001714:	0b39      	lsrs	r1, r7, #12
 8001716:	b083      	sub	sp, #12
 8001718:	0004      	movs	r4, r0
 800171a:	4680      	mov	r8, r0
 800171c:	9101      	str	r1, [sp, #4]
 800171e:	0058      	lsls	r0, r3, #1
 8001720:	0fe9      	lsrs	r1, r5, #31
 8001722:	4f31      	ldr	r7, [pc, #196]	@ (80017e8 <__gedf2+0xe4>)
 8001724:	0d40      	lsrs	r0, r0, #21
 8001726:	468c      	mov	ip, r1
 8001728:	006e      	lsls	r6, r5, #1
 800172a:	0319      	lsls	r1, r3, #12
 800172c:	4682      	mov	sl, r0
 800172e:	4691      	mov	r9, r2
 8001730:	0d76      	lsrs	r6, r6, #21
 8001732:	0b09      	lsrs	r1, r1, #12
 8001734:	0fd8      	lsrs	r0, r3, #31
 8001736:	42be      	cmp	r6, r7
 8001738:	d01f      	beq.n	800177a <__gedf2+0x76>
 800173a:	45ba      	cmp	sl, r7
 800173c:	d00f      	beq.n	800175e <__gedf2+0x5a>
 800173e:	2e00      	cmp	r6, #0
 8001740:	d12f      	bne.n	80017a2 <__gedf2+0x9e>
 8001742:	4655      	mov	r5, sl
 8001744:	9e01      	ldr	r6, [sp, #4]
 8001746:	4334      	orrs	r4, r6
 8001748:	2d00      	cmp	r5, #0
 800174a:	d127      	bne.n	800179c <__gedf2+0x98>
 800174c:	430a      	orrs	r2, r1
 800174e:	d03a      	beq.n	80017c6 <__gedf2+0xc2>
 8001750:	2c00      	cmp	r4, #0
 8001752:	d145      	bne.n	80017e0 <__gedf2+0xdc>
 8001754:	2800      	cmp	r0, #0
 8001756:	d11a      	bne.n	800178e <__gedf2+0x8a>
 8001758:	2001      	movs	r0, #1
 800175a:	4240      	negs	r0, r0
 800175c:	e017      	b.n	800178e <__gedf2+0x8a>
 800175e:	4311      	orrs	r1, r2
 8001760:	d13b      	bne.n	80017da <__gedf2+0xd6>
 8001762:	2e00      	cmp	r6, #0
 8001764:	d102      	bne.n	800176c <__gedf2+0x68>
 8001766:	9f01      	ldr	r7, [sp, #4]
 8001768:	4327      	orrs	r7, r4
 800176a:	d0f3      	beq.n	8001754 <__gedf2+0x50>
 800176c:	4584      	cmp	ip, r0
 800176e:	d109      	bne.n	8001784 <__gedf2+0x80>
 8001770:	4663      	mov	r3, ip
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <__gedf2+0x54>
 8001776:	4660      	mov	r0, ip
 8001778:	e009      	b.n	800178e <__gedf2+0x8a>
 800177a:	9f01      	ldr	r7, [sp, #4]
 800177c:	4327      	orrs	r7, r4
 800177e:	d12c      	bne.n	80017da <__gedf2+0xd6>
 8001780:	45b2      	cmp	sl, r6
 8001782:	d024      	beq.n	80017ce <__gedf2+0xca>
 8001784:	4663      	mov	r3, ip
 8001786:	2002      	movs	r0, #2
 8001788:	3b01      	subs	r3, #1
 800178a:	4018      	ands	r0, r3
 800178c:	3801      	subs	r0, #1
 800178e:	b003      	add	sp, #12
 8001790:	bcf0      	pop	{r4, r5, r6, r7}
 8001792:	46bb      	mov	fp, r7
 8001794:	46b2      	mov	sl, r6
 8001796:	46a9      	mov	r9, r5
 8001798:	46a0      	mov	r8, r4
 800179a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800179c:	2c00      	cmp	r4, #0
 800179e:	d0d9      	beq.n	8001754 <__gedf2+0x50>
 80017a0:	e7e4      	b.n	800176c <__gedf2+0x68>
 80017a2:	4654      	mov	r4, sl
 80017a4:	2c00      	cmp	r4, #0
 80017a6:	d0ed      	beq.n	8001784 <__gedf2+0x80>
 80017a8:	4584      	cmp	ip, r0
 80017aa:	d1eb      	bne.n	8001784 <__gedf2+0x80>
 80017ac:	4556      	cmp	r6, sl
 80017ae:	dce9      	bgt.n	8001784 <__gedf2+0x80>
 80017b0:	dbde      	blt.n	8001770 <__gedf2+0x6c>
 80017b2:	9b01      	ldr	r3, [sp, #4]
 80017b4:	428b      	cmp	r3, r1
 80017b6:	d8e5      	bhi.n	8001784 <__gedf2+0x80>
 80017b8:	d1da      	bne.n	8001770 <__gedf2+0x6c>
 80017ba:	45c8      	cmp	r8, r9
 80017bc:	d8e2      	bhi.n	8001784 <__gedf2+0x80>
 80017be:	2000      	movs	r0, #0
 80017c0:	45c8      	cmp	r8, r9
 80017c2:	d2e4      	bcs.n	800178e <__gedf2+0x8a>
 80017c4:	e7d4      	b.n	8001770 <__gedf2+0x6c>
 80017c6:	2000      	movs	r0, #0
 80017c8:	2c00      	cmp	r4, #0
 80017ca:	d0e0      	beq.n	800178e <__gedf2+0x8a>
 80017cc:	e7da      	b.n	8001784 <__gedf2+0x80>
 80017ce:	4311      	orrs	r1, r2
 80017d0:	d103      	bne.n	80017da <__gedf2+0xd6>
 80017d2:	4584      	cmp	ip, r0
 80017d4:	d1d6      	bne.n	8001784 <__gedf2+0x80>
 80017d6:	2000      	movs	r0, #0
 80017d8:	e7d9      	b.n	800178e <__gedf2+0x8a>
 80017da:	2002      	movs	r0, #2
 80017dc:	4240      	negs	r0, r0
 80017de:	e7d6      	b.n	800178e <__gedf2+0x8a>
 80017e0:	4584      	cmp	ip, r0
 80017e2:	d0e6      	beq.n	80017b2 <__gedf2+0xae>
 80017e4:	e7ce      	b.n	8001784 <__gedf2+0x80>
 80017e6:	46c0      	nop			@ (mov r8, r8)
 80017e8:	000007ff 	.word	0x000007ff

080017ec <__ledf2>:
 80017ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ee:	4657      	mov	r7, sl
 80017f0:	464e      	mov	r6, r9
 80017f2:	4645      	mov	r5, r8
 80017f4:	46de      	mov	lr, fp
 80017f6:	b5e0      	push	{r5, r6, r7, lr}
 80017f8:	000d      	movs	r5, r1
 80017fa:	030f      	lsls	r7, r1, #12
 80017fc:	0004      	movs	r4, r0
 80017fe:	4680      	mov	r8, r0
 8001800:	0fe8      	lsrs	r0, r5, #31
 8001802:	0b39      	lsrs	r1, r7, #12
 8001804:	4684      	mov	ip, r0
 8001806:	b083      	sub	sp, #12
 8001808:	0058      	lsls	r0, r3, #1
 800180a:	4f30      	ldr	r7, [pc, #192]	@ (80018cc <__ledf2+0xe0>)
 800180c:	0d40      	lsrs	r0, r0, #21
 800180e:	9101      	str	r1, [sp, #4]
 8001810:	031e      	lsls	r6, r3, #12
 8001812:	0069      	lsls	r1, r5, #1
 8001814:	4682      	mov	sl, r0
 8001816:	4691      	mov	r9, r2
 8001818:	0d49      	lsrs	r1, r1, #21
 800181a:	0b36      	lsrs	r6, r6, #12
 800181c:	0fd8      	lsrs	r0, r3, #31
 800181e:	42b9      	cmp	r1, r7
 8001820:	d020      	beq.n	8001864 <__ledf2+0x78>
 8001822:	45ba      	cmp	sl, r7
 8001824:	d00f      	beq.n	8001846 <__ledf2+0x5a>
 8001826:	2900      	cmp	r1, #0
 8001828:	d12b      	bne.n	8001882 <__ledf2+0x96>
 800182a:	9901      	ldr	r1, [sp, #4]
 800182c:	430c      	orrs	r4, r1
 800182e:	4651      	mov	r1, sl
 8001830:	2900      	cmp	r1, #0
 8001832:	d137      	bne.n	80018a4 <__ledf2+0xb8>
 8001834:	4332      	orrs	r2, r6
 8001836:	d038      	beq.n	80018aa <__ledf2+0xbe>
 8001838:	2c00      	cmp	r4, #0
 800183a:	d144      	bne.n	80018c6 <__ledf2+0xda>
 800183c:	2800      	cmp	r0, #0
 800183e:	d119      	bne.n	8001874 <__ledf2+0x88>
 8001840:	2001      	movs	r0, #1
 8001842:	4240      	negs	r0, r0
 8001844:	e016      	b.n	8001874 <__ledf2+0x88>
 8001846:	4316      	orrs	r6, r2
 8001848:	d113      	bne.n	8001872 <__ledf2+0x86>
 800184a:	2900      	cmp	r1, #0
 800184c:	d102      	bne.n	8001854 <__ledf2+0x68>
 800184e:	9f01      	ldr	r7, [sp, #4]
 8001850:	4327      	orrs	r7, r4
 8001852:	d0f3      	beq.n	800183c <__ledf2+0x50>
 8001854:	4584      	cmp	ip, r0
 8001856:	d020      	beq.n	800189a <__ledf2+0xae>
 8001858:	4663      	mov	r3, ip
 800185a:	2002      	movs	r0, #2
 800185c:	3b01      	subs	r3, #1
 800185e:	4018      	ands	r0, r3
 8001860:	3801      	subs	r0, #1
 8001862:	e007      	b.n	8001874 <__ledf2+0x88>
 8001864:	9f01      	ldr	r7, [sp, #4]
 8001866:	4327      	orrs	r7, r4
 8001868:	d103      	bne.n	8001872 <__ledf2+0x86>
 800186a:	458a      	cmp	sl, r1
 800186c:	d1f4      	bne.n	8001858 <__ledf2+0x6c>
 800186e:	4316      	orrs	r6, r2
 8001870:	d01f      	beq.n	80018b2 <__ledf2+0xc6>
 8001872:	2002      	movs	r0, #2
 8001874:	b003      	add	sp, #12
 8001876:	bcf0      	pop	{r4, r5, r6, r7}
 8001878:	46bb      	mov	fp, r7
 800187a:	46b2      	mov	sl, r6
 800187c:	46a9      	mov	r9, r5
 800187e:	46a0      	mov	r8, r4
 8001880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001882:	4654      	mov	r4, sl
 8001884:	2c00      	cmp	r4, #0
 8001886:	d0e7      	beq.n	8001858 <__ledf2+0x6c>
 8001888:	4584      	cmp	ip, r0
 800188a:	d1e5      	bne.n	8001858 <__ledf2+0x6c>
 800188c:	4551      	cmp	r1, sl
 800188e:	dce3      	bgt.n	8001858 <__ledf2+0x6c>
 8001890:	db03      	blt.n	800189a <__ledf2+0xae>
 8001892:	9b01      	ldr	r3, [sp, #4]
 8001894:	42b3      	cmp	r3, r6
 8001896:	d8df      	bhi.n	8001858 <__ledf2+0x6c>
 8001898:	d00f      	beq.n	80018ba <__ledf2+0xce>
 800189a:	4663      	mov	r3, ip
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0cf      	beq.n	8001840 <__ledf2+0x54>
 80018a0:	4660      	mov	r0, ip
 80018a2:	e7e7      	b.n	8001874 <__ledf2+0x88>
 80018a4:	2c00      	cmp	r4, #0
 80018a6:	d0c9      	beq.n	800183c <__ledf2+0x50>
 80018a8:	e7d4      	b.n	8001854 <__ledf2+0x68>
 80018aa:	2000      	movs	r0, #0
 80018ac:	2c00      	cmp	r4, #0
 80018ae:	d0e1      	beq.n	8001874 <__ledf2+0x88>
 80018b0:	e7d2      	b.n	8001858 <__ledf2+0x6c>
 80018b2:	4584      	cmp	ip, r0
 80018b4:	d1d0      	bne.n	8001858 <__ledf2+0x6c>
 80018b6:	2000      	movs	r0, #0
 80018b8:	e7dc      	b.n	8001874 <__ledf2+0x88>
 80018ba:	45c8      	cmp	r8, r9
 80018bc:	d8cc      	bhi.n	8001858 <__ledf2+0x6c>
 80018be:	2000      	movs	r0, #0
 80018c0:	45c8      	cmp	r8, r9
 80018c2:	d2d7      	bcs.n	8001874 <__ledf2+0x88>
 80018c4:	e7e9      	b.n	800189a <__ledf2+0xae>
 80018c6:	4584      	cmp	ip, r0
 80018c8:	d0e3      	beq.n	8001892 <__ledf2+0xa6>
 80018ca:	e7c5      	b.n	8001858 <__ledf2+0x6c>
 80018cc:	000007ff 	.word	0x000007ff

080018d0 <__aeabi_dmul>:
 80018d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d2:	4657      	mov	r7, sl
 80018d4:	46de      	mov	lr, fp
 80018d6:	464e      	mov	r6, r9
 80018d8:	4645      	mov	r5, r8
 80018da:	b5e0      	push	{r5, r6, r7, lr}
 80018dc:	001f      	movs	r7, r3
 80018de:	030b      	lsls	r3, r1, #12
 80018e0:	0b1b      	lsrs	r3, r3, #12
 80018e2:	0016      	movs	r6, r2
 80018e4:	469a      	mov	sl, r3
 80018e6:	0fca      	lsrs	r2, r1, #31
 80018e8:	004b      	lsls	r3, r1, #1
 80018ea:	0004      	movs	r4, r0
 80018ec:	4693      	mov	fp, r2
 80018ee:	b087      	sub	sp, #28
 80018f0:	0d5b      	lsrs	r3, r3, #21
 80018f2:	d100      	bne.n	80018f6 <__aeabi_dmul+0x26>
 80018f4:	e0d5      	b.n	8001aa2 <__aeabi_dmul+0x1d2>
 80018f6:	4abb      	ldr	r2, [pc, #748]	@ (8001be4 <__aeabi_dmul+0x314>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d100      	bne.n	80018fe <__aeabi_dmul+0x2e>
 80018fc:	e0f8      	b.n	8001af0 <__aeabi_dmul+0x220>
 80018fe:	4651      	mov	r1, sl
 8001900:	0f42      	lsrs	r2, r0, #29
 8001902:	00c9      	lsls	r1, r1, #3
 8001904:	430a      	orrs	r2, r1
 8001906:	2180      	movs	r1, #128	@ 0x80
 8001908:	0409      	lsls	r1, r1, #16
 800190a:	4311      	orrs	r1, r2
 800190c:	00c2      	lsls	r2, r0, #3
 800190e:	4691      	mov	r9, r2
 8001910:	4ab5      	ldr	r2, [pc, #724]	@ (8001be8 <__aeabi_dmul+0x318>)
 8001912:	468a      	mov	sl, r1
 8001914:	189d      	adds	r5, r3, r2
 8001916:	2300      	movs	r3, #0
 8001918:	4698      	mov	r8, r3
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	033c      	lsls	r4, r7, #12
 800191e:	007b      	lsls	r3, r7, #1
 8001920:	0ffa      	lsrs	r2, r7, #31
 8001922:	0030      	movs	r0, r6
 8001924:	0b24      	lsrs	r4, r4, #12
 8001926:	0d5b      	lsrs	r3, r3, #21
 8001928:	9200      	str	r2, [sp, #0]
 800192a:	d100      	bne.n	800192e <__aeabi_dmul+0x5e>
 800192c:	e096      	b.n	8001a5c <__aeabi_dmul+0x18c>
 800192e:	4aad      	ldr	r2, [pc, #692]	@ (8001be4 <__aeabi_dmul+0x314>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d031      	beq.n	8001998 <__aeabi_dmul+0xc8>
 8001934:	0f72      	lsrs	r2, r6, #29
 8001936:	00e4      	lsls	r4, r4, #3
 8001938:	4322      	orrs	r2, r4
 800193a:	2480      	movs	r4, #128	@ 0x80
 800193c:	0424      	lsls	r4, r4, #16
 800193e:	4314      	orrs	r4, r2
 8001940:	4aa9      	ldr	r2, [pc, #676]	@ (8001be8 <__aeabi_dmul+0x318>)
 8001942:	00f0      	lsls	r0, r6, #3
 8001944:	4694      	mov	ip, r2
 8001946:	4463      	add	r3, ip
 8001948:	195b      	adds	r3, r3, r5
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	9201      	str	r2, [sp, #4]
 800194e:	4642      	mov	r2, r8
 8001950:	2600      	movs	r6, #0
 8001952:	2a0a      	cmp	r2, #10
 8001954:	dc42      	bgt.n	80019dc <__aeabi_dmul+0x10c>
 8001956:	465a      	mov	r2, fp
 8001958:	9900      	ldr	r1, [sp, #0]
 800195a:	404a      	eors	r2, r1
 800195c:	4693      	mov	fp, r2
 800195e:	4642      	mov	r2, r8
 8001960:	2a02      	cmp	r2, #2
 8001962:	dc32      	bgt.n	80019ca <__aeabi_dmul+0xfa>
 8001964:	3a01      	subs	r2, #1
 8001966:	2a01      	cmp	r2, #1
 8001968:	d900      	bls.n	800196c <__aeabi_dmul+0x9c>
 800196a:	e149      	b.n	8001c00 <__aeabi_dmul+0x330>
 800196c:	2e02      	cmp	r6, #2
 800196e:	d100      	bne.n	8001972 <__aeabi_dmul+0xa2>
 8001970:	e0ca      	b.n	8001b08 <__aeabi_dmul+0x238>
 8001972:	2e01      	cmp	r6, #1
 8001974:	d13d      	bne.n	80019f2 <__aeabi_dmul+0x122>
 8001976:	2300      	movs	r3, #0
 8001978:	2400      	movs	r4, #0
 800197a:	2200      	movs	r2, #0
 800197c:	0010      	movs	r0, r2
 800197e:	465a      	mov	r2, fp
 8001980:	051b      	lsls	r3, r3, #20
 8001982:	4323      	orrs	r3, r4
 8001984:	07d2      	lsls	r2, r2, #31
 8001986:	4313      	orrs	r3, r2
 8001988:	0019      	movs	r1, r3
 800198a:	b007      	add	sp, #28
 800198c:	bcf0      	pop	{r4, r5, r6, r7}
 800198e:	46bb      	mov	fp, r7
 8001990:	46b2      	mov	sl, r6
 8001992:	46a9      	mov	r9, r5
 8001994:	46a0      	mov	r8, r4
 8001996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001998:	4b92      	ldr	r3, [pc, #584]	@ (8001be4 <__aeabi_dmul+0x314>)
 800199a:	4326      	orrs	r6, r4
 800199c:	18eb      	adds	r3, r5, r3
 800199e:	2e00      	cmp	r6, #0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_dmul+0xd4>
 80019a2:	e0bb      	b.n	8001b1c <__aeabi_dmul+0x24c>
 80019a4:	2203      	movs	r2, #3
 80019a6:	4641      	mov	r1, r8
 80019a8:	4311      	orrs	r1, r2
 80019aa:	465a      	mov	r2, fp
 80019ac:	4688      	mov	r8, r1
 80019ae:	9900      	ldr	r1, [sp, #0]
 80019b0:	404a      	eors	r2, r1
 80019b2:	2180      	movs	r1, #128	@ 0x80
 80019b4:	0109      	lsls	r1, r1, #4
 80019b6:	468c      	mov	ip, r1
 80019b8:	0029      	movs	r1, r5
 80019ba:	4461      	add	r1, ip
 80019bc:	9101      	str	r1, [sp, #4]
 80019be:	4641      	mov	r1, r8
 80019c0:	290a      	cmp	r1, #10
 80019c2:	dd00      	ble.n	80019c6 <__aeabi_dmul+0xf6>
 80019c4:	e233      	b.n	8001e2e <__aeabi_dmul+0x55e>
 80019c6:	4693      	mov	fp, r2
 80019c8:	2603      	movs	r6, #3
 80019ca:	4642      	mov	r2, r8
 80019cc:	2701      	movs	r7, #1
 80019ce:	4097      	lsls	r7, r2
 80019d0:	21a6      	movs	r1, #166	@ 0xa6
 80019d2:	003a      	movs	r2, r7
 80019d4:	00c9      	lsls	r1, r1, #3
 80019d6:	400a      	ands	r2, r1
 80019d8:	420f      	tst	r7, r1
 80019da:	d031      	beq.n	8001a40 <__aeabi_dmul+0x170>
 80019dc:	9e02      	ldr	r6, [sp, #8]
 80019de:	2e02      	cmp	r6, #2
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dmul+0x114>
 80019e2:	e235      	b.n	8001e50 <__aeabi_dmul+0x580>
 80019e4:	2e03      	cmp	r6, #3
 80019e6:	d100      	bne.n	80019ea <__aeabi_dmul+0x11a>
 80019e8:	e1d2      	b.n	8001d90 <__aeabi_dmul+0x4c0>
 80019ea:	4654      	mov	r4, sl
 80019ec:	4648      	mov	r0, r9
 80019ee:	2e01      	cmp	r6, #1
 80019f0:	d0c1      	beq.n	8001976 <__aeabi_dmul+0xa6>
 80019f2:	9a01      	ldr	r2, [sp, #4]
 80019f4:	4b7d      	ldr	r3, [pc, #500]	@ (8001bec <__aeabi_dmul+0x31c>)
 80019f6:	4694      	mov	ip, r2
 80019f8:	4463      	add	r3, ip
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	dc00      	bgt.n	8001a00 <__aeabi_dmul+0x130>
 80019fe:	e0c0      	b.n	8001b82 <__aeabi_dmul+0x2b2>
 8001a00:	0742      	lsls	r2, r0, #29
 8001a02:	d009      	beq.n	8001a18 <__aeabi_dmul+0x148>
 8001a04:	220f      	movs	r2, #15
 8001a06:	4002      	ands	r2, r0
 8001a08:	2a04      	cmp	r2, #4
 8001a0a:	d005      	beq.n	8001a18 <__aeabi_dmul+0x148>
 8001a0c:	1d02      	adds	r2, r0, #4
 8001a0e:	4282      	cmp	r2, r0
 8001a10:	4180      	sbcs	r0, r0
 8001a12:	4240      	negs	r0, r0
 8001a14:	1824      	adds	r4, r4, r0
 8001a16:	0010      	movs	r0, r2
 8001a18:	01e2      	lsls	r2, r4, #7
 8001a1a:	d506      	bpl.n	8001a2a <__aeabi_dmul+0x15a>
 8001a1c:	4b74      	ldr	r3, [pc, #464]	@ (8001bf0 <__aeabi_dmul+0x320>)
 8001a1e:	9a01      	ldr	r2, [sp, #4]
 8001a20:	401c      	ands	r4, r3
 8001a22:	2380      	movs	r3, #128	@ 0x80
 8001a24:	4694      	mov	ip, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	4463      	add	r3, ip
 8001a2a:	4a72      	ldr	r2, [pc, #456]	@ (8001bf4 <__aeabi_dmul+0x324>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	dc6b      	bgt.n	8001b08 <__aeabi_dmul+0x238>
 8001a30:	0762      	lsls	r2, r4, #29
 8001a32:	08c0      	lsrs	r0, r0, #3
 8001a34:	0264      	lsls	r4, r4, #9
 8001a36:	055b      	lsls	r3, r3, #21
 8001a38:	4302      	orrs	r2, r0
 8001a3a:	0b24      	lsrs	r4, r4, #12
 8001a3c:	0d5b      	lsrs	r3, r3, #21
 8001a3e:	e79d      	b.n	800197c <__aeabi_dmul+0xac>
 8001a40:	2190      	movs	r1, #144	@ 0x90
 8001a42:	0089      	lsls	r1, r1, #2
 8001a44:	420f      	tst	r7, r1
 8001a46:	d163      	bne.n	8001b10 <__aeabi_dmul+0x240>
 8001a48:	2288      	movs	r2, #136	@ 0x88
 8001a4a:	423a      	tst	r2, r7
 8001a4c:	d100      	bne.n	8001a50 <__aeabi_dmul+0x180>
 8001a4e:	e0d7      	b.n	8001c00 <__aeabi_dmul+0x330>
 8001a50:	9b00      	ldr	r3, [sp, #0]
 8001a52:	46a2      	mov	sl, r4
 8001a54:	469b      	mov	fp, r3
 8001a56:	4681      	mov	r9, r0
 8001a58:	9602      	str	r6, [sp, #8]
 8001a5a:	e7bf      	b.n	80019dc <__aeabi_dmul+0x10c>
 8001a5c:	0023      	movs	r3, r4
 8001a5e:	4333      	orrs	r3, r6
 8001a60:	d100      	bne.n	8001a64 <__aeabi_dmul+0x194>
 8001a62:	e07f      	b.n	8001b64 <__aeabi_dmul+0x294>
 8001a64:	2c00      	cmp	r4, #0
 8001a66:	d100      	bne.n	8001a6a <__aeabi_dmul+0x19a>
 8001a68:	e1ad      	b.n	8001dc6 <__aeabi_dmul+0x4f6>
 8001a6a:	0020      	movs	r0, r4
 8001a6c:	f000 fe44 	bl	80026f8 <__clzsi2>
 8001a70:	0002      	movs	r2, r0
 8001a72:	0003      	movs	r3, r0
 8001a74:	3a0b      	subs	r2, #11
 8001a76:	201d      	movs	r0, #29
 8001a78:	0019      	movs	r1, r3
 8001a7a:	1a82      	subs	r2, r0, r2
 8001a7c:	0030      	movs	r0, r6
 8001a7e:	3908      	subs	r1, #8
 8001a80:	40d0      	lsrs	r0, r2
 8001a82:	408c      	lsls	r4, r1
 8001a84:	4304      	orrs	r4, r0
 8001a86:	0030      	movs	r0, r6
 8001a88:	4088      	lsls	r0, r1
 8001a8a:	4a5b      	ldr	r2, [pc, #364]	@ (8001bf8 <__aeabi_dmul+0x328>)
 8001a8c:	1aeb      	subs	r3, r5, r3
 8001a8e:	4694      	mov	ip, r2
 8001a90:	4463      	add	r3, ip
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	9201      	str	r2, [sp, #4]
 8001a96:	4642      	mov	r2, r8
 8001a98:	2600      	movs	r6, #0
 8001a9a:	2a0a      	cmp	r2, #10
 8001a9c:	dc00      	bgt.n	8001aa0 <__aeabi_dmul+0x1d0>
 8001a9e:	e75a      	b.n	8001956 <__aeabi_dmul+0x86>
 8001aa0:	e79c      	b.n	80019dc <__aeabi_dmul+0x10c>
 8001aa2:	4653      	mov	r3, sl
 8001aa4:	4303      	orrs	r3, r0
 8001aa6:	4699      	mov	r9, r3
 8001aa8:	d054      	beq.n	8001b54 <__aeabi_dmul+0x284>
 8001aaa:	4653      	mov	r3, sl
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d100      	bne.n	8001ab2 <__aeabi_dmul+0x1e2>
 8001ab0:	e177      	b.n	8001da2 <__aeabi_dmul+0x4d2>
 8001ab2:	4650      	mov	r0, sl
 8001ab4:	f000 fe20 	bl	80026f8 <__clzsi2>
 8001ab8:	230b      	movs	r3, #11
 8001aba:	425b      	negs	r3, r3
 8001abc:	469c      	mov	ip, r3
 8001abe:	0002      	movs	r2, r0
 8001ac0:	4484      	add	ip, r0
 8001ac2:	0011      	movs	r1, r2
 8001ac4:	4650      	mov	r0, sl
 8001ac6:	3908      	subs	r1, #8
 8001ac8:	4088      	lsls	r0, r1
 8001aca:	231d      	movs	r3, #29
 8001acc:	4680      	mov	r8, r0
 8001ace:	4660      	mov	r0, ip
 8001ad0:	1a1b      	subs	r3, r3, r0
 8001ad2:	0020      	movs	r0, r4
 8001ad4:	40d8      	lsrs	r0, r3
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	4640      	mov	r0, r8
 8001ada:	4303      	orrs	r3, r0
 8001adc:	469a      	mov	sl, r3
 8001ade:	0023      	movs	r3, r4
 8001ae0:	408b      	lsls	r3, r1
 8001ae2:	4699      	mov	r9, r3
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	4d44      	ldr	r5, [pc, #272]	@ (8001bf8 <__aeabi_dmul+0x328>)
 8001ae8:	4698      	mov	r8, r3
 8001aea:	1aad      	subs	r5, r5, r2
 8001aec:	9302      	str	r3, [sp, #8]
 8001aee:	e715      	b.n	800191c <__aeabi_dmul+0x4c>
 8001af0:	4652      	mov	r2, sl
 8001af2:	4302      	orrs	r2, r0
 8001af4:	4691      	mov	r9, r2
 8001af6:	d126      	bne.n	8001b46 <__aeabi_dmul+0x276>
 8001af8:	2200      	movs	r2, #0
 8001afa:	001d      	movs	r5, r3
 8001afc:	2302      	movs	r3, #2
 8001afe:	4692      	mov	sl, r2
 8001b00:	3208      	adds	r2, #8
 8001b02:	4690      	mov	r8, r2
 8001b04:	9302      	str	r3, [sp, #8]
 8001b06:	e709      	b.n	800191c <__aeabi_dmul+0x4c>
 8001b08:	2400      	movs	r4, #0
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	4b35      	ldr	r3, [pc, #212]	@ (8001be4 <__aeabi_dmul+0x314>)
 8001b0e:	e735      	b.n	800197c <__aeabi_dmul+0xac>
 8001b10:	2300      	movs	r3, #0
 8001b12:	2480      	movs	r4, #128	@ 0x80
 8001b14:	469b      	mov	fp, r3
 8001b16:	0324      	lsls	r4, r4, #12
 8001b18:	4b32      	ldr	r3, [pc, #200]	@ (8001be4 <__aeabi_dmul+0x314>)
 8001b1a:	e72f      	b.n	800197c <__aeabi_dmul+0xac>
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	4641      	mov	r1, r8
 8001b20:	4311      	orrs	r1, r2
 8001b22:	2280      	movs	r2, #128	@ 0x80
 8001b24:	0112      	lsls	r2, r2, #4
 8001b26:	4694      	mov	ip, r2
 8001b28:	002a      	movs	r2, r5
 8001b2a:	4462      	add	r2, ip
 8001b2c:	4688      	mov	r8, r1
 8001b2e:	9201      	str	r2, [sp, #4]
 8001b30:	290a      	cmp	r1, #10
 8001b32:	dd00      	ble.n	8001b36 <__aeabi_dmul+0x266>
 8001b34:	e752      	b.n	80019dc <__aeabi_dmul+0x10c>
 8001b36:	465a      	mov	r2, fp
 8001b38:	2000      	movs	r0, #0
 8001b3a:	9900      	ldr	r1, [sp, #0]
 8001b3c:	0004      	movs	r4, r0
 8001b3e:	404a      	eors	r2, r1
 8001b40:	4693      	mov	fp, r2
 8001b42:	2602      	movs	r6, #2
 8001b44:	e70b      	b.n	800195e <__aeabi_dmul+0x8e>
 8001b46:	220c      	movs	r2, #12
 8001b48:	001d      	movs	r5, r3
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	4681      	mov	r9, r0
 8001b4e:	4690      	mov	r8, r2
 8001b50:	9302      	str	r3, [sp, #8]
 8001b52:	e6e3      	b.n	800191c <__aeabi_dmul+0x4c>
 8001b54:	2300      	movs	r3, #0
 8001b56:	469a      	mov	sl, r3
 8001b58:	3304      	adds	r3, #4
 8001b5a:	4698      	mov	r8, r3
 8001b5c:	3b03      	subs	r3, #3
 8001b5e:	2500      	movs	r5, #0
 8001b60:	9302      	str	r3, [sp, #8]
 8001b62:	e6db      	b.n	800191c <__aeabi_dmul+0x4c>
 8001b64:	4642      	mov	r2, r8
 8001b66:	3301      	adds	r3, #1
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	002b      	movs	r3, r5
 8001b6c:	4690      	mov	r8, r2
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	9201      	str	r2, [sp, #4]
 8001b72:	4642      	mov	r2, r8
 8001b74:	2400      	movs	r4, #0
 8001b76:	2000      	movs	r0, #0
 8001b78:	2601      	movs	r6, #1
 8001b7a:	2a0a      	cmp	r2, #10
 8001b7c:	dc00      	bgt.n	8001b80 <__aeabi_dmul+0x2b0>
 8001b7e:	e6ea      	b.n	8001956 <__aeabi_dmul+0x86>
 8001b80:	e72c      	b.n	80019dc <__aeabi_dmul+0x10c>
 8001b82:	2201      	movs	r2, #1
 8001b84:	1ad2      	subs	r2, r2, r3
 8001b86:	2a38      	cmp	r2, #56	@ 0x38
 8001b88:	dd00      	ble.n	8001b8c <__aeabi_dmul+0x2bc>
 8001b8a:	e6f4      	b.n	8001976 <__aeabi_dmul+0xa6>
 8001b8c:	2a1f      	cmp	r2, #31
 8001b8e:	dc00      	bgt.n	8001b92 <__aeabi_dmul+0x2c2>
 8001b90:	e12a      	b.n	8001de8 <__aeabi_dmul+0x518>
 8001b92:	211f      	movs	r1, #31
 8001b94:	4249      	negs	r1, r1
 8001b96:	1acb      	subs	r3, r1, r3
 8001b98:	0021      	movs	r1, r4
 8001b9a:	40d9      	lsrs	r1, r3
 8001b9c:	000b      	movs	r3, r1
 8001b9e:	2a20      	cmp	r2, #32
 8001ba0:	d005      	beq.n	8001bae <__aeabi_dmul+0x2de>
 8001ba2:	4a16      	ldr	r2, [pc, #88]	@ (8001bfc <__aeabi_dmul+0x32c>)
 8001ba4:	9d01      	ldr	r5, [sp, #4]
 8001ba6:	4694      	mov	ip, r2
 8001ba8:	4465      	add	r5, ip
 8001baa:	40ac      	lsls	r4, r5
 8001bac:	4320      	orrs	r0, r4
 8001bae:	1e42      	subs	r2, r0, #1
 8001bb0:	4190      	sbcs	r0, r2
 8001bb2:	4318      	orrs	r0, r3
 8001bb4:	2307      	movs	r3, #7
 8001bb6:	0019      	movs	r1, r3
 8001bb8:	2400      	movs	r4, #0
 8001bba:	4001      	ands	r1, r0
 8001bbc:	4203      	tst	r3, r0
 8001bbe:	d00c      	beq.n	8001bda <__aeabi_dmul+0x30a>
 8001bc0:	230f      	movs	r3, #15
 8001bc2:	4003      	ands	r3, r0
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d100      	bne.n	8001bca <__aeabi_dmul+0x2fa>
 8001bc8:	e140      	b.n	8001e4c <__aeabi_dmul+0x57c>
 8001bca:	1d03      	adds	r3, r0, #4
 8001bcc:	4283      	cmp	r3, r0
 8001bce:	41a4      	sbcs	r4, r4
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	4264      	negs	r4, r4
 8001bd4:	0761      	lsls	r1, r4, #29
 8001bd6:	0264      	lsls	r4, r4, #9
 8001bd8:	0b24      	lsrs	r4, r4, #12
 8001bda:	08c2      	lsrs	r2, r0, #3
 8001bdc:	2300      	movs	r3, #0
 8001bde:	430a      	orrs	r2, r1
 8001be0:	e6cc      	b.n	800197c <__aeabi_dmul+0xac>
 8001be2:	46c0      	nop			@ (mov r8, r8)
 8001be4:	000007ff 	.word	0x000007ff
 8001be8:	fffffc01 	.word	0xfffffc01
 8001bec:	000003ff 	.word	0x000003ff
 8001bf0:	feffffff 	.word	0xfeffffff
 8001bf4:	000007fe 	.word	0x000007fe
 8001bf8:	fffffc0d 	.word	0xfffffc0d
 8001bfc:	0000043e 	.word	0x0000043e
 8001c00:	4649      	mov	r1, r9
 8001c02:	464a      	mov	r2, r9
 8001c04:	0409      	lsls	r1, r1, #16
 8001c06:	0c09      	lsrs	r1, r1, #16
 8001c08:	000d      	movs	r5, r1
 8001c0a:	0c16      	lsrs	r6, r2, #16
 8001c0c:	0c02      	lsrs	r2, r0, #16
 8001c0e:	0400      	lsls	r0, r0, #16
 8001c10:	0c00      	lsrs	r0, r0, #16
 8001c12:	4345      	muls	r5, r0
 8001c14:	46ac      	mov	ip, r5
 8001c16:	0005      	movs	r5, r0
 8001c18:	4375      	muls	r5, r6
 8001c1a:	46a8      	mov	r8, r5
 8001c1c:	0015      	movs	r5, r2
 8001c1e:	000f      	movs	r7, r1
 8001c20:	4375      	muls	r5, r6
 8001c22:	9200      	str	r2, [sp, #0]
 8001c24:	9502      	str	r5, [sp, #8]
 8001c26:	002a      	movs	r2, r5
 8001c28:	9d00      	ldr	r5, [sp, #0]
 8001c2a:	436f      	muls	r7, r5
 8001c2c:	4665      	mov	r5, ip
 8001c2e:	0c2d      	lsrs	r5, r5, #16
 8001c30:	46a9      	mov	r9, r5
 8001c32:	4447      	add	r7, r8
 8001c34:	444f      	add	r7, r9
 8001c36:	45b8      	cmp	r8, r7
 8001c38:	d905      	bls.n	8001c46 <__aeabi_dmul+0x376>
 8001c3a:	0015      	movs	r5, r2
 8001c3c:	2280      	movs	r2, #128	@ 0x80
 8001c3e:	0252      	lsls	r2, r2, #9
 8001c40:	4690      	mov	r8, r2
 8001c42:	4445      	add	r5, r8
 8001c44:	9502      	str	r5, [sp, #8]
 8001c46:	0c3d      	lsrs	r5, r7, #16
 8001c48:	9503      	str	r5, [sp, #12]
 8001c4a:	4665      	mov	r5, ip
 8001c4c:	042d      	lsls	r5, r5, #16
 8001c4e:	043f      	lsls	r7, r7, #16
 8001c50:	0c2d      	lsrs	r5, r5, #16
 8001c52:	46ac      	mov	ip, r5
 8001c54:	003d      	movs	r5, r7
 8001c56:	4465      	add	r5, ip
 8001c58:	9504      	str	r5, [sp, #16]
 8001c5a:	0c25      	lsrs	r5, r4, #16
 8001c5c:	0424      	lsls	r4, r4, #16
 8001c5e:	0c24      	lsrs	r4, r4, #16
 8001c60:	46ac      	mov	ip, r5
 8001c62:	0025      	movs	r5, r4
 8001c64:	4375      	muls	r5, r6
 8001c66:	46a8      	mov	r8, r5
 8001c68:	4665      	mov	r5, ip
 8001c6a:	000f      	movs	r7, r1
 8001c6c:	4369      	muls	r1, r5
 8001c6e:	4441      	add	r1, r8
 8001c70:	4689      	mov	r9, r1
 8001c72:	4367      	muls	r7, r4
 8001c74:	0c39      	lsrs	r1, r7, #16
 8001c76:	4449      	add	r1, r9
 8001c78:	436e      	muls	r6, r5
 8001c7a:	4588      	cmp	r8, r1
 8001c7c:	d903      	bls.n	8001c86 <__aeabi_dmul+0x3b6>
 8001c7e:	2280      	movs	r2, #128	@ 0x80
 8001c80:	0252      	lsls	r2, r2, #9
 8001c82:	4690      	mov	r8, r2
 8001c84:	4446      	add	r6, r8
 8001c86:	0c0d      	lsrs	r5, r1, #16
 8001c88:	46a8      	mov	r8, r5
 8001c8a:	0035      	movs	r5, r6
 8001c8c:	4445      	add	r5, r8
 8001c8e:	9505      	str	r5, [sp, #20]
 8001c90:	9d03      	ldr	r5, [sp, #12]
 8001c92:	043f      	lsls	r7, r7, #16
 8001c94:	46a8      	mov	r8, r5
 8001c96:	0c3f      	lsrs	r7, r7, #16
 8001c98:	0409      	lsls	r1, r1, #16
 8001c9a:	19c9      	adds	r1, r1, r7
 8001c9c:	4488      	add	r8, r1
 8001c9e:	4645      	mov	r5, r8
 8001ca0:	9503      	str	r5, [sp, #12]
 8001ca2:	4655      	mov	r5, sl
 8001ca4:	042e      	lsls	r6, r5, #16
 8001ca6:	0c36      	lsrs	r6, r6, #16
 8001ca8:	0c2f      	lsrs	r7, r5, #16
 8001caa:	0035      	movs	r5, r6
 8001cac:	4345      	muls	r5, r0
 8001cae:	4378      	muls	r0, r7
 8001cb0:	4681      	mov	r9, r0
 8001cb2:	0038      	movs	r0, r7
 8001cb4:	46a8      	mov	r8, r5
 8001cb6:	0c2d      	lsrs	r5, r5, #16
 8001cb8:	46aa      	mov	sl, r5
 8001cba:	9a00      	ldr	r2, [sp, #0]
 8001cbc:	4350      	muls	r0, r2
 8001cbe:	4372      	muls	r2, r6
 8001cc0:	444a      	add	r2, r9
 8001cc2:	4452      	add	r2, sl
 8001cc4:	4591      	cmp	r9, r2
 8001cc6:	d903      	bls.n	8001cd0 <__aeabi_dmul+0x400>
 8001cc8:	2580      	movs	r5, #128	@ 0x80
 8001cca:	026d      	lsls	r5, r5, #9
 8001ccc:	46a9      	mov	r9, r5
 8001cce:	4448      	add	r0, r9
 8001cd0:	0c15      	lsrs	r5, r2, #16
 8001cd2:	46a9      	mov	r9, r5
 8001cd4:	4645      	mov	r5, r8
 8001cd6:	042d      	lsls	r5, r5, #16
 8001cd8:	0c2d      	lsrs	r5, r5, #16
 8001cda:	46a8      	mov	r8, r5
 8001cdc:	4665      	mov	r5, ip
 8001cde:	437d      	muls	r5, r7
 8001ce0:	0412      	lsls	r2, r2, #16
 8001ce2:	4448      	add	r0, r9
 8001ce4:	4490      	add	r8, r2
 8001ce6:	46a9      	mov	r9, r5
 8001ce8:	0032      	movs	r2, r6
 8001cea:	4665      	mov	r5, ip
 8001cec:	4362      	muls	r2, r4
 8001cee:	436e      	muls	r6, r5
 8001cf0:	437c      	muls	r4, r7
 8001cf2:	0c17      	lsrs	r7, r2, #16
 8001cf4:	1936      	adds	r6, r6, r4
 8001cf6:	19bf      	adds	r7, r7, r6
 8001cf8:	42bc      	cmp	r4, r7
 8001cfa:	d903      	bls.n	8001d04 <__aeabi_dmul+0x434>
 8001cfc:	2480      	movs	r4, #128	@ 0x80
 8001cfe:	0264      	lsls	r4, r4, #9
 8001d00:	46a4      	mov	ip, r4
 8001d02:	44e1      	add	r9, ip
 8001d04:	9c02      	ldr	r4, [sp, #8]
 8001d06:	9e03      	ldr	r6, [sp, #12]
 8001d08:	46a4      	mov	ip, r4
 8001d0a:	9d05      	ldr	r5, [sp, #20]
 8001d0c:	4466      	add	r6, ip
 8001d0e:	428e      	cmp	r6, r1
 8001d10:	4189      	sbcs	r1, r1
 8001d12:	46ac      	mov	ip, r5
 8001d14:	0412      	lsls	r2, r2, #16
 8001d16:	043c      	lsls	r4, r7, #16
 8001d18:	0c12      	lsrs	r2, r2, #16
 8001d1a:	18a2      	adds	r2, r4, r2
 8001d1c:	4462      	add	r2, ip
 8001d1e:	4249      	negs	r1, r1
 8001d20:	1854      	adds	r4, r2, r1
 8001d22:	4446      	add	r6, r8
 8001d24:	46a4      	mov	ip, r4
 8001d26:	4546      	cmp	r6, r8
 8001d28:	41a4      	sbcs	r4, r4
 8001d2a:	4682      	mov	sl, r0
 8001d2c:	4264      	negs	r4, r4
 8001d2e:	46a0      	mov	r8, r4
 8001d30:	42aa      	cmp	r2, r5
 8001d32:	4192      	sbcs	r2, r2
 8001d34:	458c      	cmp	ip, r1
 8001d36:	4189      	sbcs	r1, r1
 8001d38:	44e2      	add	sl, ip
 8001d3a:	44d0      	add	r8, sl
 8001d3c:	4249      	negs	r1, r1
 8001d3e:	4252      	negs	r2, r2
 8001d40:	430a      	orrs	r2, r1
 8001d42:	45a0      	cmp	r8, r4
 8001d44:	41a4      	sbcs	r4, r4
 8001d46:	4582      	cmp	sl, r0
 8001d48:	4189      	sbcs	r1, r1
 8001d4a:	4264      	negs	r4, r4
 8001d4c:	4249      	negs	r1, r1
 8001d4e:	430c      	orrs	r4, r1
 8001d50:	4641      	mov	r1, r8
 8001d52:	0c3f      	lsrs	r7, r7, #16
 8001d54:	19d2      	adds	r2, r2, r7
 8001d56:	1912      	adds	r2, r2, r4
 8001d58:	0dcc      	lsrs	r4, r1, #23
 8001d5a:	9904      	ldr	r1, [sp, #16]
 8001d5c:	0270      	lsls	r0, r6, #9
 8001d5e:	4308      	orrs	r0, r1
 8001d60:	1e41      	subs	r1, r0, #1
 8001d62:	4188      	sbcs	r0, r1
 8001d64:	4641      	mov	r1, r8
 8001d66:	444a      	add	r2, r9
 8001d68:	0df6      	lsrs	r6, r6, #23
 8001d6a:	0252      	lsls	r2, r2, #9
 8001d6c:	4330      	orrs	r0, r6
 8001d6e:	0249      	lsls	r1, r1, #9
 8001d70:	4314      	orrs	r4, r2
 8001d72:	4308      	orrs	r0, r1
 8001d74:	01d2      	lsls	r2, r2, #7
 8001d76:	d535      	bpl.n	8001de4 <__aeabi_dmul+0x514>
 8001d78:	2201      	movs	r2, #1
 8001d7a:	0843      	lsrs	r3, r0, #1
 8001d7c:	4002      	ands	r2, r0
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	07e0      	lsls	r0, r4, #31
 8001d82:	4318      	orrs	r0, r3
 8001d84:	0864      	lsrs	r4, r4, #1
 8001d86:	e634      	b.n	80019f2 <__aeabi_dmul+0x122>
 8001d88:	9b00      	ldr	r3, [sp, #0]
 8001d8a:	46a2      	mov	sl, r4
 8001d8c:	469b      	mov	fp, r3
 8001d8e:	4681      	mov	r9, r0
 8001d90:	2480      	movs	r4, #128	@ 0x80
 8001d92:	4653      	mov	r3, sl
 8001d94:	0324      	lsls	r4, r4, #12
 8001d96:	431c      	orrs	r4, r3
 8001d98:	0324      	lsls	r4, r4, #12
 8001d9a:	464a      	mov	r2, r9
 8001d9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e58 <__aeabi_dmul+0x588>)
 8001d9e:	0b24      	lsrs	r4, r4, #12
 8001da0:	e5ec      	b.n	800197c <__aeabi_dmul+0xac>
 8001da2:	f000 fca9 	bl	80026f8 <__clzsi2>
 8001da6:	2315      	movs	r3, #21
 8001da8:	469c      	mov	ip, r3
 8001daa:	4484      	add	ip, r0
 8001dac:	0002      	movs	r2, r0
 8001dae:	4663      	mov	r3, ip
 8001db0:	3220      	adds	r2, #32
 8001db2:	2b1c      	cmp	r3, #28
 8001db4:	dc00      	bgt.n	8001db8 <__aeabi_dmul+0x4e8>
 8001db6:	e684      	b.n	8001ac2 <__aeabi_dmul+0x1f2>
 8001db8:	2300      	movs	r3, #0
 8001dba:	4699      	mov	r9, r3
 8001dbc:	0023      	movs	r3, r4
 8001dbe:	3808      	subs	r0, #8
 8001dc0:	4083      	lsls	r3, r0
 8001dc2:	469a      	mov	sl, r3
 8001dc4:	e68e      	b.n	8001ae4 <__aeabi_dmul+0x214>
 8001dc6:	f000 fc97 	bl	80026f8 <__clzsi2>
 8001dca:	0002      	movs	r2, r0
 8001dcc:	0003      	movs	r3, r0
 8001dce:	3215      	adds	r2, #21
 8001dd0:	3320      	adds	r3, #32
 8001dd2:	2a1c      	cmp	r2, #28
 8001dd4:	dc00      	bgt.n	8001dd8 <__aeabi_dmul+0x508>
 8001dd6:	e64e      	b.n	8001a76 <__aeabi_dmul+0x1a6>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	0034      	movs	r4, r6
 8001ddc:	3a08      	subs	r2, #8
 8001dde:	2000      	movs	r0, #0
 8001de0:	4094      	lsls	r4, r2
 8001de2:	e652      	b.n	8001a8a <__aeabi_dmul+0x1ba>
 8001de4:	9301      	str	r3, [sp, #4]
 8001de6:	e604      	b.n	80019f2 <__aeabi_dmul+0x122>
 8001de8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e5c <__aeabi_dmul+0x58c>)
 8001dea:	0021      	movs	r1, r4
 8001dec:	469c      	mov	ip, r3
 8001dee:	0003      	movs	r3, r0
 8001df0:	9d01      	ldr	r5, [sp, #4]
 8001df2:	40d3      	lsrs	r3, r2
 8001df4:	4465      	add	r5, ip
 8001df6:	40a9      	lsls	r1, r5
 8001df8:	4319      	orrs	r1, r3
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	40ab      	lsls	r3, r5
 8001dfe:	1e58      	subs	r0, r3, #1
 8001e00:	4183      	sbcs	r3, r0
 8001e02:	4319      	orrs	r1, r3
 8001e04:	0008      	movs	r0, r1
 8001e06:	40d4      	lsrs	r4, r2
 8001e08:	074b      	lsls	r3, r1, #29
 8001e0a:	d009      	beq.n	8001e20 <__aeabi_dmul+0x550>
 8001e0c:	230f      	movs	r3, #15
 8001e0e:	400b      	ands	r3, r1
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d005      	beq.n	8001e20 <__aeabi_dmul+0x550>
 8001e14:	1d0b      	adds	r3, r1, #4
 8001e16:	428b      	cmp	r3, r1
 8001e18:	4180      	sbcs	r0, r0
 8001e1a:	4240      	negs	r0, r0
 8001e1c:	1824      	adds	r4, r4, r0
 8001e1e:	0018      	movs	r0, r3
 8001e20:	0223      	lsls	r3, r4, #8
 8001e22:	d400      	bmi.n	8001e26 <__aeabi_dmul+0x556>
 8001e24:	e6d6      	b.n	8001bd4 <__aeabi_dmul+0x304>
 8001e26:	2301      	movs	r3, #1
 8001e28:	2400      	movs	r4, #0
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	e5a6      	b.n	800197c <__aeabi_dmul+0xac>
 8001e2e:	290f      	cmp	r1, #15
 8001e30:	d1aa      	bne.n	8001d88 <__aeabi_dmul+0x4b8>
 8001e32:	2380      	movs	r3, #128	@ 0x80
 8001e34:	4652      	mov	r2, sl
 8001e36:	031b      	lsls	r3, r3, #12
 8001e38:	421a      	tst	r2, r3
 8001e3a:	d0a9      	beq.n	8001d90 <__aeabi_dmul+0x4c0>
 8001e3c:	421c      	tst	r4, r3
 8001e3e:	d1a7      	bne.n	8001d90 <__aeabi_dmul+0x4c0>
 8001e40:	431c      	orrs	r4, r3
 8001e42:	9b00      	ldr	r3, [sp, #0]
 8001e44:	0002      	movs	r2, r0
 8001e46:	469b      	mov	fp, r3
 8001e48:	4b03      	ldr	r3, [pc, #12]	@ (8001e58 <__aeabi_dmul+0x588>)
 8001e4a:	e597      	b.n	800197c <__aeabi_dmul+0xac>
 8001e4c:	2400      	movs	r4, #0
 8001e4e:	e6c1      	b.n	8001bd4 <__aeabi_dmul+0x304>
 8001e50:	2400      	movs	r4, #0
 8001e52:	4b01      	ldr	r3, [pc, #4]	@ (8001e58 <__aeabi_dmul+0x588>)
 8001e54:	0022      	movs	r2, r4
 8001e56:	e591      	b.n	800197c <__aeabi_dmul+0xac>
 8001e58:	000007ff 	.word	0x000007ff
 8001e5c:	0000041e 	.word	0x0000041e

08001e60 <__aeabi_dsub>:
 8001e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e62:	464e      	mov	r6, r9
 8001e64:	4645      	mov	r5, r8
 8001e66:	46de      	mov	lr, fp
 8001e68:	4657      	mov	r7, sl
 8001e6a:	b5e0      	push	{r5, r6, r7, lr}
 8001e6c:	b085      	sub	sp, #20
 8001e6e:	9000      	str	r0, [sp, #0]
 8001e70:	9101      	str	r1, [sp, #4]
 8001e72:	030c      	lsls	r4, r1, #12
 8001e74:	004f      	lsls	r7, r1, #1
 8001e76:	0fce      	lsrs	r6, r1, #31
 8001e78:	0a61      	lsrs	r1, r4, #9
 8001e7a:	9c00      	ldr	r4, [sp, #0]
 8001e7c:	46b0      	mov	r8, r6
 8001e7e:	0f64      	lsrs	r4, r4, #29
 8001e80:	430c      	orrs	r4, r1
 8001e82:	9900      	ldr	r1, [sp, #0]
 8001e84:	0d7f      	lsrs	r7, r7, #21
 8001e86:	00c8      	lsls	r0, r1, #3
 8001e88:	0011      	movs	r1, r2
 8001e8a:	001a      	movs	r2, r3
 8001e8c:	031b      	lsls	r3, r3, #12
 8001e8e:	469c      	mov	ip, r3
 8001e90:	9100      	str	r1, [sp, #0]
 8001e92:	9201      	str	r2, [sp, #4]
 8001e94:	0051      	lsls	r1, r2, #1
 8001e96:	0d4b      	lsrs	r3, r1, #21
 8001e98:	4699      	mov	r9, r3
 8001e9a:	9b01      	ldr	r3, [sp, #4]
 8001e9c:	9d00      	ldr	r5, [sp, #0]
 8001e9e:	0fd9      	lsrs	r1, r3, #31
 8001ea0:	4663      	mov	r3, ip
 8001ea2:	0f6a      	lsrs	r2, r5, #29
 8001ea4:	0a5b      	lsrs	r3, r3, #9
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	00ea      	lsls	r2, r5, #3
 8001eaa:	4694      	mov	ip, r2
 8001eac:	4693      	mov	fp, r2
 8001eae:	4ac1      	ldr	r2, [pc, #772]	@ (80021b4 <__aeabi_dsub+0x354>)
 8001eb0:	9003      	str	r0, [sp, #12]
 8001eb2:	9302      	str	r3, [sp, #8]
 8001eb4:	4591      	cmp	r9, r2
 8001eb6:	d100      	bne.n	8001eba <__aeabi_dsub+0x5a>
 8001eb8:	e0cd      	b.n	8002056 <__aeabi_dsub+0x1f6>
 8001eba:	2501      	movs	r5, #1
 8001ebc:	4069      	eors	r1, r5
 8001ebe:	464d      	mov	r5, r9
 8001ec0:	1b7d      	subs	r5, r7, r5
 8001ec2:	46aa      	mov	sl, r5
 8001ec4:	428e      	cmp	r6, r1
 8001ec6:	d100      	bne.n	8001eca <__aeabi_dsub+0x6a>
 8001ec8:	e080      	b.n	8001fcc <__aeabi_dsub+0x16c>
 8001eca:	2d00      	cmp	r5, #0
 8001ecc:	dc00      	bgt.n	8001ed0 <__aeabi_dsub+0x70>
 8001ece:	e335      	b.n	800253c <__aeabi_dsub+0x6dc>
 8001ed0:	4649      	mov	r1, r9
 8001ed2:	2900      	cmp	r1, #0
 8001ed4:	d100      	bne.n	8001ed8 <__aeabi_dsub+0x78>
 8001ed6:	e0df      	b.n	8002098 <__aeabi_dsub+0x238>
 8001ed8:	4297      	cmp	r7, r2
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x7e>
 8001edc:	e194      	b.n	8002208 <__aeabi_dsub+0x3a8>
 8001ede:	4652      	mov	r2, sl
 8001ee0:	2501      	movs	r5, #1
 8001ee2:	2a38      	cmp	r2, #56	@ 0x38
 8001ee4:	dc19      	bgt.n	8001f1a <__aeabi_dsub+0xba>
 8001ee6:	2280      	movs	r2, #128	@ 0x80
 8001ee8:	9b02      	ldr	r3, [sp, #8]
 8001eea:	0412      	lsls	r2, r2, #16
 8001eec:	4313      	orrs	r3, r2
 8001eee:	9302      	str	r3, [sp, #8]
 8001ef0:	4652      	mov	r2, sl
 8001ef2:	2a1f      	cmp	r2, #31
 8001ef4:	dd00      	ble.n	8001ef8 <__aeabi_dsub+0x98>
 8001ef6:	e1e3      	b.n	80022c0 <__aeabi_dsub+0x460>
 8001ef8:	4653      	mov	r3, sl
 8001efa:	2220      	movs	r2, #32
 8001efc:	4661      	mov	r1, ip
 8001efe:	9d02      	ldr	r5, [sp, #8]
 8001f00:	1ad2      	subs	r2, r2, r3
 8001f02:	4095      	lsls	r5, r2
 8001f04:	40d9      	lsrs	r1, r3
 8001f06:	430d      	orrs	r5, r1
 8001f08:	4661      	mov	r1, ip
 8001f0a:	4091      	lsls	r1, r2
 8001f0c:	000a      	movs	r2, r1
 8001f0e:	1e51      	subs	r1, r2, #1
 8001f10:	418a      	sbcs	r2, r1
 8001f12:	4315      	orrs	r5, r2
 8001f14:	9a02      	ldr	r2, [sp, #8]
 8001f16:	40da      	lsrs	r2, r3
 8001f18:	1aa4      	subs	r4, r4, r2
 8001f1a:	1b45      	subs	r5, r0, r5
 8001f1c:	42a8      	cmp	r0, r5
 8001f1e:	4180      	sbcs	r0, r0
 8001f20:	4240      	negs	r0, r0
 8001f22:	1a24      	subs	r4, r4, r0
 8001f24:	0223      	lsls	r3, r4, #8
 8001f26:	d400      	bmi.n	8001f2a <__aeabi_dsub+0xca>
 8001f28:	e13d      	b.n	80021a6 <__aeabi_dsub+0x346>
 8001f2a:	0264      	lsls	r4, r4, #9
 8001f2c:	0a64      	lsrs	r4, r4, #9
 8001f2e:	2c00      	cmp	r4, #0
 8001f30:	d100      	bne.n	8001f34 <__aeabi_dsub+0xd4>
 8001f32:	e147      	b.n	80021c4 <__aeabi_dsub+0x364>
 8001f34:	0020      	movs	r0, r4
 8001f36:	f000 fbdf 	bl	80026f8 <__clzsi2>
 8001f3a:	0003      	movs	r3, r0
 8001f3c:	3b08      	subs	r3, #8
 8001f3e:	2120      	movs	r1, #32
 8001f40:	0028      	movs	r0, r5
 8001f42:	1aca      	subs	r2, r1, r3
 8001f44:	40d0      	lsrs	r0, r2
 8001f46:	409c      	lsls	r4, r3
 8001f48:	0002      	movs	r2, r0
 8001f4a:	409d      	lsls	r5, r3
 8001f4c:	4322      	orrs	r2, r4
 8001f4e:	429f      	cmp	r7, r3
 8001f50:	dd00      	ble.n	8001f54 <__aeabi_dsub+0xf4>
 8001f52:	e177      	b.n	8002244 <__aeabi_dsub+0x3e4>
 8001f54:	1bd8      	subs	r0, r3, r7
 8001f56:	3001      	adds	r0, #1
 8001f58:	1a09      	subs	r1, r1, r0
 8001f5a:	002c      	movs	r4, r5
 8001f5c:	408d      	lsls	r5, r1
 8001f5e:	40c4      	lsrs	r4, r0
 8001f60:	1e6b      	subs	r3, r5, #1
 8001f62:	419d      	sbcs	r5, r3
 8001f64:	0013      	movs	r3, r2
 8001f66:	40c2      	lsrs	r2, r0
 8001f68:	408b      	lsls	r3, r1
 8001f6a:	4325      	orrs	r5, r4
 8001f6c:	2700      	movs	r7, #0
 8001f6e:	0014      	movs	r4, r2
 8001f70:	431d      	orrs	r5, r3
 8001f72:	076b      	lsls	r3, r5, #29
 8001f74:	d009      	beq.n	8001f8a <__aeabi_dsub+0x12a>
 8001f76:	230f      	movs	r3, #15
 8001f78:	402b      	ands	r3, r5
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d005      	beq.n	8001f8a <__aeabi_dsub+0x12a>
 8001f7e:	1d2b      	adds	r3, r5, #4
 8001f80:	42ab      	cmp	r3, r5
 8001f82:	41ad      	sbcs	r5, r5
 8001f84:	426d      	negs	r5, r5
 8001f86:	1964      	adds	r4, r4, r5
 8001f88:	001d      	movs	r5, r3
 8001f8a:	0223      	lsls	r3, r4, #8
 8001f8c:	d400      	bmi.n	8001f90 <__aeabi_dsub+0x130>
 8001f8e:	e140      	b.n	8002212 <__aeabi_dsub+0x3b2>
 8001f90:	4a88      	ldr	r2, [pc, #544]	@ (80021b4 <__aeabi_dsub+0x354>)
 8001f92:	3701      	adds	r7, #1
 8001f94:	4297      	cmp	r7, r2
 8001f96:	d100      	bne.n	8001f9a <__aeabi_dsub+0x13a>
 8001f98:	e101      	b.n	800219e <__aeabi_dsub+0x33e>
 8001f9a:	2601      	movs	r6, #1
 8001f9c:	4643      	mov	r3, r8
 8001f9e:	4986      	ldr	r1, [pc, #536]	@ (80021b8 <__aeabi_dsub+0x358>)
 8001fa0:	08ed      	lsrs	r5, r5, #3
 8001fa2:	4021      	ands	r1, r4
 8001fa4:	074a      	lsls	r2, r1, #29
 8001fa6:	432a      	orrs	r2, r5
 8001fa8:	057c      	lsls	r4, r7, #21
 8001faa:	024d      	lsls	r5, r1, #9
 8001fac:	0b2d      	lsrs	r5, r5, #12
 8001fae:	0d64      	lsrs	r4, r4, #21
 8001fb0:	401e      	ands	r6, r3
 8001fb2:	0524      	lsls	r4, r4, #20
 8001fb4:	432c      	orrs	r4, r5
 8001fb6:	07f6      	lsls	r6, r6, #31
 8001fb8:	4334      	orrs	r4, r6
 8001fba:	0010      	movs	r0, r2
 8001fbc:	0021      	movs	r1, r4
 8001fbe:	b005      	add	sp, #20
 8001fc0:	bcf0      	pop	{r4, r5, r6, r7}
 8001fc2:	46bb      	mov	fp, r7
 8001fc4:	46b2      	mov	sl, r6
 8001fc6:	46a9      	mov	r9, r5
 8001fc8:	46a0      	mov	r8, r4
 8001fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fcc:	2d00      	cmp	r5, #0
 8001fce:	dc00      	bgt.n	8001fd2 <__aeabi_dsub+0x172>
 8001fd0:	e2d0      	b.n	8002574 <__aeabi_dsub+0x714>
 8001fd2:	4649      	mov	r1, r9
 8001fd4:	2900      	cmp	r1, #0
 8001fd6:	d000      	beq.n	8001fda <__aeabi_dsub+0x17a>
 8001fd8:	e0d4      	b.n	8002184 <__aeabi_dsub+0x324>
 8001fda:	4661      	mov	r1, ip
 8001fdc:	9b02      	ldr	r3, [sp, #8]
 8001fde:	4319      	orrs	r1, r3
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x184>
 8001fe2:	e12b      	b.n	800223c <__aeabi_dsub+0x3dc>
 8001fe4:	1e69      	subs	r1, r5, #1
 8001fe6:	2d01      	cmp	r5, #1
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x18c>
 8001fea:	e1d9      	b.n	80023a0 <__aeabi_dsub+0x540>
 8001fec:	4295      	cmp	r5, r2
 8001fee:	d100      	bne.n	8001ff2 <__aeabi_dsub+0x192>
 8001ff0:	e10a      	b.n	8002208 <__aeabi_dsub+0x3a8>
 8001ff2:	2501      	movs	r5, #1
 8001ff4:	2938      	cmp	r1, #56	@ 0x38
 8001ff6:	dc17      	bgt.n	8002028 <__aeabi_dsub+0x1c8>
 8001ff8:	468a      	mov	sl, r1
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	2b1f      	cmp	r3, #31
 8001ffe:	dd00      	ble.n	8002002 <__aeabi_dsub+0x1a2>
 8002000:	e1e7      	b.n	80023d2 <__aeabi_dsub+0x572>
 8002002:	2220      	movs	r2, #32
 8002004:	1ad2      	subs	r2, r2, r3
 8002006:	9b02      	ldr	r3, [sp, #8]
 8002008:	4661      	mov	r1, ip
 800200a:	4093      	lsls	r3, r2
 800200c:	001d      	movs	r5, r3
 800200e:	4653      	mov	r3, sl
 8002010:	40d9      	lsrs	r1, r3
 8002012:	4663      	mov	r3, ip
 8002014:	4093      	lsls	r3, r2
 8002016:	001a      	movs	r2, r3
 8002018:	430d      	orrs	r5, r1
 800201a:	1e51      	subs	r1, r2, #1
 800201c:	418a      	sbcs	r2, r1
 800201e:	4653      	mov	r3, sl
 8002020:	4315      	orrs	r5, r2
 8002022:	9a02      	ldr	r2, [sp, #8]
 8002024:	40da      	lsrs	r2, r3
 8002026:	18a4      	adds	r4, r4, r2
 8002028:	182d      	adds	r5, r5, r0
 800202a:	4285      	cmp	r5, r0
 800202c:	4180      	sbcs	r0, r0
 800202e:	4240      	negs	r0, r0
 8002030:	1824      	adds	r4, r4, r0
 8002032:	0223      	lsls	r3, r4, #8
 8002034:	d400      	bmi.n	8002038 <__aeabi_dsub+0x1d8>
 8002036:	e0b6      	b.n	80021a6 <__aeabi_dsub+0x346>
 8002038:	4b5e      	ldr	r3, [pc, #376]	@ (80021b4 <__aeabi_dsub+0x354>)
 800203a:	3701      	adds	r7, #1
 800203c:	429f      	cmp	r7, r3
 800203e:	d100      	bne.n	8002042 <__aeabi_dsub+0x1e2>
 8002040:	e0ad      	b.n	800219e <__aeabi_dsub+0x33e>
 8002042:	2101      	movs	r1, #1
 8002044:	4b5c      	ldr	r3, [pc, #368]	@ (80021b8 <__aeabi_dsub+0x358>)
 8002046:	086a      	lsrs	r2, r5, #1
 8002048:	401c      	ands	r4, r3
 800204a:	4029      	ands	r1, r5
 800204c:	430a      	orrs	r2, r1
 800204e:	07e5      	lsls	r5, r4, #31
 8002050:	4315      	orrs	r5, r2
 8002052:	0864      	lsrs	r4, r4, #1
 8002054:	e78d      	b.n	8001f72 <__aeabi_dsub+0x112>
 8002056:	4a59      	ldr	r2, [pc, #356]	@ (80021bc <__aeabi_dsub+0x35c>)
 8002058:	9b02      	ldr	r3, [sp, #8]
 800205a:	4692      	mov	sl, r2
 800205c:	4662      	mov	r2, ip
 800205e:	44ba      	add	sl, r7
 8002060:	431a      	orrs	r2, r3
 8002062:	d02c      	beq.n	80020be <__aeabi_dsub+0x25e>
 8002064:	428e      	cmp	r6, r1
 8002066:	d02e      	beq.n	80020c6 <__aeabi_dsub+0x266>
 8002068:	4652      	mov	r2, sl
 800206a:	2a00      	cmp	r2, #0
 800206c:	d060      	beq.n	8002130 <__aeabi_dsub+0x2d0>
 800206e:	2f00      	cmp	r7, #0
 8002070:	d100      	bne.n	8002074 <__aeabi_dsub+0x214>
 8002072:	e0db      	b.n	800222c <__aeabi_dsub+0x3cc>
 8002074:	4663      	mov	r3, ip
 8002076:	000e      	movs	r6, r1
 8002078:	9c02      	ldr	r4, [sp, #8]
 800207a:	08d8      	lsrs	r0, r3, #3
 800207c:	0762      	lsls	r2, r4, #29
 800207e:	4302      	orrs	r2, r0
 8002080:	08e4      	lsrs	r4, r4, #3
 8002082:	0013      	movs	r3, r2
 8002084:	4323      	orrs	r3, r4
 8002086:	d100      	bne.n	800208a <__aeabi_dsub+0x22a>
 8002088:	e254      	b.n	8002534 <__aeabi_dsub+0x6d4>
 800208a:	2580      	movs	r5, #128	@ 0x80
 800208c:	032d      	lsls	r5, r5, #12
 800208e:	4325      	orrs	r5, r4
 8002090:	032d      	lsls	r5, r5, #12
 8002092:	4c48      	ldr	r4, [pc, #288]	@ (80021b4 <__aeabi_dsub+0x354>)
 8002094:	0b2d      	lsrs	r5, r5, #12
 8002096:	e78c      	b.n	8001fb2 <__aeabi_dsub+0x152>
 8002098:	4661      	mov	r1, ip
 800209a:	9b02      	ldr	r3, [sp, #8]
 800209c:	4319      	orrs	r1, r3
 800209e:	d100      	bne.n	80020a2 <__aeabi_dsub+0x242>
 80020a0:	e0cc      	b.n	800223c <__aeabi_dsub+0x3dc>
 80020a2:	0029      	movs	r1, r5
 80020a4:	3901      	subs	r1, #1
 80020a6:	2d01      	cmp	r5, #1
 80020a8:	d100      	bne.n	80020ac <__aeabi_dsub+0x24c>
 80020aa:	e188      	b.n	80023be <__aeabi_dsub+0x55e>
 80020ac:	4295      	cmp	r5, r2
 80020ae:	d100      	bne.n	80020b2 <__aeabi_dsub+0x252>
 80020b0:	e0aa      	b.n	8002208 <__aeabi_dsub+0x3a8>
 80020b2:	2501      	movs	r5, #1
 80020b4:	2938      	cmp	r1, #56	@ 0x38
 80020b6:	dd00      	ble.n	80020ba <__aeabi_dsub+0x25a>
 80020b8:	e72f      	b.n	8001f1a <__aeabi_dsub+0xba>
 80020ba:	468a      	mov	sl, r1
 80020bc:	e718      	b.n	8001ef0 <__aeabi_dsub+0x90>
 80020be:	2201      	movs	r2, #1
 80020c0:	4051      	eors	r1, r2
 80020c2:	428e      	cmp	r6, r1
 80020c4:	d1d0      	bne.n	8002068 <__aeabi_dsub+0x208>
 80020c6:	4653      	mov	r3, sl
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d100      	bne.n	80020ce <__aeabi_dsub+0x26e>
 80020cc:	e0be      	b.n	800224c <__aeabi_dsub+0x3ec>
 80020ce:	2f00      	cmp	r7, #0
 80020d0:	d000      	beq.n	80020d4 <__aeabi_dsub+0x274>
 80020d2:	e138      	b.n	8002346 <__aeabi_dsub+0x4e6>
 80020d4:	46ca      	mov	sl, r9
 80020d6:	0022      	movs	r2, r4
 80020d8:	4302      	orrs	r2, r0
 80020da:	d100      	bne.n	80020de <__aeabi_dsub+0x27e>
 80020dc:	e1e2      	b.n	80024a4 <__aeabi_dsub+0x644>
 80020de:	4653      	mov	r3, sl
 80020e0:	1e59      	subs	r1, r3, #1
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d100      	bne.n	80020e8 <__aeabi_dsub+0x288>
 80020e6:	e20d      	b.n	8002504 <__aeabi_dsub+0x6a4>
 80020e8:	4a32      	ldr	r2, [pc, #200]	@ (80021b4 <__aeabi_dsub+0x354>)
 80020ea:	4592      	cmp	sl, r2
 80020ec:	d100      	bne.n	80020f0 <__aeabi_dsub+0x290>
 80020ee:	e1d2      	b.n	8002496 <__aeabi_dsub+0x636>
 80020f0:	2701      	movs	r7, #1
 80020f2:	2938      	cmp	r1, #56	@ 0x38
 80020f4:	dc13      	bgt.n	800211e <__aeabi_dsub+0x2be>
 80020f6:	291f      	cmp	r1, #31
 80020f8:	dd00      	ble.n	80020fc <__aeabi_dsub+0x29c>
 80020fa:	e1ee      	b.n	80024da <__aeabi_dsub+0x67a>
 80020fc:	2220      	movs	r2, #32
 80020fe:	9b02      	ldr	r3, [sp, #8]
 8002100:	1a52      	subs	r2, r2, r1
 8002102:	0025      	movs	r5, r4
 8002104:	0007      	movs	r7, r0
 8002106:	469a      	mov	sl, r3
 8002108:	40cc      	lsrs	r4, r1
 800210a:	4090      	lsls	r0, r2
 800210c:	4095      	lsls	r5, r2
 800210e:	40cf      	lsrs	r7, r1
 8002110:	44a2      	add	sl, r4
 8002112:	1e42      	subs	r2, r0, #1
 8002114:	4190      	sbcs	r0, r2
 8002116:	4653      	mov	r3, sl
 8002118:	432f      	orrs	r7, r5
 800211a:	4307      	orrs	r7, r0
 800211c:	9302      	str	r3, [sp, #8]
 800211e:	003d      	movs	r5, r7
 8002120:	4465      	add	r5, ip
 8002122:	4565      	cmp	r5, ip
 8002124:	4192      	sbcs	r2, r2
 8002126:	9b02      	ldr	r3, [sp, #8]
 8002128:	4252      	negs	r2, r2
 800212a:	464f      	mov	r7, r9
 800212c:	18d4      	adds	r4, r2, r3
 800212e:	e780      	b.n	8002032 <__aeabi_dsub+0x1d2>
 8002130:	4a23      	ldr	r2, [pc, #140]	@ (80021c0 <__aeabi_dsub+0x360>)
 8002132:	1c7d      	adds	r5, r7, #1
 8002134:	4215      	tst	r5, r2
 8002136:	d000      	beq.n	800213a <__aeabi_dsub+0x2da>
 8002138:	e0aa      	b.n	8002290 <__aeabi_dsub+0x430>
 800213a:	4662      	mov	r2, ip
 800213c:	0025      	movs	r5, r4
 800213e:	9b02      	ldr	r3, [sp, #8]
 8002140:	4305      	orrs	r5, r0
 8002142:	431a      	orrs	r2, r3
 8002144:	2f00      	cmp	r7, #0
 8002146:	d000      	beq.n	800214a <__aeabi_dsub+0x2ea>
 8002148:	e0f5      	b.n	8002336 <__aeabi_dsub+0x4d6>
 800214a:	2d00      	cmp	r5, #0
 800214c:	d100      	bne.n	8002150 <__aeabi_dsub+0x2f0>
 800214e:	e16b      	b.n	8002428 <__aeabi_dsub+0x5c8>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d100      	bne.n	8002156 <__aeabi_dsub+0x2f6>
 8002154:	e152      	b.n	80023fc <__aeabi_dsub+0x59c>
 8002156:	4663      	mov	r3, ip
 8002158:	1ac5      	subs	r5, r0, r3
 800215a:	9b02      	ldr	r3, [sp, #8]
 800215c:	1ae2      	subs	r2, r4, r3
 800215e:	42a8      	cmp	r0, r5
 8002160:	419b      	sbcs	r3, r3
 8002162:	425b      	negs	r3, r3
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	021a      	lsls	r2, r3, #8
 8002168:	d400      	bmi.n	800216c <__aeabi_dsub+0x30c>
 800216a:	e1d5      	b.n	8002518 <__aeabi_dsub+0x6b8>
 800216c:	4663      	mov	r3, ip
 800216e:	1a1d      	subs	r5, r3, r0
 8002170:	45ac      	cmp	ip, r5
 8002172:	4192      	sbcs	r2, r2
 8002174:	2601      	movs	r6, #1
 8002176:	9b02      	ldr	r3, [sp, #8]
 8002178:	4252      	negs	r2, r2
 800217a:	1b1c      	subs	r4, r3, r4
 800217c:	4688      	mov	r8, r1
 800217e:	1aa4      	subs	r4, r4, r2
 8002180:	400e      	ands	r6, r1
 8002182:	e6f6      	b.n	8001f72 <__aeabi_dsub+0x112>
 8002184:	4297      	cmp	r7, r2
 8002186:	d03f      	beq.n	8002208 <__aeabi_dsub+0x3a8>
 8002188:	4652      	mov	r2, sl
 800218a:	2501      	movs	r5, #1
 800218c:	2a38      	cmp	r2, #56	@ 0x38
 800218e:	dd00      	ble.n	8002192 <__aeabi_dsub+0x332>
 8002190:	e74a      	b.n	8002028 <__aeabi_dsub+0x1c8>
 8002192:	2280      	movs	r2, #128	@ 0x80
 8002194:	9b02      	ldr	r3, [sp, #8]
 8002196:	0412      	lsls	r2, r2, #16
 8002198:	4313      	orrs	r3, r2
 800219a:	9302      	str	r3, [sp, #8]
 800219c:	e72d      	b.n	8001ffa <__aeabi_dsub+0x19a>
 800219e:	003c      	movs	r4, r7
 80021a0:	2500      	movs	r5, #0
 80021a2:	2200      	movs	r2, #0
 80021a4:	e705      	b.n	8001fb2 <__aeabi_dsub+0x152>
 80021a6:	2307      	movs	r3, #7
 80021a8:	402b      	ands	r3, r5
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d000      	beq.n	80021b0 <__aeabi_dsub+0x350>
 80021ae:	e6e2      	b.n	8001f76 <__aeabi_dsub+0x116>
 80021b0:	e06b      	b.n	800228a <__aeabi_dsub+0x42a>
 80021b2:	46c0      	nop			@ (mov r8, r8)
 80021b4:	000007ff 	.word	0x000007ff
 80021b8:	ff7fffff 	.word	0xff7fffff
 80021bc:	fffff801 	.word	0xfffff801
 80021c0:	000007fe 	.word	0x000007fe
 80021c4:	0028      	movs	r0, r5
 80021c6:	f000 fa97 	bl	80026f8 <__clzsi2>
 80021ca:	0003      	movs	r3, r0
 80021cc:	3318      	adds	r3, #24
 80021ce:	2b1f      	cmp	r3, #31
 80021d0:	dc00      	bgt.n	80021d4 <__aeabi_dsub+0x374>
 80021d2:	e6b4      	b.n	8001f3e <__aeabi_dsub+0xde>
 80021d4:	002a      	movs	r2, r5
 80021d6:	3808      	subs	r0, #8
 80021d8:	4082      	lsls	r2, r0
 80021da:	429f      	cmp	r7, r3
 80021dc:	dd00      	ble.n	80021e0 <__aeabi_dsub+0x380>
 80021de:	e0b9      	b.n	8002354 <__aeabi_dsub+0x4f4>
 80021e0:	1bdb      	subs	r3, r3, r7
 80021e2:	1c58      	adds	r0, r3, #1
 80021e4:	281f      	cmp	r0, #31
 80021e6:	dc00      	bgt.n	80021ea <__aeabi_dsub+0x38a>
 80021e8:	e1a0      	b.n	800252c <__aeabi_dsub+0x6cc>
 80021ea:	0015      	movs	r5, r2
 80021ec:	3b1f      	subs	r3, #31
 80021ee:	40dd      	lsrs	r5, r3
 80021f0:	2820      	cmp	r0, #32
 80021f2:	d005      	beq.n	8002200 <__aeabi_dsub+0x3a0>
 80021f4:	2340      	movs	r3, #64	@ 0x40
 80021f6:	1a1b      	subs	r3, r3, r0
 80021f8:	409a      	lsls	r2, r3
 80021fa:	1e53      	subs	r3, r2, #1
 80021fc:	419a      	sbcs	r2, r3
 80021fe:	4315      	orrs	r5, r2
 8002200:	2307      	movs	r3, #7
 8002202:	2700      	movs	r7, #0
 8002204:	402b      	ands	r3, r5
 8002206:	e7d0      	b.n	80021aa <__aeabi_dsub+0x34a>
 8002208:	08c0      	lsrs	r0, r0, #3
 800220a:	0762      	lsls	r2, r4, #29
 800220c:	4302      	orrs	r2, r0
 800220e:	08e4      	lsrs	r4, r4, #3
 8002210:	e737      	b.n	8002082 <__aeabi_dsub+0x222>
 8002212:	08ea      	lsrs	r2, r5, #3
 8002214:	0763      	lsls	r3, r4, #29
 8002216:	431a      	orrs	r2, r3
 8002218:	4bd3      	ldr	r3, [pc, #844]	@ (8002568 <__aeabi_dsub+0x708>)
 800221a:	08e4      	lsrs	r4, r4, #3
 800221c:	429f      	cmp	r7, r3
 800221e:	d100      	bne.n	8002222 <__aeabi_dsub+0x3c2>
 8002220:	e72f      	b.n	8002082 <__aeabi_dsub+0x222>
 8002222:	0324      	lsls	r4, r4, #12
 8002224:	0b25      	lsrs	r5, r4, #12
 8002226:	057c      	lsls	r4, r7, #21
 8002228:	0d64      	lsrs	r4, r4, #21
 800222a:	e6c2      	b.n	8001fb2 <__aeabi_dsub+0x152>
 800222c:	46ca      	mov	sl, r9
 800222e:	0022      	movs	r2, r4
 8002230:	4302      	orrs	r2, r0
 8002232:	d158      	bne.n	80022e6 <__aeabi_dsub+0x486>
 8002234:	4663      	mov	r3, ip
 8002236:	000e      	movs	r6, r1
 8002238:	9c02      	ldr	r4, [sp, #8]
 800223a:	9303      	str	r3, [sp, #12]
 800223c:	9b03      	ldr	r3, [sp, #12]
 800223e:	4657      	mov	r7, sl
 8002240:	08da      	lsrs	r2, r3, #3
 8002242:	e7e7      	b.n	8002214 <__aeabi_dsub+0x3b4>
 8002244:	4cc9      	ldr	r4, [pc, #804]	@ (800256c <__aeabi_dsub+0x70c>)
 8002246:	1aff      	subs	r7, r7, r3
 8002248:	4014      	ands	r4, r2
 800224a:	e692      	b.n	8001f72 <__aeabi_dsub+0x112>
 800224c:	4dc8      	ldr	r5, [pc, #800]	@ (8002570 <__aeabi_dsub+0x710>)
 800224e:	1c7a      	adds	r2, r7, #1
 8002250:	422a      	tst	r2, r5
 8002252:	d000      	beq.n	8002256 <__aeabi_dsub+0x3f6>
 8002254:	e084      	b.n	8002360 <__aeabi_dsub+0x500>
 8002256:	0022      	movs	r2, r4
 8002258:	4302      	orrs	r2, r0
 800225a:	2f00      	cmp	r7, #0
 800225c:	d000      	beq.n	8002260 <__aeabi_dsub+0x400>
 800225e:	e0ef      	b.n	8002440 <__aeabi_dsub+0x5e0>
 8002260:	2a00      	cmp	r2, #0
 8002262:	d100      	bne.n	8002266 <__aeabi_dsub+0x406>
 8002264:	e0e5      	b.n	8002432 <__aeabi_dsub+0x5d2>
 8002266:	4662      	mov	r2, ip
 8002268:	9902      	ldr	r1, [sp, #8]
 800226a:	430a      	orrs	r2, r1
 800226c:	d100      	bne.n	8002270 <__aeabi_dsub+0x410>
 800226e:	e0c5      	b.n	80023fc <__aeabi_dsub+0x59c>
 8002270:	4663      	mov	r3, ip
 8002272:	18c5      	adds	r5, r0, r3
 8002274:	468c      	mov	ip, r1
 8002276:	4285      	cmp	r5, r0
 8002278:	4180      	sbcs	r0, r0
 800227a:	4464      	add	r4, ip
 800227c:	4240      	negs	r0, r0
 800227e:	1824      	adds	r4, r4, r0
 8002280:	0223      	lsls	r3, r4, #8
 8002282:	d502      	bpl.n	800228a <__aeabi_dsub+0x42a>
 8002284:	4bb9      	ldr	r3, [pc, #740]	@ (800256c <__aeabi_dsub+0x70c>)
 8002286:	3701      	adds	r7, #1
 8002288:	401c      	ands	r4, r3
 800228a:	46ba      	mov	sl, r7
 800228c:	9503      	str	r5, [sp, #12]
 800228e:	e7d5      	b.n	800223c <__aeabi_dsub+0x3dc>
 8002290:	4662      	mov	r2, ip
 8002292:	1a85      	subs	r5, r0, r2
 8002294:	42a8      	cmp	r0, r5
 8002296:	4192      	sbcs	r2, r2
 8002298:	4252      	negs	r2, r2
 800229a:	4691      	mov	r9, r2
 800229c:	9b02      	ldr	r3, [sp, #8]
 800229e:	1ae3      	subs	r3, r4, r3
 80022a0:	001a      	movs	r2, r3
 80022a2:	464b      	mov	r3, r9
 80022a4:	1ad2      	subs	r2, r2, r3
 80022a6:	0013      	movs	r3, r2
 80022a8:	4691      	mov	r9, r2
 80022aa:	021a      	lsls	r2, r3, #8
 80022ac:	d46c      	bmi.n	8002388 <__aeabi_dsub+0x528>
 80022ae:	464a      	mov	r2, r9
 80022b0:	464c      	mov	r4, r9
 80022b2:	432a      	orrs	r2, r5
 80022b4:	d000      	beq.n	80022b8 <__aeabi_dsub+0x458>
 80022b6:	e63a      	b.n	8001f2e <__aeabi_dsub+0xce>
 80022b8:	2600      	movs	r6, #0
 80022ba:	2400      	movs	r4, #0
 80022bc:	2500      	movs	r5, #0
 80022be:	e678      	b.n	8001fb2 <__aeabi_dsub+0x152>
 80022c0:	9902      	ldr	r1, [sp, #8]
 80022c2:	4653      	mov	r3, sl
 80022c4:	000d      	movs	r5, r1
 80022c6:	3a20      	subs	r2, #32
 80022c8:	40d5      	lsrs	r5, r2
 80022ca:	2b20      	cmp	r3, #32
 80022cc:	d006      	beq.n	80022dc <__aeabi_dsub+0x47c>
 80022ce:	2240      	movs	r2, #64	@ 0x40
 80022d0:	1ad2      	subs	r2, r2, r3
 80022d2:	000b      	movs	r3, r1
 80022d4:	4093      	lsls	r3, r2
 80022d6:	4662      	mov	r2, ip
 80022d8:	431a      	orrs	r2, r3
 80022da:	4693      	mov	fp, r2
 80022dc:	465b      	mov	r3, fp
 80022de:	1e5a      	subs	r2, r3, #1
 80022e0:	4193      	sbcs	r3, r2
 80022e2:	431d      	orrs	r5, r3
 80022e4:	e619      	b.n	8001f1a <__aeabi_dsub+0xba>
 80022e6:	4653      	mov	r3, sl
 80022e8:	1e5a      	subs	r2, r3, #1
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d100      	bne.n	80022f0 <__aeabi_dsub+0x490>
 80022ee:	e0c6      	b.n	800247e <__aeabi_dsub+0x61e>
 80022f0:	4e9d      	ldr	r6, [pc, #628]	@ (8002568 <__aeabi_dsub+0x708>)
 80022f2:	45b2      	cmp	sl, r6
 80022f4:	d100      	bne.n	80022f8 <__aeabi_dsub+0x498>
 80022f6:	e6bd      	b.n	8002074 <__aeabi_dsub+0x214>
 80022f8:	4688      	mov	r8, r1
 80022fa:	000e      	movs	r6, r1
 80022fc:	2501      	movs	r5, #1
 80022fe:	2a38      	cmp	r2, #56	@ 0x38
 8002300:	dc10      	bgt.n	8002324 <__aeabi_dsub+0x4c4>
 8002302:	2a1f      	cmp	r2, #31
 8002304:	dc7f      	bgt.n	8002406 <__aeabi_dsub+0x5a6>
 8002306:	2120      	movs	r1, #32
 8002308:	0025      	movs	r5, r4
 800230a:	1a89      	subs	r1, r1, r2
 800230c:	0007      	movs	r7, r0
 800230e:	4088      	lsls	r0, r1
 8002310:	408d      	lsls	r5, r1
 8002312:	40d7      	lsrs	r7, r2
 8002314:	40d4      	lsrs	r4, r2
 8002316:	1e41      	subs	r1, r0, #1
 8002318:	4188      	sbcs	r0, r1
 800231a:	9b02      	ldr	r3, [sp, #8]
 800231c:	433d      	orrs	r5, r7
 800231e:	1b1b      	subs	r3, r3, r4
 8002320:	4305      	orrs	r5, r0
 8002322:	9302      	str	r3, [sp, #8]
 8002324:	4662      	mov	r2, ip
 8002326:	1b55      	subs	r5, r2, r5
 8002328:	45ac      	cmp	ip, r5
 800232a:	4192      	sbcs	r2, r2
 800232c:	9b02      	ldr	r3, [sp, #8]
 800232e:	4252      	negs	r2, r2
 8002330:	464f      	mov	r7, r9
 8002332:	1a9c      	subs	r4, r3, r2
 8002334:	e5f6      	b.n	8001f24 <__aeabi_dsub+0xc4>
 8002336:	2d00      	cmp	r5, #0
 8002338:	d000      	beq.n	800233c <__aeabi_dsub+0x4dc>
 800233a:	e0b7      	b.n	80024ac <__aeabi_dsub+0x64c>
 800233c:	2a00      	cmp	r2, #0
 800233e:	d100      	bne.n	8002342 <__aeabi_dsub+0x4e2>
 8002340:	e0f0      	b.n	8002524 <__aeabi_dsub+0x6c4>
 8002342:	2601      	movs	r6, #1
 8002344:	400e      	ands	r6, r1
 8002346:	4663      	mov	r3, ip
 8002348:	9802      	ldr	r0, [sp, #8]
 800234a:	08d9      	lsrs	r1, r3, #3
 800234c:	0742      	lsls	r2, r0, #29
 800234e:	430a      	orrs	r2, r1
 8002350:	08c4      	lsrs	r4, r0, #3
 8002352:	e696      	b.n	8002082 <__aeabi_dsub+0x222>
 8002354:	4c85      	ldr	r4, [pc, #532]	@ (800256c <__aeabi_dsub+0x70c>)
 8002356:	1aff      	subs	r7, r7, r3
 8002358:	4014      	ands	r4, r2
 800235a:	0762      	lsls	r2, r4, #29
 800235c:	08e4      	lsrs	r4, r4, #3
 800235e:	e760      	b.n	8002222 <__aeabi_dsub+0x3c2>
 8002360:	4981      	ldr	r1, [pc, #516]	@ (8002568 <__aeabi_dsub+0x708>)
 8002362:	428a      	cmp	r2, r1
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x508>
 8002366:	e0c9      	b.n	80024fc <__aeabi_dsub+0x69c>
 8002368:	4663      	mov	r3, ip
 800236a:	18c1      	adds	r1, r0, r3
 800236c:	4281      	cmp	r1, r0
 800236e:	4180      	sbcs	r0, r0
 8002370:	9b02      	ldr	r3, [sp, #8]
 8002372:	4240      	negs	r0, r0
 8002374:	18e3      	adds	r3, r4, r3
 8002376:	181b      	adds	r3, r3, r0
 8002378:	07dd      	lsls	r5, r3, #31
 800237a:	085c      	lsrs	r4, r3, #1
 800237c:	2307      	movs	r3, #7
 800237e:	0849      	lsrs	r1, r1, #1
 8002380:	430d      	orrs	r5, r1
 8002382:	0017      	movs	r7, r2
 8002384:	402b      	ands	r3, r5
 8002386:	e710      	b.n	80021aa <__aeabi_dsub+0x34a>
 8002388:	4663      	mov	r3, ip
 800238a:	1a1d      	subs	r5, r3, r0
 800238c:	45ac      	cmp	ip, r5
 800238e:	4192      	sbcs	r2, r2
 8002390:	2601      	movs	r6, #1
 8002392:	9b02      	ldr	r3, [sp, #8]
 8002394:	4252      	negs	r2, r2
 8002396:	1b1c      	subs	r4, r3, r4
 8002398:	4688      	mov	r8, r1
 800239a:	1aa4      	subs	r4, r4, r2
 800239c:	400e      	ands	r6, r1
 800239e:	e5c6      	b.n	8001f2e <__aeabi_dsub+0xce>
 80023a0:	4663      	mov	r3, ip
 80023a2:	18c5      	adds	r5, r0, r3
 80023a4:	9b02      	ldr	r3, [sp, #8]
 80023a6:	4285      	cmp	r5, r0
 80023a8:	4180      	sbcs	r0, r0
 80023aa:	469c      	mov	ip, r3
 80023ac:	4240      	negs	r0, r0
 80023ae:	4464      	add	r4, ip
 80023b0:	1824      	adds	r4, r4, r0
 80023b2:	2701      	movs	r7, #1
 80023b4:	0223      	lsls	r3, r4, #8
 80023b6:	d400      	bmi.n	80023ba <__aeabi_dsub+0x55a>
 80023b8:	e6f5      	b.n	80021a6 <__aeabi_dsub+0x346>
 80023ba:	2702      	movs	r7, #2
 80023bc:	e641      	b.n	8002042 <__aeabi_dsub+0x1e2>
 80023be:	4663      	mov	r3, ip
 80023c0:	1ac5      	subs	r5, r0, r3
 80023c2:	42a8      	cmp	r0, r5
 80023c4:	4180      	sbcs	r0, r0
 80023c6:	9b02      	ldr	r3, [sp, #8]
 80023c8:	4240      	negs	r0, r0
 80023ca:	1ae4      	subs	r4, r4, r3
 80023cc:	2701      	movs	r7, #1
 80023ce:	1a24      	subs	r4, r4, r0
 80023d0:	e5a8      	b.n	8001f24 <__aeabi_dsub+0xc4>
 80023d2:	9d02      	ldr	r5, [sp, #8]
 80023d4:	4652      	mov	r2, sl
 80023d6:	002b      	movs	r3, r5
 80023d8:	3a20      	subs	r2, #32
 80023da:	40d3      	lsrs	r3, r2
 80023dc:	0019      	movs	r1, r3
 80023de:	4653      	mov	r3, sl
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	d006      	beq.n	80023f2 <__aeabi_dsub+0x592>
 80023e4:	2240      	movs	r2, #64	@ 0x40
 80023e6:	1ad2      	subs	r2, r2, r3
 80023e8:	002b      	movs	r3, r5
 80023ea:	4093      	lsls	r3, r2
 80023ec:	4662      	mov	r2, ip
 80023ee:	431a      	orrs	r2, r3
 80023f0:	4693      	mov	fp, r2
 80023f2:	465d      	mov	r5, fp
 80023f4:	1e6b      	subs	r3, r5, #1
 80023f6:	419d      	sbcs	r5, r3
 80023f8:	430d      	orrs	r5, r1
 80023fa:	e615      	b.n	8002028 <__aeabi_dsub+0x1c8>
 80023fc:	0762      	lsls	r2, r4, #29
 80023fe:	08c0      	lsrs	r0, r0, #3
 8002400:	4302      	orrs	r2, r0
 8002402:	08e4      	lsrs	r4, r4, #3
 8002404:	e70d      	b.n	8002222 <__aeabi_dsub+0x3c2>
 8002406:	0011      	movs	r1, r2
 8002408:	0027      	movs	r7, r4
 800240a:	3920      	subs	r1, #32
 800240c:	40cf      	lsrs	r7, r1
 800240e:	2a20      	cmp	r2, #32
 8002410:	d005      	beq.n	800241e <__aeabi_dsub+0x5be>
 8002412:	2140      	movs	r1, #64	@ 0x40
 8002414:	1a8a      	subs	r2, r1, r2
 8002416:	4094      	lsls	r4, r2
 8002418:	0025      	movs	r5, r4
 800241a:	4305      	orrs	r5, r0
 800241c:	9503      	str	r5, [sp, #12]
 800241e:	9d03      	ldr	r5, [sp, #12]
 8002420:	1e6a      	subs	r2, r5, #1
 8002422:	4195      	sbcs	r5, r2
 8002424:	433d      	orrs	r5, r7
 8002426:	e77d      	b.n	8002324 <__aeabi_dsub+0x4c4>
 8002428:	2a00      	cmp	r2, #0
 800242a:	d100      	bne.n	800242e <__aeabi_dsub+0x5ce>
 800242c:	e744      	b.n	80022b8 <__aeabi_dsub+0x458>
 800242e:	2601      	movs	r6, #1
 8002430:	400e      	ands	r6, r1
 8002432:	4663      	mov	r3, ip
 8002434:	08d9      	lsrs	r1, r3, #3
 8002436:	9b02      	ldr	r3, [sp, #8]
 8002438:	075a      	lsls	r2, r3, #29
 800243a:	430a      	orrs	r2, r1
 800243c:	08dc      	lsrs	r4, r3, #3
 800243e:	e6f0      	b.n	8002222 <__aeabi_dsub+0x3c2>
 8002440:	2a00      	cmp	r2, #0
 8002442:	d028      	beq.n	8002496 <__aeabi_dsub+0x636>
 8002444:	4662      	mov	r2, ip
 8002446:	9f02      	ldr	r7, [sp, #8]
 8002448:	08c0      	lsrs	r0, r0, #3
 800244a:	433a      	orrs	r2, r7
 800244c:	d100      	bne.n	8002450 <__aeabi_dsub+0x5f0>
 800244e:	e6dc      	b.n	800220a <__aeabi_dsub+0x3aa>
 8002450:	0762      	lsls	r2, r4, #29
 8002452:	4310      	orrs	r0, r2
 8002454:	2280      	movs	r2, #128	@ 0x80
 8002456:	08e4      	lsrs	r4, r4, #3
 8002458:	0312      	lsls	r2, r2, #12
 800245a:	4214      	tst	r4, r2
 800245c:	d009      	beq.n	8002472 <__aeabi_dsub+0x612>
 800245e:	08fd      	lsrs	r5, r7, #3
 8002460:	4215      	tst	r5, r2
 8002462:	d106      	bne.n	8002472 <__aeabi_dsub+0x612>
 8002464:	4663      	mov	r3, ip
 8002466:	2601      	movs	r6, #1
 8002468:	002c      	movs	r4, r5
 800246a:	08d8      	lsrs	r0, r3, #3
 800246c:	077b      	lsls	r3, r7, #29
 800246e:	4318      	orrs	r0, r3
 8002470:	400e      	ands	r6, r1
 8002472:	0f42      	lsrs	r2, r0, #29
 8002474:	00c0      	lsls	r0, r0, #3
 8002476:	08c0      	lsrs	r0, r0, #3
 8002478:	0752      	lsls	r2, r2, #29
 800247a:	4302      	orrs	r2, r0
 800247c:	e601      	b.n	8002082 <__aeabi_dsub+0x222>
 800247e:	4663      	mov	r3, ip
 8002480:	1a1d      	subs	r5, r3, r0
 8002482:	45ac      	cmp	ip, r5
 8002484:	4192      	sbcs	r2, r2
 8002486:	9b02      	ldr	r3, [sp, #8]
 8002488:	4252      	negs	r2, r2
 800248a:	1b1c      	subs	r4, r3, r4
 800248c:	000e      	movs	r6, r1
 800248e:	4688      	mov	r8, r1
 8002490:	2701      	movs	r7, #1
 8002492:	1aa4      	subs	r4, r4, r2
 8002494:	e546      	b.n	8001f24 <__aeabi_dsub+0xc4>
 8002496:	4663      	mov	r3, ip
 8002498:	08d9      	lsrs	r1, r3, #3
 800249a:	9b02      	ldr	r3, [sp, #8]
 800249c:	075a      	lsls	r2, r3, #29
 800249e:	430a      	orrs	r2, r1
 80024a0:	08dc      	lsrs	r4, r3, #3
 80024a2:	e5ee      	b.n	8002082 <__aeabi_dsub+0x222>
 80024a4:	4663      	mov	r3, ip
 80024a6:	9c02      	ldr	r4, [sp, #8]
 80024a8:	9303      	str	r3, [sp, #12]
 80024aa:	e6c7      	b.n	800223c <__aeabi_dsub+0x3dc>
 80024ac:	08c0      	lsrs	r0, r0, #3
 80024ae:	2a00      	cmp	r2, #0
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x654>
 80024b2:	e6aa      	b.n	800220a <__aeabi_dsub+0x3aa>
 80024b4:	0762      	lsls	r2, r4, #29
 80024b6:	4310      	orrs	r0, r2
 80024b8:	2280      	movs	r2, #128	@ 0x80
 80024ba:	08e4      	lsrs	r4, r4, #3
 80024bc:	0312      	lsls	r2, r2, #12
 80024be:	4214      	tst	r4, r2
 80024c0:	d0d7      	beq.n	8002472 <__aeabi_dsub+0x612>
 80024c2:	9f02      	ldr	r7, [sp, #8]
 80024c4:	08fd      	lsrs	r5, r7, #3
 80024c6:	4215      	tst	r5, r2
 80024c8:	d1d3      	bne.n	8002472 <__aeabi_dsub+0x612>
 80024ca:	4663      	mov	r3, ip
 80024cc:	2601      	movs	r6, #1
 80024ce:	08d8      	lsrs	r0, r3, #3
 80024d0:	077b      	lsls	r3, r7, #29
 80024d2:	002c      	movs	r4, r5
 80024d4:	4318      	orrs	r0, r3
 80024d6:	400e      	ands	r6, r1
 80024d8:	e7cb      	b.n	8002472 <__aeabi_dsub+0x612>
 80024da:	000a      	movs	r2, r1
 80024dc:	0027      	movs	r7, r4
 80024de:	3a20      	subs	r2, #32
 80024e0:	40d7      	lsrs	r7, r2
 80024e2:	2920      	cmp	r1, #32
 80024e4:	d005      	beq.n	80024f2 <__aeabi_dsub+0x692>
 80024e6:	2240      	movs	r2, #64	@ 0x40
 80024e8:	1a52      	subs	r2, r2, r1
 80024ea:	4094      	lsls	r4, r2
 80024ec:	0025      	movs	r5, r4
 80024ee:	4305      	orrs	r5, r0
 80024f0:	9503      	str	r5, [sp, #12]
 80024f2:	9d03      	ldr	r5, [sp, #12]
 80024f4:	1e6a      	subs	r2, r5, #1
 80024f6:	4195      	sbcs	r5, r2
 80024f8:	432f      	orrs	r7, r5
 80024fa:	e610      	b.n	800211e <__aeabi_dsub+0x2be>
 80024fc:	0014      	movs	r4, r2
 80024fe:	2500      	movs	r5, #0
 8002500:	2200      	movs	r2, #0
 8002502:	e556      	b.n	8001fb2 <__aeabi_dsub+0x152>
 8002504:	9b02      	ldr	r3, [sp, #8]
 8002506:	4460      	add	r0, ip
 8002508:	4699      	mov	r9, r3
 800250a:	4560      	cmp	r0, ip
 800250c:	4192      	sbcs	r2, r2
 800250e:	444c      	add	r4, r9
 8002510:	4252      	negs	r2, r2
 8002512:	0005      	movs	r5, r0
 8002514:	18a4      	adds	r4, r4, r2
 8002516:	e74c      	b.n	80023b2 <__aeabi_dsub+0x552>
 8002518:	001a      	movs	r2, r3
 800251a:	001c      	movs	r4, r3
 800251c:	432a      	orrs	r2, r5
 800251e:	d000      	beq.n	8002522 <__aeabi_dsub+0x6c2>
 8002520:	e6b3      	b.n	800228a <__aeabi_dsub+0x42a>
 8002522:	e6c9      	b.n	80022b8 <__aeabi_dsub+0x458>
 8002524:	2480      	movs	r4, #128	@ 0x80
 8002526:	2600      	movs	r6, #0
 8002528:	0324      	lsls	r4, r4, #12
 800252a:	e5ae      	b.n	800208a <__aeabi_dsub+0x22a>
 800252c:	2120      	movs	r1, #32
 800252e:	2500      	movs	r5, #0
 8002530:	1a09      	subs	r1, r1, r0
 8002532:	e517      	b.n	8001f64 <__aeabi_dsub+0x104>
 8002534:	2200      	movs	r2, #0
 8002536:	2500      	movs	r5, #0
 8002538:	4c0b      	ldr	r4, [pc, #44]	@ (8002568 <__aeabi_dsub+0x708>)
 800253a:	e53a      	b.n	8001fb2 <__aeabi_dsub+0x152>
 800253c:	2d00      	cmp	r5, #0
 800253e:	d100      	bne.n	8002542 <__aeabi_dsub+0x6e2>
 8002540:	e5f6      	b.n	8002130 <__aeabi_dsub+0x2d0>
 8002542:	464b      	mov	r3, r9
 8002544:	1bda      	subs	r2, r3, r7
 8002546:	4692      	mov	sl, r2
 8002548:	2f00      	cmp	r7, #0
 800254a:	d100      	bne.n	800254e <__aeabi_dsub+0x6ee>
 800254c:	e66f      	b.n	800222e <__aeabi_dsub+0x3ce>
 800254e:	2a38      	cmp	r2, #56	@ 0x38
 8002550:	dc05      	bgt.n	800255e <__aeabi_dsub+0x6fe>
 8002552:	2680      	movs	r6, #128	@ 0x80
 8002554:	0436      	lsls	r6, r6, #16
 8002556:	4334      	orrs	r4, r6
 8002558:	4688      	mov	r8, r1
 800255a:	000e      	movs	r6, r1
 800255c:	e6d1      	b.n	8002302 <__aeabi_dsub+0x4a2>
 800255e:	4688      	mov	r8, r1
 8002560:	000e      	movs	r6, r1
 8002562:	2501      	movs	r5, #1
 8002564:	e6de      	b.n	8002324 <__aeabi_dsub+0x4c4>
 8002566:	46c0      	nop			@ (mov r8, r8)
 8002568:	000007ff 	.word	0x000007ff
 800256c:	ff7fffff 	.word	0xff7fffff
 8002570:	000007fe 	.word	0x000007fe
 8002574:	2d00      	cmp	r5, #0
 8002576:	d100      	bne.n	800257a <__aeabi_dsub+0x71a>
 8002578:	e668      	b.n	800224c <__aeabi_dsub+0x3ec>
 800257a:	464b      	mov	r3, r9
 800257c:	1bd9      	subs	r1, r3, r7
 800257e:	2f00      	cmp	r7, #0
 8002580:	d101      	bne.n	8002586 <__aeabi_dsub+0x726>
 8002582:	468a      	mov	sl, r1
 8002584:	e5a7      	b.n	80020d6 <__aeabi_dsub+0x276>
 8002586:	2701      	movs	r7, #1
 8002588:	2938      	cmp	r1, #56	@ 0x38
 800258a:	dd00      	ble.n	800258e <__aeabi_dsub+0x72e>
 800258c:	e5c7      	b.n	800211e <__aeabi_dsub+0x2be>
 800258e:	2280      	movs	r2, #128	@ 0x80
 8002590:	0412      	lsls	r2, r2, #16
 8002592:	4314      	orrs	r4, r2
 8002594:	e5af      	b.n	80020f6 <__aeabi_dsub+0x296>
 8002596:	46c0      	nop			@ (mov r8, r8)

08002598 <__aeabi_dcmpun>:
 8002598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800259a:	46c6      	mov	lr, r8
 800259c:	031e      	lsls	r6, r3, #12
 800259e:	0b36      	lsrs	r6, r6, #12
 80025a0:	46b0      	mov	r8, r6
 80025a2:	4e0d      	ldr	r6, [pc, #52]	@ (80025d8 <__aeabi_dcmpun+0x40>)
 80025a4:	030c      	lsls	r4, r1, #12
 80025a6:	004d      	lsls	r5, r1, #1
 80025a8:	005f      	lsls	r7, r3, #1
 80025aa:	b500      	push	{lr}
 80025ac:	0b24      	lsrs	r4, r4, #12
 80025ae:	0d6d      	lsrs	r5, r5, #21
 80025b0:	0d7f      	lsrs	r7, r7, #21
 80025b2:	42b5      	cmp	r5, r6
 80025b4:	d00b      	beq.n	80025ce <__aeabi_dcmpun+0x36>
 80025b6:	4908      	ldr	r1, [pc, #32]	@ (80025d8 <__aeabi_dcmpun+0x40>)
 80025b8:	2000      	movs	r0, #0
 80025ba:	428f      	cmp	r7, r1
 80025bc:	d104      	bne.n	80025c8 <__aeabi_dcmpun+0x30>
 80025be:	4646      	mov	r6, r8
 80025c0:	4316      	orrs	r6, r2
 80025c2:	0030      	movs	r0, r6
 80025c4:	1e43      	subs	r3, r0, #1
 80025c6:	4198      	sbcs	r0, r3
 80025c8:	bc80      	pop	{r7}
 80025ca:	46b8      	mov	r8, r7
 80025cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ce:	4304      	orrs	r4, r0
 80025d0:	2001      	movs	r0, #1
 80025d2:	2c00      	cmp	r4, #0
 80025d4:	d1f8      	bne.n	80025c8 <__aeabi_dcmpun+0x30>
 80025d6:	e7ee      	b.n	80025b6 <__aeabi_dcmpun+0x1e>
 80025d8:	000007ff 	.word	0x000007ff

080025dc <__aeabi_d2iz>:
 80025dc:	000b      	movs	r3, r1
 80025de:	0002      	movs	r2, r0
 80025e0:	b570      	push	{r4, r5, r6, lr}
 80025e2:	4d16      	ldr	r5, [pc, #88]	@ (800263c <__aeabi_d2iz+0x60>)
 80025e4:	030c      	lsls	r4, r1, #12
 80025e6:	b082      	sub	sp, #8
 80025e8:	0049      	lsls	r1, r1, #1
 80025ea:	2000      	movs	r0, #0
 80025ec:	9200      	str	r2, [sp, #0]
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	0b24      	lsrs	r4, r4, #12
 80025f2:	0d49      	lsrs	r1, r1, #21
 80025f4:	0fde      	lsrs	r6, r3, #31
 80025f6:	42a9      	cmp	r1, r5
 80025f8:	dd04      	ble.n	8002604 <__aeabi_d2iz+0x28>
 80025fa:	4811      	ldr	r0, [pc, #68]	@ (8002640 <__aeabi_d2iz+0x64>)
 80025fc:	4281      	cmp	r1, r0
 80025fe:	dd03      	ble.n	8002608 <__aeabi_d2iz+0x2c>
 8002600:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <__aeabi_d2iz+0x68>)
 8002602:	18f0      	adds	r0, r6, r3
 8002604:	b002      	add	sp, #8
 8002606:	bd70      	pop	{r4, r5, r6, pc}
 8002608:	2080      	movs	r0, #128	@ 0x80
 800260a:	0340      	lsls	r0, r0, #13
 800260c:	4320      	orrs	r0, r4
 800260e:	4c0e      	ldr	r4, [pc, #56]	@ (8002648 <__aeabi_d2iz+0x6c>)
 8002610:	1a64      	subs	r4, r4, r1
 8002612:	2c1f      	cmp	r4, #31
 8002614:	dd08      	ble.n	8002628 <__aeabi_d2iz+0x4c>
 8002616:	4b0d      	ldr	r3, [pc, #52]	@ (800264c <__aeabi_d2iz+0x70>)
 8002618:	1a5b      	subs	r3, r3, r1
 800261a:	40d8      	lsrs	r0, r3
 800261c:	0003      	movs	r3, r0
 800261e:	4258      	negs	r0, r3
 8002620:	2e00      	cmp	r6, #0
 8002622:	d1ef      	bne.n	8002604 <__aeabi_d2iz+0x28>
 8002624:	0018      	movs	r0, r3
 8002626:	e7ed      	b.n	8002604 <__aeabi_d2iz+0x28>
 8002628:	4b09      	ldr	r3, [pc, #36]	@ (8002650 <__aeabi_d2iz+0x74>)
 800262a:	9a00      	ldr	r2, [sp, #0]
 800262c:	469c      	mov	ip, r3
 800262e:	0003      	movs	r3, r0
 8002630:	4461      	add	r1, ip
 8002632:	408b      	lsls	r3, r1
 8002634:	40e2      	lsrs	r2, r4
 8002636:	4313      	orrs	r3, r2
 8002638:	e7f1      	b.n	800261e <__aeabi_d2iz+0x42>
 800263a:	46c0      	nop			@ (mov r8, r8)
 800263c:	000003fe 	.word	0x000003fe
 8002640:	0000041d 	.word	0x0000041d
 8002644:	7fffffff 	.word	0x7fffffff
 8002648:	00000433 	.word	0x00000433
 800264c:	00000413 	.word	0x00000413
 8002650:	fffffbed 	.word	0xfffffbed

08002654 <__aeabi_i2d>:
 8002654:	b570      	push	{r4, r5, r6, lr}
 8002656:	2800      	cmp	r0, #0
 8002658:	d016      	beq.n	8002688 <__aeabi_i2d+0x34>
 800265a:	17c3      	asrs	r3, r0, #31
 800265c:	18c5      	adds	r5, r0, r3
 800265e:	405d      	eors	r5, r3
 8002660:	0fc4      	lsrs	r4, r0, #31
 8002662:	0028      	movs	r0, r5
 8002664:	f000 f848 	bl	80026f8 <__clzsi2>
 8002668:	4b10      	ldr	r3, [pc, #64]	@ (80026ac <__aeabi_i2d+0x58>)
 800266a:	1a1b      	subs	r3, r3, r0
 800266c:	055b      	lsls	r3, r3, #21
 800266e:	0d5b      	lsrs	r3, r3, #21
 8002670:	280a      	cmp	r0, #10
 8002672:	dc14      	bgt.n	800269e <__aeabi_i2d+0x4a>
 8002674:	0002      	movs	r2, r0
 8002676:	002e      	movs	r6, r5
 8002678:	3215      	adds	r2, #21
 800267a:	4096      	lsls	r6, r2
 800267c:	220b      	movs	r2, #11
 800267e:	1a12      	subs	r2, r2, r0
 8002680:	40d5      	lsrs	r5, r2
 8002682:	032d      	lsls	r5, r5, #12
 8002684:	0b2d      	lsrs	r5, r5, #12
 8002686:	e003      	b.n	8002690 <__aeabi_i2d+0x3c>
 8002688:	2400      	movs	r4, #0
 800268a:	2300      	movs	r3, #0
 800268c:	2500      	movs	r5, #0
 800268e:	2600      	movs	r6, #0
 8002690:	051b      	lsls	r3, r3, #20
 8002692:	432b      	orrs	r3, r5
 8002694:	07e4      	lsls	r4, r4, #31
 8002696:	4323      	orrs	r3, r4
 8002698:	0030      	movs	r0, r6
 800269a:	0019      	movs	r1, r3
 800269c:	bd70      	pop	{r4, r5, r6, pc}
 800269e:	380b      	subs	r0, #11
 80026a0:	4085      	lsls	r5, r0
 80026a2:	032d      	lsls	r5, r5, #12
 80026a4:	2600      	movs	r6, #0
 80026a6:	0b2d      	lsrs	r5, r5, #12
 80026a8:	e7f2      	b.n	8002690 <__aeabi_i2d+0x3c>
 80026aa:	46c0      	nop			@ (mov r8, r8)
 80026ac:	0000041e 	.word	0x0000041e

080026b0 <__aeabi_ui2d>:
 80026b0:	b510      	push	{r4, lr}
 80026b2:	1e04      	subs	r4, r0, #0
 80026b4:	d010      	beq.n	80026d8 <__aeabi_ui2d+0x28>
 80026b6:	f000 f81f 	bl	80026f8 <__clzsi2>
 80026ba:	4b0e      	ldr	r3, [pc, #56]	@ (80026f4 <__aeabi_ui2d+0x44>)
 80026bc:	1a1b      	subs	r3, r3, r0
 80026be:	055b      	lsls	r3, r3, #21
 80026c0:	0d5b      	lsrs	r3, r3, #21
 80026c2:	280a      	cmp	r0, #10
 80026c4:	dc0f      	bgt.n	80026e6 <__aeabi_ui2d+0x36>
 80026c6:	220b      	movs	r2, #11
 80026c8:	0021      	movs	r1, r4
 80026ca:	1a12      	subs	r2, r2, r0
 80026cc:	40d1      	lsrs	r1, r2
 80026ce:	3015      	adds	r0, #21
 80026d0:	030a      	lsls	r2, r1, #12
 80026d2:	4084      	lsls	r4, r0
 80026d4:	0b12      	lsrs	r2, r2, #12
 80026d6:	e001      	b.n	80026dc <__aeabi_ui2d+0x2c>
 80026d8:	2300      	movs	r3, #0
 80026da:	2200      	movs	r2, #0
 80026dc:	051b      	lsls	r3, r3, #20
 80026de:	4313      	orrs	r3, r2
 80026e0:	0020      	movs	r0, r4
 80026e2:	0019      	movs	r1, r3
 80026e4:	bd10      	pop	{r4, pc}
 80026e6:	0022      	movs	r2, r4
 80026e8:	380b      	subs	r0, #11
 80026ea:	4082      	lsls	r2, r0
 80026ec:	0312      	lsls	r2, r2, #12
 80026ee:	2400      	movs	r4, #0
 80026f0:	0b12      	lsrs	r2, r2, #12
 80026f2:	e7f3      	b.n	80026dc <__aeabi_ui2d+0x2c>
 80026f4:	0000041e 	.word	0x0000041e

080026f8 <__clzsi2>:
 80026f8:	211c      	movs	r1, #28
 80026fa:	2301      	movs	r3, #1
 80026fc:	041b      	lsls	r3, r3, #16
 80026fe:	4298      	cmp	r0, r3
 8002700:	d301      	bcc.n	8002706 <__clzsi2+0xe>
 8002702:	0c00      	lsrs	r0, r0, #16
 8002704:	3910      	subs	r1, #16
 8002706:	0a1b      	lsrs	r3, r3, #8
 8002708:	4298      	cmp	r0, r3
 800270a:	d301      	bcc.n	8002710 <__clzsi2+0x18>
 800270c:	0a00      	lsrs	r0, r0, #8
 800270e:	3908      	subs	r1, #8
 8002710:	091b      	lsrs	r3, r3, #4
 8002712:	4298      	cmp	r0, r3
 8002714:	d301      	bcc.n	800271a <__clzsi2+0x22>
 8002716:	0900      	lsrs	r0, r0, #4
 8002718:	3904      	subs	r1, #4
 800271a:	a202      	add	r2, pc, #8	@ (adr r2, 8002724 <__clzsi2+0x2c>)
 800271c:	5c10      	ldrb	r0, [r2, r0]
 800271e:	1840      	adds	r0, r0, r1
 8002720:	4770      	bx	lr
 8002722:	46c0      	nop			@ (mov r8, r8)
 8002724:	02020304 	.word	0x02020304
 8002728:	01010101 	.word	0x01010101
	...

08002734 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b087      	sub	sp, #28
 8002738:	af02      	add	r7, sp, #8
 800273a:	0002      	movs	r2, r0
 800273c:	1dfb      	adds	r3, r7, #7
 800273e:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8002740:	200f      	movs	r0, #15
 8002742:	183b      	adds	r3, r7, r0
 8002744:	1dfa      	adds	r2, r7, #7
 8002746:	7812      	ldrb	r2, [r2, #0]
 8002748:	210f      	movs	r1, #15
 800274a:	438a      	bics	r2, r1
 800274c:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 800274e:	1dfb      	adds	r3, r7, #7
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	011a      	lsls	r2, r3, #4
 8002754:	240e      	movs	r4, #14
 8002756:	193b      	adds	r3, r7, r4
 8002758:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800275a:	183b      	adds	r3, r7, r0
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	220c      	movs	r2, #12
 8002760:	4313      	orrs	r3, r2
 8002762:	b2da      	uxtb	r2, r3
 8002764:	2108      	movs	r1, #8
 8002766:	187b      	adds	r3, r7, r1
 8002768:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800276a:	183b      	adds	r3, r7, r0
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2208      	movs	r2, #8
 8002770:	4313      	orrs	r3, r2
 8002772:	b2da      	uxtb	r2, r3
 8002774:	187b      	adds	r3, r7, r1
 8002776:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8002778:	193b      	adds	r3, r7, r4
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	220c      	movs	r2, #12
 800277e:	4313      	orrs	r3, r2
 8002780:	b2da      	uxtb	r2, r3
 8002782:	187b      	adds	r3, r7, r1
 8002784:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8002786:	193b      	adds	r3, r7, r4
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2208      	movs	r2, #8
 800278c:	4313      	orrs	r3, r2
 800278e:	b2da      	uxtb	r2, r3
 8002790:	187b      	adds	r3, r7, r1
 8002792:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002794:	187a      	adds	r2, r7, r1
 8002796:	4805      	ldr	r0, [pc, #20]	@ (80027ac <lcd_send_cmd+0x78>)
 8002798:	2364      	movs	r3, #100	@ 0x64
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2304      	movs	r3, #4
 800279e:	214e      	movs	r1, #78	@ 0x4e
 80027a0:	f001 f850 	bl	8003844 <HAL_I2C_Master_Transmit>
}
 80027a4:	46c0      	nop			@ (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b005      	add	sp, #20
 80027aa:	bd90      	pop	{r4, r7, pc}
 80027ac:	200001f0 	.word	0x200001f0

080027b0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80027b0:	b590      	push	{r4, r7, lr}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	0002      	movs	r2, r0
 80027b8:	1dfb      	adds	r3, r7, #7
 80027ba:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80027bc:	200f      	movs	r0, #15
 80027be:	183b      	adds	r3, r7, r0
 80027c0:	1dfa      	adds	r2, r7, #7
 80027c2:	7812      	ldrb	r2, [r2, #0]
 80027c4:	210f      	movs	r1, #15
 80027c6:	438a      	bics	r2, r1
 80027c8:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 80027ca:	1dfb      	adds	r3, r7, #7
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	011a      	lsls	r2, r3, #4
 80027d0:	240e      	movs	r4, #14
 80027d2:	193b      	adds	r3, r7, r4
 80027d4:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80027d6:	183b      	adds	r3, r7, r0
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	220d      	movs	r2, #13
 80027dc:	4313      	orrs	r3, r2
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	2108      	movs	r1, #8
 80027e2:	187b      	adds	r3, r7, r1
 80027e4:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80027e6:	183b      	adds	r3, r7, r0
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2209      	movs	r2, #9
 80027ec:	4313      	orrs	r3, r2
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	187b      	adds	r3, r7, r1
 80027f2:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80027f4:	193b      	adds	r3, r7, r4
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	220d      	movs	r2, #13
 80027fa:	4313      	orrs	r3, r2
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	187b      	adds	r3, r7, r1
 8002800:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8002802:	193b      	adds	r3, r7, r4
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2209      	movs	r2, #9
 8002808:	4313      	orrs	r3, r2
 800280a:	b2da      	uxtb	r2, r3
 800280c:	187b      	adds	r3, r7, r1
 800280e:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002810:	187a      	adds	r2, r7, r1
 8002812:	4805      	ldr	r0, [pc, #20]	@ (8002828 <lcd_send_data+0x78>)
 8002814:	2364      	movs	r3, #100	@ 0x64
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	2304      	movs	r3, #4
 800281a:	214e      	movs	r1, #78	@ 0x4e
 800281c:	f001 f812 	bl	8003844 <HAL_I2C_Master_Transmit>
}
 8002820:	46c0      	nop			@ (mov r8, r8)
 8002822:	46bd      	mov	sp, r7
 8002824:	b005      	add	sp, #20
 8002826:	bd90      	pop	{r4, r7, pc}
 8002828:	200001f0 	.word	0x200001f0

0800282c <lcd_init>:
		lcd_send_data (' ');
	}
}

void lcd_init (void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8002830:	2032      	movs	r0, #50	@ 0x32
 8002832:	f000 fcf9 	bl	8003228 <HAL_Delay>
	lcd_send_cmd (0x30);
 8002836:	2030      	movs	r0, #48	@ 0x30
 8002838:	f7ff ff7c 	bl	8002734 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800283c:	2005      	movs	r0, #5
 800283e:	f000 fcf3 	bl	8003228 <HAL_Delay>
	lcd_send_cmd (0x30);
 8002842:	2030      	movs	r0, #48	@ 0x30
 8002844:	f7ff ff76 	bl	8002734 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8002848:	2001      	movs	r0, #1
 800284a:	f000 fced 	bl	8003228 <HAL_Delay>
	lcd_send_cmd (0x30);
 800284e:	2030      	movs	r0, #48	@ 0x30
 8002850:	f7ff ff70 	bl	8002734 <lcd_send_cmd>
	HAL_Delay(10);
 8002854:	200a      	movs	r0, #10
 8002856:	f000 fce7 	bl	8003228 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800285a:	2020      	movs	r0, #32
 800285c:	f7ff ff6a 	bl	8002734 <lcd_send_cmd>
	HAL_Delay(10);
 8002860:	200a      	movs	r0, #10
 8002862:	f000 fce1 	bl	8003228 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8002866:	2028      	movs	r0, #40	@ 0x28
 8002868:	f7ff ff64 	bl	8002734 <lcd_send_cmd>
	HAL_Delay(1);
 800286c:	2001      	movs	r0, #1
 800286e:	f000 fcdb 	bl	8003228 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8002872:	2008      	movs	r0, #8
 8002874:	f7ff ff5e 	bl	8002734 <lcd_send_cmd>
	HAL_Delay(1);
 8002878:	2001      	movs	r0, #1
 800287a:	f000 fcd5 	bl	8003228 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800287e:	2001      	movs	r0, #1
 8002880:	f7ff ff58 	bl	8002734 <lcd_send_cmd>
	HAL_Delay(1);
 8002884:	2001      	movs	r0, #1
 8002886:	f000 fccf 	bl	8003228 <HAL_Delay>
	HAL_Delay(1);
 800288a:	2001      	movs	r0, #1
 800288c:	f000 fccc 	bl	8003228 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8002890:	2006      	movs	r0, #6
 8002892:	f7ff ff4f 	bl	8002734 <lcd_send_cmd>
	HAL_Delay(1);
 8002896:	2001      	movs	r0, #1
 8002898:	f000 fcc6 	bl	8003228 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800289c:	200c      	movs	r0, #12
 800289e:	f7ff ff49 	bl	8002734 <lcd_send_cmd>
}
 80028a2:	46c0      	nop			@ (mov r8, r8)
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80028b0:	e006      	b.n	80028c0 <lcd_send_string+0x18>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	0018      	movs	r0, r3
 80028bc:	f7ff ff78 	bl	80027b0 <lcd_send_data>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f4      	bne.n	80028b2 <lcd_send_string+0xa>
}
 80028c8:	46c0      	nop			@ (mov r8, r8)
 80028ca:	46c0      	nop			@ (mov r8, r8)
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b002      	add	sp, #8
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <MPU6050_Init>:
int16_t Gyro_Z_RAW = 0;

float Ax, Ay, Az, Gx, Gy, Gz;

void MPU6050_Init (void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x75, 1, &check, 1, 1000);
 80028da:	482a      	ldr	r0, [pc, #168]	@ (8002984 <MPU6050_Init+0xb0>)
 80028dc:	23fa      	movs	r3, #250	@ 0xfa
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	9302      	str	r3, [sp, #8]
 80028e2:	2301      	movs	r3, #1
 80028e4:	9301      	str	r3, [sp, #4]
 80028e6:	1dfb      	adds	r3, r7, #7
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	2301      	movs	r3, #1
 80028ec:	2275      	movs	r2, #117	@ 0x75
 80028ee:	21d0      	movs	r1, #208	@ 0xd0
 80028f0:	f001 fa00 	bl	8003cf4 <HAL_I2C_Mem_Read>
	if (check == 0x68)  // 0x68 will be returned by the sensor if everything goes well
 80028f4:	1dfb      	adds	r3, r7, #7
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b68      	cmp	r3, #104	@ 0x68
 80028fa:	d13f      	bne.n	800297c <MPU6050_Init+0xa8>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 80028fc:	1dbb      	adds	r3, r7, #6
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x6B, 1,&Data, 1, 1000);
 8002902:	4820      	ldr	r0, [pc, #128]	@ (8002984 <MPU6050_Init+0xb0>)
 8002904:	23fa      	movs	r3, #250	@ 0xfa
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	9302      	str	r3, [sp, #8]
 800290a:	2301      	movs	r3, #1
 800290c:	9301      	str	r3, [sp, #4]
 800290e:	1dbb      	adds	r3, r7, #6
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	2301      	movs	r3, #1
 8002914:	226b      	movs	r2, #107	@ 0x6b
 8002916:	21d0      	movs	r1, #208	@ 0xd0
 8002918:	f001 f8be 	bl	8003a98 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 800291c:	1dbb      	adds	r3, r7, #6
 800291e:	2207      	movs	r2, #7
 8002920:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x19, 1, &Data, 1, 1000);
 8002922:	4818      	ldr	r0, [pc, #96]	@ (8002984 <MPU6050_Init+0xb0>)
 8002924:	23fa      	movs	r3, #250	@ 0xfa
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	9302      	str	r3, [sp, #8]
 800292a:	2301      	movs	r3, #1
 800292c:	9301      	str	r3, [sp, #4]
 800292e:	1dbb      	adds	r3, r7, #6
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	2301      	movs	r3, #1
 8002934:	2219      	movs	r2, #25
 8002936:	21d0      	movs	r1, #208	@ 0xd0
 8002938:	f001 f8ae 	bl	8003a98 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		Data = 0x00;  // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 �?/s
 800293c:	1dbb      	adds	r3, r7, #6
 800293e:	2200      	movs	r2, #0
 8002940:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1B, 1, &Data, 1, 1000);
 8002942:	4810      	ldr	r0, [pc, #64]	@ (8002984 <MPU6050_Init+0xb0>)
 8002944:	23fa      	movs	r3, #250	@ 0xfa
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	9302      	str	r3, [sp, #8]
 800294a:	2301      	movs	r3, #1
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	1dbb      	adds	r3, r7, #6
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2301      	movs	r3, #1
 8002954:	221b      	movs	r2, #27
 8002956:	21d0      	movs	r1, #208	@ 0xd0
 8002958:	f001 f89e 	bl	8003a98 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		Data = 0x00;  // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
 800295c:	1dbb      	adds	r3, r7, #6
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1C, 1, &Data, 1, 1000);
 8002962:	4808      	ldr	r0, [pc, #32]	@ (8002984 <MPU6050_Init+0xb0>)
 8002964:	23fa      	movs	r3, #250	@ 0xfa
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	9302      	str	r3, [sp, #8]
 800296a:	2301      	movs	r3, #1
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	1dbb      	adds	r3, r7, #6
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	2301      	movs	r3, #1
 8002974:	221c      	movs	r2, #28
 8002976:	21d0      	movs	r1, #208	@ 0xd0
 8002978:	f001 f88e 	bl	8003a98 <HAL_I2C_Mem_Write>
	}

}
 800297c:	46c0      	nop			@ (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	b002      	add	sp, #8
 8002982:	bd80      	pop	{r7, pc}
 8002984:	200001f0 	.word	0x200001f0

08002988 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) register
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 800298e:	4831      	ldr	r0, [pc, #196]	@ (8002a54 <MPU6050_Read_Accel+0xcc>)
 8002990:	23fa      	movs	r3, #250	@ 0xfa
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	9302      	str	r3, [sp, #8]
 8002996:	2306      	movs	r3, #6
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	003b      	movs	r3, r7
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	2301      	movs	r3, #1
 80029a0:	223b      	movs	r2, #59	@ 0x3b
 80029a2:	21d0      	movs	r1, #208	@ 0xd0
 80029a4:	f001 f9a6 	bl	8003cf4 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80029a8:	003b      	movs	r3, r7
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	021b      	lsls	r3, r3, #8
 80029ae:	b21a      	sxth	r2, r3
 80029b0:	003b      	movs	r3, r7
 80029b2:	785b      	ldrb	r3, [r3, #1]
 80029b4:	b21b      	sxth	r3, r3
 80029b6:	4313      	orrs	r3, r2
 80029b8:	b21a      	sxth	r2, r3
 80029ba:	4b27      	ldr	r3, [pc, #156]	@ (8002a58 <MPU6050_Read_Accel+0xd0>)
 80029bc:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80029be:	003b      	movs	r3, r7
 80029c0:	789b      	ldrb	r3, [r3, #2]
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	b21a      	sxth	r2, r3
 80029c6:	003b      	movs	r3, r7
 80029c8:	78db      	ldrb	r3, [r3, #3]
 80029ca:	b21b      	sxth	r3, r3
 80029cc:	4313      	orrs	r3, r2
 80029ce:	b21a      	sxth	r2, r3
 80029d0:	4b22      	ldr	r3, [pc, #136]	@ (8002a5c <MPU6050_Read_Accel+0xd4>)
 80029d2:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80029d4:	003b      	movs	r3, r7
 80029d6:	791b      	ldrb	r3, [r3, #4]
 80029d8:	021b      	lsls	r3, r3, #8
 80029da:	b21a      	sxth	r2, r3
 80029dc:	003b      	movs	r3, r7
 80029de:	795b      	ldrb	r3, [r3, #5]
 80029e0:	b21b      	sxth	r3, r3
 80029e2:	4313      	orrs	r3, r2
 80029e4:	b21a      	sxth	r2, r3
 80029e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a60 <MPU6050_Read_Accel+0xd8>)
 80029e8:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = (float)Accel_X_RAW/16384.0;
 80029ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002a58 <MPU6050_Read_Accel+0xd0>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	5e9b      	ldrsh	r3, [r3, r2]
 80029f0:	0018      	movs	r0, r3
 80029f2:	f7fd ff79 	bl	80008e8 <__aeabi_i2f>
 80029f6:	1c03      	adds	r3, r0, #0
 80029f8:	218d      	movs	r1, #141	@ 0x8d
 80029fa:	05c9      	lsls	r1, r1, #23
 80029fc:	1c18      	adds	r0, r3, #0
 80029fe:	f7fd fd8d 	bl	800051c <__aeabi_fdiv>
 8002a02:	1c03      	adds	r3, r0, #0
 8002a04:	1c1a      	adds	r2, r3, #0
 8002a06:	4b17      	ldr	r3, [pc, #92]	@ (8002a64 <MPU6050_Read_Accel+0xdc>)
 8002a08:	601a      	str	r2, [r3, #0]
	Ay = (float)Accel_Y_RAW/16384.0;
 8002a0a:	4b14      	ldr	r3, [pc, #80]	@ (8002a5c <MPU6050_Read_Accel+0xd4>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	5e9b      	ldrsh	r3, [r3, r2]
 8002a10:	0018      	movs	r0, r3
 8002a12:	f7fd ff69 	bl	80008e8 <__aeabi_i2f>
 8002a16:	1c03      	adds	r3, r0, #0
 8002a18:	218d      	movs	r1, #141	@ 0x8d
 8002a1a:	05c9      	lsls	r1, r1, #23
 8002a1c:	1c18      	adds	r0, r3, #0
 8002a1e:	f7fd fd7d 	bl	800051c <__aeabi_fdiv>
 8002a22:	1c03      	adds	r3, r0, #0
 8002a24:	1c1a      	adds	r2, r3, #0
 8002a26:	4b10      	ldr	r3, [pc, #64]	@ (8002a68 <MPU6050_Read_Accel+0xe0>)
 8002a28:	601a      	str	r2, [r3, #0]
	Az = (float)Accel_Z_RAW/16384.0;
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a60 <MPU6050_Read_Accel+0xd8>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	5e9b      	ldrsh	r3, [r3, r2]
 8002a30:	0018      	movs	r0, r3
 8002a32:	f7fd ff59 	bl	80008e8 <__aeabi_i2f>
 8002a36:	1c03      	adds	r3, r0, #0
 8002a38:	218d      	movs	r1, #141	@ 0x8d
 8002a3a:	05c9      	lsls	r1, r1, #23
 8002a3c:	1c18      	adds	r0, r3, #0
 8002a3e:	f7fd fd6d 	bl	800051c <__aeabi_fdiv>
 8002a42:	1c03      	adds	r3, r0, #0
 8002a44:	1c1a      	adds	r2, r3, #0
 8002a46:	4b09      	ldr	r3, [pc, #36]	@ (8002a6c <MPU6050_Read_Accel+0xe4>)
 8002a48:	601a      	str	r2, [r3, #0]
}
 8002a4a:	46c0      	nop			@ (mov r8, r8)
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	b002      	add	sp, #8
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	46c0      	nop			@ (mov r8, r8)
 8002a54:	200001f0 	.word	0x200001f0
 8002a58:	20000244 	.word	0x20000244
 8002a5c:	20000246 	.word	0x20000246
 8002a60:	20000248 	.word	0x20000248
 8002a64:	20000250 	.word	0x20000250
 8002a68:	20000254 	.word	0x20000254
 8002a6c:	20000258 	.word	0x20000258

08002a70 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x43, 1, Rec_Data, 6, 1000);
 8002a76:	482f      	ldr	r0, [pc, #188]	@ (8002b34 <MPU6050_Read_Gyro+0xc4>)
 8002a78:	23fa      	movs	r3, #250	@ 0xfa
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	9302      	str	r3, [sp, #8]
 8002a7e:	2306      	movs	r3, #6
 8002a80:	9301      	str	r3, [sp, #4]
 8002a82:	003b      	movs	r3, r7
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	2301      	movs	r3, #1
 8002a88:	2243      	movs	r2, #67	@ 0x43
 8002a8a:	21d0      	movs	r1, #208	@ 0xd0
 8002a8c:	f001 f932 	bl	8003cf4 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8002a90:	003b      	movs	r3, r7
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	021b      	lsls	r3, r3, #8
 8002a96:	b21a      	sxth	r2, r3
 8002a98:	003b      	movs	r3, r7
 8002a9a:	785b      	ldrb	r3, [r3, #1]
 8002a9c:	b21b      	sxth	r3, r3
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	b21a      	sxth	r2, r3
 8002aa2:	4b25      	ldr	r3, [pc, #148]	@ (8002b38 <MPU6050_Read_Gyro+0xc8>)
 8002aa4:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8002aa6:	003b      	movs	r3, r7
 8002aa8:	789b      	ldrb	r3, [r3, #2]
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	b21a      	sxth	r2, r3
 8002aae:	003b      	movs	r3, r7
 8002ab0:	78db      	ldrb	r3, [r3, #3]
 8002ab2:	b21b      	sxth	r3, r3
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	b21a      	sxth	r2, r3
 8002ab8:	4b20      	ldr	r3, [pc, #128]	@ (8002b3c <MPU6050_Read_Gyro+0xcc>)
 8002aba:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8002abc:	003b      	movs	r3, r7
 8002abe:	791b      	ldrb	r3, [r3, #4]
 8002ac0:	021b      	lsls	r3, r3, #8
 8002ac2:	b21a      	sxth	r2, r3
 8002ac4:	003b      	movs	r3, r7
 8002ac6:	795b      	ldrb	r3, [r3, #5]
 8002ac8:	b21b      	sxth	r3, r3
 8002aca:	4313      	orrs	r3, r2
 8002acc:	b21a      	sxth	r2, r3
 8002ace:	4b1c      	ldr	r3, [pc, #112]	@ (8002b40 <MPU6050_Read_Gyro+0xd0>)
 8002ad0:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (ｰ/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = (float)Gyro_X_RAW/131.0;
 8002ad2:	4b19      	ldr	r3, [pc, #100]	@ (8002b38 <MPU6050_Read_Gyro+0xc8>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	5e9b      	ldrsh	r3, [r3, r2]
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f7fd ff05 	bl	80008e8 <__aeabi_i2f>
 8002ade:	1c03      	adds	r3, r0, #0
 8002ae0:	4918      	ldr	r1, [pc, #96]	@ (8002b44 <MPU6050_Read_Gyro+0xd4>)
 8002ae2:	1c18      	adds	r0, r3, #0
 8002ae4:	f7fd fd1a 	bl	800051c <__aeabi_fdiv>
 8002ae8:	1c03      	adds	r3, r0, #0
 8002aea:	1c1a      	adds	r2, r3, #0
 8002aec:	4b16      	ldr	r3, [pc, #88]	@ (8002b48 <MPU6050_Read_Gyro+0xd8>)
 8002aee:	601a      	str	r2, [r3, #0]
	Gy = (float)Gyro_Y_RAW/131.0;
 8002af0:	4b12      	ldr	r3, [pc, #72]	@ (8002b3c <MPU6050_Read_Gyro+0xcc>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	5e9b      	ldrsh	r3, [r3, r2]
 8002af6:	0018      	movs	r0, r3
 8002af8:	f7fd fef6 	bl	80008e8 <__aeabi_i2f>
 8002afc:	1c03      	adds	r3, r0, #0
 8002afe:	4911      	ldr	r1, [pc, #68]	@ (8002b44 <MPU6050_Read_Gyro+0xd4>)
 8002b00:	1c18      	adds	r0, r3, #0
 8002b02:	f7fd fd0b 	bl	800051c <__aeabi_fdiv>
 8002b06:	1c03      	adds	r3, r0, #0
 8002b08:	1c1a      	adds	r2, r3, #0
 8002b0a:	4b10      	ldr	r3, [pc, #64]	@ (8002b4c <MPU6050_Read_Gyro+0xdc>)
 8002b0c:	601a      	str	r2, [r3, #0]
	Gz = (float)Gyro_Z_RAW/131.0;
 8002b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b40 <MPU6050_Read_Gyro+0xd0>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	5e9b      	ldrsh	r3, [r3, r2]
 8002b14:	0018      	movs	r0, r3
 8002b16:	f7fd fee7 	bl	80008e8 <__aeabi_i2f>
 8002b1a:	1c03      	adds	r3, r0, #0
 8002b1c:	4909      	ldr	r1, [pc, #36]	@ (8002b44 <MPU6050_Read_Gyro+0xd4>)
 8002b1e:	1c18      	adds	r0, r3, #0
 8002b20:	f7fd fcfc 	bl	800051c <__aeabi_fdiv>
 8002b24:	1c03      	adds	r3, r0, #0
 8002b26:	1c1a      	adds	r2, r3, #0
 8002b28:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <MPU6050_Read_Gyro+0xe0>)
 8002b2a:	601a      	str	r2, [r3, #0]
}
 8002b2c:	46c0      	nop			@ (mov r8, r8)
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b002      	add	sp, #8
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	200001f0 	.word	0x200001f0
 8002b38:	2000024a 	.word	0x2000024a
 8002b3c:	2000024c 	.word	0x2000024c
 8002b40:	2000024e 	.word	0x2000024e
 8002b44:	43030000 	.word	0x43030000
 8002b48:	2000025c 	.word	0x2000025c
 8002b4c:	20000260 	.word	0x20000260
 8002b50:	20000264 	.word	0x20000264

08002b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b5a:	f000 fae8 	bl	800312e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b5e:	f000 f85f 	bl	8002c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b62:	f000 f8e1 	bl	8002d28 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002b66:	f000 f89f 	bl	8002ca8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8002b6a:	f7ff fe5f 	bl	800282c <lcd_init>
  MPU6050_Init();
 8002b6e:	f7ff feb1 	bl	80028d4 <MPU6050_Init>
  lcd_send_cmd (0x80|0x5A);
 8002b72:	20da      	movs	r0, #218	@ 0xda
 8002b74:	f7ff fdde 	bl	8002734 <lcd_send_cmd>
  lcd_send_string ("MPU6050");
 8002b78:	4b26      	ldr	r3, [pc, #152]	@ (8002c14 <main+0xc0>)
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f7ff fe94 	bl	80028a8 <lcd_send_string>
    /* USER CODE BEGIN 3 */

  	  char buf[20];

  	  // read the Accelerometer and Gyro values
  	  MPU6050_Read_Accel();
 8002b80:	f7ff ff02 	bl	8002988 <MPU6050_Read_Accel>
  	  MPU6050_Read_Gyro();
 8002b84:	f7ff ff74 	bl	8002a70 <MPU6050_Read_Gyro>

  	  // print the Acceleration and Gyro values on the LCD 20x4
  	  lcd_send_cmd (0x80|0x00);  // goto 1,1
 8002b88:	2080      	movs	r0, #128	@ 0x80
 8002b8a:	f7ff fdd3 	bl	8002734 <lcd_send_cmd>
  	  //sprintf (buf, "Ax=%.2fg ", Ax);
  	  lcd_send_string (buf);
 8002b8e:	1d3b      	adds	r3, r7, #4
 8002b90:	0018      	movs	r0, r3
 8002b92:	f7ff fe89 	bl	80028a8 <lcd_send_string>

  	  lcd_send_cmd (0x80|0x40);  // goto 2,1
 8002b96:	20c0      	movs	r0, #192	@ 0xc0
 8002b98:	f7ff fdcc 	bl	8002734 <lcd_send_cmd>
  	  //sprintf (buf, "Ay=%.2fg ", Ay);
  	  lcd_send_string (buf);
 8002b9c:	1d3b      	adds	r3, r7, #4
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f7ff fe82 	bl	80028a8 <lcd_send_string>

  	  lcd_send_cmd (0x80|0x14);  // goto 3,1
 8002ba4:	2094      	movs	r0, #148	@ 0x94
 8002ba6:	f7ff fdc5 	bl	8002734 <lcd_send_cmd>
  	  //sprintf (buf, "Az=%.2fg ", Az);
  	  lcd_send_string (buf);
 8002baa:	1d3b      	adds	r3, r7, #4
 8002bac:	0018      	movs	r0, r3
 8002bae:	f7ff fe7b 	bl	80028a8 <lcd_send_string>

  	  lcd_send_cmd (0x80|0x0A);  // goto 1,11
 8002bb2:	208a      	movs	r0, #138	@ 0x8a
 8002bb4:	f7ff fdbe 	bl	8002734 <lcd_send_cmd>
  	  //sprintf (buf, "Gx=%.2f", Gx);
  	  lcd_send_string (buf);
 8002bb8:	1d3b      	adds	r3, r7, #4
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f7ff fe74 	bl	80028a8 <lcd_send_string>

  	  lcd_send_cmd (0x80|0x4A);  // goto 2,11
 8002bc0:	20ca      	movs	r0, #202	@ 0xca
 8002bc2:	f7ff fdb7 	bl	8002734 <lcd_send_cmd>
  	  //sprintf (buf, "Gy=%.2f", Gy);
  	  lcd_send_string (buf);
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7ff fe6d 	bl	80028a8 <lcd_send_string>

  	  lcd_send_cmd (0x80|0x1E);  // goto 3,11
 8002bce:	209e      	movs	r0, #158	@ 0x9e
 8002bd0:	f7ff fdb0 	bl	8002734 <lcd_send_cmd>
  	  //sprintf (buf, "Gz=%.2f", Gz);
  	  lcd_send_string (buf);
 8002bd4:	1d3b      	adds	r3, r7, #4
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f7ff fe66 	bl	80028a8 <lcd_send_string>

  	 if(Gx>10){
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8002c18 <main+0xc4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	490e      	ldr	r1, [pc, #56]	@ (8002c1c <main+0xc8>)
 8002be2:	1c18      	adds	r0, r3, #0
 8002be4:	f7fd fc86 	bl	80004f4 <__aeabi_fcmpgt>
 8002be8:	1e03      	subs	r3, r0, #0
 8002bea:	d007      	beq.n	8002bfc <main+0xa8>
  	  		  HAL_GPIO_WritePin(GPIOA, LEDX_Pin, GPIO_PIN_SET);
 8002bec:	23a0      	movs	r3, #160	@ 0xa0
 8002bee:	05db      	lsls	r3, r3, #23
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	2140      	movs	r1, #64	@ 0x40
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f000 fd61 	bl	80036bc <HAL_GPIO_WritePin>
 8002bfa:	e006      	b.n	8002c0a <main+0xb6>
  	  	  }
  	  	  else{
  	  		HAL_GPIO_WritePin(GPIOA, LEDX_Pin, GPIO_PIN_RESET);
 8002bfc:	23a0      	movs	r3, #160	@ 0xa0
 8002bfe:	05db      	lsls	r3, r3, #23
 8002c00:	2200      	movs	r2, #0
 8002c02:	2140      	movs	r1, #64	@ 0x40
 8002c04:	0018      	movs	r0, r3
 8002c06:	f000 fd59 	bl	80036bc <HAL_GPIO_WritePin>
  	  	  }

  	  HAL_Delay (250);  // wait for a while
 8002c0a:	20fa      	movs	r0, #250	@ 0xfa
 8002c0c:	f000 fb0c 	bl	8003228 <HAL_Delay>
  {
 8002c10:	e7b6      	b.n	8002b80 <main+0x2c>
 8002c12:	46c0      	nop			@ (mov r8, r8)
 8002c14:	08007968 	.word	0x08007968
 8002c18:	2000025c 	.word	0x2000025c
 8002c1c:	41200000 	.word	0x41200000

08002c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b08d      	sub	sp, #52	@ 0x34
 8002c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c26:	2414      	movs	r4, #20
 8002c28:	193b      	adds	r3, r7, r4
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	231c      	movs	r3, #28
 8002c2e:	001a      	movs	r2, r3
 8002c30:	2100      	movs	r1, #0
 8002c32:	f002 fec1 	bl	80059b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c36:	003b      	movs	r3, r7
 8002c38:	0018      	movs	r0, r3
 8002c3a:	2314      	movs	r3, #20
 8002c3c:	001a      	movs	r2, r3
 8002c3e:	2100      	movs	r1, #0
 8002c40:	f002 feba 	bl	80059b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c44:	193b      	adds	r3, r7, r4
 8002c46:	2202      	movs	r2, #2
 8002c48:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c4a:	193b      	adds	r3, r7, r4
 8002c4c:	2280      	movs	r2, #128	@ 0x80
 8002c4e:	0052      	lsls	r2, r2, #1
 8002c50:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002c52:	193b      	adds	r3, r7, r4
 8002c54:	2200      	movs	r2, #0
 8002c56:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c58:	193b      	adds	r3, r7, r4
 8002c5a:	2240      	movs	r2, #64	@ 0x40
 8002c5c:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c5e:	193b      	adds	r3, r7, r4
 8002c60:	0018      	movs	r0, r3
 8002c62:	f001 fd0f 	bl	8004684 <HAL_RCC_OscConfig>
 8002c66:	1e03      	subs	r3, r0, #0
 8002c68:	d001      	beq.n	8002c6e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8002c6a:	f000 f8a1 	bl	8002db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c6e:	003b      	movs	r3, r7
 8002c70:	2207      	movs	r2, #7
 8002c72:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002c74:	003b      	movs	r3, r7
 8002c76:	2200      	movs	r2, #0
 8002c78:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002c7a:	003b      	movs	r3, r7
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002c80:	003b      	movs	r3, r7
 8002c82:	2200      	movs	r2, #0
 8002c84:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8002c86:	003b      	movs	r3, r7
 8002c88:	2200      	movs	r2, #0
 8002c8a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c8c:	003b      	movs	r3, r7
 8002c8e:	2101      	movs	r1, #1
 8002c90:	0018      	movs	r0, r3
 8002c92:	f001 fedb 	bl	8004a4c <HAL_RCC_ClockConfig>
 8002c96:	1e03      	subs	r3, r0, #0
 8002c98:	d001      	beq.n	8002c9e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002c9a:	f000 f889 	bl	8002db0 <Error_Handler>
  }
}
 8002c9e:	46c0      	nop			@ (mov r8, r8)
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b00d      	add	sp, #52	@ 0x34
 8002ca4:	bd90      	pop	{r4, r7, pc}
	...

08002ca8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002cac:	4b1b      	ldr	r3, [pc, #108]	@ (8002d1c <MX_I2C1_Init+0x74>)
 8002cae:	4a1c      	ldr	r2, [pc, #112]	@ (8002d20 <MX_I2C1_Init+0x78>)
 8002cb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 8002cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d1c <MX_I2C1_Init+0x74>)
 8002cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d24 <MX_I2C1_Init+0x7c>)
 8002cb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002cb8:	4b18      	ldr	r3, [pc, #96]	@ (8002d1c <MX_I2C1_Init+0x74>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cbe:	4b17      	ldr	r3, [pc, #92]	@ (8002d1c <MX_I2C1_Init+0x74>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002cc4:	4b15      	ldr	r3, [pc, #84]	@ (8002d1c <MX_I2C1_Init+0x74>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002cca:	4b14      	ldr	r3, [pc, #80]	@ (8002d1c <MX_I2C1_Init+0x74>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002cd0:	4b12      	ldr	r3, [pc, #72]	@ (8002d1c <MX_I2C1_Init+0x74>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cd6:	4b11      	ldr	r3, [pc, #68]	@ (8002d1c <MX_I2C1_Init+0x74>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8002d1c <MX_I2C1_Init+0x74>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8002d1c <MX_I2C1_Init+0x74>)
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f000 fd07 	bl	80036f8 <HAL_I2C_Init>
 8002cea:	1e03      	subs	r3, r0, #0
 8002cec:	d001      	beq.n	8002cf2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002cee:	f000 f85f 	bl	8002db0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8002d1c <MX_I2C1_Init+0x74>)
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f001 fc2c 	bl	8004554 <HAL_I2CEx_ConfigAnalogFilter>
 8002cfc:	1e03      	subs	r3, r0, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002d00:	f000 f856 	bl	8002db0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002d04:	4b05      	ldr	r3, [pc, #20]	@ (8002d1c <MX_I2C1_Init+0x74>)
 8002d06:	2100      	movs	r1, #0
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f001 fc6f 	bl	80045ec <HAL_I2CEx_ConfigDigitalFilter>
 8002d0e:	1e03      	subs	r3, r0, #0
 8002d10:	d001      	beq.n	8002d16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002d12:	f000 f84d 	bl	8002db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d16:	46c0      	nop			@ (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	200001f0 	.word	0x200001f0
 8002d20:	40005400 	.word	0x40005400
 8002d24:	10805d88 	.word	0x10805d88

08002d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d28:	b590      	push	{r4, r7, lr}
 8002d2a:	b089      	sub	sp, #36	@ 0x24
 8002d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d2e:	240c      	movs	r4, #12
 8002d30:	193b      	adds	r3, r7, r4
 8002d32:	0018      	movs	r0, r3
 8002d34:	2314      	movs	r3, #20
 8002d36:	001a      	movs	r2, r3
 8002d38:	2100      	movs	r1, #0
 8002d3a:	f002 fe3d 	bl	80059b8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dac <MX_GPIO_Init+0x84>)
 8002d40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d42:	4b1a      	ldr	r3, [pc, #104]	@ (8002dac <MX_GPIO_Init+0x84>)
 8002d44:	2104      	movs	r1, #4
 8002d46:	430a      	orrs	r2, r1
 8002d48:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d4a:	4b18      	ldr	r3, [pc, #96]	@ (8002dac <MX_GPIO_Init+0x84>)
 8002d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d4e:	2204      	movs	r2, #4
 8002d50:	4013      	ands	r3, r2
 8002d52:	60bb      	str	r3, [r7, #8]
 8002d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d56:	4b15      	ldr	r3, [pc, #84]	@ (8002dac <MX_GPIO_Init+0x84>)
 8002d58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d5a:	4b14      	ldr	r3, [pc, #80]	@ (8002dac <MX_GPIO_Init+0x84>)
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d62:	4b12      	ldr	r3, [pc, #72]	@ (8002dac <MX_GPIO_Init+0x84>)
 8002d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d66:	2201      	movs	r2, #1
 8002d68:	4013      	ands	r3, r2
 8002d6a:	607b      	str	r3, [r7, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|LEDX_Pin|LEDY_Pin, GPIO_PIN_RESET);
 8002d6e:	23a0      	movs	r3, #160	@ 0xa0
 8002d70:	05db      	lsls	r3, r3, #23
 8002d72:	2200      	movs	r2, #0
 8002d74:	21e0      	movs	r1, #224	@ 0xe0
 8002d76:	0018      	movs	r0, r3
 8002d78:	f000 fca0 	bl	80036bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 LEDX_Pin LEDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|LEDX_Pin|LEDY_Pin;
 8002d7c:	0021      	movs	r1, r4
 8002d7e:	187b      	adds	r3, r7, r1
 8002d80:	22e0      	movs	r2, #224	@ 0xe0
 8002d82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d84:	187b      	adds	r3, r7, r1
 8002d86:	2201      	movs	r2, #1
 8002d88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d90:	187b      	adds	r3, r7, r1
 8002d92:	2200      	movs	r2, #0
 8002d94:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d96:	187a      	adds	r2, r7, r1
 8002d98:	23a0      	movs	r3, #160	@ 0xa0
 8002d9a:	05db      	lsls	r3, r3, #23
 8002d9c:	0011      	movs	r1, r2
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f000 fb1a 	bl	80033d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002da4:	46c0      	nop			@ (mov r8, r8)
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b009      	add	sp, #36	@ 0x24
 8002daa:	bd90      	pop	{r4, r7, pc}
 8002dac:	40021000 	.word	0x40021000

08002db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002db4:	b672      	cpsid	i
}
 8002db6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002db8:	46c0      	nop			@ (mov r8, r8)
 8002dba:	e7fd      	b.n	8002db8 <Error_Handler+0x8>

08002dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002e00 <HAL_MspInit+0x44>)
 8002dc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e00 <HAL_MspInit+0x44>)
 8002dc8:	2101      	movs	r1, #1
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002dce:	4b0c      	ldr	r3, [pc, #48]	@ (8002e00 <HAL_MspInit+0x44>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	607b      	str	r3, [r7, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dda:	4b09      	ldr	r3, [pc, #36]	@ (8002e00 <HAL_MspInit+0x44>)
 8002ddc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dde:	4b08      	ldr	r3, [pc, #32]	@ (8002e00 <HAL_MspInit+0x44>)
 8002de0:	2180      	movs	r1, #128	@ 0x80
 8002de2:	0549      	lsls	r1, r1, #21
 8002de4:	430a      	orrs	r2, r1
 8002de6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002de8:	4b05      	ldr	r3, [pc, #20]	@ (8002e00 <HAL_MspInit+0x44>)
 8002dea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dec:	2380      	movs	r3, #128	@ 0x80
 8002dee:	055b      	lsls	r3, r3, #21
 8002df0:	4013      	ands	r3, r2
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002df6:	46c0      	nop			@ (mov r8, r8)
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b002      	add	sp, #8
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	40021000 	.word	0x40021000

08002e04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b093      	sub	sp, #76	@ 0x4c
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0c:	2334      	movs	r3, #52	@ 0x34
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	0018      	movs	r0, r3
 8002e12:	2314      	movs	r3, #20
 8002e14:	001a      	movs	r2, r3
 8002e16:	2100      	movs	r1, #0
 8002e18:	f002 fdce 	bl	80059b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e1c:	2418      	movs	r4, #24
 8002e1e:	193b      	adds	r3, r7, r4
 8002e20:	0018      	movs	r0, r3
 8002e22:	231c      	movs	r3, #28
 8002e24:	001a      	movs	r2, r3
 8002e26:	2100      	movs	r1, #0
 8002e28:	f002 fdc6 	bl	80059b8 <memset>
  if(hi2c->Instance==I2C1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a35      	ldr	r2, [pc, #212]	@ (8002f08 <HAL_I2C_MspInit+0x104>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d163      	bne.n	8002efe <HAL_I2C_MspInit+0xfa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002e36:	193b      	adds	r3, r7, r4
 8002e38:	2202      	movs	r2, #2
 8002e3a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002e3c:	193b      	adds	r3, r7, r4
 8002e3e:	2200      	movs	r2, #0
 8002e40:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e42:	193b      	adds	r3, r7, r4
 8002e44:	0018      	movs	r0, r3
 8002e46:	f001 ff59 	bl	8004cfc <HAL_RCCEx_PeriphCLKConfig>
 8002e4a:	1e03      	subs	r3, r0, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002e4e:	f7ff ffaf 	bl	8002db0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e52:	4b2e      	ldr	r3, [pc, #184]	@ (8002f0c <HAL_I2C_MspInit+0x108>)
 8002e54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e56:	4b2d      	ldr	r3, [pc, #180]	@ (8002f0c <HAL_I2C_MspInit+0x108>)
 8002e58:	2104      	movs	r1, #4
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8002f0c <HAL_I2C_MspInit+0x108>)
 8002e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e62:	2204      	movs	r2, #4
 8002e64:	4013      	ands	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6a:	4b28      	ldr	r3, [pc, #160]	@ (8002f0c <HAL_I2C_MspInit+0x108>)
 8002e6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e6e:	4b27      	ldr	r3, [pc, #156]	@ (8002f0c <HAL_I2C_MspInit+0x108>)
 8002e70:	2101      	movs	r1, #1
 8002e72:	430a      	orrs	r2, r1
 8002e74:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e76:	4b25      	ldr	r3, [pc, #148]	@ (8002f0c <HAL_I2C_MspInit+0x108>)
 8002e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PC14-OSCX_IN (PC14)     ------> I2C1_SDA
    PA9     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002e82:	2134      	movs	r1, #52	@ 0x34
 8002e84:	187b      	adds	r3, r7, r1
 8002e86:	2280      	movs	r2, #128	@ 0x80
 8002e88:	01d2      	lsls	r2, r2, #7
 8002e8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e8c:	000c      	movs	r4, r1
 8002e8e:	193b      	adds	r3, r7, r4
 8002e90:	2212      	movs	r2, #18
 8002e92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e94:	193b      	adds	r3, r7, r4
 8002e96:	2200      	movs	r2, #0
 8002e98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9a:	193b      	adds	r3, r7, r4
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_I2C1;
 8002ea0:	193b      	adds	r3, r7, r4
 8002ea2:	220e      	movs	r2, #14
 8002ea4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ea6:	193b      	adds	r3, r7, r4
 8002ea8:	4a19      	ldr	r2, [pc, #100]	@ (8002f10 <HAL_I2C_MspInit+0x10c>)
 8002eaa:	0019      	movs	r1, r3
 8002eac:	0010      	movs	r0, r2
 8002eae:	f000 fa93 	bl	80033d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002eb2:	0021      	movs	r1, r4
 8002eb4:	187b      	adds	r3, r7, r1
 8002eb6:	2280      	movs	r2, #128	@ 0x80
 8002eb8:	0092      	lsls	r2, r2, #2
 8002eba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ebc:	187b      	adds	r3, r7, r1
 8002ebe:	2212      	movs	r2, #18
 8002ec0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec2:	187b      	adds	r3, r7, r1
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec8:	187b      	adds	r3, r7, r1
 8002eca:	2200      	movs	r2, #0
 8002ecc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002ece:	187b      	adds	r3, r7, r1
 8002ed0:	2206      	movs	r2, #6
 8002ed2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed4:	187a      	adds	r2, r7, r1
 8002ed6:	23a0      	movs	r3, #160	@ 0xa0
 8002ed8:	05db      	lsls	r3, r3, #23
 8002eda:	0011      	movs	r1, r2
 8002edc:	0018      	movs	r0, r3
 8002ede:	f000 fa7b 	bl	80033d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8002f0c <HAL_I2C_MspInit+0x108>)
 8002ee4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ee6:	4b09      	ldr	r3, [pc, #36]	@ (8002f0c <HAL_I2C_MspInit+0x108>)
 8002ee8:	2180      	movs	r1, #128	@ 0x80
 8002eea:	0389      	lsls	r1, r1, #14
 8002eec:	430a      	orrs	r2, r1
 8002eee:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ef0:	4b06      	ldr	r3, [pc, #24]	@ (8002f0c <HAL_I2C_MspInit+0x108>)
 8002ef2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ef4:	2380      	movs	r3, #128	@ 0x80
 8002ef6:	039b      	lsls	r3, r3, #14
 8002ef8:	4013      	ands	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002efe:	46c0      	nop			@ (mov r8, r8)
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b013      	add	sp, #76	@ 0x4c
 8002f04:	bd90      	pop	{r4, r7, pc}
 8002f06:	46c0      	nop			@ (mov r8, r8)
 8002f08:	40005400 	.word	0x40005400
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	50000800 	.word	0x50000800

08002f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f18:	46c0      	nop			@ (mov r8, r8)
 8002f1a:	e7fd      	b.n	8002f18 <NMI_Handler+0x4>

08002f1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f20:	46c0      	nop			@ (mov r8, r8)
 8002f22:	e7fd      	b.n	8002f20 <HardFault_Handler+0x4>

08002f24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002f28:	46c0      	nop			@ (mov r8, r8)
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f32:	46c0      	nop			@ (mov r8, r8)
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f3c:	f000 f958 	bl	80031f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f40:	46c0      	nop			@ (mov r8, r8)
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	af00      	add	r7, sp, #0
  return 1;
 8002f4a:	2301      	movs	r3, #1
}
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <_kill>:

int _kill(int pid, int sig)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f5c:	f002 fd86 	bl	8005a6c <__errno>
 8002f60:	0003      	movs	r3, r0
 8002f62:	2216      	movs	r2, #22
 8002f64:	601a      	str	r2, [r3, #0]
  return -1;
 8002f66:	2301      	movs	r3, #1
 8002f68:	425b      	negs	r3, r3
}
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	b002      	add	sp, #8
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <_exit>:

void _exit (int status)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	425a      	negs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	0011      	movs	r1, r2
 8002f82:	0018      	movs	r0, r3
 8002f84:	f7ff ffe5 	bl	8002f52 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f88:	46c0      	nop			@ (mov r8, r8)
 8002f8a:	e7fd      	b.n	8002f88 <_exit+0x16>

08002f8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	e00a      	b.n	8002fb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f9e:	e000      	b.n	8002fa2 <_read+0x16>
 8002fa0:	bf00      	nop
 8002fa2:	0001      	movs	r1, r0
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	60ba      	str	r2, [r7, #8]
 8002faa:	b2ca      	uxtb	r2, r1
 8002fac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	dbf0      	blt.n	8002f9e <_read+0x12>
  }

  return len;
 8002fbc:	687b      	ldr	r3, [r7, #4]
}
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b006      	add	sp, #24
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b086      	sub	sp, #24
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	e009      	b.n	8002fec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	60ba      	str	r2, [r7, #8]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	e000      	b.n	8002fe6 <_write+0x20>
 8002fe4:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	dbf1      	blt.n	8002fd8 <_write+0x12>
  }
  return len;
 8002ff4:	687b      	ldr	r3, [r7, #4]
}
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	b006      	add	sp, #24
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <_close>:

int _close(int file)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003006:	2301      	movs	r3, #1
 8003008:	425b      	negs	r3, r3
}
 800300a:	0018      	movs	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	b002      	add	sp, #8
 8003010:	bd80      	pop	{r7, pc}

08003012 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	2280      	movs	r2, #128	@ 0x80
 8003020:	0192      	lsls	r2, r2, #6
 8003022:	605a      	str	r2, [r3, #4]
  return 0;
 8003024:	2300      	movs	r3, #0
}
 8003026:	0018      	movs	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	b002      	add	sp, #8
 800302c:	bd80      	pop	{r7, pc}

0800302e <_isatty>:

int _isatty(int file)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003036:	2301      	movs	r3, #1
}
 8003038:	0018      	movs	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	b002      	add	sp, #8
 800303e:	bd80      	pop	{r7, pc}

08003040 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800304c:	2300      	movs	r3, #0
}
 800304e:	0018      	movs	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	b004      	add	sp, #16
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003060:	4a14      	ldr	r2, [pc, #80]	@ (80030b4 <_sbrk+0x5c>)
 8003062:	4b15      	ldr	r3, [pc, #84]	@ (80030b8 <_sbrk+0x60>)
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800306c:	4b13      	ldr	r3, [pc, #76]	@ (80030bc <_sbrk+0x64>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d102      	bne.n	800307a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003074:	4b11      	ldr	r3, [pc, #68]	@ (80030bc <_sbrk+0x64>)
 8003076:	4a12      	ldr	r2, [pc, #72]	@ (80030c0 <_sbrk+0x68>)
 8003078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800307a:	4b10      	ldr	r3, [pc, #64]	@ (80030bc <_sbrk+0x64>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	18d3      	adds	r3, r2, r3
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	429a      	cmp	r2, r3
 8003086:	d207      	bcs.n	8003098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003088:	f002 fcf0 	bl	8005a6c <__errno>
 800308c:	0003      	movs	r3, r0
 800308e:	220c      	movs	r2, #12
 8003090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003092:	2301      	movs	r3, #1
 8003094:	425b      	negs	r3, r3
 8003096:	e009      	b.n	80030ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003098:	4b08      	ldr	r3, [pc, #32]	@ (80030bc <_sbrk+0x64>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800309e:	4b07      	ldr	r3, [pc, #28]	@ (80030bc <_sbrk+0x64>)
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	18d2      	adds	r2, r2, r3
 80030a6:	4b05      	ldr	r3, [pc, #20]	@ (80030bc <_sbrk+0x64>)
 80030a8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80030aa:	68fb      	ldr	r3, [r7, #12]
}
 80030ac:	0018      	movs	r0, r3
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b006      	add	sp, #24
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	20003000 	.word	0x20003000
 80030b8:	00000400 	.word	0x00000400
 80030bc:	20000268 	.word	0x20000268
 80030c0:	200003c0 	.word	0x200003c0

080030c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030c8:	4b03      	ldr	r3, [pc, #12]	@ (80030d8 <SystemInit+0x14>)
 80030ca:	2280      	movs	r2, #128	@ 0x80
 80030cc:	0512      	lsls	r2, r2, #20
 80030ce:	609a      	str	r2, [r3, #8]
#endif
}
 80030d0:	46c0      	nop			@ (mov r8, r8)
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	46c0      	nop			@ (mov r8, r8)
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030dc:	480d      	ldr	r0, [pc, #52]	@ (8003114 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80030e0:	f7ff fff0 	bl	80030c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80030e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80030e6:	e003      	b.n	80030f0 <LoopCopyDataInit>

080030e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80030e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80030ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80030ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80030ee:	3104      	adds	r1, #4

080030f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80030f0:	480a      	ldr	r0, [pc, #40]	@ (800311c <LoopForever+0xa>)
  ldr r3, =_edata
 80030f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <LoopForever+0xe>)
  adds r2, r0, r1
 80030f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80030f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80030f8:	d3f6      	bcc.n	80030e8 <CopyDataInit>
  ldr r2, =_sbss
 80030fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003124 <LoopForever+0x12>)
  b LoopFillZerobss
 80030fc:	e002      	b.n	8003104 <LoopFillZerobss>

080030fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80030fe:	2300      	movs	r3, #0
  str  r3, [r2]
 8003100:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003102:	3204      	adds	r2, #4

08003104 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8003104:	4b08      	ldr	r3, [pc, #32]	@ (8003128 <LoopForever+0x16>)
  cmp r2, r3
 8003106:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003108:	d3f9      	bcc.n	80030fe <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800310a:	f002 fcb5 	bl	8005a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800310e:	f7ff fd21 	bl	8002b54 <main>

08003112 <LoopForever>:

LoopForever:
    b LoopForever
 8003112:	e7fe      	b.n	8003112 <LoopForever>
  ldr   r0, =_estack
 8003114:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8003118:	08007de8 	.word	0x08007de8
  ldr r0, =_sdata
 800311c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003120:	200001d4 	.word	0x200001d4
  ldr r2, =_sbss
 8003124:	200001d4 	.word	0x200001d4
  ldr r3, = _ebss
 8003128:	200003bc 	.word	0x200003bc

0800312c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800312c:	e7fe      	b.n	800312c <ADC1_IRQHandler>

0800312e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003134:	1dfb      	adds	r3, r7, #7
 8003136:	2200      	movs	r2, #0
 8003138:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800313a:	2003      	movs	r0, #3
 800313c:	f000 f80e 	bl	800315c <HAL_InitTick>
 8003140:	1e03      	subs	r3, r0, #0
 8003142:	d003      	beq.n	800314c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003144:	1dfb      	adds	r3, r7, #7
 8003146:	2201      	movs	r2, #1
 8003148:	701a      	strb	r2, [r3, #0]
 800314a:	e001      	b.n	8003150 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800314c:	f7ff fe36 	bl	8002dbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003150:	1dfb      	adds	r3, r7, #7
 8003152:	781b      	ldrb	r3, [r3, #0]
}
 8003154:	0018      	movs	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	b002      	add	sp, #8
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800315c:	b590      	push	{r4, r7, lr}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003164:	230f      	movs	r3, #15
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 800316c:	4b1d      	ldr	r3, [pc, #116]	@ (80031e4 <HAL_InitTick+0x88>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d02b      	beq.n	80031cc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8003174:	4b1c      	ldr	r3, [pc, #112]	@ (80031e8 <HAL_InitTick+0x8c>)
 8003176:	681c      	ldr	r4, [r3, #0]
 8003178:	4b1a      	ldr	r3, [pc, #104]	@ (80031e4 <HAL_InitTick+0x88>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	0019      	movs	r1, r3
 800317e:	23fa      	movs	r3, #250	@ 0xfa
 8003180:	0098      	lsls	r0, r3, #2
 8003182:	f7fc ffdd 	bl	8000140 <__udivsi3>
 8003186:	0003      	movs	r3, r0
 8003188:	0019      	movs	r1, r3
 800318a:	0020      	movs	r0, r4
 800318c:	f7fc ffd8 	bl	8000140 <__udivsi3>
 8003190:	0003      	movs	r3, r0
 8003192:	0018      	movs	r0, r3
 8003194:	f000 f913 	bl	80033be <HAL_SYSTICK_Config>
 8003198:	1e03      	subs	r3, r0, #0
 800319a:	d112      	bne.n	80031c2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d80a      	bhi.n	80031b8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	2301      	movs	r3, #1
 80031a6:	425b      	negs	r3, r3
 80031a8:	2200      	movs	r2, #0
 80031aa:	0018      	movs	r0, r3
 80031ac:	f000 f8f2 	bl	8003394 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031b0:	4b0e      	ldr	r3, [pc, #56]	@ (80031ec <HAL_InitTick+0x90>)
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	e00d      	b.n	80031d4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80031b8:	230f      	movs	r3, #15
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	2201      	movs	r2, #1
 80031be:	701a      	strb	r2, [r3, #0]
 80031c0:	e008      	b.n	80031d4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80031c2:	230f      	movs	r3, #15
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
 80031ca:	e003      	b.n	80031d4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031cc:	230f      	movs	r3, #15
 80031ce:	18fb      	adds	r3, r7, r3
 80031d0:	2201      	movs	r2, #1
 80031d2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80031d4:	230f      	movs	r3, #15
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	781b      	ldrb	r3, [r3, #0]
}
 80031da:	0018      	movs	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	b005      	add	sp, #20
 80031e0:	bd90      	pop	{r4, r7, pc}
 80031e2:	46c0      	nop			@ (mov r8, r8)
 80031e4:	20000008 	.word	0x20000008
 80031e8:	20000000 	.word	0x20000000
 80031ec:	20000004 	.word	0x20000004

080031f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031f4:	4b05      	ldr	r3, [pc, #20]	@ (800320c <HAL_IncTick+0x1c>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	001a      	movs	r2, r3
 80031fa:	4b05      	ldr	r3, [pc, #20]	@ (8003210 <HAL_IncTick+0x20>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	18d2      	adds	r2, r2, r3
 8003200:	4b03      	ldr	r3, [pc, #12]	@ (8003210 <HAL_IncTick+0x20>)
 8003202:	601a      	str	r2, [r3, #0]
}
 8003204:	46c0      	nop			@ (mov r8, r8)
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	46c0      	nop			@ (mov r8, r8)
 800320c:	20000008 	.word	0x20000008
 8003210:	2000026c 	.word	0x2000026c

08003214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  return uwTick;
 8003218:	4b02      	ldr	r3, [pc, #8]	@ (8003224 <HAL_GetTick+0x10>)
 800321a:	681b      	ldr	r3, [r3, #0]
}
 800321c:	0018      	movs	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			@ (mov r8, r8)
 8003224:	2000026c 	.word	0x2000026c

08003228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003230:	f7ff fff0 	bl	8003214 <HAL_GetTick>
 8003234:	0003      	movs	r3, r0
 8003236:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	3301      	adds	r3, #1
 8003240:	d005      	beq.n	800324e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003242:	4b0a      	ldr	r3, [pc, #40]	@ (800326c <HAL_Delay+0x44>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	001a      	movs	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	189b      	adds	r3, r3, r2
 800324c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800324e:	46c0      	nop			@ (mov r8, r8)
 8003250:	f7ff ffe0 	bl	8003214 <HAL_GetTick>
 8003254:	0002      	movs	r2, r0
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	429a      	cmp	r2, r3
 800325e:	d8f7      	bhi.n	8003250 <HAL_Delay+0x28>
  {
  }
}
 8003260:	46c0      	nop			@ (mov r8, r8)
 8003262:	46c0      	nop			@ (mov r8, r8)
 8003264:	46bd      	mov	sp, r7
 8003266:	b004      	add	sp, #16
 8003268:	bd80      	pop	{r7, pc}
 800326a:	46c0      	nop			@ (mov r8, r8)
 800326c:	20000008 	.word	0x20000008

08003270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003270:	b590      	push	{r4, r7, lr}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	0002      	movs	r2, r0
 8003278:	6039      	str	r1, [r7, #0]
 800327a:	1dfb      	adds	r3, r7, #7
 800327c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800327e:	1dfb      	adds	r3, r7, #7
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b7f      	cmp	r3, #127	@ 0x7f
 8003284:	d828      	bhi.n	80032d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003286:	4a2f      	ldr	r2, [pc, #188]	@ (8003344 <__NVIC_SetPriority+0xd4>)
 8003288:	1dfb      	adds	r3, r7, #7
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	b25b      	sxtb	r3, r3
 800328e:	089b      	lsrs	r3, r3, #2
 8003290:	33c0      	adds	r3, #192	@ 0xc0
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	589b      	ldr	r3, [r3, r2]
 8003296:	1dfa      	adds	r2, r7, #7
 8003298:	7812      	ldrb	r2, [r2, #0]
 800329a:	0011      	movs	r1, r2
 800329c:	2203      	movs	r2, #3
 800329e:	400a      	ands	r2, r1
 80032a0:	00d2      	lsls	r2, r2, #3
 80032a2:	21ff      	movs	r1, #255	@ 0xff
 80032a4:	4091      	lsls	r1, r2
 80032a6:	000a      	movs	r2, r1
 80032a8:	43d2      	mvns	r2, r2
 80032aa:	401a      	ands	r2, r3
 80032ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	019b      	lsls	r3, r3, #6
 80032b2:	22ff      	movs	r2, #255	@ 0xff
 80032b4:	401a      	ands	r2, r3
 80032b6:	1dfb      	adds	r3, r7, #7
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	0018      	movs	r0, r3
 80032bc:	2303      	movs	r3, #3
 80032be:	4003      	ands	r3, r0
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032c4:	481f      	ldr	r0, [pc, #124]	@ (8003344 <__NVIC_SetPriority+0xd4>)
 80032c6:	1dfb      	adds	r3, r7, #7
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	b25b      	sxtb	r3, r3
 80032cc:	089b      	lsrs	r3, r3, #2
 80032ce:	430a      	orrs	r2, r1
 80032d0:	33c0      	adds	r3, #192	@ 0xc0
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80032d6:	e031      	b.n	800333c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003348 <__NVIC_SetPriority+0xd8>)
 80032da:	1dfb      	adds	r3, r7, #7
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	0019      	movs	r1, r3
 80032e0:	230f      	movs	r3, #15
 80032e2:	400b      	ands	r3, r1
 80032e4:	3b08      	subs	r3, #8
 80032e6:	089b      	lsrs	r3, r3, #2
 80032e8:	3306      	adds	r3, #6
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	18d3      	adds	r3, r2, r3
 80032ee:	3304      	adds	r3, #4
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	1dfa      	adds	r2, r7, #7
 80032f4:	7812      	ldrb	r2, [r2, #0]
 80032f6:	0011      	movs	r1, r2
 80032f8:	2203      	movs	r2, #3
 80032fa:	400a      	ands	r2, r1
 80032fc:	00d2      	lsls	r2, r2, #3
 80032fe:	21ff      	movs	r1, #255	@ 0xff
 8003300:	4091      	lsls	r1, r2
 8003302:	000a      	movs	r2, r1
 8003304:	43d2      	mvns	r2, r2
 8003306:	401a      	ands	r2, r3
 8003308:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	019b      	lsls	r3, r3, #6
 800330e:	22ff      	movs	r2, #255	@ 0xff
 8003310:	401a      	ands	r2, r3
 8003312:	1dfb      	adds	r3, r7, #7
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	0018      	movs	r0, r3
 8003318:	2303      	movs	r3, #3
 800331a:	4003      	ands	r3, r0
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003320:	4809      	ldr	r0, [pc, #36]	@ (8003348 <__NVIC_SetPriority+0xd8>)
 8003322:	1dfb      	adds	r3, r7, #7
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	001c      	movs	r4, r3
 8003328:	230f      	movs	r3, #15
 800332a:	4023      	ands	r3, r4
 800332c:	3b08      	subs	r3, #8
 800332e:	089b      	lsrs	r3, r3, #2
 8003330:	430a      	orrs	r2, r1
 8003332:	3306      	adds	r3, #6
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	18c3      	adds	r3, r0, r3
 8003338:	3304      	adds	r3, #4
 800333a:	601a      	str	r2, [r3, #0]
}
 800333c:	46c0      	nop			@ (mov r8, r8)
 800333e:	46bd      	mov	sp, r7
 8003340:	b003      	add	sp, #12
 8003342:	bd90      	pop	{r4, r7, pc}
 8003344:	e000e100 	.word	0xe000e100
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	1e5a      	subs	r2, r3, #1
 8003358:	2380      	movs	r3, #128	@ 0x80
 800335a:	045b      	lsls	r3, r3, #17
 800335c:	429a      	cmp	r2, r3
 800335e:	d301      	bcc.n	8003364 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003360:	2301      	movs	r3, #1
 8003362:	e010      	b.n	8003386 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003364:	4b0a      	ldr	r3, [pc, #40]	@ (8003390 <SysTick_Config+0x44>)
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	3a01      	subs	r2, #1
 800336a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800336c:	2301      	movs	r3, #1
 800336e:	425b      	negs	r3, r3
 8003370:	2103      	movs	r1, #3
 8003372:	0018      	movs	r0, r3
 8003374:	f7ff ff7c 	bl	8003270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003378:	4b05      	ldr	r3, [pc, #20]	@ (8003390 <SysTick_Config+0x44>)
 800337a:	2200      	movs	r2, #0
 800337c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800337e:	4b04      	ldr	r3, [pc, #16]	@ (8003390 <SysTick_Config+0x44>)
 8003380:	2207      	movs	r2, #7
 8003382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003384:	2300      	movs	r3, #0
}
 8003386:	0018      	movs	r0, r3
 8003388:	46bd      	mov	sp, r7
 800338a:	b002      	add	sp, #8
 800338c:	bd80      	pop	{r7, pc}
 800338e:	46c0      	nop			@ (mov r8, r8)
 8003390:	e000e010 	.word	0xe000e010

08003394 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
 800339e:	210f      	movs	r1, #15
 80033a0:	187b      	adds	r3, r7, r1
 80033a2:	1c02      	adds	r2, r0, #0
 80033a4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	187b      	adds	r3, r7, r1
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	b25b      	sxtb	r3, r3
 80033ae:	0011      	movs	r1, r2
 80033b0:	0018      	movs	r0, r3
 80033b2:	f7ff ff5d 	bl	8003270 <__NVIC_SetPriority>
}
 80033b6:	46c0      	nop			@ (mov r8, r8)
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b004      	add	sp, #16
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	0018      	movs	r0, r3
 80033ca:	f7ff ffbf 	bl	800334c <SysTick_Config>
 80033ce:	0003      	movs	r3, r0
}
 80033d0:	0018      	movs	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b002      	add	sp, #8
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80033e6:	e153      	b.n	8003690 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2101      	movs	r1, #1
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4091      	lsls	r1, r2
 80033f2:	000a      	movs	r2, r1
 80033f4:	4013      	ands	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d100      	bne.n	8003400 <HAL_GPIO_Init+0x28>
 80033fe:	e144      	b.n	800368a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d003      	beq.n	8003410 <HAL_GPIO_Init+0x38>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b12      	cmp	r3, #18
 800340e:	d125      	bne.n	800345c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	08da      	lsrs	r2, r3, #3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3208      	adds	r2, #8
 8003418:	0092      	lsls	r2, r2, #2
 800341a:	58d3      	ldr	r3, [r2, r3]
 800341c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	2207      	movs	r2, #7
 8003422:	4013      	ands	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	220f      	movs	r2, #15
 8003428:	409a      	lsls	r2, r3
 800342a:	0013      	movs	r3, r2
 800342c:	43da      	mvns	r2, r3
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	4013      	ands	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	220f      	movs	r2, #15
 800343a:	401a      	ands	r2, r3
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	2107      	movs	r1, #7
 8003440:	400b      	ands	r3, r1
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	409a      	lsls	r2, r3
 8003446:	0013      	movs	r3, r2
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	08da      	lsrs	r2, r3, #3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3208      	adds	r2, #8
 8003456:	0092      	lsls	r2, r2, #2
 8003458:	6979      	ldr	r1, [r7, #20]
 800345a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	2203      	movs	r2, #3
 8003468:	409a      	lsls	r2, r3
 800346a:	0013      	movs	r3, r2
 800346c:	43da      	mvns	r2, r3
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	4013      	ands	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2203      	movs	r2, #3
 800347a:	401a      	ands	r2, r3
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	409a      	lsls	r2, r3
 8003482:	0013      	movs	r3, r2
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	4313      	orrs	r3, r2
 8003488:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d00b      	beq.n	80034b0 <HAL_GPIO_Init+0xd8>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b02      	cmp	r3, #2
 800349e:	d007      	beq.n	80034b0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034a4:	2b11      	cmp	r3, #17
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b12      	cmp	r3, #18
 80034ae:	d130      	bne.n	8003512 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	2203      	movs	r2, #3
 80034bc:	409a      	lsls	r2, r3
 80034be:	0013      	movs	r3, r2
 80034c0:	43da      	mvns	r2, r3
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	4013      	ands	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	409a      	lsls	r2, r3
 80034d2:	0013      	movs	r3, r2
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034e6:	2201      	movs	r2, #1
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	409a      	lsls	r2, r3
 80034ec:	0013      	movs	r3, r2
 80034ee:	43da      	mvns	r2, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	4013      	ands	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	091b      	lsrs	r3, r3, #4
 80034fc:	2201      	movs	r2, #1
 80034fe:	401a      	ands	r2, r3
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	409a      	lsls	r2, r3
 8003504:	0013      	movs	r3, r2
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	4313      	orrs	r3, r2
 800350a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b03      	cmp	r3, #3
 8003518:	d017      	beq.n	800354a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	2203      	movs	r2, #3
 8003526:	409a      	lsls	r2, r3
 8003528:	0013      	movs	r3, r2
 800352a:	43da      	mvns	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	4013      	ands	r3, r2
 8003530:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	409a      	lsls	r2, r3
 800353c:	0013      	movs	r3, r2
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	4313      	orrs	r3, r2
 8003542:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	2380      	movs	r3, #128	@ 0x80
 8003550:	055b      	lsls	r3, r3, #21
 8003552:	4013      	ands	r3, r2
 8003554:	d100      	bne.n	8003558 <HAL_GPIO_Init+0x180>
 8003556:	e098      	b.n	800368a <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003558:	4a53      	ldr	r2, [pc, #332]	@ (80036a8 <HAL_GPIO_Init+0x2d0>)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	089b      	lsrs	r3, r3, #2
 800355e:	3318      	adds	r3, #24
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	589b      	ldr	r3, [r3, r2]
 8003564:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	2203      	movs	r2, #3
 800356a:	4013      	ands	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	220f      	movs	r2, #15
 8003570:	409a      	lsls	r2, r3
 8003572:	0013      	movs	r3, r2
 8003574:	43da      	mvns	r2, r3
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	4013      	ands	r3, r2
 800357a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	23a0      	movs	r3, #160	@ 0xa0
 8003580:	05db      	lsls	r3, r3, #23
 8003582:	429a      	cmp	r2, r3
 8003584:	d019      	beq.n	80035ba <HAL_GPIO_Init+0x1e2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a48      	ldr	r2, [pc, #288]	@ (80036ac <HAL_GPIO_Init+0x2d4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d013      	beq.n	80035b6 <HAL_GPIO_Init+0x1de>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a47      	ldr	r2, [pc, #284]	@ (80036b0 <HAL_GPIO_Init+0x2d8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00d      	beq.n	80035b2 <HAL_GPIO_Init+0x1da>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a46      	ldr	r2, [pc, #280]	@ (80036b4 <HAL_GPIO_Init+0x2dc>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d007      	beq.n	80035ae <HAL_GPIO_Init+0x1d6>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a45      	ldr	r2, [pc, #276]	@ (80036b8 <HAL_GPIO_Init+0x2e0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d101      	bne.n	80035aa <HAL_GPIO_Init+0x1d2>
 80035a6:	2305      	movs	r3, #5
 80035a8:	e008      	b.n	80035bc <HAL_GPIO_Init+0x1e4>
 80035aa:	2306      	movs	r3, #6
 80035ac:	e006      	b.n	80035bc <HAL_GPIO_Init+0x1e4>
 80035ae:	2303      	movs	r3, #3
 80035b0:	e004      	b.n	80035bc <HAL_GPIO_Init+0x1e4>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e002      	b.n	80035bc <HAL_GPIO_Init+0x1e4>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <HAL_GPIO_Init+0x1e4>
 80035ba:	2300      	movs	r3, #0
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	2103      	movs	r1, #3
 80035c0:	400a      	ands	r2, r1
 80035c2:	00d2      	lsls	r2, r2, #3
 80035c4:	4093      	lsls	r3, r2
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80035cc:	4936      	ldr	r1, [pc, #216]	@ (80036a8 <HAL_GPIO_Init+0x2d0>)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	089b      	lsrs	r3, r3, #2
 80035d2:	3318      	adds	r3, #24
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80035da:	4a33      	ldr	r2, [pc, #204]	@ (80036a8 <HAL_GPIO_Init+0x2d0>)
 80035dc:	2380      	movs	r3, #128	@ 0x80
 80035de:	58d3      	ldr	r3, [r2, r3]
 80035e0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	43da      	mvns	r2, r3
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	4013      	ands	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	2380      	movs	r3, #128	@ 0x80
 80035f2:	025b      	lsls	r3, r3, #9
 80035f4:	4013      	ands	r3, r2
 80035f6:	d003      	beq.n	8003600 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003600:	4929      	ldr	r1, [pc, #164]	@ (80036a8 <HAL_GPIO_Init+0x2d0>)
 8003602:	2280      	movs	r2, #128	@ 0x80
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8003608:	4a27      	ldr	r2, [pc, #156]	@ (80036a8 <HAL_GPIO_Init+0x2d0>)
 800360a:	2384      	movs	r3, #132	@ 0x84
 800360c:	58d3      	ldr	r3, [r2, r3]
 800360e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	43da      	mvns	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	4013      	ands	r3, r2
 8003618:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	2380      	movs	r3, #128	@ 0x80
 8003620:	029b      	lsls	r3, r3, #10
 8003622:	4013      	ands	r3, r2
 8003624:	d003      	beq.n	800362e <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800362e:	491e      	ldr	r1, [pc, #120]	@ (80036a8 <HAL_GPIO_Init+0x2d0>)
 8003630:	2284      	movs	r2, #132	@ 0x84
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003636:	4b1c      	ldr	r3, [pc, #112]	@ (80036a8 <HAL_GPIO_Init+0x2d0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	43da      	mvns	r2, r3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	4013      	ands	r3, r2
 8003644:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	2380      	movs	r3, #128	@ 0x80
 800364c:	035b      	lsls	r3, r3, #13
 800364e:	4013      	ands	r3, r2
 8003650:	d003      	beq.n	800365a <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800365a:	4b13      	ldr	r3, [pc, #76]	@ (80036a8 <HAL_GPIO_Init+0x2d0>)
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8003660:	4b11      	ldr	r3, [pc, #68]	@ (80036a8 <HAL_GPIO_Init+0x2d0>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	43da      	mvns	r2, r3
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	4013      	ands	r3, r2
 800366e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	2380      	movs	r3, #128	@ 0x80
 8003676:	039b      	lsls	r3, r3, #14
 8003678:	4013      	ands	r3, r2
 800367a:	d003      	beq.n	8003684 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003684:	4b08      	ldr	r3, [pc, #32]	@ (80036a8 <HAL_GPIO_Init+0x2d0>)
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	3301      	adds	r3, #1
 800368e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	40da      	lsrs	r2, r3
 8003698:	1e13      	subs	r3, r2, #0
 800369a:	d000      	beq.n	800369e <HAL_GPIO_Init+0x2c6>
 800369c:	e6a4      	b.n	80033e8 <HAL_GPIO_Init+0x10>
  }
}
 800369e:	46c0      	nop			@ (mov r8, r8)
 80036a0:	46c0      	nop			@ (mov r8, r8)
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b006      	add	sp, #24
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40021800 	.word	0x40021800
 80036ac:	50000400 	.word	0x50000400
 80036b0:	50000800 	.word	0x50000800
 80036b4:	50000c00 	.word	0x50000c00
 80036b8:	50001400 	.word	0x50001400

080036bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	0008      	movs	r0, r1
 80036c6:	0011      	movs	r1, r2
 80036c8:	1cbb      	adds	r3, r7, #2
 80036ca:	1c02      	adds	r2, r0, #0
 80036cc:	801a      	strh	r2, [r3, #0]
 80036ce:	1c7b      	adds	r3, r7, #1
 80036d0:	1c0a      	adds	r2, r1, #0
 80036d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036d4:	1c7b      	adds	r3, r7, #1
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d004      	beq.n	80036e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036dc:	1cbb      	adds	r3, r7, #2
 80036de:	881a      	ldrh	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036e4:	e003      	b.n	80036ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036e6:	1cbb      	adds	r3, r7, #2
 80036e8:	881a      	ldrh	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80036ee:	46c0      	nop			@ (mov r8, r8)
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b002      	add	sp, #8
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e08f      	b.n	800382a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2241      	movs	r2, #65	@ 0x41
 800370e:	5c9b      	ldrb	r3, [r3, r2]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d107      	bne.n	8003726 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2240      	movs	r2, #64	@ 0x40
 800371a:	2100      	movs	r1, #0
 800371c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	0018      	movs	r0, r3
 8003722:	f7ff fb6f 	bl	8002e04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2241      	movs	r2, #65	@ 0x41
 800372a:	2124      	movs	r1, #36	@ 0x24
 800372c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2101      	movs	r1, #1
 800373a:	438a      	bics	r2, r1
 800373c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	493b      	ldr	r1, [pc, #236]	@ (8003834 <HAL_I2C_Init+0x13c>)
 8003748:	400a      	ands	r2, r1
 800374a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4938      	ldr	r1, [pc, #224]	@ (8003838 <HAL_I2C_Init+0x140>)
 8003758:	400a      	ands	r2, r1
 800375a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d108      	bne.n	8003776 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2180      	movs	r1, #128	@ 0x80
 800376e:	0209      	lsls	r1, r1, #8
 8003770:	430a      	orrs	r2, r1
 8003772:	609a      	str	r2, [r3, #8]
 8003774:	e007      	b.n	8003786 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2184      	movs	r1, #132	@ 0x84
 8003780:	0209      	lsls	r1, r1, #8
 8003782:	430a      	orrs	r2, r1
 8003784:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d109      	bne.n	80037a2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2180      	movs	r1, #128	@ 0x80
 800379a:	0109      	lsls	r1, r1, #4
 800379c:	430a      	orrs	r2, r1
 800379e:	605a      	str	r2, [r3, #4]
 80037a0:	e007      	b.n	80037b2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4923      	ldr	r1, [pc, #140]	@ (800383c <HAL_I2C_Init+0x144>)
 80037ae:	400a      	ands	r2, r1
 80037b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4920      	ldr	r1, [pc, #128]	@ (8003840 <HAL_I2C_Init+0x148>)
 80037be:	430a      	orrs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	491a      	ldr	r1, [pc, #104]	@ (8003838 <HAL_I2C_Init+0x140>)
 80037ce:	400a      	ands	r2, r1
 80037d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	431a      	orrs	r2, r3
 80037dc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69d9      	ldr	r1, [r3, #28]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1a      	ldr	r2, [r3, #32]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2101      	movs	r1, #1
 8003808:	430a      	orrs	r2, r1
 800380a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2241      	movs	r2, #65	@ 0x41
 8003816:	2120      	movs	r1, #32
 8003818:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2242      	movs	r2, #66	@ 0x42
 8003824:	2100      	movs	r1, #0
 8003826:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	0018      	movs	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	b002      	add	sp, #8
 8003830:	bd80      	pop	{r7, pc}
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	f0ffffff 	.word	0xf0ffffff
 8003838:	ffff7fff 	.word	0xffff7fff
 800383c:	fffff7ff 	.word	0xfffff7ff
 8003840:	02008000 	.word	0x02008000

08003844 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003844:	b590      	push	{r4, r7, lr}
 8003846:	b089      	sub	sp, #36	@ 0x24
 8003848:	af02      	add	r7, sp, #8
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	0008      	movs	r0, r1
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	0019      	movs	r1, r3
 8003852:	230a      	movs	r3, #10
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	1c02      	adds	r2, r0, #0
 8003858:	801a      	strh	r2, [r3, #0]
 800385a:	2308      	movs	r3, #8
 800385c:	18fb      	adds	r3, r7, r3
 800385e:	1c0a      	adds	r2, r1, #0
 8003860:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2241      	movs	r2, #65	@ 0x41
 8003866:	5c9b      	ldrb	r3, [r3, r2]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b20      	cmp	r3, #32
 800386c:	d000      	beq.n	8003870 <HAL_I2C_Master_Transmit+0x2c>
 800386e:	e10a      	b.n	8003a86 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2240      	movs	r2, #64	@ 0x40
 8003874:	5c9b      	ldrb	r3, [r3, r2]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_I2C_Master_Transmit+0x3a>
 800387a:	2302      	movs	r3, #2
 800387c:	e104      	b.n	8003a88 <HAL_I2C_Master_Transmit+0x244>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2240      	movs	r2, #64	@ 0x40
 8003882:	2101      	movs	r1, #1
 8003884:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003886:	f7ff fcc5 	bl	8003214 <HAL_GetTick>
 800388a:	0003      	movs	r3, r0
 800388c:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800388e:	2380      	movs	r3, #128	@ 0x80
 8003890:	0219      	lsls	r1, r3, #8
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	2319      	movs	r3, #25
 800389a:	2201      	movs	r2, #1
 800389c:	f000 fc46 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 80038a0:	1e03      	subs	r3, r0, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e0ef      	b.n	8003a88 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2241      	movs	r2, #65	@ 0x41
 80038ac:	2121      	movs	r1, #33	@ 0x21
 80038ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2242      	movs	r2, #66	@ 0x42
 80038b4:	2110      	movs	r1, #16
 80038b6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2208      	movs	r2, #8
 80038c8:	18ba      	adds	r2, r7, r2
 80038ca:	8812      	ldrh	r2, [r2, #0]
 80038cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2bff      	cmp	r3, #255	@ 0xff
 80038dc:	d906      	bls.n	80038ec <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	22ff      	movs	r2, #255	@ 0xff
 80038e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80038e4:	2380      	movs	r3, #128	@ 0x80
 80038e6:	045b      	lsls	r3, r3, #17
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	e007      	b.n	80038fc <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80038f6:	2380      	movs	r3, #128	@ 0x80
 80038f8:	049b      	lsls	r3, r3, #18
 80038fa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003900:	2b00      	cmp	r3, #0
 8003902:	d027      	beq.n	8003954 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	781a      	ldrb	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003938:	b2db      	uxtb	r3, r3
 800393a:	3301      	adds	r3, #1
 800393c:	b2da      	uxtb	r2, r3
 800393e:	697c      	ldr	r4, [r7, #20]
 8003940:	230a      	movs	r3, #10
 8003942:	18fb      	adds	r3, r7, r3
 8003944:	8819      	ldrh	r1, [r3, #0]
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	4b51      	ldr	r3, [pc, #324]	@ (8003a90 <HAL_I2C_Master_Transmit+0x24c>)
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	0023      	movs	r3, r4
 800394e:	f000 fdc7 	bl	80044e0 <I2C_TransferConfig>
 8003952:	e06f      	b.n	8003a34 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003958:	b2da      	uxtb	r2, r3
 800395a:	697c      	ldr	r4, [r7, #20]
 800395c:	230a      	movs	r3, #10
 800395e:	18fb      	adds	r3, r7, r3
 8003960:	8819      	ldrh	r1, [r3, #0]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	4b4a      	ldr	r3, [pc, #296]	@ (8003a90 <HAL_I2C_Master_Transmit+0x24c>)
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	0023      	movs	r3, r4
 800396a:	f000 fdb9 	bl	80044e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800396e:	e061      	b.n	8003a34 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	0018      	movs	r0, r3
 8003978:	f000 fc30 	bl	80041dc <I2C_WaitOnTXISFlagUntilTimeout>
 800397c:	1e03      	subs	r3, r0, #0
 800397e:	d001      	beq.n	8003984 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e081      	b.n	8003a88 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	781a      	ldrb	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d03a      	beq.n	8003a34 <HAL_I2C_Master_Transmit+0x1f0>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d136      	bne.n	8003a34 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	0013      	movs	r3, r2
 80039d0:	2200      	movs	r2, #0
 80039d2:	2180      	movs	r1, #128	@ 0x80
 80039d4:	f000 fbaa 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 80039d8:	1e03      	subs	r3, r0, #0
 80039da:	d001      	beq.n	80039e0 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e053      	b.n	8003a88 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2bff      	cmp	r3, #255	@ 0xff
 80039e8:	d911      	bls.n	8003a0e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	22ff      	movs	r2, #255	@ 0xff
 80039ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	2380      	movs	r3, #128	@ 0x80
 80039f8:	045c      	lsls	r4, r3, #17
 80039fa:	230a      	movs	r3, #10
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	8819      	ldrh	r1, [r3, #0]
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	2300      	movs	r3, #0
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	0023      	movs	r3, r4
 8003a08:	f000 fd6a 	bl	80044e0 <I2C_TransferConfig>
 8003a0c:	e012      	b.n	8003a34 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	2380      	movs	r3, #128	@ 0x80
 8003a20:	049c      	lsls	r4, r3, #18
 8003a22:	230a      	movs	r3, #10
 8003a24:	18fb      	adds	r3, r7, r3
 8003a26:	8819      	ldrh	r1, [r3, #0]
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	0023      	movs	r3, r4
 8003a30:	f000 fd56 	bl	80044e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d198      	bne.n	8003970 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	0018      	movs	r0, r3
 8003a46:	f000 fc0f 	bl	8004268 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a4a:	1e03      	subs	r3, r0, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e01a      	b.n	8003a88 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2220      	movs	r2, #32
 8003a58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	490b      	ldr	r1, [pc, #44]	@ (8003a94 <HAL_I2C_Master_Transmit+0x250>)
 8003a66:	400a      	ands	r2, r1
 8003a68:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2241      	movs	r2, #65	@ 0x41
 8003a6e:	2120      	movs	r1, #32
 8003a70:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2242      	movs	r2, #66	@ 0x42
 8003a76:	2100      	movs	r1, #0
 8003a78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2240      	movs	r2, #64	@ 0x40
 8003a7e:	2100      	movs	r1, #0
 8003a80:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	e000      	b.n	8003a88 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003a86:	2302      	movs	r3, #2
  }
}
 8003a88:	0018      	movs	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	b007      	add	sp, #28
 8003a8e:	bd90      	pop	{r4, r7, pc}
 8003a90:	80002000 	.word	0x80002000
 8003a94:	fe00e800 	.word	0xfe00e800

08003a98 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b089      	sub	sp, #36	@ 0x24
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	000c      	movs	r4, r1
 8003aa2:	0010      	movs	r0, r2
 8003aa4:	0019      	movs	r1, r3
 8003aa6:	230a      	movs	r3, #10
 8003aa8:	18fb      	adds	r3, r7, r3
 8003aaa:	1c22      	adds	r2, r4, #0
 8003aac:	801a      	strh	r2, [r3, #0]
 8003aae:	2308      	movs	r3, #8
 8003ab0:	18fb      	adds	r3, r7, r3
 8003ab2:	1c02      	adds	r2, r0, #0
 8003ab4:	801a      	strh	r2, [r3, #0]
 8003ab6:	1dbb      	adds	r3, r7, #6
 8003ab8:	1c0a      	adds	r2, r1, #0
 8003aba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2241      	movs	r2, #65	@ 0x41
 8003ac0:	5c9b      	ldrb	r3, [r3, r2]
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	d000      	beq.n	8003aca <HAL_I2C_Mem_Write+0x32>
 8003ac8:	e10c      	b.n	8003ce4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d004      	beq.n	8003ada <HAL_I2C_Mem_Write+0x42>
 8003ad0:	232c      	movs	r3, #44	@ 0x2c
 8003ad2:	18fb      	adds	r3, r7, r3
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d105      	bne.n	8003ae6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2280      	movs	r2, #128	@ 0x80
 8003ade:	0092      	lsls	r2, r2, #2
 8003ae0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e0ff      	b.n	8003ce6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2240      	movs	r2, #64	@ 0x40
 8003aea:	5c9b      	ldrb	r3, [r3, r2]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <HAL_I2C_Mem_Write+0x5c>
 8003af0:	2302      	movs	r3, #2
 8003af2:	e0f8      	b.n	8003ce6 <HAL_I2C_Mem_Write+0x24e>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2240      	movs	r2, #64	@ 0x40
 8003af8:	2101      	movs	r1, #1
 8003afa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003afc:	f7ff fb8a 	bl	8003214 <HAL_GetTick>
 8003b00:	0003      	movs	r3, r0
 8003b02:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b04:	2380      	movs	r3, #128	@ 0x80
 8003b06:	0219      	lsls	r1, r3, #8
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	2319      	movs	r3, #25
 8003b10:	2201      	movs	r2, #1
 8003b12:	f000 fb0b 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 8003b16:	1e03      	subs	r3, r0, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e0e3      	b.n	8003ce6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2241      	movs	r2, #65	@ 0x41
 8003b22:	2121      	movs	r1, #33	@ 0x21
 8003b24:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2242      	movs	r2, #66	@ 0x42
 8003b2a:	2140      	movs	r1, #64	@ 0x40
 8003b2c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	222c      	movs	r2, #44	@ 0x2c
 8003b3e:	18ba      	adds	r2, r7, r2
 8003b40:	8812      	ldrh	r2, [r2, #0]
 8003b42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b4a:	1dbb      	adds	r3, r7, #6
 8003b4c:	881c      	ldrh	r4, [r3, #0]
 8003b4e:	2308      	movs	r3, #8
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	881a      	ldrh	r2, [r3, #0]
 8003b54:	230a      	movs	r3, #10
 8003b56:	18fb      	adds	r3, r7, r3
 8003b58:	8819      	ldrh	r1, [r3, #0]
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	9301      	str	r3, [sp, #4]
 8003b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	0023      	movs	r3, r4
 8003b66:	f000 f9f9 	bl	8003f5c <I2C_RequestMemoryWrite>
 8003b6a:	1e03      	subs	r3, r0, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2240      	movs	r2, #64	@ 0x40
 8003b72:	2100      	movs	r1, #0
 8003b74:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e0b5      	b.n	8003ce6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	2bff      	cmp	r3, #255	@ 0xff
 8003b82:	d911      	bls.n	8003ba8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	22ff      	movs	r2, #255	@ 0xff
 8003b88:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	2380      	movs	r3, #128	@ 0x80
 8003b92:	045c      	lsls	r4, r3, #17
 8003b94:	230a      	movs	r3, #10
 8003b96:	18fb      	adds	r3, r7, r3
 8003b98:	8819      	ldrh	r1, [r3, #0]
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	0023      	movs	r3, r4
 8003ba2:	f000 fc9d 	bl	80044e0 <I2C_TransferConfig>
 8003ba6:	e012      	b.n	8003bce <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	2380      	movs	r3, #128	@ 0x80
 8003bba:	049c      	lsls	r4, r3, #18
 8003bbc:	230a      	movs	r3, #10
 8003bbe:	18fb      	adds	r3, r7, r3
 8003bc0:	8819      	ldrh	r1, [r3, #0]
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	0023      	movs	r3, r4
 8003bca:	f000 fc89 	bl	80044e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f000 fb01 	bl	80041dc <I2C_WaitOnTXISFlagUntilTimeout>
 8003bda:	1e03      	subs	r3, r0, #0
 8003bdc:	d001      	beq.n	8003be2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e081      	b.n	8003ce6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be6:	781a      	ldrb	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d03a      	beq.n	8003c92 <HAL_I2C_Mem_Write+0x1fa>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d136      	bne.n	8003c92 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	0013      	movs	r3, r2
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2180      	movs	r1, #128	@ 0x80
 8003c32:	f000 fa7b 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 8003c36:	1e03      	subs	r3, r0, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e053      	b.n	8003ce6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	2bff      	cmp	r3, #255	@ 0xff
 8003c46:	d911      	bls.n	8003c6c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	22ff      	movs	r2, #255	@ 0xff
 8003c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	2380      	movs	r3, #128	@ 0x80
 8003c56:	045c      	lsls	r4, r3, #17
 8003c58:	230a      	movs	r3, #10
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	8819      	ldrh	r1, [r3, #0]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	2300      	movs	r3, #0
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	0023      	movs	r3, r4
 8003c66:	f000 fc3b 	bl	80044e0 <I2C_TransferConfig>
 8003c6a:	e012      	b.n	8003c92 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	2380      	movs	r3, #128	@ 0x80
 8003c7e:	049c      	lsls	r4, r3, #18
 8003c80:	230a      	movs	r3, #10
 8003c82:	18fb      	adds	r3, r7, r3
 8003c84:	8819      	ldrh	r1, [r3, #0]
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	2300      	movs	r3, #0
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	0023      	movs	r3, r4
 8003c8e:	f000 fc27 	bl	80044e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d198      	bne.n	8003bce <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f000 fae0 	bl	8004268 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ca8:	1e03      	subs	r3, r0, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e01a      	b.n	8003ce6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	490b      	ldr	r1, [pc, #44]	@ (8003cf0 <HAL_I2C_Mem_Write+0x258>)
 8003cc4:	400a      	ands	r2, r1
 8003cc6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2241      	movs	r2, #65	@ 0x41
 8003ccc:	2120      	movs	r1, #32
 8003cce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2242      	movs	r2, #66	@ 0x42
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2240      	movs	r2, #64	@ 0x40
 8003cdc:	2100      	movs	r1, #0
 8003cde:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	e000      	b.n	8003ce6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003ce4:	2302      	movs	r3, #2
  }
}
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b007      	add	sp, #28
 8003cec:	bd90      	pop	{r4, r7, pc}
 8003cee:	46c0      	nop			@ (mov r8, r8)
 8003cf0:	fe00e800 	.word	0xfe00e800

08003cf4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf4:	b590      	push	{r4, r7, lr}
 8003cf6:	b089      	sub	sp, #36	@ 0x24
 8003cf8:	af02      	add	r7, sp, #8
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	000c      	movs	r4, r1
 8003cfe:	0010      	movs	r0, r2
 8003d00:	0019      	movs	r1, r3
 8003d02:	230a      	movs	r3, #10
 8003d04:	18fb      	adds	r3, r7, r3
 8003d06:	1c22      	adds	r2, r4, #0
 8003d08:	801a      	strh	r2, [r3, #0]
 8003d0a:	2308      	movs	r3, #8
 8003d0c:	18fb      	adds	r3, r7, r3
 8003d0e:	1c02      	adds	r2, r0, #0
 8003d10:	801a      	strh	r2, [r3, #0]
 8003d12:	1dbb      	adds	r3, r7, #6
 8003d14:	1c0a      	adds	r2, r1, #0
 8003d16:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2241      	movs	r2, #65	@ 0x41
 8003d1c:	5c9b      	ldrb	r3, [r3, r2]
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d000      	beq.n	8003d26 <HAL_I2C_Mem_Read+0x32>
 8003d24:	e110      	b.n	8003f48 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d004      	beq.n	8003d36 <HAL_I2C_Mem_Read+0x42>
 8003d2c:	232c      	movs	r3, #44	@ 0x2c
 8003d2e:	18fb      	adds	r3, r7, r3
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d105      	bne.n	8003d42 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2280      	movs	r2, #128	@ 0x80
 8003d3a:	0092      	lsls	r2, r2, #2
 8003d3c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e103      	b.n	8003f4a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2240      	movs	r2, #64	@ 0x40
 8003d46:	5c9b      	ldrb	r3, [r3, r2]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_I2C_Mem_Read+0x5c>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e0fc      	b.n	8003f4a <HAL_I2C_Mem_Read+0x256>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2240      	movs	r2, #64	@ 0x40
 8003d54:	2101      	movs	r1, #1
 8003d56:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d58:	f7ff fa5c 	bl	8003214 <HAL_GetTick>
 8003d5c:	0003      	movs	r3, r0
 8003d5e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d60:	2380      	movs	r3, #128	@ 0x80
 8003d62:	0219      	lsls	r1, r3, #8
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	2319      	movs	r3, #25
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f000 f9dd 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 8003d72:	1e03      	subs	r3, r0, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e0e7      	b.n	8003f4a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2241      	movs	r2, #65	@ 0x41
 8003d7e:	2122      	movs	r1, #34	@ 0x22
 8003d80:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2242      	movs	r2, #66	@ 0x42
 8003d86:	2140      	movs	r1, #64	@ 0x40
 8003d88:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	222c      	movs	r2, #44	@ 0x2c
 8003d9a:	18ba      	adds	r2, r7, r2
 8003d9c:	8812      	ldrh	r2, [r2, #0]
 8003d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003da6:	1dbb      	adds	r3, r7, #6
 8003da8:	881c      	ldrh	r4, [r3, #0]
 8003daa:	2308      	movs	r3, #8
 8003dac:	18fb      	adds	r3, r7, r3
 8003dae:	881a      	ldrh	r2, [r3, #0]
 8003db0:	230a      	movs	r3, #10
 8003db2:	18fb      	adds	r3, r7, r3
 8003db4:	8819      	ldrh	r1, [r3, #0]
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	9301      	str	r3, [sp, #4]
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	0023      	movs	r3, r4
 8003dc2:	f000 f92f 	bl	8004024 <I2C_RequestMemoryRead>
 8003dc6:	1e03      	subs	r3, r0, #0
 8003dc8:	d005      	beq.n	8003dd6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2240      	movs	r2, #64	@ 0x40
 8003dce:	2100      	movs	r1, #0
 8003dd0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e0b9      	b.n	8003f4a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	2bff      	cmp	r3, #255	@ 0xff
 8003dde:	d911      	bls.n	8003e04 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	22ff      	movs	r2, #255	@ 0xff
 8003de4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	2380      	movs	r3, #128	@ 0x80
 8003dee:	045c      	lsls	r4, r3, #17
 8003df0:	230a      	movs	r3, #10
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	8819      	ldrh	r1, [r3, #0]
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	4b56      	ldr	r3, [pc, #344]	@ (8003f54 <HAL_I2C_Mem_Read+0x260>)
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	0023      	movs	r3, r4
 8003dfe:	f000 fb6f 	bl	80044e0 <I2C_TransferConfig>
 8003e02:	e012      	b.n	8003e2a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	2380      	movs	r3, #128	@ 0x80
 8003e16:	049c      	lsls	r4, r3, #18
 8003e18:	230a      	movs	r3, #10
 8003e1a:	18fb      	adds	r3, r7, r3
 8003e1c:	8819      	ldrh	r1, [r3, #0]
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	4b4c      	ldr	r3, [pc, #304]	@ (8003f54 <HAL_I2C_Mem_Read+0x260>)
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	0023      	movs	r3, r4
 8003e26:	f000 fb5b 	bl	80044e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003e2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	0013      	movs	r3, r2
 8003e34:	2200      	movs	r2, #0
 8003e36:	2104      	movs	r1, #4
 8003e38:	f000 f978 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 8003e3c:	1e03      	subs	r3, r0, #0
 8003e3e:	d001      	beq.n	8003e44 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e082      	b.n	8003f4a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d03a      	beq.n	8003ef6 <HAL_I2C_Mem_Read+0x202>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d136      	bne.n	8003ef6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	0013      	movs	r3, r2
 8003e92:	2200      	movs	r2, #0
 8003e94:	2180      	movs	r1, #128	@ 0x80
 8003e96:	f000 f949 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 8003e9a:	1e03      	subs	r3, r0, #0
 8003e9c:	d001      	beq.n	8003ea2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e053      	b.n	8003f4a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2bff      	cmp	r3, #255	@ 0xff
 8003eaa:	d911      	bls.n	8003ed0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	22ff      	movs	r2, #255	@ 0xff
 8003eb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	2380      	movs	r3, #128	@ 0x80
 8003eba:	045c      	lsls	r4, r3, #17
 8003ebc:	230a      	movs	r3, #10
 8003ebe:	18fb      	adds	r3, r7, r3
 8003ec0:	8819      	ldrh	r1, [r3, #0]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	0023      	movs	r3, r4
 8003eca:	f000 fb09 	bl	80044e0 <I2C_TransferConfig>
 8003ece:	e012      	b.n	8003ef6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	2380      	movs	r3, #128	@ 0x80
 8003ee2:	049c      	lsls	r4, r3, #18
 8003ee4:	230a      	movs	r3, #10
 8003ee6:	18fb      	adds	r3, r7, r3
 8003ee8:	8819      	ldrh	r1, [r3, #0]
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	2300      	movs	r3, #0
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	0023      	movs	r3, r4
 8003ef2:	f000 faf5 	bl	80044e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d194      	bne.n	8003e2a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	0018      	movs	r0, r3
 8003f08:	f000 f9ae 	bl	8004268 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f0c:	1e03      	subs	r3, r0, #0
 8003f0e:	d001      	beq.n	8003f14 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e01a      	b.n	8003f4a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	490c      	ldr	r1, [pc, #48]	@ (8003f58 <HAL_I2C_Mem_Read+0x264>)
 8003f28:	400a      	ands	r2, r1
 8003f2a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2241      	movs	r2, #65	@ 0x41
 8003f30:	2120      	movs	r1, #32
 8003f32:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2242      	movs	r2, #66	@ 0x42
 8003f38:	2100      	movs	r1, #0
 8003f3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2240      	movs	r2, #64	@ 0x40
 8003f40:	2100      	movs	r1, #0
 8003f42:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	e000      	b.n	8003f4a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003f48:	2302      	movs	r3, #2
  }
}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b007      	add	sp, #28
 8003f50:	bd90      	pop	{r4, r7, pc}
 8003f52:	46c0      	nop			@ (mov r8, r8)
 8003f54:	80002400 	.word	0x80002400
 8003f58:	fe00e800 	.word	0xfe00e800

08003f5c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003f5c:	b5b0      	push	{r4, r5, r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af02      	add	r7, sp, #8
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	000c      	movs	r4, r1
 8003f66:	0010      	movs	r0, r2
 8003f68:	0019      	movs	r1, r3
 8003f6a:	250a      	movs	r5, #10
 8003f6c:	197b      	adds	r3, r7, r5
 8003f6e:	1c22      	adds	r2, r4, #0
 8003f70:	801a      	strh	r2, [r3, #0]
 8003f72:	2308      	movs	r3, #8
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	1c02      	adds	r2, r0, #0
 8003f78:	801a      	strh	r2, [r3, #0]
 8003f7a:	1dbb      	adds	r3, r7, #6
 8003f7c:	1c0a      	adds	r2, r1, #0
 8003f7e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f80:	1dbb      	adds	r3, r7, #6
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	2380      	movs	r3, #128	@ 0x80
 8003f88:	045c      	lsls	r4, r3, #17
 8003f8a:	197b      	adds	r3, r7, r5
 8003f8c:	8819      	ldrh	r1, [r3, #0]
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	4b23      	ldr	r3, [pc, #140]	@ (8004020 <I2C_RequestMemoryWrite+0xc4>)
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	0023      	movs	r3, r4
 8003f96:	f000 faa3 	bl	80044e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f9c:	6a39      	ldr	r1, [r7, #32]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f000 f91b 	bl	80041dc <I2C_WaitOnTXISFlagUntilTimeout>
 8003fa6:	1e03      	subs	r3, r0, #0
 8003fa8:	d001      	beq.n	8003fae <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e033      	b.n	8004016 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fae:	1dbb      	adds	r3, r7, #6
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d107      	bne.n	8003fc6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fb6:	2308      	movs	r3, #8
 8003fb8:	18fb      	adds	r3, r7, r3
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fc4:	e019      	b.n	8003ffa <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003fc6:	2308      	movs	r3, #8
 8003fc8:	18fb      	adds	r3, r7, r3
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	0a1b      	lsrs	r3, r3, #8
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fda:	6a39      	ldr	r1, [r7, #32]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f000 f8fc 	bl	80041dc <I2C_WaitOnTXISFlagUntilTimeout>
 8003fe4:	1e03      	subs	r3, r0, #0
 8003fe6:	d001      	beq.n	8003fec <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e014      	b.n	8004016 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fec:	2308      	movs	r3, #8
 8003fee:	18fb      	adds	r3, r7, r3
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003ffa:	6a3a      	ldr	r2, [r7, #32]
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	0013      	movs	r3, r2
 8004004:	2200      	movs	r2, #0
 8004006:	2180      	movs	r1, #128	@ 0x80
 8004008:	f000 f890 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 800400c:	1e03      	subs	r3, r0, #0
 800400e:	d001      	beq.n	8004014 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	0018      	movs	r0, r3
 8004018:	46bd      	mov	sp, r7
 800401a:	b004      	add	sp, #16
 800401c:	bdb0      	pop	{r4, r5, r7, pc}
 800401e:	46c0      	nop			@ (mov r8, r8)
 8004020:	80002000 	.word	0x80002000

08004024 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004024:	b5b0      	push	{r4, r5, r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af02      	add	r7, sp, #8
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	000c      	movs	r4, r1
 800402e:	0010      	movs	r0, r2
 8004030:	0019      	movs	r1, r3
 8004032:	250a      	movs	r5, #10
 8004034:	197b      	adds	r3, r7, r5
 8004036:	1c22      	adds	r2, r4, #0
 8004038:	801a      	strh	r2, [r3, #0]
 800403a:	2308      	movs	r3, #8
 800403c:	18fb      	adds	r3, r7, r3
 800403e:	1c02      	adds	r2, r0, #0
 8004040:	801a      	strh	r2, [r3, #0]
 8004042:	1dbb      	adds	r3, r7, #6
 8004044:	1c0a      	adds	r2, r1, #0
 8004046:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004048:	1dbb      	adds	r3, r7, #6
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	b2da      	uxtb	r2, r3
 800404e:	197b      	adds	r3, r7, r5
 8004050:	8819      	ldrh	r1, [r3, #0]
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	4b23      	ldr	r3, [pc, #140]	@ (80040e4 <I2C_RequestMemoryRead+0xc0>)
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	2300      	movs	r3, #0
 800405a:	f000 fa41 	bl	80044e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800405e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004060:	6a39      	ldr	r1, [r7, #32]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	0018      	movs	r0, r3
 8004066:	f000 f8b9 	bl	80041dc <I2C_WaitOnTXISFlagUntilTimeout>
 800406a:	1e03      	subs	r3, r0, #0
 800406c:	d001      	beq.n	8004072 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e033      	b.n	80040da <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004072:	1dbb      	adds	r3, r7, #6
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d107      	bne.n	800408a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800407a:	2308      	movs	r3, #8
 800407c:	18fb      	adds	r3, r7, r3
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	b2da      	uxtb	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	629a      	str	r2, [r3, #40]	@ 0x28
 8004088:	e019      	b.n	80040be <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800408a:	2308      	movs	r3, #8
 800408c:	18fb      	adds	r3, r7, r3
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	0a1b      	lsrs	r3, r3, #8
 8004092:	b29b      	uxth	r3, r3
 8004094:	b2da      	uxtb	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800409c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800409e:	6a39      	ldr	r1, [r7, #32]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	0018      	movs	r0, r3
 80040a4:	f000 f89a 	bl	80041dc <I2C_WaitOnTXISFlagUntilTimeout>
 80040a8:	1e03      	subs	r3, r0, #0
 80040aa:	d001      	beq.n	80040b0 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e014      	b.n	80040da <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040b0:	2308      	movs	r3, #8
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80040be:	6a3a      	ldr	r2, [r7, #32]
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	0013      	movs	r3, r2
 80040c8:	2200      	movs	r2, #0
 80040ca:	2140      	movs	r1, #64	@ 0x40
 80040cc:	f000 f82e 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 80040d0:	1e03      	subs	r3, r0, #0
 80040d2:	d001      	beq.n	80040d8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e000      	b.n	80040da <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	0018      	movs	r0, r3
 80040dc:	46bd      	mov	sp, r7
 80040de:	b004      	add	sp, #16
 80040e0:	bdb0      	pop	{r4, r5, r7, pc}
 80040e2:	46c0      	nop			@ (mov r8, r8)
 80040e4:	80002000 	.word	0x80002000

080040e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	2202      	movs	r2, #2
 80040f8:	4013      	ands	r3, r2
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d103      	bne.n	8004106 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2200      	movs	r2, #0
 8004104:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	2201      	movs	r2, #1
 800410e:	4013      	ands	r3, r2
 8004110:	2b01      	cmp	r3, #1
 8004112:	d007      	beq.n	8004124 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699a      	ldr	r2, [r3, #24]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2101      	movs	r1, #1
 8004120:	430a      	orrs	r2, r1
 8004122:	619a      	str	r2, [r3, #24]
  }
}
 8004124:	46c0      	nop			@ (mov r8, r8)
 8004126:	46bd      	mov	sp, r7
 8004128:	b002      	add	sp, #8
 800412a:	bd80      	pop	{r7, pc}

0800412c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	1dfb      	adds	r3, r7, #7
 800413a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800413c:	e03a      	b.n	80041b4 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	6839      	ldr	r1, [r7, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	0018      	movs	r0, r3
 8004146:	f000 f8d3 	bl	80042f0 <I2C_IsErrorOccurred>
 800414a:	1e03      	subs	r3, r0, #0
 800414c:	d001      	beq.n	8004152 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e040      	b.n	80041d4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	3301      	adds	r3, #1
 8004156:	d02d      	beq.n	80041b4 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004158:	f7ff f85c 	bl	8003214 <HAL_GetTick>
 800415c:	0002      	movs	r2, r0
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d302      	bcc.n	800416e <I2C_WaitOnFlagUntilTimeout+0x42>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d122      	bne.n	80041b4 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	4013      	ands	r3, r2
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	425a      	negs	r2, r3
 800417e:	4153      	adcs	r3, r2
 8004180:	b2db      	uxtb	r3, r3
 8004182:	001a      	movs	r2, r3
 8004184:	1dfb      	adds	r3, r7, #7
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	429a      	cmp	r2, r3
 800418a:	d113      	bne.n	80041b4 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004190:	2220      	movs	r2, #32
 8004192:	431a      	orrs	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2241      	movs	r2, #65	@ 0x41
 800419c:	2120      	movs	r1, #32
 800419e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2242      	movs	r2, #66	@ 0x42
 80041a4:	2100      	movs	r1, #0
 80041a6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2240      	movs	r2, #64	@ 0x40
 80041ac:	2100      	movs	r1, #0
 80041ae:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e00f      	b.n	80041d4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	4013      	ands	r3, r2
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	425a      	negs	r2, r3
 80041c4:	4153      	adcs	r3, r2
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	001a      	movs	r2, r3
 80041ca:	1dfb      	adds	r3, r7, #7
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d0b5      	beq.n	800413e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	0018      	movs	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b004      	add	sp, #16
 80041da:	bd80      	pop	{r7, pc}

080041dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041e8:	e032      	b.n	8004250 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	0018      	movs	r0, r3
 80041f2:	f000 f87d 	bl	80042f0 <I2C_IsErrorOccurred>
 80041f6:	1e03      	subs	r3, r0, #0
 80041f8:	d001      	beq.n	80041fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e030      	b.n	8004260 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	3301      	adds	r3, #1
 8004202:	d025      	beq.n	8004250 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004204:	f7ff f806 	bl	8003214 <HAL_GetTick>
 8004208:	0002      	movs	r2, r0
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	429a      	cmp	r2, r3
 8004212:	d302      	bcc.n	800421a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d11a      	bne.n	8004250 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	2202      	movs	r2, #2
 8004222:	4013      	ands	r3, r2
 8004224:	2b02      	cmp	r3, #2
 8004226:	d013      	beq.n	8004250 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422c:	2220      	movs	r2, #32
 800422e:	431a      	orrs	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2241      	movs	r2, #65	@ 0x41
 8004238:	2120      	movs	r1, #32
 800423a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2242      	movs	r2, #66	@ 0x42
 8004240:	2100      	movs	r1, #0
 8004242:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2240      	movs	r2, #64	@ 0x40
 8004248:	2100      	movs	r1, #0
 800424a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e007      	b.n	8004260 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	2202      	movs	r2, #2
 8004258:	4013      	ands	r3, r2
 800425a:	2b02      	cmp	r3, #2
 800425c:	d1c5      	bne.n	80041ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	0018      	movs	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	b004      	add	sp, #16
 8004266:	bd80      	pop	{r7, pc}

08004268 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004274:	e02f      	b.n	80042d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	68b9      	ldr	r1, [r7, #8]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	0018      	movs	r0, r3
 800427e:	f000 f837 	bl	80042f0 <I2C_IsErrorOccurred>
 8004282:	1e03      	subs	r3, r0, #0
 8004284:	d001      	beq.n	800428a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e02d      	b.n	80042e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800428a:	f7fe ffc3 	bl	8003214 <HAL_GetTick>
 800428e:	0002      	movs	r2, r0
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	429a      	cmp	r2, r3
 8004298:	d302      	bcc.n	80042a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d11a      	bne.n	80042d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	2220      	movs	r2, #32
 80042a8:	4013      	ands	r3, r2
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	d013      	beq.n	80042d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b2:	2220      	movs	r2, #32
 80042b4:	431a      	orrs	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2241      	movs	r2, #65	@ 0x41
 80042be:	2120      	movs	r1, #32
 80042c0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2242      	movs	r2, #66	@ 0x42
 80042c6:	2100      	movs	r1, #0
 80042c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2240      	movs	r2, #64	@ 0x40
 80042ce:	2100      	movs	r1, #0
 80042d0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e007      	b.n	80042e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	2220      	movs	r2, #32
 80042de:	4013      	ands	r3, r2
 80042e0:	2b20      	cmp	r3, #32
 80042e2:	d1c8      	bne.n	8004276 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	0018      	movs	r0, r3
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b004      	add	sp, #16
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08a      	sub	sp, #40	@ 0x28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042fc:	2327      	movs	r3, #39	@ 0x27
 80042fe:	18fb      	adds	r3, r7, r3
 8004300:	2200      	movs	r2, #0
 8004302:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	2210      	movs	r2, #16
 8004318:	4013      	ands	r3, r2
 800431a:	d100      	bne.n	800431e <I2C_IsErrorOccurred+0x2e>
 800431c:	e079      	b.n	8004412 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2210      	movs	r2, #16
 8004324:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004326:	e057      	b.n	80043d8 <I2C_IsErrorOccurred+0xe8>
 8004328:	2227      	movs	r2, #39	@ 0x27
 800432a:	18bb      	adds	r3, r7, r2
 800432c:	18ba      	adds	r2, r7, r2
 800432e:	7812      	ldrb	r2, [r2, #0]
 8004330:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	3301      	adds	r3, #1
 8004336:	d04f      	beq.n	80043d8 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004338:	f7fe ff6c 	bl	8003214 <HAL_GetTick>
 800433c:	0002      	movs	r2, r0
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	429a      	cmp	r2, r3
 8004346:	d302      	bcc.n	800434e <I2C_IsErrorOccurred+0x5e>
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d144      	bne.n	80043d8 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	2380      	movs	r3, #128	@ 0x80
 8004356:	01db      	lsls	r3, r3, #7
 8004358:	4013      	ands	r3, r2
 800435a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800435c:	2013      	movs	r0, #19
 800435e:	183b      	adds	r3, r7, r0
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	2142      	movs	r1, #66	@ 0x42
 8004364:	5c52      	ldrb	r2, [r2, r1]
 8004366:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	2380      	movs	r3, #128	@ 0x80
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	401a      	ands	r2, r3
 8004374:	2380      	movs	r3, #128	@ 0x80
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	429a      	cmp	r2, r3
 800437a:	d126      	bne.n	80043ca <I2C_IsErrorOccurred+0xda>
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	2380      	movs	r3, #128	@ 0x80
 8004380:	01db      	lsls	r3, r3, #7
 8004382:	429a      	cmp	r2, r3
 8004384:	d021      	beq.n	80043ca <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004386:	183b      	adds	r3, r7, r0
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	2b20      	cmp	r3, #32
 800438c:	d01d      	beq.n	80043ca <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2180      	movs	r1, #128	@ 0x80
 800439a:	01c9      	lsls	r1, r1, #7
 800439c:	430a      	orrs	r2, r1
 800439e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80043a0:	f7fe ff38 	bl	8003214 <HAL_GetTick>
 80043a4:	0003      	movs	r3, r0
 80043a6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043a8:	e00f      	b.n	80043ca <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80043aa:	f7fe ff33 	bl	8003214 <HAL_GetTick>
 80043ae:	0002      	movs	r2, r0
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b19      	cmp	r3, #25
 80043b6:	d908      	bls.n	80043ca <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	2220      	movs	r2, #32
 80043bc:	4313      	orrs	r3, r2
 80043be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80043c0:	2327      	movs	r3, #39	@ 0x27
 80043c2:	18fb      	adds	r3, r7, r3
 80043c4:	2201      	movs	r2, #1
 80043c6:	701a      	strb	r2, [r3, #0]

              break;
 80043c8:	e006      	b.n	80043d8 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	2220      	movs	r2, #32
 80043d2:	4013      	ands	r3, r2
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d1e8      	bne.n	80043aa <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	2220      	movs	r2, #32
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b20      	cmp	r3, #32
 80043e4:	d004      	beq.n	80043f0 <I2C_IsErrorOccurred+0x100>
 80043e6:	2327      	movs	r3, #39	@ 0x27
 80043e8:	18fb      	adds	r3, r7, r3
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d09b      	beq.n	8004328 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80043f0:	2327      	movs	r3, #39	@ 0x27
 80043f2:	18fb      	adds	r3, r7, r3
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d103      	bne.n	8004402 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2220      	movs	r2, #32
 8004400:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	2204      	movs	r2, #4
 8004406:	4313      	orrs	r3, r2
 8004408:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800440a:	2327      	movs	r3, #39	@ 0x27
 800440c:	18fb      	adds	r3, r7, r3
 800440e:	2201      	movs	r2, #1
 8004410:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	2380      	movs	r3, #128	@ 0x80
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	4013      	ands	r3, r2
 8004422:	d00c      	beq.n	800443e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	2201      	movs	r2, #1
 8004428:	4313      	orrs	r3, r2
 800442a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2280      	movs	r2, #128	@ 0x80
 8004432:	0052      	lsls	r2, r2, #1
 8004434:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004436:	2327      	movs	r3, #39	@ 0x27
 8004438:	18fb      	adds	r3, r7, r3
 800443a:	2201      	movs	r2, #1
 800443c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	2380      	movs	r3, #128	@ 0x80
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	4013      	ands	r3, r2
 8004446:	d00c      	beq.n	8004462 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	2208      	movs	r2, #8
 800444c:	4313      	orrs	r3, r2
 800444e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2280      	movs	r2, #128	@ 0x80
 8004456:	00d2      	lsls	r2, r2, #3
 8004458:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800445a:	2327      	movs	r3, #39	@ 0x27
 800445c:	18fb      	adds	r3, r7, r3
 800445e:	2201      	movs	r2, #1
 8004460:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	2380      	movs	r3, #128	@ 0x80
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4013      	ands	r3, r2
 800446a:	d00c      	beq.n	8004486 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	2202      	movs	r2, #2
 8004470:	4313      	orrs	r3, r2
 8004472:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2280      	movs	r2, #128	@ 0x80
 800447a:	0092      	lsls	r2, r2, #2
 800447c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800447e:	2327      	movs	r3, #39	@ 0x27
 8004480:	18fb      	adds	r3, r7, r3
 8004482:	2201      	movs	r2, #1
 8004484:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004486:	2327      	movs	r3, #39	@ 0x27
 8004488:	18fb      	adds	r3, r7, r3
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d01d      	beq.n	80044cc <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	0018      	movs	r0, r3
 8004494:	f7ff fe28 	bl	80040e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	490e      	ldr	r1, [pc, #56]	@ (80044dc <I2C_IsErrorOccurred+0x1ec>)
 80044a4:	400a      	ands	r2, r1
 80044a6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2241      	movs	r2, #65	@ 0x41
 80044b8:	2120      	movs	r1, #32
 80044ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2242      	movs	r2, #66	@ 0x42
 80044c0:	2100      	movs	r1, #0
 80044c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2240      	movs	r2, #64	@ 0x40
 80044c8:	2100      	movs	r1, #0
 80044ca:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80044cc:	2327      	movs	r3, #39	@ 0x27
 80044ce:	18fb      	adds	r3, r7, r3
 80044d0:	781b      	ldrb	r3, [r3, #0]
}
 80044d2:	0018      	movs	r0, r3
 80044d4:	46bd      	mov	sp, r7
 80044d6:	b00a      	add	sp, #40	@ 0x28
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	46c0      	nop			@ (mov r8, r8)
 80044dc:	fe00e800 	.word	0xfe00e800

080044e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80044e0:	b590      	push	{r4, r7, lr}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	0008      	movs	r0, r1
 80044ea:	0011      	movs	r1, r2
 80044ec:	607b      	str	r3, [r7, #4]
 80044ee:	240a      	movs	r4, #10
 80044f0:	193b      	adds	r3, r7, r4
 80044f2:	1c02      	adds	r2, r0, #0
 80044f4:	801a      	strh	r2, [r3, #0]
 80044f6:	2009      	movs	r0, #9
 80044f8:	183b      	adds	r3, r7, r0
 80044fa:	1c0a      	adds	r2, r1, #0
 80044fc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044fe:	193b      	adds	r3, r7, r4
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	059b      	lsls	r3, r3, #22
 8004504:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004506:	183b      	adds	r3, r7, r0
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	0419      	lsls	r1, r3, #16
 800450c:	23ff      	movs	r3, #255	@ 0xff
 800450e:	041b      	lsls	r3, r3, #16
 8004510:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004512:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800451a:	4313      	orrs	r3, r2
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	085b      	lsrs	r3, r3, #1
 8004520:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800452a:	0d51      	lsrs	r1, r2, #21
 800452c:	2280      	movs	r2, #128	@ 0x80
 800452e:	00d2      	lsls	r2, r2, #3
 8004530:	400a      	ands	r2, r1
 8004532:	4907      	ldr	r1, [pc, #28]	@ (8004550 <I2C_TransferConfig+0x70>)
 8004534:	430a      	orrs	r2, r1
 8004536:	43d2      	mvns	r2, r2
 8004538:	401a      	ands	r2, r3
 800453a:	0011      	movs	r1, r2
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004546:	46c0      	nop			@ (mov r8, r8)
 8004548:	46bd      	mov	sp, r7
 800454a:	b007      	add	sp, #28
 800454c:	bd90      	pop	{r4, r7, pc}
 800454e:	46c0      	nop			@ (mov r8, r8)
 8004550:	03ff63ff 	.word	0x03ff63ff

08004554 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2241      	movs	r2, #65	@ 0x41
 8004562:	5c9b      	ldrb	r3, [r3, r2]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b20      	cmp	r3, #32
 8004568:	d138      	bne.n	80045dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2240      	movs	r2, #64	@ 0x40
 800456e:	5c9b      	ldrb	r3, [r3, r2]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004574:	2302      	movs	r3, #2
 8004576:	e032      	b.n	80045de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2240      	movs	r2, #64	@ 0x40
 800457c:	2101      	movs	r1, #1
 800457e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2241      	movs	r2, #65	@ 0x41
 8004584:	2124      	movs	r1, #36	@ 0x24
 8004586:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2101      	movs	r1, #1
 8004594:	438a      	bics	r2, r1
 8004596:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4911      	ldr	r1, [pc, #68]	@ (80045e8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80045a4:	400a      	ands	r2, r1
 80045a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6819      	ldr	r1, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2101      	movs	r1, #1
 80045c4:	430a      	orrs	r2, r1
 80045c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2241      	movs	r2, #65	@ 0x41
 80045cc:	2120      	movs	r1, #32
 80045ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2240      	movs	r2, #64	@ 0x40
 80045d4:	2100      	movs	r1, #0
 80045d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80045d8:	2300      	movs	r3, #0
 80045da:	e000      	b.n	80045de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045dc:	2302      	movs	r3, #2
  }
}
 80045de:	0018      	movs	r0, r3
 80045e0:	46bd      	mov	sp, r7
 80045e2:	b002      	add	sp, #8
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	46c0      	nop			@ (mov r8, r8)
 80045e8:	ffffefff 	.word	0xffffefff

080045ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2241      	movs	r2, #65	@ 0x41
 80045fa:	5c9b      	ldrb	r3, [r3, r2]
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b20      	cmp	r3, #32
 8004600:	d139      	bne.n	8004676 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2240      	movs	r2, #64	@ 0x40
 8004606:	5c9b      	ldrb	r3, [r3, r2]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d101      	bne.n	8004610 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800460c:	2302      	movs	r3, #2
 800460e:	e033      	b.n	8004678 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2240      	movs	r2, #64	@ 0x40
 8004614:	2101      	movs	r1, #1
 8004616:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2241      	movs	r2, #65	@ 0x41
 800461c:	2124      	movs	r1, #36	@ 0x24
 800461e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2101      	movs	r1, #1
 800462c:	438a      	bics	r2, r1
 800462e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4a11      	ldr	r2, [pc, #68]	@ (8004680 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800463c:	4013      	ands	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	021b      	lsls	r3, r3, #8
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2101      	movs	r1, #1
 800465e:	430a      	orrs	r2, r1
 8004660:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2241      	movs	r2, #65	@ 0x41
 8004666:	2120      	movs	r1, #32
 8004668:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2240      	movs	r2, #64	@ 0x40
 800466e:	2100      	movs	r1, #0
 8004670:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	e000      	b.n	8004678 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004676:	2302      	movs	r3, #2
  }
}
 8004678:	0018      	movs	r0, r3
 800467a:	46bd      	mov	sp, r7
 800467c:	b004      	add	sp, #16
 800467e:	bd80      	pop	{r7, pc}
 8004680:	fffff0ff 	.word	0xfffff0ff

08004684 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e1d0      	b.n	8004a38 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2201      	movs	r2, #1
 800469c:	4013      	ands	r3, r2
 800469e:	d100      	bne.n	80046a2 <HAL_RCC_OscConfig+0x1e>
 80046a0:	e069      	b.n	8004776 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046a2:	4bc8      	ldr	r3, [pc, #800]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	2238      	movs	r2, #56	@ 0x38
 80046a8:	4013      	ands	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d105      	bne.n	80046be <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d15d      	bne.n	8004776 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e1bc      	b.n	8004a38 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	2380      	movs	r3, #128	@ 0x80
 80046c4:	025b      	lsls	r3, r3, #9
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d107      	bne.n	80046da <HAL_RCC_OscConfig+0x56>
 80046ca:	4bbe      	ldr	r3, [pc, #760]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	4bbd      	ldr	r3, [pc, #756]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 80046d0:	2180      	movs	r1, #128	@ 0x80
 80046d2:	0249      	lsls	r1, r1, #9
 80046d4:	430a      	orrs	r2, r1
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	e020      	b.n	800471c <HAL_RCC_OscConfig+0x98>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	23a0      	movs	r3, #160	@ 0xa0
 80046e0:	02db      	lsls	r3, r3, #11
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d10e      	bne.n	8004704 <HAL_RCC_OscConfig+0x80>
 80046e6:	4bb7      	ldr	r3, [pc, #732]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	4bb6      	ldr	r3, [pc, #728]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 80046ec:	2180      	movs	r1, #128	@ 0x80
 80046ee:	02c9      	lsls	r1, r1, #11
 80046f0:	430a      	orrs	r2, r1
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	4bb3      	ldr	r3, [pc, #716]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	4bb2      	ldr	r3, [pc, #712]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 80046fa:	2180      	movs	r1, #128	@ 0x80
 80046fc:	0249      	lsls	r1, r1, #9
 80046fe:	430a      	orrs	r2, r1
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	e00b      	b.n	800471c <HAL_RCC_OscConfig+0x98>
 8004704:	4baf      	ldr	r3, [pc, #700]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	4bae      	ldr	r3, [pc, #696]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 800470a:	49af      	ldr	r1, [pc, #700]	@ (80049c8 <HAL_RCC_OscConfig+0x344>)
 800470c:	400a      	ands	r2, r1
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	4bac      	ldr	r3, [pc, #688]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4bab      	ldr	r3, [pc, #684]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 8004716:	49ad      	ldr	r1, [pc, #692]	@ (80049cc <HAL_RCC_OscConfig+0x348>)
 8004718:	400a      	ands	r2, r1
 800471a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d014      	beq.n	800474e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fe fd76 	bl	8003214 <HAL_GetTick>
 8004728:	0003      	movs	r3, r0
 800472a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800472e:	f7fe fd71 	bl	8003214 <HAL_GetTick>
 8004732:	0002      	movs	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b64      	cmp	r3, #100	@ 0x64
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e17b      	b.n	8004a38 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004740:	4ba0      	ldr	r3, [pc, #640]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	2380      	movs	r3, #128	@ 0x80
 8004746:	029b      	lsls	r3, r3, #10
 8004748:	4013      	ands	r3, r2
 800474a:	d0f0      	beq.n	800472e <HAL_RCC_OscConfig+0xaa>
 800474c:	e013      	b.n	8004776 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474e:	f7fe fd61 	bl	8003214 <HAL_GetTick>
 8004752:	0003      	movs	r3, r0
 8004754:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004758:	f7fe fd5c 	bl	8003214 <HAL_GetTick>
 800475c:	0002      	movs	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b64      	cmp	r3, #100	@ 0x64
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e166      	b.n	8004a38 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800476a:	4b96      	ldr	r3, [pc, #600]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	2380      	movs	r3, #128	@ 0x80
 8004770:	029b      	lsls	r3, r3, #10
 8004772:	4013      	ands	r3, r2
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2202      	movs	r2, #2
 800477c:	4013      	ands	r3, r2
 800477e:	d100      	bne.n	8004782 <HAL_RCC_OscConfig+0xfe>
 8004780:	e086      	b.n	8004890 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004782:	4b90      	ldr	r3, [pc, #576]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2238      	movs	r2, #56	@ 0x38
 8004788:	4013      	ands	r3, r2
 800478a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d12f      	bne.n	80047f2 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e14c      	b.n	8004a38 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800479e:	4b89      	ldr	r3, [pc, #548]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	4a8b      	ldr	r2, [pc, #556]	@ (80049d0 <HAL_RCC_OscConfig+0x34c>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	0019      	movs	r1, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	021a      	lsls	r2, r3, #8
 80047ae:	4b85      	ldr	r3, [pc, #532]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 80047b0:	430a      	orrs	r2, r1
 80047b2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d112      	bne.n	80047e0 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80047ba:	4b82      	ldr	r3, [pc, #520]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a85      	ldr	r2, [pc, #532]	@ (80049d4 <HAL_RCC_OscConfig+0x350>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	0019      	movs	r1, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	4b7e      	ldr	r3, [pc, #504]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 80047ca:	430a      	orrs	r2, r1
 80047cc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80047ce:	4b7d      	ldr	r3, [pc, #500]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	0adb      	lsrs	r3, r3, #11
 80047d4:	2207      	movs	r2, #7
 80047d6:	4013      	ands	r3, r2
 80047d8:	4a7f      	ldr	r2, [pc, #508]	@ (80049d8 <HAL_RCC_OscConfig+0x354>)
 80047da:	40da      	lsrs	r2, r3
 80047dc:	4b7f      	ldr	r3, [pc, #508]	@ (80049dc <HAL_RCC_OscConfig+0x358>)
 80047de:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80047e0:	4b7f      	ldr	r3, [pc, #508]	@ (80049e0 <HAL_RCC_OscConfig+0x35c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	0018      	movs	r0, r3
 80047e6:	f7fe fcb9 	bl	800315c <HAL_InitTick>
 80047ea:	1e03      	subs	r3, r0, #0
 80047ec:	d050      	beq.n	8004890 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e122      	b.n	8004a38 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d030      	beq.n	800485c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80047fa:	4b72      	ldr	r3, [pc, #456]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a75      	ldr	r2, [pc, #468]	@ (80049d4 <HAL_RCC_OscConfig+0x350>)
 8004800:	4013      	ands	r3, r2
 8004802:	0019      	movs	r1, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	4b6e      	ldr	r3, [pc, #440]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 800480a:	430a      	orrs	r2, r1
 800480c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800480e:	4b6d      	ldr	r3, [pc, #436]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	4b6c      	ldr	r3, [pc, #432]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 8004814:	2180      	movs	r1, #128	@ 0x80
 8004816:	0049      	lsls	r1, r1, #1
 8004818:	430a      	orrs	r2, r1
 800481a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481c:	f7fe fcfa 	bl	8003214 <HAL_GetTick>
 8004820:	0003      	movs	r3, r0
 8004822:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004826:	f7fe fcf5 	bl	8003214 <HAL_GetTick>
 800482a:	0002      	movs	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e0ff      	b.n	8004a38 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004838:	4b62      	ldr	r3, [pc, #392]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	2380      	movs	r3, #128	@ 0x80
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	4013      	ands	r3, r2
 8004842:	d0f0      	beq.n	8004826 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004844:	4b5f      	ldr	r3, [pc, #380]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	4a61      	ldr	r2, [pc, #388]	@ (80049d0 <HAL_RCC_OscConfig+0x34c>)
 800484a:	4013      	ands	r3, r2
 800484c:	0019      	movs	r1, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	021a      	lsls	r2, r3, #8
 8004854:	4b5b      	ldr	r3, [pc, #364]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 8004856:	430a      	orrs	r2, r1
 8004858:	605a      	str	r2, [r3, #4]
 800485a:	e019      	b.n	8004890 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 800485c:	4b59      	ldr	r3, [pc, #356]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	4b58      	ldr	r3, [pc, #352]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 8004862:	4960      	ldr	r1, [pc, #384]	@ (80049e4 <HAL_RCC_OscConfig+0x360>)
 8004864:	400a      	ands	r2, r1
 8004866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004868:	f7fe fcd4 	bl	8003214 <HAL_GetTick>
 800486c:	0003      	movs	r3, r0
 800486e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004872:	f7fe fccf 	bl	8003214 <HAL_GetTick>
 8004876:	0002      	movs	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e0d9      	b.n	8004a38 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004884:	4b4f      	ldr	r3, [pc, #316]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	2380      	movs	r3, #128	@ 0x80
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4013      	ands	r3, r2
 800488e:	d1f0      	bne.n	8004872 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2208      	movs	r2, #8
 8004896:	4013      	ands	r3, r2
 8004898:	d042      	beq.n	8004920 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800489a:	4b4a      	ldr	r3, [pc, #296]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2238      	movs	r2, #56	@ 0x38
 80048a0:	4013      	ands	r3, r2
 80048a2:	2b18      	cmp	r3, #24
 80048a4:	d105      	bne.n	80048b2 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d138      	bne.n	8004920 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e0c2      	b.n	8004a38 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d019      	beq.n	80048ee <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80048ba:	4b42      	ldr	r3, [pc, #264]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 80048bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80048be:	4b41      	ldr	r3, [pc, #260]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 80048c0:	2101      	movs	r1, #1
 80048c2:	430a      	orrs	r2, r1
 80048c4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c6:	f7fe fca5 	bl	8003214 <HAL_GetTick>
 80048ca:	0003      	movs	r3, r0
 80048cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80048d0:	f7fe fca0 	bl	8003214 <HAL_GetTick>
 80048d4:	0002      	movs	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e0aa      	b.n	8004a38 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80048e2:	4b38      	ldr	r3, [pc, #224]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 80048e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e6:	2202      	movs	r2, #2
 80048e8:	4013      	ands	r3, r2
 80048ea:	d0f1      	beq.n	80048d0 <HAL_RCC_OscConfig+0x24c>
 80048ec:	e018      	b.n	8004920 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80048ee:	4b35      	ldr	r3, [pc, #212]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 80048f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80048f2:	4b34      	ldr	r3, [pc, #208]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 80048f4:	2101      	movs	r1, #1
 80048f6:	438a      	bics	r2, r1
 80048f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fa:	f7fe fc8b 	bl	8003214 <HAL_GetTick>
 80048fe:	0003      	movs	r3, r0
 8004900:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004904:	f7fe fc86 	bl	8003214 <HAL_GetTick>
 8004908:	0002      	movs	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e090      	b.n	8004a38 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004916:	4b2b      	ldr	r3, [pc, #172]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 8004918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800491a:	2202      	movs	r2, #2
 800491c:	4013      	ands	r3, r2
 800491e:	d1f1      	bne.n	8004904 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2204      	movs	r2, #4
 8004926:	4013      	ands	r3, r2
 8004928:	d100      	bne.n	800492c <HAL_RCC_OscConfig+0x2a8>
 800492a:	e084      	b.n	8004a36 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800492c:	230f      	movs	r3, #15
 800492e:	18fb      	adds	r3, r7, r3
 8004930:	2200      	movs	r2, #0
 8004932:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004934:	4b23      	ldr	r3, [pc, #140]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	2238      	movs	r2, #56	@ 0x38
 800493a:	4013      	ands	r3, r2
 800493c:	2b20      	cmp	r3, #32
 800493e:	d106      	bne.n	800494e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d000      	beq.n	800494a <HAL_RCC_OscConfig+0x2c6>
 8004948:	e075      	b.n	8004a36 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e074      	b.n	8004a38 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d106      	bne.n	8004964 <HAL_RCC_OscConfig+0x2e0>
 8004956:	4b1b      	ldr	r3, [pc, #108]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 8004958:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800495a:	4b1a      	ldr	r3, [pc, #104]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 800495c:	2101      	movs	r1, #1
 800495e:	430a      	orrs	r2, r1
 8004960:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004962:	e01c      	b.n	800499e <HAL_RCC_OscConfig+0x31a>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b05      	cmp	r3, #5
 800496a:	d10c      	bne.n	8004986 <HAL_RCC_OscConfig+0x302>
 800496c:	4b15      	ldr	r3, [pc, #84]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 800496e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004970:	4b14      	ldr	r3, [pc, #80]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 8004972:	2104      	movs	r1, #4
 8004974:	430a      	orrs	r2, r1
 8004976:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004978:	4b12      	ldr	r3, [pc, #72]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 800497a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800497c:	4b11      	ldr	r3, [pc, #68]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 800497e:	2101      	movs	r1, #1
 8004980:	430a      	orrs	r2, r1
 8004982:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004984:	e00b      	b.n	800499e <HAL_RCC_OscConfig+0x31a>
 8004986:	4b0f      	ldr	r3, [pc, #60]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 8004988:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800498a:	4b0e      	ldr	r3, [pc, #56]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 800498c:	2101      	movs	r1, #1
 800498e:	438a      	bics	r2, r1
 8004990:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004992:	4b0c      	ldr	r3, [pc, #48]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 8004994:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004996:	4b0b      	ldr	r3, [pc, #44]	@ (80049c4 <HAL_RCC_OscConfig+0x340>)
 8004998:	2104      	movs	r1, #4
 800499a:	438a      	bics	r2, r1
 800499c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d028      	beq.n	80049f8 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a6:	f7fe fc35 	bl	8003214 <HAL_GetTick>
 80049aa:	0003      	movs	r3, r0
 80049ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80049ae:	e01d      	b.n	80049ec <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b0:	f7fe fc30 	bl	8003214 <HAL_GetTick>
 80049b4:	0002      	movs	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	4a0b      	ldr	r2, [pc, #44]	@ (80049e8 <HAL_RCC_OscConfig+0x364>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d915      	bls.n	80049ec <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e039      	b.n	8004a38 <HAL_RCC_OscConfig+0x3b4>
 80049c4:	40021000 	.word	0x40021000
 80049c8:	fffeffff 	.word	0xfffeffff
 80049cc:	fffbffff 	.word	0xfffbffff
 80049d0:	ffff80ff 	.word	0xffff80ff
 80049d4:	ffffc7ff 	.word	0xffffc7ff
 80049d8:	02dc6c00 	.word	0x02dc6c00
 80049dc:	20000000 	.word	0x20000000
 80049e0:	20000004 	.word	0x20000004
 80049e4:	fffffeff 	.word	0xfffffeff
 80049e8:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80049ec:	4b14      	ldr	r3, [pc, #80]	@ (8004a40 <HAL_RCC_OscConfig+0x3bc>)
 80049ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f0:	2202      	movs	r2, #2
 80049f2:	4013      	ands	r3, r2
 80049f4:	d0dc      	beq.n	80049b0 <HAL_RCC_OscConfig+0x32c>
 80049f6:	e013      	b.n	8004a20 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f8:	f7fe fc0c 	bl	8003214 <HAL_GetTick>
 80049fc:	0003      	movs	r3, r0
 80049fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004a00:	e009      	b.n	8004a16 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a02:	f7fe fc07 	bl	8003214 <HAL_GetTick>
 8004a06:	0002      	movs	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8004a44 <HAL_RCC_OscConfig+0x3c0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e010      	b.n	8004a38 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004a16:	4b0a      	ldr	r3, [pc, #40]	@ (8004a40 <HAL_RCC_OscConfig+0x3bc>)
 8004a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	d1f0      	bne.n	8004a02 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004a20:	230f      	movs	r3, #15
 8004a22:	18fb      	adds	r3, r7, r3
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d105      	bne.n	8004a36 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004a2a:	4b05      	ldr	r3, [pc, #20]	@ (8004a40 <HAL_RCC_OscConfig+0x3bc>)
 8004a2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a2e:	4b04      	ldr	r3, [pc, #16]	@ (8004a40 <HAL_RCC_OscConfig+0x3bc>)
 8004a30:	4905      	ldr	r1, [pc, #20]	@ (8004a48 <HAL_RCC_OscConfig+0x3c4>)
 8004a32:	400a      	ands	r2, r1
 8004a34:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	0018      	movs	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b006      	add	sp, #24
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40021000 	.word	0x40021000
 8004a44:	00001388 	.word	0x00001388
 8004a48:	efffffff 	.word	0xefffffff

08004a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e0e9      	b.n	8004c34 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a60:	4b76      	ldr	r3, [pc, #472]	@ (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2207      	movs	r2, #7
 8004a66:	4013      	ands	r3, r2
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d91e      	bls.n	8004aac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a6e:	4b73      	ldr	r3, [pc, #460]	@ (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2207      	movs	r2, #7
 8004a74:	4393      	bics	r3, r2
 8004a76:	0019      	movs	r1, r3
 8004a78:	4b70      	ldr	r3, [pc, #448]	@ (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a80:	f7fe fbc8 	bl	8003214 <HAL_GetTick>
 8004a84:	0003      	movs	r3, r0
 8004a86:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a88:	e009      	b.n	8004a9e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004a8a:	f7fe fbc3 	bl	8003214 <HAL_GetTick>
 8004a8e:	0002      	movs	r2, r0
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	4a6a      	ldr	r2, [pc, #424]	@ (8004c40 <HAL_RCC_ClockConfig+0x1f4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e0ca      	b.n	8004c34 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a9e:	4b67      	ldr	r3, [pc, #412]	@ (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2207      	movs	r2, #7
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d1ee      	bne.n	8004a8a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d017      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2204      	movs	r2, #4
 8004abc:	4013      	ands	r3, r2
 8004abe:	d008      	beq.n	8004ad2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004ac0:	4b60      	ldr	r3, [pc, #384]	@ (8004c44 <HAL_RCC_ClockConfig+0x1f8>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	4a60      	ldr	r2, [pc, #384]	@ (8004c48 <HAL_RCC_ClockConfig+0x1fc>)
 8004ac6:	401a      	ands	r2, r3
 8004ac8:	4b5e      	ldr	r3, [pc, #376]	@ (8004c44 <HAL_RCC_ClockConfig+0x1f8>)
 8004aca:	21b0      	movs	r1, #176	@ 0xb0
 8004acc:	0109      	lsls	r1, r1, #4
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ad2:	4b5c      	ldr	r3, [pc, #368]	@ (8004c44 <HAL_RCC_ClockConfig+0x1f8>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	4a5d      	ldr	r2, [pc, #372]	@ (8004c4c <HAL_RCC_ClockConfig+0x200>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	0019      	movs	r1, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	4b58      	ldr	r3, [pc, #352]	@ (8004c44 <HAL_RCC_ClockConfig+0x1f8>)
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2201      	movs	r2, #1
 8004aec:	4013      	ands	r3, r2
 8004aee:	d055      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8004af0:	4b54      	ldr	r3, [pc, #336]	@ (8004c44 <HAL_RCC_ClockConfig+0x1f8>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	221c      	movs	r2, #28
 8004af6:	4393      	bics	r3, r2
 8004af8:	0019      	movs	r1, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	4b51      	ldr	r3, [pc, #324]	@ (8004c44 <HAL_RCC_ClockConfig+0x1f8>)
 8004b00:	430a      	orrs	r2, r1
 8004b02:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d107      	bne.n	8004b1c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b0c:	4b4d      	ldr	r3, [pc, #308]	@ (8004c44 <HAL_RCC_ClockConfig+0x1f8>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	2380      	movs	r3, #128	@ 0x80
 8004b12:	029b      	lsls	r3, r3, #10
 8004b14:	4013      	ands	r3, r2
 8004b16:	d11f      	bne.n	8004b58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e08b      	b.n	8004c34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b24:	4b47      	ldr	r3, [pc, #284]	@ (8004c44 <HAL_RCC_ClockConfig+0x1f8>)
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	2380      	movs	r3, #128	@ 0x80
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	d113      	bne.n	8004b58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e07f      	b.n	8004c34 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d106      	bne.n	8004b4a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004b3c:	4b41      	ldr	r3, [pc, #260]	@ (8004c44 <HAL_RCC_ClockConfig+0x1f8>)
 8004b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b40:	2202      	movs	r2, #2
 8004b42:	4013      	ands	r3, r2
 8004b44:	d108      	bne.n	8004b58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e074      	b.n	8004c34 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004b4a:	4b3e      	ldr	r3, [pc, #248]	@ (8004c44 <HAL_RCC_ClockConfig+0x1f8>)
 8004b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b4e:	2202      	movs	r2, #2
 8004b50:	4013      	ands	r3, r2
 8004b52:	d101      	bne.n	8004b58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e06d      	b.n	8004c34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b58:	4b3a      	ldr	r3, [pc, #232]	@ (8004c44 <HAL_RCC_ClockConfig+0x1f8>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	2207      	movs	r2, #7
 8004b5e:	4393      	bics	r3, r2
 8004b60:	0019      	movs	r1, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	4b37      	ldr	r3, [pc, #220]	@ (8004c44 <HAL_RCC_ClockConfig+0x1f8>)
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b6c:	f7fe fb52 	bl	8003214 <HAL_GetTick>
 8004b70:	0003      	movs	r3, r0
 8004b72:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b74:	e009      	b.n	8004b8a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004b76:	f7fe fb4d 	bl	8003214 <HAL_GetTick>
 8004b7a:	0002      	movs	r2, r0
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	4a2f      	ldr	r2, [pc, #188]	@ (8004c40 <HAL_RCC_ClockConfig+0x1f4>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e054      	b.n	8004c34 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b8a:	4b2e      	ldr	r3, [pc, #184]	@ (8004c44 <HAL_RCC_ClockConfig+0x1f8>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	2238      	movs	r2, #56	@ 0x38
 8004b90:	401a      	ands	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d1ec      	bne.n	8004b76 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b9c:	4b27      	ldr	r3, [pc, #156]	@ (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2207      	movs	r2, #7
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d21e      	bcs.n	8004be8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004baa:	4b24      	ldr	r3, [pc, #144]	@ (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2207      	movs	r2, #7
 8004bb0:	4393      	bics	r3, r2
 8004bb2:	0019      	movs	r1, r3
 8004bb4:	4b21      	ldr	r3, [pc, #132]	@ (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004bbc:	f7fe fb2a 	bl	8003214 <HAL_GetTick>
 8004bc0:	0003      	movs	r3, r0
 8004bc2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004bc4:	e009      	b.n	8004bda <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004bc6:	f7fe fb25 	bl	8003214 <HAL_GetTick>
 8004bca:	0002      	movs	r2, r0
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8004c40 <HAL_RCC_ClockConfig+0x1f4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e02c      	b.n	8004c34 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004bda:	4b18      	ldr	r3, [pc, #96]	@ (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2207      	movs	r2, #7
 8004be0:	4013      	ands	r3, r2
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d1ee      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2204      	movs	r2, #4
 8004bee:	4013      	ands	r3, r2
 8004bf0:	d009      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004bf2:	4b14      	ldr	r3, [pc, #80]	@ (8004c44 <HAL_RCC_ClockConfig+0x1f8>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	4a16      	ldr	r2, [pc, #88]	@ (8004c50 <HAL_RCC_ClockConfig+0x204>)
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	0019      	movs	r1, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	4b10      	ldr	r3, [pc, #64]	@ (8004c44 <HAL_RCC_ClockConfig+0x1f8>)
 8004c02:	430a      	orrs	r2, r1
 8004c04:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004c06:	f000 f82b 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 8004c0a:	0001      	movs	r1, r0
 8004c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c44 <HAL_RCC_ClockConfig+0x1f8>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004c10:	0a1b      	lsrs	r3, r3, #8
 8004c12:	220f      	movs	r2, #15
 8004c14:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004c16:	4b0f      	ldr	r3, [pc, #60]	@ (8004c54 <HAL_RCC_ClockConfig+0x208>)
 8004c18:	0092      	lsls	r2, r2, #2
 8004c1a:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004c1c:	221f      	movs	r2, #31
 8004c1e:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004c20:	000a      	movs	r2, r1
 8004c22:	40da      	lsrs	r2, r3
 8004c24:	4b0c      	ldr	r3, [pc, #48]	@ (8004c58 <HAL_RCC_ClockConfig+0x20c>)
 8004c26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c28:	4b0c      	ldr	r3, [pc, #48]	@ (8004c5c <HAL_RCC_ClockConfig+0x210>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f7fe fa95 	bl	800315c <HAL_InitTick>
 8004c32:	0003      	movs	r3, r0
}
 8004c34:	0018      	movs	r0, r3
 8004c36:	46bd      	mov	sp, r7
 8004c38:	b004      	add	sp, #16
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40022000 	.word	0x40022000
 8004c40:	00001388 	.word	0x00001388
 8004c44:	40021000 	.word	0x40021000
 8004c48:	ffff84ff 	.word	0xffff84ff
 8004c4c:	fffff0ff 	.word	0xfffff0ff
 8004c50:	ffff8fff 	.word	0xffff8fff
 8004c54:	08007a2c 	.word	0x08007a2c
 8004c58:	20000000 	.word	0x20000000
 8004c5c:	20000004 	.word	0x20000004

08004c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8004c66:	4b23      	ldr	r3, [pc, #140]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	089b      	lsrs	r3, r3, #2
 8004c6c:	2207      	movs	r2, #7
 8004c6e:	4013      	ands	r3, r2
 8004c70:	3301      	adds	r3, #1
 8004c72:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004c74:	4b1f      	ldr	r3, [pc, #124]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	2238      	movs	r2, #56	@ 0x38
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	d10f      	bne.n	8004c9e <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	0adb      	lsrs	r3, r3, #11
 8004c84:	2207      	movs	r2, #7
 8004c86:	4013      	ands	r3, r2
 8004c88:	2201      	movs	r2, #1
 8004c8a:	409a      	lsls	r2, r3
 8004c8c:	0013      	movs	r3, r2
 8004c8e:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	4819      	ldr	r0, [pc, #100]	@ (8004cf8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c94:	f7fb fa54 	bl	8000140 <__udivsi3>
 8004c98:	0003      	movs	r3, r0
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	e01e      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c9e:	4b15      	ldr	r3, [pc, #84]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2238      	movs	r2, #56	@ 0x38
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	d102      	bne.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004caa:	4b13      	ldr	r3, [pc, #76]	@ (8004cf8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	e015      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004cb0:	4b10      	ldr	r3, [pc, #64]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	2238      	movs	r2, #56	@ 0x38
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	2b20      	cmp	r3, #32
 8004cba:	d103      	bne.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004cbc:	2380      	movs	r3, #128	@ 0x80
 8004cbe:	021b      	lsls	r3, r3, #8
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	e00b      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	2238      	movs	r2, #56	@ 0x38
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b18      	cmp	r3, #24
 8004cce:	d103      	bne.n	8004cd8 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004cd0:	23fa      	movs	r3, #250	@ 0xfa
 8004cd2:	01db      	lsls	r3, r3, #7
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	e001      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8004cdc:	68b9      	ldr	r1, [r7, #8]
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f7fb fa2e 	bl	8000140 <__udivsi3>
 8004ce4:	0003      	movs	r3, r0
 8004ce6:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
}
 8004cea:	0018      	movs	r0, r3
 8004cec:	46bd      	mov	sp, r7
 8004cee:	b004      	add	sp, #16
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	46c0      	nop			@ (mov r8, r8)
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	02dc6c00 	.word	0x02dc6c00

08004cfc <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004d04:	2313      	movs	r3, #19
 8004d06:	18fb      	adds	r3, r7, r3
 8004d08:	2200      	movs	r2, #0
 8004d0a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d0c:	2312      	movs	r3, #18
 8004d0e:	18fb      	adds	r3, r7, r3
 8004d10:	2200      	movs	r2, #0
 8004d12:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2240      	movs	r2, #64	@ 0x40
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	d100      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8004d1e:	e079      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d20:	2011      	movs	r0, #17
 8004d22:	183b      	adds	r3, r7, r0
 8004d24:	2200      	movs	r2, #0
 8004d26:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d28:	4b63      	ldr	r3, [pc, #396]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d2c:	2380      	movs	r3, #128	@ 0x80
 8004d2e:	055b      	lsls	r3, r3, #21
 8004d30:	4013      	ands	r3, r2
 8004d32:	d110      	bne.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d34:	4b60      	ldr	r3, [pc, #384]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d38:	4b5f      	ldr	r3, [pc, #380]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d3a:	2180      	movs	r1, #128	@ 0x80
 8004d3c:	0549      	lsls	r1, r1, #21
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004d42:	4b5d      	ldr	r3, [pc, #372]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d46:	2380      	movs	r3, #128	@ 0x80
 8004d48:	055b      	lsls	r3, r3, #21
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	60bb      	str	r3, [r7, #8]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d50:	183b      	adds	r3, r7, r0
 8004d52:	2201      	movs	r2, #1
 8004d54:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8004d56:	4b58      	ldr	r3, [pc, #352]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d5a:	23c0      	movs	r3, #192	@ 0xc0
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4013      	ands	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d019      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d014      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8004d72:	4b51      	ldr	r3, [pc, #324]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d76:	4a51      	ldr	r2, [pc, #324]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d7c:	4b4e      	ldr	r3, [pc, #312]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d80:	4b4d      	ldr	r3, [pc, #308]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d82:	2180      	movs	r1, #128	@ 0x80
 8004d84:	0249      	lsls	r1, r1, #9
 8004d86:	430a      	orrs	r2, r1
 8004d88:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d8a:	4b4b      	ldr	r3, [pc, #300]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d8e:	4b4a      	ldr	r3, [pc, #296]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d90:	494b      	ldr	r1, [pc, #300]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004d92:	400a      	ands	r2, r1
 8004d94:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8004d96:	4b48      	ldr	r3, [pc, #288]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	4013      	ands	r3, r2
 8004da2:	d016      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da4:	f7fe fa36 	bl	8003214 <HAL_GetTick>
 8004da8:	0003      	movs	r3, r0
 8004daa:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004dac:	e00c      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dae:	f7fe fa31 	bl	8003214 <HAL_GetTick>
 8004db2:	0002      	movs	r2, r0
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	4a42      	ldr	r2, [pc, #264]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d904      	bls.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8004dbe:	2313      	movs	r3, #19
 8004dc0:	18fb      	adds	r3, r7, r3
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	701a      	strb	r2, [r3, #0]
          break;
 8004dc6:	e004      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004dc8:	4b3b      	ldr	r3, [pc, #236]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dcc:	2202      	movs	r2, #2
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d0ed      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8004dd2:	2313      	movs	r3, #19
 8004dd4:	18fb      	adds	r3, r7, r3
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10a      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ddc:	4b36      	ldr	r3, [pc, #216]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004de0:	4a36      	ldr	r2, [pc, #216]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004de2:	4013      	ands	r3, r2
 8004de4:	0019      	movs	r1, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	699a      	ldr	r2, [r3, #24]
 8004dea:	4b33      	ldr	r3, [pc, #204]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dec:	430a      	orrs	r2, r1
 8004dee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004df0:	e005      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df2:	2312      	movs	r3, #18
 8004df4:	18fb      	adds	r3, r7, r3
 8004df6:	2213      	movs	r2, #19
 8004df8:	18ba      	adds	r2, r7, r2
 8004dfa:	7812      	ldrb	r2, [r2, #0]
 8004dfc:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dfe:	2311      	movs	r3, #17
 8004e00:	18fb      	adds	r3, r7, r3
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d105      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e08:	4b2b      	ldr	r3, [pc, #172]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e0e:	492e      	ldr	r1, [pc, #184]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e10:	400a      	ands	r2, r1
 8004e12:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	d009      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e1e:	4b26      	ldr	r3, [pc, #152]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e22:	2203      	movs	r2, #3
 8004e24:	4393      	bics	r3, r2
 8004e26:	0019      	movs	r1, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	4b22      	ldr	r3, [pc, #136]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2202      	movs	r2, #2
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d009      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e40:	4a22      	ldr	r2, [pc, #136]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e42:	4013      	ands	r3, r2
 8004e44:	0019      	movs	r1, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2220      	movs	r2, #32
 8004e56:	4013      	ands	r3, r2
 8004e58:	d008      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e5a:	4b17      	ldr	r3, [pc, #92]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	0899      	lsrs	r1, r3, #2
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695a      	ldr	r2, [r3, #20]
 8004e66:	4b14      	ldr	r3, [pc, #80]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2204      	movs	r2, #4
 8004e72:	4013      	ands	r3, r2
 8004e74:	d009      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004e76:	4b10      	ldr	r3, [pc, #64]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e7a:	4a15      	ldr	r2, [pc, #84]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	0019      	movs	r1, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	691a      	ldr	r2, [r3, #16]
 8004e84:	4b0c      	ldr	r3, [pc, #48]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e86:	430a      	orrs	r2, r1
 8004e88:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2280      	movs	r2, #128	@ 0x80
 8004e90:	4013      	ands	r3, r2
 8004e92:	d009      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8004e94:	4b08      	ldr	r3, [pc, #32]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	22e0      	movs	r2, #224	@ 0xe0
 8004e9a:	4393      	bics	r3, r2
 8004e9c:	0019      	movs	r1, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	4b05      	ldr	r3, [pc, #20]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	601a      	str	r2, [r3, #0]
  }
  return status;
 8004ea8:	2312      	movs	r3, #18
 8004eaa:	18fb      	adds	r3, r7, r3
 8004eac:	781b      	ldrb	r3, [r3, #0]
}
 8004eae:	0018      	movs	r0, r3
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	b006      	add	sp, #24
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	46c0      	nop			@ (mov r8, r8)
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	fffffcff 	.word	0xfffffcff
 8004ec0:	fffeffff 	.word	0xfffeffff
 8004ec4:	00001388 	.word	0x00001388
 8004ec8:	efffffff 	.word	0xefffffff
 8004ecc:	ffffcfff 	.word	0xffffcfff
 8004ed0:	ffff3fff 	.word	0xffff3fff

08004ed4 <__cvt>:
 8004ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ed6:	001f      	movs	r7, r3
 8004ed8:	2300      	movs	r3, #0
 8004eda:	0016      	movs	r6, r2
 8004edc:	b08b      	sub	sp, #44	@ 0x2c
 8004ede:	429f      	cmp	r7, r3
 8004ee0:	da04      	bge.n	8004eec <__cvt+0x18>
 8004ee2:	2180      	movs	r1, #128	@ 0x80
 8004ee4:	0609      	lsls	r1, r1, #24
 8004ee6:	187b      	adds	r3, r7, r1
 8004ee8:	001f      	movs	r7, r3
 8004eea:	232d      	movs	r3, #45	@ 0x2d
 8004eec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004eee:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8004ef0:	7013      	strb	r3, [r2, #0]
 8004ef2:	2320      	movs	r3, #32
 8004ef4:	2203      	movs	r2, #3
 8004ef6:	439d      	bics	r5, r3
 8004ef8:	2d46      	cmp	r5, #70	@ 0x46
 8004efa:	d007      	beq.n	8004f0c <__cvt+0x38>
 8004efc:	002b      	movs	r3, r5
 8004efe:	3b45      	subs	r3, #69	@ 0x45
 8004f00:	4259      	negs	r1, r3
 8004f02:	414b      	adcs	r3, r1
 8004f04:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8004f06:	3a01      	subs	r2, #1
 8004f08:	18cb      	adds	r3, r1, r3
 8004f0a:	9310      	str	r3, [sp, #64]	@ 0x40
 8004f0c:	ab09      	add	r3, sp, #36	@ 0x24
 8004f0e:	9304      	str	r3, [sp, #16]
 8004f10:	ab08      	add	r3, sp, #32
 8004f12:	9303      	str	r3, [sp, #12]
 8004f14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004f16:	9200      	str	r2, [sp, #0]
 8004f18:	9302      	str	r3, [sp, #8]
 8004f1a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004f1c:	0032      	movs	r2, r6
 8004f1e:	9301      	str	r3, [sp, #4]
 8004f20:	003b      	movs	r3, r7
 8004f22:	f000 fe69 	bl	8005bf8 <_dtoa_r>
 8004f26:	0004      	movs	r4, r0
 8004f28:	2d47      	cmp	r5, #71	@ 0x47
 8004f2a:	d11b      	bne.n	8004f64 <__cvt+0x90>
 8004f2c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004f2e:	07db      	lsls	r3, r3, #31
 8004f30:	d511      	bpl.n	8004f56 <__cvt+0x82>
 8004f32:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004f34:	18c3      	adds	r3, r0, r3
 8004f36:	9307      	str	r3, [sp, #28]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	0030      	movs	r0, r6
 8004f3e:	0039      	movs	r1, r7
 8004f40:	f7fb fa84 	bl	800044c <__aeabi_dcmpeq>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	d001      	beq.n	8004f4c <__cvt+0x78>
 8004f48:	9b07      	ldr	r3, [sp, #28]
 8004f4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f4c:	2230      	movs	r2, #48	@ 0x30
 8004f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f50:	9907      	ldr	r1, [sp, #28]
 8004f52:	428b      	cmp	r3, r1
 8004f54:	d320      	bcc.n	8004f98 <__cvt+0xc4>
 8004f56:	0020      	movs	r0, r4
 8004f58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f5a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004f5c:	1b1b      	subs	r3, r3, r4
 8004f5e:	6013      	str	r3, [r2, #0]
 8004f60:	b00b      	add	sp, #44	@ 0x2c
 8004f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004f66:	18c3      	adds	r3, r0, r3
 8004f68:	9307      	str	r3, [sp, #28]
 8004f6a:	2d46      	cmp	r5, #70	@ 0x46
 8004f6c:	d1e4      	bne.n	8004f38 <__cvt+0x64>
 8004f6e:	7803      	ldrb	r3, [r0, #0]
 8004f70:	2b30      	cmp	r3, #48	@ 0x30
 8004f72:	d10c      	bne.n	8004f8e <__cvt+0xba>
 8004f74:	2200      	movs	r2, #0
 8004f76:	2300      	movs	r3, #0
 8004f78:	0030      	movs	r0, r6
 8004f7a:	0039      	movs	r1, r7
 8004f7c:	f7fb fa66 	bl	800044c <__aeabi_dcmpeq>
 8004f80:	2800      	cmp	r0, #0
 8004f82:	d104      	bne.n	8004f8e <__cvt+0xba>
 8004f84:	2301      	movs	r3, #1
 8004f86:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8004f88:	1a9b      	subs	r3, r3, r2
 8004f8a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004f8c:	6013      	str	r3, [r2, #0]
 8004f8e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004f90:	9a07      	ldr	r2, [sp, #28]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	18d3      	adds	r3, r2, r3
 8004f96:	e7ce      	b.n	8004f36 <__cvt+0x62>
 8004f98:	1c59      	adds	r1, r3, #1
 8004f9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8004f9c:	701a      	strb	r2, [r3, #0]
 8004f9e:	e7d6      	b.n	8004f4e <__cvt+0x7a>

08004fa0 <__exponent>:
 8004fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fa2:	232b      	movs	r3, #43	@ 0x2b
 8004fa4:	0005      	movs	r5, r0
 8004fa6:	000c      	movs	r4, r1
 8004fa8:	b085      	sub	sp, #20
 8004faa:	7002      	strb	r2, [r0, #0]
 8004fac:	2900      	cmp	r1, #0
 8004fae:	da01      	bge.n	8004fb4 <__exponent+0x14>
 8004fb0:	424c      	negs	r4, r1
 8004fb2:	3302      	adds	r3, #2
 8004fb4:	706b      	strb	r3, [r5, #1]
 8004fb6:	2c09      	cmp	r4, #9
 8004fb8:	dd2c      	ble.n	8005014 <__exponent+0x74>
 8004fba:	ab02      	add	r3, sp, #8
 8004fbc:	1dde      	adds	r6, r3, #7
 8004fbe:	0020      	movs	r0, r4
 8004fc0:	210a      	movs	r1, #10
 8004fc2:	f7fb fa2d 	bl	8000420 <__aeabi_idivmod>
 8004fc6:	0037      	movs	r7, r6
 8004fc8:	3130      	adds	r1, #48	@ 0x30
 8004fca:	3e01      	subs	r6, #1
 8004fcc:	0020      	movs	r0, r4
 8004fce:	7031      	strb	r1, [r6, #0]
 8004fd0:	210a      	movs	r1, #10
 8004fd2:	9401      	str	r4, [sp, #4]
 8004fd4:	f7fb f93e 	bl	8000254 <__divsi3>
 8004fd8:	9b01      	ldr	r3, [sp, #4]
 8004fda:	0004      	movs	r4, r0
 8004fdc:	2b63      	cmp	r3, #99	@ 0x63
 8004fde:	dcee      	bgt.n	8004fbe <__exponent+0x1e>
 8004fe0:	1eba      	subs	r2, r7, #2
 8004fe2:	1ca8      	adds	r0, r5, #2
 8004fe4:	0001      	movs	r1, r0
 8004fe6:	0013      	movs	r3, r2
 8004fe8:	3430      	adds	r4, #48	@ 0x30
 8004fea:	7014      	strb	r4, [r2, #0]
 8004fec:	ac02      	add	r4, sp, #8
 8004fee:	3407      	adds	r4, #7
 8004ff0:	429c      	cmp	r4, r3
 8004ff2:	d80a      	bhi.n	800500a <__exponent+0x6a>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	42a2      	cmp	r2, r4
 8004ff8:	d803      	bhi.n	8005002 <__exponent+0x62>
 8004ffa:	3309      	adds	r3, #9
 8004ffc:	aa02      	add	r2, sp, #8
 8004ffe:	189b      	adds	r3, r3, r2
 8005000:	1bdb      	subs	r3, r3, r7
 8005002:	18c0      	adds	r0, r0, r3
 8005004:	1b40      	subs	r0, r0, r5
 8005006:	b005      	add	sp, #20
 8005008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800500a:	781c      	ldrb	r4, [r3, #0]
 800500c:	3301      	adds	r3, #1
 800500e:	700c      	strb	r4, [r1, #0]
 8005010:	3101      	adds	r1, #1
 8005012:	e7eb      	b.n	8004fec <__exponent+0x4c>
 8005014:	2330      	movs	r3, #48	@ 0x30
 8005016:	18e4      	adds	r4, r4, r3
 8005018:	70ab      	strb	r3, [r5, #2]
 800501a:	1d28      	adds	r0, r5, #4
 800501c:	70ec      	strb	r4, [r5, #3]
 800501e:	e7f1      	b.n	8005004 <__exponent+0x64>

08005020 <_printf_float>:
 8005020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005022:	b097      	sub	sp, #92	@ 0x5c
 8005024:	000d      	movs	r5, r1
 8005026:	920a      	str	r2, [sp, #40]	@ 0x28
 8005028:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800502a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800502c:	9009      	str	r0, [sp, #36]	@ 0x24
 800502e:	f000 fccb 	bl	80059c8 <_localeconv_r>
 8005032:	6803      	ldr	r3, [r0, #0]
 8005034:	0018      	movs	r0, r3
 8005036:	930d      	str	r3, [sp, #52]	@ 0x34
 8005038:	f7fb f866 	bl	8000108 <strlen>
 800503c:	2300      	movs	r3, #0
 800503e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005040:	9314      	str	r3, [sp, #80]	@ 0x50
 8005042:	7e2b      	ldrb	r3, [r5, #24]
 8005044:	2207      	movs	r2, #7
 8005046:	930c      	str	r3, [sp, #48]	@ 0x30
 8005048:	682b      	ldr	r3, [r5, #0]
 800504a:	930e      	str	r3, [sp, #56]	@ 0x38
 800504c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	05c9      	lsls	r1, r1, #23
 8005052:	d545      	bpl.n	80050e0 <_printf_float+0xc0>
 8005054:	189b      	adds	r3, r3, r2
 8005056:	4393      	bics	r3, r2
 8005058:	001a      	movs	r2, r3
 800505a:	3208      	adds	r2, #8
 800505c:	6022      	str	r2, [r4, #0]
 800505e:	2201      	movs	r2, #1
 8005060:	681e      	ldr	r6, [r3, #0]
 8005062:	685f      	ldr	r7, [r3, #4]
 8005064:	007b      	lsls	r3, r7, #1
 8005066:	085b      	lsrs	r3, r3, #1
 8005068:	9311      	str	r3, [sp, #68]	@ 0x44
 800506a:	9610      	str	r6, [sp, #64]	@ 0x40
 800506c:	64ae      	str	r6, [r5, #72]	@ 0x48
 800506e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8005070:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005072:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005074:	4ba7      	ldr	r3, [pc, #668]	@ (8005314 <_printf_float+0x2f4>)
 8005076:	4252      	negs	r2, r2
 8005078:	f7fd fa8e 	bl	8002598 <__aeabi_dcmpun>
 800507c:	2800      	cmp	r0, #0
 800507e:	d131      	bne.n	80050e4 <_printf_float+0xc4>
 8005080:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005082:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005084:	2201      	movs	r2, #1
 8005086:	4ba3      	ldr	r3, [pc, #652]	@ (8005314 <_printf_float+0x2f4>)
 8005088:	4252      	negs	r2, r2
 800508a:	f7fb f9ef 	bl	800046c <__aeabi_dcmple>
 800508e:	2800      	cmp	r0, #0
 8005090:	d128      	bne.n	80050e4 <_printf_float+0xc4>
 8005092:	2200      	movs	r2, #0
 8005094:	2300      	movs	r3, #0
 8005096:	0030      	movs	r0, r6
 8005098:	0039      	movs	r1, r7
 800509a:	f7fb f9dd 	bl	8000458 <__aeabi_dcmplt>
 800509e:	2800      	cmp	r0, #0
 80050a0:	d003      	beq.n	80050aa <_printf_float+0x8a>
 80050a2:	002b      	movs	r3, r5
 80050a4:	222d      	movs	r2, #45	@ 0x2d
 80050a6:	3343      	adds	r3, #67	@ 0x43
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80050ac:	4f9a      	ldr	r7, [pc, #616]	@ (8005318 <_printf_float+0x2f8>)
 80050ae:	2b47      	cmp	r3, #71	@ 0x47
 80050b0:	d900      	bls.n	80050b4 <_printf_float+0x94>
 80050b2:	4f9a      	ldr	r7, [pc, #616]	@ (800531c <_printf_float+0x2fc>)
 80050b4:	2303      	movs	r3, #3
 80050b6:	2400      	movs	r4, #0
 80050b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80050ba:	612b      	str	r3, [r5, #16]
 80050bc:	3301      	adds	r3, #1
 80050be:	439a      	bics	r2, r3
 80050c0:	602a      	str	r2, [r5, #0]
 80050c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050c4:	0029      	movs	r1, r5
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050cc:	aa15      	add	r2, sp, #84	@ 0x54
 80050ce:	f000 f9e5 	bl	800549c <_printf_common>
 80050d2:	3001      	adds	r0, #1
 80050d4:	d000      	beq.n	80050d8 <_printf_float+0xb8>
 80050d6:	e09f      	b.n	8005218 <_printf_float+0x1f8>
 80050d8:	2001      	movs	r0, #1
 80050da:	4240      	negs	r0, r0
 80050dc:	b017      	add	sp, #92	@ 0x5c
 80050de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050e0:	3307      	adds	r3, #7
 80050e2:	e7b8      	b.n	8005056 <_printf_float+0x36>
 80050e4:	0032      	movs	r2, r6
 80050e6:	003b      	movs	r3, r7
 80050e8:	0030      	movs	r0, r6
 80050ea:	0039      	movs	r1, r7
 80050ec:	f7fd fa54 	bl	8002598 <__aeabi_dcmpun>
 80050f0:	2800      	cmp	r0, #0
 80050f2:	d00b      	beq.n	800510c <_printf_float+0xec>
 80050f4:	2f00      	cmp	r7, #0
 80050f6:	da03      	bge.n	8005100 <_printf_float+0xe0>
 80050f8:	002b      	movs	r3, r5
 80050fa:	222d      	movs	r2, #45	@ 0x2d
 80050fc:	3343      	adds	r3, #67	@ 0x43
 80050fe:	701a      	strb	r2, [r3, #0]
 8005100:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005102:	4f87      	ldr	r7, [pc, #540]	@ (8005320 <_printf_float+0x300>)
 8005104:	2b47      	cmp	r3, #71	@ 0x47
 8005106:	d9d5      	bls.n	80050b4 <_printf_float+0x94>
 8005108:	4f86      	ldr	r7, [pc, #536]	@ (8005324 <_printf_float+0x304>)
 800510a:	e7d3      	b.n	80050b4 <_printf_float+0x94>
 800510c:	2220      	movs	r2, #32
 800510e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8005110:	686b      	ldr	r3, [r5, #4]
 8005112:	4394      	bics	r4, r2
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	d146      	bne.n	80051a6 <_printf_float+0x186>
 8005118:	3307      	adds	r3, #7
 800511a:	606b      	str	r3, [r5, #4]
 800511c:	2380      	movs	r3, #128	@ 0x80
 800511e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	4313      	orrs	r3, r2
 8005124:	2200      	movs	r2, #0
 8005126:	602b      	str	r3, [r5, #0]
 8005128:	9206      	str	r2, [sp, #24]
 800512a:	aa14      	add	r2, sp, #80	@ 0x50
 800512c:	9205      	str	r2, [sp, #20]
 800512e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005130:	a90a      	add	r1, sp, #40	@ 0x28
 8005132:	9204      	str	r2, [sp, #16]
 8005134:	aa13      	add	r2, sp, #76	@ 0x4c
 8005136:	9203      	str	r2, [sp, #12]
 8005138:	2223      	movs	r2, #35	@ 0x23
 800513a:	1852      	adds	r2, r2, r1
 800513c:	9202      	str	r2, [sp, #8]
 800513e:	9301      	str	r3, [sp, #4]
 8005140:	686b      	ldr	r3, [r5, #4]
 8005142:	0032      	movs	r2, r6
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005148:	003b      	movs	r3, r7
 800514a:	f7ff fec3 	bl	8004ed4 <__cvt>
 800514e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005150:	0007      	movs	r7, r0
 8005152:	2c47      	cmp	r4, #71	@ 0x47
 8005154:	d12d      	bne.n	80051b2 <_printf_float+0x192>
 8005156:	1cd3      	adds	r3, r2, #3
 8005158:	db02      	blt.n	8005160 <_printf_float+0x140>
 800515a:	686b      	ldr	r3, [r5, #4]
 800515c:	429a      	cmp	r2, r3
 800515e:	dd48      	ble.n	80051f2 <_printf_float+0x1d2>
 8005160:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005162:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005164:	3b02      	subs	r3, #2
 8005166:	b2db      	uxtb	r3, r3
 8005168:	930c      	str	r3, [sp, #48]	@ 0x30
 800516a:	0028      	movs	r0, r5
 800516c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800516e:	3901      	subs	r1, #1
 8005170:	3050      	adds	r0, #80	@ 0x50
 8005172:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005174:	f7ff ff14 	bl	8004fa0 <__exponent>
 8005178:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800517a:	0004      	movs	r4, r0
 800517c:	1813      	adds	r3, r2, r0
 800517e:	612b      	str	r3, [r5, #16]
 8005180:	2a01      	cmp	r2, #1
 8005182:	dc02      	bgt.n	800518a <_printf_float+0x16a>
 8005184:	682a      	ldr	r2, [r5, #0]
 8005186:	07d2      	lsls	r2, r2, #31
 8005188:	d501      	bpl.n	800518e <_printf_float+0x16e>
 800518a:	3301      	adds	r3, #1
 800518c:	612b      	str	r3, [r5, #16]
 800518e:	2323      	movs	r3, #35	@ 0x23
 8005190:	aa0a      	add	r2, sp, #40	@ 0x28
 8005192:	189b      	adds	r3, r3, r2
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d100      	bne.n	800519c <_printf_float+0x17c>
 800519a:	e792      	b.n	80050c2 <_printf_float+0xa2>
 800519c:	002b      	movs	r3, r5
 800519e:	222d      	movs	r2, #45	@ 0x2d
 80051a0:	3343      	adds	r3, #67	@ 0x43
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	e78d      	b.n	80050c2 <_printf_float+0xa2>
 80051a6:	2c47      	cmp	r4, #71	@ 0x47
 80051a8:	d1b8      	bne.n	800511c <_printf_float+0xfc>
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1b6      	bne.n	800511c <_printf_float+0xfc>
 80051ae:	3301      	adds	r3, #1
 80051b0:	e7b3      	b.n	800511a <_printf_float+0xfa>
 80051b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80051b4:	0011      	movs	r1, r2
 80051b6:	2b65      	cmp	r3, #101	@ 0x65
 80051b8:	d9d7      	bls.n	800516a <_printf_float+0x14a>
 80051ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80051bc:	2b66      	cmp	r3, #102	@ 0x66
 80051be:	d11a      	bne.n	80051f6 <_printf_float+0x1d6>
 80051c0:	686b      	ldr	r3, [r5, #4]
 80051c2:	2a00      	cmp	r2, #0
 80051c4:	dd09      	ble.n	80051da <_printf_float+0x1ba>
 80051c6:	612a      	str	r2, [r5, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d102      	bne.n	80051d2 <_printf_float+0x1b2>
 80051cc:	6829      	ldr	r1, [r5, #0]
 80051ce:	07c9      	lsls	r1, r1, #31
 80051d0:	d50b      	bpl.n	80051ea <_printf_float+0x1ca>
 80051d2:	3301      	adds	r3, #1
 80051d4:	189b      	adds	r3, r3, r2
 80051d6:	612b      	str	r3, [r5, #16]
 80051d8:	e007      	b.n	80051ea <_printf_float+0x1ca>
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d103      	bne.n	80051e6 <_printf_float+0x1c6>
 80051de:	2201      	movs	r2, #1
 80051e0:	6829      	ldr	r1, [r5, #0]
 80051e2:	4211      	tst	r1, r2
 80051e4:	d000      	beq.n	80051e8 <_printf_float+0x1c8>
 80051e6:	1c9a      	adds	r2, r3, #2
 80051e8:	612a      	str	r2, [r5, #16]
 80051ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80051ec:	2400      	movs	r4, #0
 80051ee:	65ab      	str	r3, [r5, #88]	@ 0x58
 80051f0:	e7cd      	b.n	800518e <_printf_float+0x16e>
 80051f2:	2367      	movs	r3, #103	@ 0x67
 80051f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80051f6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80051f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80051fa:	4299      	cmp	r1, r3
 80051fc:	db06      	blt.n	800520c <_printf_float+0x1ec>
 80051fe:	682b      	ldr	r3, [r5, #0]
 8005200:	6129      	str	r1, [r5, #16]
 8005202:	07db      	lsls	r3, r3, #31
 8005204:	d5f1      	bpl.n	80051ea <_printf_float+0x1ca>
 8005206:	3101      	adds	r1, #1
 8005208:	6129      	str	r1, [r5, #16]
 800520a:	e7ee      	b.n	80051ea <_printf_float+0x1ca>
 800520c:	2201      	movs	r2, #1
 800520e:	2900      	cmp	r1, #0
 8005210:	dce0      	bgt.n	80051d4 <_printf_float+0x1b4>
 8005212:	1892      	adds	r2, r2, r2
 8005214:	1a52      	subs	r2, r2, r1
 8005216:	e7dd      	b.n	80051d4 <_printf_float+0x1b4>
 8005218:	682a      	ldr	r2, [r5, #0]
 800521a:	0553      	lsls	r3, r2, #21
 800521c:	d408      	bmi.n	8005230 <_printf_float+0x210>
 800521e:	692b      	ldr	r3, [r5, #16]
 8005220:	003a      	movs	r2, r7
 8005222:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005224:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005226:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005228:	47a0      	blx	r4
 800522a:	3001      	adds	r0, #1
 800522c:	d129      	bne.n	8005282 <_printf_float+0x262>
 800522e:	e753      	b.n	80050d8 <_printf_float+0xb8>
 8005230:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005232:	2b65      	cmp	r3, #101	@ 0x65
 8005234:	d800      	bhi.n	8005238 <_printf_float+0x218>
 8005236:	e0da      	b.n	80053ee <_printf_float+0x3ce>
 8005238:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800523a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800523c:	2200      	movs	r2, #0
 800523e:	2300      	movs	r3, #0
 8005240:	f7fb f904 	bl	800044c <__aeabi_dcmpeq>
 8005244:	2800      	cmp	r0, #0
 8005246:	d033      	beq.n	80052b0 <_printf_float+0x290>
 8005248:	2301      	movs	r3, #1
 800524a:	4a37      	ldr	r2, [pc, #220]	@ (8005328 <_printf_float+0x308>)
 800524c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800524e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005250:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005252:	47a0      	blx	r4
 8005254:	3001      	adds	r0, #1
 8005256:	d100      	bne.n	800525a <_printf_float+0x23a>
 8005258:	e73e      	b.n	80050d8 <_printf_float+0xb8>
 800525a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800525c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800525e:	42b3      	cmp	r3, r6
 8005260:	db02      	blt.n	8005268 <_printf_float+0x248>
 8005262:	682b      	ldr	r3, [r5, #0]
 8005264:	07db      	lsls	r3, r3, #31
 8005266:	d50c      	bpl.n	8005282 <_printf_float+0x262>
 8005268:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800526a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800526c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800526e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005270:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005272:	47a0      	blx	r4
 8005274:	2400      	movs	r4, #0
 8005276:	3001      	adds	r0, #1
 8005278:	d100      	bne.n	800527c <_printf_float+0x25c>
 800527a:	e72d      	b.n	80050d8 <_printf_float+0xb8>
 800527c:	1e73      	subs	r3, r6, #1
 800527e:	42a3      	cmp	r3, r4
 8005280:	dc0a      	bgt.n	8005298 <_printf_float+0x278>
 8005282:	682b      	ldr	r3, [r5, #0]
 8005284:	079b      	lsls	r3, r3, #30
 8005286:	d500      	bpl.n	800528a <_printf_float+0x26a>
 8005288:	e105      	b.n	8005496 <_printf_float+0x476>
 800528a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800528c:	68e8      	ldr	r0, [r5, #12]
 800528e:	4298      	cmp	r0, r3
 8005290:	db00      	blt.n	8005294 <_printf_float+0x274>
 8005292:	e723      	b.n	80050dc <_printf_float+0xbc>
 8005294:	0018      	movs	r0, r3
 8005296:	e721      	b.n	80050dc <_printf_float+0xbc>
 8005298:	002a      	movs	r2, r5
 800529a:	2301      	movs	r3, #1
 800529c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800529e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052a0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80052a2:	321a      	adds	r2, #26
 80052a4:	47b8      	blx	r7
 80052a6:	3001      	adds	r0, #1
 80052a8:	d100      	bne.n	80052ac <_printf_float+0x28c>
 80052aa:	e715      	b.n	80050d8 <_printf_float+0xb8>
 80052ac:	3401      	adds	r4, #1
 80052ae:	e7e5      	b.n	800527c <_printf_float+0x25c>
 80052b0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	dc3a      	bgt.n	800532c <_printf_float+0x30c>
 80052b6:	2301      	movs	r3, #1
 80052b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005328 <_printf_float+0x308>)
 80052ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80052bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052be:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80052c0:	47a0      	blx	r4
 80052c2:	3001      	adds	r0, #1
 80052c4:	d100      	bne.n	80052c8 <_printf_float+0x2a8>
 80052c6:	e707      	b.n	80050d8 <_printf_float+0xb8>
 80052c8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80052ca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80052cc:	4333      	orrs	r3, r6
 80052ce:	d102      	bne.n	80052d6 <_printf_float+0x2b6>
 80052d0:	682b      	ldr	r3, [r5, #0]
 80052d2:	07db      	lsls	r3, r3, #31
 80052d4:	d5d5      	bpl.n	8005282 <_printf_float+0x262>
 80052d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80052da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80052dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052de:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80052e0:	47a0      	blx	r4
 80052e2:	2300      	movs	r3, #0
 80052e4:	3001      	adds	r0, #1
 80052e6:	d100      	bne.n	80052ea <_printf_float+0x2ca>
 80052e8:	e6f6      	b.n	80050d8 <_printf_float+0xb8>
 80052ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80052ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80052ee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80052f0:	425b      	negs	r3, r3
 80052f2:	4293      	cmp	r3, r2
 80052f4:	dc01      	bgt.n	80052fa <_printf_float+0x2da>
 80052f6:	0033      	movs	r3, r6
 80052f8:	e792      	b.n	8005220 <_printf_float+0x200>
 80052fa:	002a      	movs	r2, r5
 80052fc:	2301      	movs	r3, #1
 80052fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005300:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005302:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005304:	321a      	adds	r2, #26
 8005306:	47a0      	blx	r4
 8005308:	3001      	adds	r0, #1
 800530a:	d100      	bne.n	800530e <_printf_float+0x2ee>
 800530c:	e6e4      	b.n	80050d8 <_printf_float+0xb8>
 800530e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005310:	3301      	adds	r3, #1
 8005312:	e7ea      	b.n	80052ea <_printf_float+0x2ca>
 8005314:	7fefffff 	.word	0x7fefffff
 8005318:	08007a6c 	.word	0x08007a6c
 800531c:	08007a70 	.word	0x08007a70
 8005320:	08007a74 	.word	0x08007a74
 8005324:	08007a78 	.word	0x08007a78
 8005328:	08007a7c 	.word	0x08007a7c
 800532c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800532e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8005330:	930c      	str	r3, [sp, #48]	@ 0x30
 8005332:	429e      	cmp	r6, r3
 8005334:	dd00      	ble.n	8005338 <_printf_float+0x318>
 8005336:	001e      	movs	r6, r3
 8005338:	2e00      	cmp	r6, #0
 800533a:	dc31      	bgt.n	80053a0 <_printf_float+0x380>
 800533c:	43f3      	mvns	r3, r6
 800533e:	2400      	movs	r4, #0
 8005340:	17db      	asrs	r3, r3, #31
 8005342:	4033      	ands	r3, r6
 8005344:	930e      	str	r3, [sp, #56]	@ 0x38
 8005346:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8005348:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800534a:	1af3      	subs	r3, r6, r3
 800534c:	42a3      	cmp	r3, r4
 800534e:	dc30      	bgt.n	80053b2 <_printf_float+0x392>
 8005350:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005352:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005354:	429a      	cmp	r2, r3
 8005356:	dc38      	bgt.n	80053ca <_printf_float+0x3aa>
 8005358:	682b      	ldr	r3, [r5, #0]
 800535a:	07db      	lsls	r3, r3, #31
 800535c:	d435      	bmi.n	80053ca <_printf_float+0x3aa>
 800535e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8005360:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005362:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005364:	1b9b      	subs	r3, r3, r6
 8005366:	1b14      	subs	r4, r2, r4
 8005368:	429c      	cmp	r4, r3
 800536a:	dd00      	ble.n	800536e <_printf_float+0x34e>
 800536c:	001c      	movs	r4, r3
 800536e:	2c00      	cmp	r4, #0
 8005370:	dc34      	bgt.n	80053dc <_printf_float+0x3bc>
 8005372:	43e3      	mvns	r3, r4
 8005374:	2600      	movs	r6, #0
 8005376:	17db      	asrs	r3, r3, #31
 8005378:	401c      	ands	r4, r3
 800537a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800537c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	1b1b      	subs	r3, r3, r4
 8005382:	42b3      	cmp	r3, r6
 8005384:	dc00      	bgt.n	8005388 <_printf_float+0x368>
 8005386:	e77c      	b.n	8005282 <_printf_float+0x262>
 8005388:	002a      	movs	r2, r5
 800538a:	2301      	movs	r3, #1
 800538c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800538e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005390:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005392:	321a      	adds	r2, #26
 8005394:	47b8      	blx	r7
 8005396:	3001      	adds	r0, #1
 8005398:	d100      	bne.n	800539c <_printf_float+0x37c>
 800539a:	e69d      	b.n	80050d8 <_printf_float+0xb8>
 800539c:	3601      	adds	r6, #1
 800539e:	e7ec      	b.n	800537a <_printf_float+0x35a>
 80053a0:	0033      	movs	r3, r6
 80053a2:	003a      	movs	r2, r7
 80053a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80053a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053a8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80053aa:	47a0      	blx	r4
 80053ac:	3001      	adds	r0, #1
 80053ae:	d1c5      	bne.n	800533c <_printf_float+0x31c>
 80053b0:	e692      	b.n	80050d8 <_printf_float+0xb8>
 80053b2:	002a      	movs	r2, r5
 80053b4:	2301      	movs	r3, #1
 80053b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80053b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053ba:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80053bc:	321a      	adds	r2, #26
 80053be:	47b0      	blx	r6
 80053c0:	3001      	adds	r0, #1
 80053c2:	d100      	bne.n	80053c6 <_printf_float+0x3a6>
 80053c4:	e688      	b.n	80050d8 <_printf_float+0xb8>
 80053c6:	3401      	adds	r4, #1
 80053c8:	e7bd      	b.n	8005346 <_printf_float+0x326>
 80053ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80053cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80053ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80053d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053d2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80053d4:	47a0      	blx	r4
 80053d6:	3001      	adds	r0, #1
 80053d8:	d1c1      	bne.n	800535e <_printf_float+0x33e>
 80053da:	e67d      	b.n	80050d8 <_printf_float+0xb8>
 80053dc:	19ba      	adds	r2, r7, r6
 80053de:	0023      	movs	r3, r4
 80053e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80053e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053e4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80053e6:	47b0      	blx	r6
 80053e8:	3001      	adds	r0, #1
 80053ea:	d1c2      	bne.n	8005372 <_printf_float+0x352>
 80053ec:	e674      	b.n	80050d8 <_printf_float+0xb8>
 80053ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80053f0:	930c      	str	r3, [sp, #48]	@ 0x30
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	dc02      	bgt.n	80053fc <_printf_float+0x3dc>
 80053f6:	2301      	movs	r3, #1
 80053f8:	421a      	tst	r2, r3
 80053fa:	d039      	beq.n	8005470 <_printf_float+0x450>
 80053fc:	2301      	movs	r3, #1
 80053fe:	003a      	movs	r2, r7
 8005400:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005402:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005404:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005406:	47b0      	blx	r6
 8005408:	3001      	adds	r0, #1
 800540a:	d100      	bne.n	800540e <_printf_float+0x3ee>
 800540c:	e664      	b.n	80050d8 <_printf_float+0xb8>
 800540e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005410:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005412:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005414:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005416:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005418:	47b0      	blx	r6
 800541a:	3001      	adds	r0, #1
 800541c:	d100      	bne.n	8005420 <_printf_float+0x400>
 800541e:	e65b      	b.n	80050d8 <_printf_float+0xb8>
 8005420:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8005422:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8005424:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005426:	2200      	movs	r2, #0
 8005428:	3b01      	subs	r3, #1
 800542a:	930c      	str	r3, [sp, #48]	@ 0x30
 800542c:	2300      	movs	r3, #0
 800542e:	f7fb f80d 	bl	800044c <__aeabi_dcmpeq>
 8005432:	2800      	cmp	r0, #0
 8005434:	d11a      	bne.n	800546c <_printf_float+0x44c>
 8005436:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005438:	1c7a      	adds	r2, r7, #1
 800543a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800543c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800543e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005440:	47b0      	blx	r6
 8005442:	3001      	adds	r0, #1
 8005444:	d10e      	bne.n	8005464 <_printf_float+0x444>
 8005446:	e647      	b.n	80050d8 <_printf_float+0xb8>
 8005448:	002a      	movs	r2, r5
 800544a:	2301      	movs	r3, #1
 800544c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800544e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005450:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005452:	321a      	adds	r2, #26
 8005454:	47b8      	blx	r7
 8005456:	3001      	adds	r0, #1
 8005458:	d100      	bne.n	800545c <_printf_float+0x43c>
 800545a:	e63d      	b.n	80050d8 <_printf_float+0xb8>
 800545c:	3601      	adds	r6, #1
 800545e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005460:	429e      	cmp	r6, r3
 8005462:	dbf1      	blt.n	8005448 <_printf_float+0x428>
 8005464:	002a      	movs	r2, r5
 8005466:	0023      	movs	r3, r4
 8005468:	3250      	adds	r2, #80	@ 0x50
 800546a:	e6da      	b.n	8005222 <_printf_float+0x202>
 800546c:	2600      	movs	r6, #0
 800546e:	e7f6      	b.n	800545e <_printf_float+0x43e>
 8005470:	003a      	movs	r2, r7
 8005472:	e7e2      	b.n	800543a <_printf_float+0x41a>
 8005474:	002a      	movs	r2, r5
 8005476:	2301      	movs	r3, #1
 8005478:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800547a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800547c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800547e:	3219      	adds	r2, #25
 8005480:	47b0      	blx	r6
 8005482:	3001      	adds	r0, #1
 8005484:	d100      	bne.n	8005488 <_printf_float+0x468>
 8005486:	e627      	b.n	80050d8 <_printf_float+0xb8>
 8005488:	3401      	adds	r4, #1
 800548a:	68eb      	ldr	r3, [r5, #12]
 800548c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800548e:	1a9b      	subs	r3, r3, r2
 8005490:	42a3      	cmp	r3, r4
 8005492:	dcef      	bgt.n	8005474 <_printf_float+0x454>
 8005494:	e6f9      	b.n	800528a <_printf_float+0x26a>
 8005496:	2400      	movs	r4, #0
 8005498:	e7f7      	b.n	800548a <_printf_float+0x46a>
 800549a:	46c0      	nop			@ (mov r8, r8)

0800549c <_printf_common>:
 800549c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800549e:	0016      	movs	r6, r2
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	688a      	ldr	r2, [r1, #8]
 80054a4:	690b      	ldr	r3, [r1, #16]
 80054a6:	000c      	movs	r4, r1
 80054a8:	9000      	str	r0, [sp, #0]
 80054aa:	4293      	cmp	r3, r2
 80054ac:	da00      	bge.n	80054b0 <_printf_common+0x14>
 80054ae:	0013      	movs	r3, r2
 80054b0:	0022      	movs	r2, r4
 80054b2:	6033      	str	r3, [r6, #0]
 80054b4:	3243      	adds	r2, #67	@ 0x43
 80054b6:	7812      	ldrb	r2, [r2, #0]
 80054b8:	2a00      	cmp	r2, #0
 80054ba:	d001      	beq.n	80054c0 <_printf_common+0x24>
 80054bc:	3301      	adds	r3, #1
 80054be:	6033      	str	r3, [r6, #0]
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	069b      	lsls	r3, r3, #26
 80054c4:	d502      	bpl.n	80054cc <_printf_common+0x30>
 80054c6:	6833      	ldr	r3, [r6, #0]
 80054c8:	3302      	adds	r3, #2
 80054ca:	6033      	str	r3, [r6, #0]
 80054cc:	6822      	ldr	r2, [r4, #0]
 80054ce:	2306      	movs	r3, #6
 80054d0:	0015      	movs	r5, r2
 80054d2:	401d      	ands	r5, r3
 80054d4:	421a      	tst	r2, r3
 80054d6:	d027      	beq.n	8005528 <_printf_common+0x8c>
 80054d8:	0023      	movs	r3, r4
 80054da:	3343      	adds	r3, #67	@ 0x43
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	1e5a      	subs	r2, r3, #1
 80054e0:	4193      	sbcs	r3, r2
 80054e2:	6822      	ldr	r2, [r4, #0]
 80054e4:	0692      	lsls	r2, r2, #26
 80054e6:	d430      	bmi.n	800554a <_printf_common+0xae>
 80054e8:	0022      	movs	r2, r4
 80054ea:	9901      	ldr	r1, [sp, #4]
 80054ec:	9800      	ldr	r0, [sp, #0]
 80054ee:	9d08      	ldr	r5, [sp, #32]
 80054f0:	3243      	adds	r2, #67	@ 0x43
 80054f2:	47a8      	blx	r5
 80054f4:	3001      	adds	r0, #1
 80054f6:	d025      	beq.n	8005544 <_printf_common+0xa8>
 80054f8:	2206      	movs	r2, #6
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	2500      	movs	r5, #0
 80054fe:	4013      	ands	r3, r2
 8005500:	2b04      	cmp	r3, #4
 8005502:	d105      	bne.n	8005510 <_printf_common+0x74>
 8005504:	6833      	ldr	r3, [r6, #0]
 8005506:	68e5      	ldr	r5, [r4, #12]
 8005508:	1aed      	subs	r5, r5, r3
 800550a:	43eb      	mvns	r3, r5
 800550c:	17db      	asrs	r3, r3, #31
 800550e:	401d      	ands	r5, r3
 8005510:	68a3      	ldr	r3, [r4, #8]
 8005512:	6922      	ldr	r2, [r4, #16]
 8005514:	4293      	cmp	r3, r2
 8005516:	dd01      	ble.n	800551c <_printf_common+0x80>
 8005518:	1a9b      	subs	r3, r3, r2
 800551a:	18ed      	adds	r5, r5, r3
 800551c:	2600      	movs	r6, #0
 800551e:	42b5      	cmp	r5, r6
 8005520:	d120      	bne.n	8005564 <_printf_common+0xc8>
 8005522:	2000      	movs	r0, #0
 8005524:	e010      	b.n	8005548 <_printf_common+0xac>
 8005526:	3501      	adds	r5, #1
 8005528:	68e3      	ldr	r3, [r4, #12]
 800552a:	6832      	ldr	r2, [r6, #0]
 800552c:	1a9b      	subs	r3, r3, r2
 800552e:	42ab      	cmp	r3, r5
 8005530:	ddd2      	ble.n	80054d8 <_printf_common+0x3c>
 8005532:	0022      	movs	r2, r4
 8005534:	2301      	movs	r3, #1
 8005536:	9901      	ldr	r1, [sp, #4]
 8005538:	9800      	ldr	r0, [sp, #0]
 800553a:	9f08      	ldr	r7, [sp, #32]
 800553c:	3219      	adds	r2, #25
 800553e:	47b8      	blx	r7
 8005540:	3001      	adds	r0, #1
 8005542:	d1f0      	bne.n	8005526 <_printf_common+0x8a>
 8005544:	2001      	movs	r0, #1
 8005546:	4240      	negs	r0, r0
 8005548:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800554a:	2030      	movs	r0, #48	@ 0x30
 800554c:	18e1      	adds	r1, r4, r3
 800554e:	3143      	adds	r1, #67	@ 0x43
 8005550:	7008      	strb	r0, [r1, #0]
 8005552:	0021      	movs	r1, r4
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	3145      	adds	r1, #69	@ 0x45
 8005558:	7809      	ldrb	r1, [r1, #0]
 800555a:	18a2      	adds	r2, r4, r2
 800555c:	3243      	adds	r2, #67	@ 0x43
 800555e:	3302      	adds	r3, #2
 8005560:	7011      	strb	r1, [r2, #0]
 8005562:	e7c1      	b.n	80054e8 <_printf_common+0x4c>
 8005564:	0022      	movs	r2, r4
 8005566:	2301      	movs	r3, #1
 8005568:	9901      	ldr	r1, [sp, #4]
 800556a:	9800      	ldr	r0, [sp, #0]
 800556c:	9f08      	ldr	r7, [sp, #32]
 800556e:	321a      	adds	r2, #26
 8005570:	47b8      	blx	r7
 8005572:	3001      	adds	r0, #1
 8005574:	d0e6      	beq.n	8005544 <_printf_common+0xa8>
 8005576:	3601      	adds	r6, #1
 8005578:	e7d1      	b.n	800551e <_printf_common+0x82>
	...

0800557c <_printf_i>:
 800557c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800557e:	b08b      	sub	sp, #44	@ 0x2c
 8005580:	9206      	str	r2, [sp, #24]
 8005582:	000a      	movs	r2, r1
 8005584:	3243      	adds	r2, #67	@ 0x43
 8005586:	9307      	str	r3, [sp, #28]
 8005588:	9005      	str	r0, [sp, #20]
 800558a:	9203      	str	r2, [sp, #12]
 800558c:	7e0a      	ldrb	r2, [r1, #24]
 800558e:	000c      	movs	r4, r1
 8005590:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005592:	2a78      	cmp	r2, #120	@ 0x78
 8005594:	d809      	bhi.n	80055aa <_printf_i+0x2e>
 8005596:	2a62      	cmp	r2, #98	@ 0x62
 8005598:	d80b      	bhi.n	80055b2 <_printf_i+0x36>
 800559a:	2a00      	cmp	r2, #0
 800559c:	d100      	bne.n	80055a0 <_printf_i+0x24>
 800559e:	e0bc      	b.n	800571a <_printf_i+0x19e>
 80055a0:	497b      	ldr	r1, [pc, #492]	@ (8005790 <_printf_i+0x214>)
 80055a2:	9104      	str	r1, [sp, #16]
 80055a4:	2a58      	cmp	r2, #88	@ 0x58
 80055a6:	d100      	bne.n	80055aa <_printf_i+0x2e>
 80055a8:	e090      	b.n	80056cc <_printf_i+0x150>
 80055aa:	0025      	movs	r5, r4
 80055ac:	3542      	adds	r5, #66	@ 0x42
 80055ae:	702a      	strb	r2, [r5, #0]
 80055b0:	e022      	b.n	80055f8 <_printf_i+0x7c>
 80055b2:	0010      	movs	r0, r2
 80055b4:	3863      	subs	r0, #99	@ 0x63
 80055b6:	2815      	cmp	r0, #21
 80055b8:	d8f7      	bhi.n	80055aa <_printf_i+0x2e>
 80055ba:	f7fa fdb7 	bl	800012c <__gnu_thumb1_case_shi>
 80055be:	0016      	.short	0x0016
 80055c0:	fff6001f 	.word	0xfff6001f
 80055c4:	fff6fff6 	.word	0xfff6fff6
 80055c8:	001ffff6 	.word	0x001ffff6
 80055cc:	fff6fff6 	.word	0xfff6fff6
 80055d0:	fff6fff6 	.word	0xfff6fff6
 80055d4:	003600a1 	.word	0x003600a1
 80055d8:	fff60080 	.word	0xfff60080
 80055dc:	00b2fff6 	.word	0x00b2fff6
 80055e0:	0036fff6 	.word	0x0036fff6
 80055e4:	fff6fff6 	.word	0xfff6fff6
 80055e8:	0084      	.short	0x0084
 80055ea:	0025      	movs	r5, r4
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	3542      	adds	r5, #66	@ 0x42
 80055f0:	1d11      	adds	r1, r2, #4
 80055f2:	6019      	str	r1, [r3, #0]
 80055f4:	6813      	ldr	r3, [r2, #0]
 80055f6:	702b      	strb	r3, [r5, #0]
 80055f8:	2301      	movs	r3, #1
 80055fa:	e0a0      	b.n	800573e <_printf_i+0x1c2>
 80055fc:	6818      	ldr	r0, [r3, #0]
 80055fe:	6809      	ldr	r1, [r1, #0]
 8005600:	1d02      	adds	r2, r0, #4
 8005602:	060d      	lsls	r5, r1, #24
 8005604:	d50b      	bpl.n	800561e <_printf_i+0xa2>
 8005606:	6806      	ldr	r6, [r0, #0]
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	2e00      	cmp	r6, #0
 800560c:	da03      	bge.n	8005616 <_printf_i+0x9a>
 800560e:	232d      	movs	r3, #45	@ 0x2d
 8005610:	9a03      	ldr	r2, [sp, #12]
 8005612:	4276      	negs	r6, r6
 8005614:	7013      	strb	r3, [r2, #0]
 8005616:	4b5e      	ldr	r3, [pc, #376]	@ (8005790 <_printf_i+0x214>)
 8005618:	270a      	movs	r7, #10
 800561a:	9304      	str	r3, [sp, #16]
 800561c:	e018      	b.n	8005650 <_printf_i+0xd4>
 800561e:	6806      	ldr	r6, [r0, #0]
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	0649      	lsls	r1, r1, #25
 8005624:	d5f1      	bpl.n	800560a <_printf_i+0x8e>
 8005626:	b236      	sxth	r6, r6
 8005628:	e7ef      	b.n	800560a <_printf_i+0x8e>
 800562a:	6808      	ldr	r0, [r1, #0]
 800562c:	6819      	ldr	r1, [r3, #0]
 800562e:	c940      	ldmia	r1!, {r6}
 8005630:	0605      	lsls	r5, r0, #24
 8005632:	d402      	bmi.n	800563a <_printf_i+0xbe>
 8005634:	0640      	lsls	r0, r0, #25
 8005636:	d500      	bpl.n	800563a <_printf_i+0xbe>
 8005638:	b2b6      	uxth	r6, r6
 800563a:	6019      	str	r1, [r3, #0]
 800563c:	4b54      	ldr	r3, [pc, #336]	@ (8005790 <_printf_i+0x214>)
 800563e:	270a      	movs	r7, #10
 8005640:	9304      	str	r3, [sp, #16]
 8005642:	2a6f      	cmp	r2, #111	@ 0x6f
 8005644:	d100      	bne.n	8005648 <_printf_i+0xcc>
 8005646:	3f02      	subs	r7, #2
 8005648:	0023      	movs	r3, r4
 800564a:	2200      	movs	r2, #0
 800564c:	3343      	adds	r3, #67	@ 0x43
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	6863      	ldr	r3, [r4, #4]
 8005652:	60a3      	str	r3, [r4, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	db03      	blt.n	8005660 <_printf_i+0xe4>
 8005658:	2104      	movs	r1, #4
 800565a:	6822      	ldr	r2, [r4, #0]
 800565c:	438a      	bics	r2, r1
 800565e:	6022      	str	r2, [r4, #0]
 8005660:	2e00      	cmp	r6, #0
 8005662:	d102      	bne.n	800566a <_printf_i+0xee>
 8005664:	9d03      	ldr	r5, [sp, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00c      	beq.n	8005684 <_printf_i+0x108>
 800566a:	9d03      	ldr	r5, [sp, #12]
 800566c:	0030      	movs	r0, r6
 800566e:	0039      	movs	r1, r7
 8005670:	f7fa fdec 	bl	800024c <__aeabi_uidivmod>
 8005674:	9b04      	ldr	r3, [sp, #16]
 8005676:	3d01      	subs	r5, #1
 8005678:	5c5b      	ldrb	r3, [r3, r1]
 800567a:	702b      	strb	r3, [r5, #0]
 800567c:	0033      	movs	r3, r6
 800567e:	0006      	movs	r6, r0
 8005680:	429f      	cmp	r7, r3
 8005682:	d9f3      	bls.n	800566c <_printf_i+0xf0>
 8005684:	2f08      	cmp	r7, #8
 8005686:	d109      	bne.n	800569c <_printf_i+0x120>
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	07db      	lsls	r3, r3, #31
 800568c:	d506      	bpl.n	800569c <_printf_i+0x120>
 800568e:	6862      	ldr	r2, [r4, #4]
 8005690:	6923      	ldr	r3, [r4, #16]
 8005692:	429a      	cmp	r2, r3
 8005694:	dc02      	bgt.n	800569c <_printf_i+0x120>
 8005696:	2330      	movs	r3, #48	@ 0x30
 8005698:	3d01      	subs	r5, #1
 800569a:	702b      	strb	r3, [r5, #0]
 800569c:	9b03      	ldr	r3, [sp, #12]
 800569e:	1b5b      	subs	r3, r3, r5
 80056a0:	6123      	str	r3, [r4, #16]
 80056a2:	9b07      	ldr	r3, [sp, #28]
 80056a4:	0021      	movs	r1, r4
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	9805      	ldr	r0, [sp, #20]
 80056aa:	9b06      	ldr	r3, [sp, #24]
 80056ac:	aa09      	add	r2, sp, #36	@ 0x24
 80056ae:	f7ff fef5 	bl	800549c <_printf_common>
 80056b2:	3001      	adds	r0, #1
 80056b4:	d148      	bne.n	8005748 <_printf_i+0x1cc>
 80056b6:	2001      	movs	r0, #1
 80056b8:	4240      	negs	r0, r0
 80056ba:	b00b      	add	sp, #44	@ 0x2c
 80056bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056be:	2220      	movs	r2, #32
 80056c0:	6809      	ldr	r1, [r1, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	6022      	str	r2, [r4, #0]
 80056c6:	2278      	movs	r2, #120	@ 0x78
 80056c8:	4932      	ldr	r1, [pc, #200]	@ (8005794 <_printf_i+0x218>)
 80056ca:	9104      	str	r1, [sp, #16]
 80056cc:	0021      	movs	r1, r4
 80056ce:	3145      	adds	r1, #69	@ 0x45
 80056d0:	700a      	strb	r2, [r1, #0]
 80056d2:	6819      	ldr	r1, [r3, #0]
 80056d4:	6822      	ldr	r2, [r4, #0]
 80056d6:	c940      	ldmia	r1!, {r6}
 80056d8:	0610      	lsls	r0, r2, #24
 80056da:	d402      	bmi.n	80056e2 <_printf_i+0x166>
 80056dc:	0650      	lsls	r0, r2, #25
 80056de:	d500      	bpl.n	80056e2 <_printf_i+0x166>
 80056e0:	b2b6      	uxth	r6, r6
 80056e2:	6019      	str	r1, [r3, #0]
 80056e4:	07d3      	lsls	r3, r2, #31
 80056e6:	d502      	bpl.n	80056ee <_printf_i+0x172>
 80056e8:	2320      	movs	r3, #32
 80056ea:	4313      	orrs	r3, r2
 80056ec:	6023      	str	r3, [r4, #0]
 80056ee:	2e00      	cmp	r6, #0
 80056f0:	d001      	beq.n	80056f6 <_printf_i+0x17a>
 80056f2:	2710      	movs	r7, #16
 80056f4:	e7a8      	b.n	8005648 <_printf_i+0xcc>
 80056f6:	2220      	movs	r2, #32
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	4393      	bics	r3, r2
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	e7f8      	b.n	80056f2 <_printf_i+0x176>
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	680d      	ldr	r5, [r1, #0]
 8005704:	1d10      	adds	r0, r2, #4
 8005706:	6949      	ldr	r1, [r1, #20]
 8005708:	6018      	str	r0, [r3, #0]
 800570a:	6813      	ldr	r3, [r2, #0]
 800570c:	062e      	lsls	r6, r5, #24
 800570e:	d501      	bpl.n	8005714 <_printf_i+0x198>
 8005710:	6019      	str	r1, [r3, #0]
 8005712:	e002      	b.n	800571a <_printf_i+0x19e>
 8005714:	066d      	lsls	r5, r5, #25
 8005716:	d5fb      	bpl.n	8005710 <_printf_i+0x194>
 8005718:	8019      	strh	r1, [r3, #0]
 800571a:	2300      	movs	r3, #0
 800571c:	9d03      	ldr	r5, [sp, #12]
 800571e:	6123      	str	r3, [r4, #16]
 8005720:	e7bf      	b.n	80056a2 <_printf_i+0x126>
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	1d11      	adds	r1, r2, #4
 8005726:	6019      	str	r1, [r3, #0]
 8005728:	6815      	ldr	r5, [r2, #0]
 800572a:	2100      	movs	r1, #0
 800572c:	0028      	movs	r0, r5
 800572e:	6862      	ldr	r2, [r4, #4]
 8005730:	f000 f9c9 	bl	8005ac6 <memchr>
 8005734:	2800      	cmp	r0, #0
 8005736:	d001      	beq.n	800573c <_printf_i+0x1c0>
 8005738:	1b40      	subs	r0, r0, r5
 800573a:	6060      	str	r0, [r4, #4]
 800573c:	6863      	ldr	r3, [r4, #4]
 800573e:	6123      	str	r3, [r4, #16]
 8005740:	2300      	movs	r3, #0
 8005742:	9a03      	ldr	r2, [sp, #12]
 8005744:	7013      	strb	r3, [r2, #0]
 8005746:	e7ac      	b.n	80056a2 <_printf_i+0x126>
 8005748:	002a      	movs	r2, r5
 800574a:	6923      	ldr	r3, [r4, #16]
 800574c:	9906      	ldr	r1, [sp, #24]
 800574e:	9805      	ldr	r0, [sp, #20]
 8005750:	9d07      	ldr	r5, [sp, #28]
 8005752:	47a8      	blx	r5
 8005754:	3001      	adds	r0, #1
 8005756:	d0ae      	beq.n	80056b6 <_printf_i+0x13a>
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	079b      	lsls	r3, r3, #30
 800575c:	d415      	bmi.n	800578a <_printf_i+0x20e>
 800575e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005760:	68e0      	ldr	r0, [r4, #12]
 8005762:	4298      	cmp	r0, r3
 8005764:	daa9      	bge.n	80056ba <_printf_i+0x13e>
 8005766:	0018      	movs	r0, r3
 8005768:	e7a7      	b.n	80056ba <_printf_i+0x13e>
 800576a:	0022      	movs	r2, r4
 800576c:	2301      	movs	r3, #1
 800576e:	9906      	ldr	r1, [sp, #24]
 8005770:	9805      	ldr	r0, [sp, #20]
 8005772:	9e07      	ldr	r6, [sp, #28]
 8005774:	3219      	adds	r2, #25
 8005776:	47b0      	blx	r6
 8005778:	3001      	adds	r0, #1
 800577a:	d09c      	beq.n	80056b6 <_printf_i+0x13a>
 800577c:	3501      	adds	r5, #1
 800577e:	68e3      	ldr	r3, [r4, #12]
 8005780:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005782:	1a9b      	subs	r3, r3, r2
 8005784:	42ab      	cmp	r3, r5
 8005786:	dcf0      	bgt.n	800576a <_printf_i+0x1ee>
 8005788:	e7e9      	b.n	800575e <_printf_i+0x1e2>
 800578a:	2500      	movs	r5, #0
 800578c:	e7f7      	b.n	800577e <_printf_i+0x202>
 800578e:	46c0      	nop			@ (mov r8, r8)
 8005790:	08007a7e 	.word	0x08007a7e
 8005794:	08007a8f 	.word	0x08007a8f

08005798 <std>:
 8005798:	2300      	movs	r3, #0
 800579a:	b510      	push	{r4, lr}
 800579c:	0004      	movs	r4, r0
 800579e:	6003      	str	r3, [r0, #0]
 80057a0:	6043      	str	r3, [r0, #4]
 80057a2:	6083      	str	r3, [r0, #8]
 80057a4:	8181      	strh	r1, [r0, #12]
 80057a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80057a8:	81c2      	strh	r2, [r0, #14]
 80057aa:	6103      	str	r3, [r0, #16]
 80057ac:	6143      	str	r3, [r0, #20]
 80057ae:	6183      	str	r3, [r0, #24]
 80057b0:	0019      	movs	r1, r3
 80057b2:	2208      	movs	r2, #8
 80057b4:	305c      	adds	r0, #92	@ 0x5c
 80057b6:	f000 f8ff 	bl	80059b8 <memset>
 80057ba:	4b0b      	ldr	r3, [pc, #44]	@ (80057e8 <std+0x50>)
 80057bc:	6224      	str	r4, [r4, #32]
 80057be:	6263      	str	r3, [r4, #36]	@ 0x24
 80057c0:	4b0a      	ldr	r3, [pc, #40]	@ (80057ec <std+0x54>)
 80057c2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057c4:	4b0a      	ldr	r3, [pc, #40]	@ (80057f0 <std+0x58>)
 80057c6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057c8:	4b0a      	ldr	r3, [pc, #40]	@ (80057f4 <std+0x5c>)
 80057ca:	6323      	str	r3, [r4, #48]	@ 0x30
 80057cc:	4b0a      	ldr	r3, [pc, #40]	@ (80057f8 <std+0x60>)
 80057ce:	429c      	cmp	r4, r3
 80057d0:	d005      	beq.n	80057de <std+0x46>
 80057d2:	4b0a      	ldr	r3, [pc, #40]	@ (80057fc <std+0x64>)
 80057d4:	429c      	cmp	r4, r3
 80057d6:	d002      	beq.n	80057de <std+0x46>
 80057d8:	4b09      	ldr	r3, [pc, #36]	@ (8005800 <std+0x68>)
 80057da:	429c      	cmp	r4, r3
 80057dc:	d103      	bne.n	80057e6 <std+0x4e>
 80057de:	0020      	movs	r0, r4
 80057e0:	3058      	adds	r0, #88	@ 0x58
 80057e2:	f000 f96d 	bl	8005ac0 <__retarget_lock_init_recursive>
 80057e6:	bd10      	pop	{r4, pc}
 80057e8:	08005921 	.word	0x08005921
 80057ec:	08005949 	.word	0x08005949
 80057f0:	08005981 	.word	0x08005981
 80057f4:	080059ad 	.word	0x080059ad
 80057f8:	20000270 	.word	0x20000270
 80057fc:	200002d8 	.word	0x200002d8
 8005800:	20000340 	.word	0x20000340

08005804 <stdio_exit_handler>:
 8005804:	b510      	push	{r4, lr}
 8005806:	4a03      	ldr	r2, [pc, #12]	@ (8005814 <stdio_exit_handler+0x10>)
 8005808:	4903      	ldr	r1, [pc, #12]	@ (8005818 <stdio_exit_handler+0x14>)
 800580a:	4804      	ldr	r0, [pc, #16]	@ (800581c <stdio_exit_handler+0x18>)
 800580c:	f000 f86c 	bl	80058e8 <_fwalk_sglue>
 8005810:	bd10      	pop	{r4, pc}
 8005812:	46c0      	nop			@ (mov r8, r8)
 8005814:	2000000c 	.word	0x2000000c
 8005818:	08007241 	.word	0x08007241
 800581c:	2000001c 	.word	0x2000001c

08005820 <cleanup_stdio>:
 8005820:	6841      	ldr	r1, [r0, #4]
 8005822:	4b0b      	ldr	r3, [pc, #44]	@ (8005850 <cleanup_stdio+0x30>)
 8005824:	b510      	push	{r4, lr}
 8005826:	0004      	movs	r4, r0
 8005828:	4299      	cmp	r1, r3
 800582a:	d001      	beq.n	8005830 <cleanup_stdio+0x10>
 800582c:	f001 fd08 	bl	8007240 <_fflush_r>
 8005830:	68a1      	ldr	r1, [r4, #8]
 8005832:	4b08      	ldr	r3, [pc, #32]	@ (8005854 <cleanup_stdio+0x34>)
 8005834:	4299      	cmp	r1, r3
 8005836:	d002      	beq.n	800583e <cleanup_stdio+0x1e>
 8005838:	0020      	movs	r0, r4
 800583a:	f001 fd01 	bl	8007240 <_fflush_r>
 800583e:	68e1      	ldr	r1, [r4, #12]
 8005840:	4b05      	ldr	r3, [pc, #20]	@ (8005858 <cleanup_stdio+0x38>)
 8005842:	4299      	cmp	r1, r3
 8005844:	d002      	beq.n	800584c <cleanup_stdio+0x2c>
 8005846:	0020      	movs	r0, r4
 8005848:	f001 fcfa 	bl	8007240 <_fflush_r>
 800584c:	bd10      	pop	{r4, pc}
 800584e:	46c0      	nop			@ (mov r8, r8)
 8005850:	20000270 	.word	0x20000270
 8005854:	200002d8 	.word	0x200002d8
 8005858:	20000340 	.word	0x20000340

0800585c <global_stdio_init.part.0>:
 800585c:	b510      	push	{r4, lr}
 800585e:	4b09      	ldr	r3, [pc, #36]	@ (8005884 <global_stdio_init.part.0+0x28>)
 8005860:	4a09      	ldr	r2, [pc, #36]	@ (8005888 <global_stdio_init.part.0+0x2c>)
 8005862:	2104      	movs	r1, #4
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	4809      	ldr	r0, [pc, #36]	@ (800588c <global_stdio_init.part.0+0x30>)
 8005868:	2200      	movs	r2, #0
 800586a:	f7ff ff95 	bl	8005798 <std>
 800586e:	2201      	movs	r2, #1
 8005870:	2109      	movs	r1, #9
 8005872:	4807      	ldr	r0, [pc, #28]	@ (8005890 <global_stdio_init.part.0+0x34>)
 8005874:	f7ff ff90 	bl	8005798 <std>
 8005878:	2202      	movs	r2, #2
 800587a:	2112      	movs	r1, #18
 800587c:	4805      	ldr	r0, [pc, #20]	@ (8005894 <global_stdio_init.part.0+0x38>)
 800587e:	f7ff ff8b 	bl	8005798 <std>
 8005882:	bd10      	pop	{r4, pc}
 8005884:	200003a8 	.word	0x200003a8
 8005888:	08005805 	.word	0x08005805
 800588c:	20000270 	.word	0x20000270
 8005890:	200002d8 	.word	0x200002d8
 8005894:	20000340 	.word	0x20000340

08005898 <__sfp_lock_acquire>:
 8005898:	b510      	push	{r4, lr}
 800589a:	4802      	ldr	r0, [pc, #8]	@ (80058a4 <__sfp_lock_acquire+0xc>)
 800589c:	f000 f911 	bl	8005ac2 <__retarget_lock_acquire_recursive>
 80058a0:	bd10      	pop	{r4, pc}
 80058a2:	46c0      	nop			@ (mov r8, r8)
 80058a4:	200003b1 	.word	0x200003b1

080058a8 <__sfp_lock_release>:
 80058a8:	b510      	push	{r4, lr}
 80058aa:	4802      	ldr	r0, [pc, #8]	@ (80058b4 <__sfp_lock_release+0xc>)
 80058ac:	f000 f90a 	bl	8005ac4 <__retarget_lock_release_recursive>
 80058b0:	bd10      	pop	{r4, pc}
 80058b2:	46c0      	nop			@ (mov r8, r8)
 80058b4:	200003b1 	.word	0x200003b1

080058b8 <__sinit>:
 80058b8:	b510      	push	{r4, lr}
 80058ba:	0004      	movs	r4, r0
 80058bc:	f7ff ffec 	bl	8005898 <__sfp_lock_acquire>
 80058c0:	6a23      	ldr	r3, [r4, #32]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d002      	beq.n	80058cc <__sinit+0x14>
 80058c6:	f7ff ffef 	bl	80058a8 <__sfp_lock_release>
 80058ca:	bd10      	pop	{r4, pc}
 80058cc:	4b04      	ldr	r3, [pc, #16]	@ (80058e0 <__sinit+0x28>)
 80058ce:	6223      	str	r3, [r4, #32]
 80058d0:	4b04      	ldr	r3, [pc, #16]	@ (80058e4 <__sinit+0x2c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1f6      	bne.n	80058c6 <__sinit+0xe>
 80058d8:	f7ff ffc0 	bl	800585c <global_stdio_init.part.0>
 80058dc:	e7f3      	b.n	80058c6 <__sinit+0xe>
 80058de:	46c0      	nop			@ (mov r8, r8)
 80058e0:	08005821 	.word	0x08005821
 80058e4:	200003a8 	.word	0x200003a8

080058e8 <_fwalk_sglue>:
 80058e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058ea:	0014      	movs	r4, r2
 80058ec:	2600      	movs	r6, #0
 80058ee:	9000      	str	r0, [sp, #0]
 80058f0:	9101      	str	r1, [sp, #4]
 80058f2:	68a5      	ldr	r5, [r4, #8]
 80058f4:	6867      	ldr	r7, [r4, #4]
 80058f6:	3f01      	subs	r7, #1
 80058f8:	d504      	bpl.n	8005904 <_fwalk_sglue+0x1c>
 80058fa:	6824      	ldr	r4, [r4, #0]
 80058fc:	2c00      	cmp	r4, #0
 80058fe:	d1f8      	bne.n	80058f2 <_fwalk_sglue+0xa>
 8005900:	0030      	movs	r0, r6
 8005902:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005904:	89ab      	ldrh	r3, [r5, #12]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d908      	bls.n	800591c <_fwalk_sglue+0x34>
 800590a:	220e      	movs	r2, #14
 800590c:	5eab      	ldrsh	r3, [r5, r2]
 800590e:	3301      	adds	r3, #1
 8005910:	d004      	beq.n	800591c <_fwalk_sglue+0x34>
 8005912:	0029      	movs	r1, r5
 8005914:	9800      	ldr	r0, [sp, #0]
 8005916:	9b01      	ldr	r3, [sp, #4]
 8005918:	4798      	blx	r3
 800591a:	4306      	orrs	r6, r0
 800591c:	3568      	adds	r5, #104	@ 0x68
 800591e:	e7ea      	b.n	80058f6 <_fwalk_sglue+0xe>

08005920 <__sread>:
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	000c      	movs	r4, r1
 8005924:	250e      	movs	r5, #14
 8005926:	5f49      	ldrsh	r1, [r1, r5]
 8005928:	f000 f878 	bl	8005a1c <_read_r>
 800592c:	2800      	cmp	r0, #0
 800592e:	db03      	blt.n	8005938 <__sread+0x18>
 8005930:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005932:	181b      	adds	r3, r3, r0
 8005934:	6563      	str	r3, [r4, #84]	@ 0x54
 8005936:	bd70      	pop	{r4, r5, r6, pc}
 8005938:	89a3      	ldrh	r3, [r4, #12]
 800593a:	4a02      	ldr	r2, [pc, #8]	@ (8005944 <__sread+0x24>)
 800593c:	4013      	ands	r3, r2
 800593e:	81a3      	strh	r3, [r4, #12]
 8005940:	e7f9      	b.n	8005936 <__sread+0x16>
 8005942:	46c0      	nop			@ (mov r8, r8)
 8005944:	ffffefff 	.word	0xffffefff

08005948 <__swrite>:
 8005948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594a:	001f      	movs	r7, r3
 800594c:	898b      	ldrh	r3, [r1, #12]
 800594e:	0005      	movs	r5, r0
 8005950:	000c      	movs	r4, r1
 8005952:	0016      	movs	r6, r2
 8005954:	05db      	lsls	r3, r3, #23
 8005956:	d505      	bpl.n	8005964 <__swrite+0x1c>
 8005958:	230e      	movs	r3, #14
 800595a:	5ec9      	ldrsh	r1, [r1, r3]
 800595c:	2200      	movs	r2, #0
 800595e:	2302      	movs	r3, #2
 8005960:	f000 f848 	bl	80059f4 <_lseek_r>
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	4a05      	ldr	r2, [pc, #20]	@ (800597c <__swrite+0x34>)
 8005968:	0028      	movs	r0, r5
 800596a:	4013      	ands	r3, r2
 800596c:	81a3      	strh	r3, [r4, #12]
 800596e:	0032      	movs	r2, r6
 8005970:	230e      	movs	r3, #14
 8005972:	5ee1      	ldrsh	r1, [r4, r3]
 8005974:	003b      	movs	r3, r7
 8005976:	f000 f865 	bl	8005a44 <_write_r>
 800597a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800597c:	ffffefff 	.word	0xffffefff

08005980 <__sseek>:
 8005980:	b570      	push	{r4, r5, r6, lr}
 8005982:	000c      	movs	r4, r1
 8005984:	250e      	movs	r5, #14
 8005986:	5f49      	ldrsh	r1, [r1, r5]
 8005988:	f000 f834 	bl	80059f4 <_lseek_r>
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	1c42      	adds	r2, r0, #1
 8005990:	d103      	bne.n	800599a <__sseek+0x1a>
 8005992:	4a05      	ldr	r2, [pc, #20]	@ (80059a8 <__sseek+0x28>)
 8005994:	4013      	ands	r3, r2
 8005996:	81a3      	strh	r3, [r4, #12]
 8005998:	bd70      	pop	{r4, r5, r6, pc}
 800599a:	2280      	movs	r2, #128	@ 0x80
 800599c:	0152      	lsls	r2, r2, #5
 800599e:	4313      	orrs	r3, r2
 80059a0:	81a3      	strh	r3, [r4, #12]
 80059a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80059a4:	e7f8      	b.n	8005998 <__sseek+0x18>
 80059a6:	46c0      	nop			@ (mov r8, r8)
 80059a8:	ffffefff 	.word	0xffffefff

080059ac <__sclose>:
 80059ac:	b510      	push	{r4, lr}
 80059ae:	230e      	movs	r3, #14
 80059b0:	5ec9      	ldrsh	r1, [r1, r3]
 80059b2:	f000 f80d 	bl	80059d0 <_close_r>
 80059b6:	bd10      	pop	{r4, pc}

080059b8 <memset>:
 80059b8:	0003      	movs	r3, r0
 80059ba:	1882      	adds	r2, r0, r2
 80059bc:	4293      	cmp	r3, r2
 80059be:	d100      	bne.n	80059c2 <memset+0xa>
 80059c0:	4770      	bx	lr
 80059c2:	7019      	strb	r1, [r3, #0]
 80059c4:	3301      	adds	r3, #1
 80059c6:	e7f9      	b.n	80059bc <memset+0x4>

080059c8 <_localeconv_r>:
 80059c8:	4800      	ldr	r0, [pc, #0]	@ (80059cc <_localeconv_r+0x4>)
 80059ca:	4770      	bx	lr
 80059cc:	20000158 	.word	0x20000158

080059d0 <_close_r>:
 80059d0:	2300      	movs	r3, #0
 80059d2:	b570      	push	{r4, r5, r6, lr}
 80059d4:	4d06      	ldr	r5, [pc, #24]	@ (80059f0 <_close_r+0x20>)
 80059d6:	0004      	movs	r4, r0
 80059d8:	0008      	movs	r0, r1
 80059da:	602b      	str	r3, [r5, #0]
 80059dc:	f7fd fb0f 	bl	8002ffe <_close>
 80059e0:	1c43      	adds	r3, r0, #1
 80059e2:	d103      	bne.n	80059ec <_close_r+0x1c>
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d000      	beq.n	80059ec <_close_r+0x1c>
 80059ea:	6023      	str	r3, [r4, #0]
 80059ec:	bd70      	pop	{r4, r5, r6, pc}
 80059ee:	46c0      	nop			@ (mov r8, r8)
 80059f0:	200003ac 	.word	0x200003ac

080059f4 <_lseek_r>:
 80059f4:	b570      	push	{r4, r5, r6, lr}
 80059f6:	0004      	movs	r4, r0
 80059f8:	0008      	movs	r0, r1
 80059fa:	0011      	movs	r1, r2
 80059fc:	001a      	movs	r2, r3
 80059fe:	2300      	movs	r3, #0
 8005a00:	4d05      	ldr	r5, [pc, #20]	@ (8005a18 <_lseek_r+0x24>)
 8005a02:	602b      	str	r3, [r5, #0]
 8005a04:	f7fd fb1c 	bl	8003040 <_lseek>
 8005a08:	1c43      	adds	r3, r0, #1
 8005a0a:	d103      	bne.n	8005a14 <_lseek_r+0x20>
 8005a0c:	682b      	ldr	r3, [r5, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d000      	beq.n	8005a14 <_lseek_r+0x20>
 8005a12:	6023      	str	r3, [r4, #0]
 8005a14:	bd70      	pop	{r4, r5, r6, pc}
 8005a16:	46c0      	nop			@ (mov r8, r8)
 8005a18:	200003ac 	.word	0x200003ac

08005a1c <_read_r>:
 8005a1c:	b570      	push	{r4, r5, r6, lr}
 8005a1e:	0004      	movs	r4, r0
 8005a20:	0008      	movs	r0, r1
 8005a22:	0011      	movs	r1, r2
 8005a24:	001a      	movs	r2, r3
 8005a26:	2300      	movs	r3, #0
 8005a28:	4d05      	ldr	r5, [pc, #20]	@ (8005a40 <_read_r+0x24>)
 8005a2a:	602b      	str	r3, [r5, #0]
 8005a2c:	f7fd faae 	bl	8002f8c <_read>
 8005a30:	1c43      	adds	r3, r0, #1
 8005a32:	d103      	bne.n	8005a3c <_read_r+0x20>
 8005a34:	682b      	ldr	r3, [r5, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d000      	beq.n	8005a3c <_read_r+0x20>
 8005a3a:	6023      	str	r3, [r4, #0]
 8005a3c:	bd70      	pop	{r4, r5, r6, pc}
 8005a3e:	46c0      	nop			@ (mov r8, r8)
 8005a40:	200003ac 	.word	0x200003ac

08005a44 <_write_r>:
 8005a44:	b570      	push	{r4, r5, r6, lr}
 8005a46:	0004      	movs	r4, r0
 8005a48:	0008      	movs	r0, r1
 8005a4a:	0011      	movs	r1, r2
 8005a4c:	001a      	movs	r2, r3
 8005a4e:	2300      	movs	r3, #0
 8005a50:	4d05      	ldr	r5, [pc, #20]	@ (8005a68 <_write_r+0x24>)
 8005a52:	602b      	str	r3, [r5, #0]
 8005a54:	f7fd fab7 	bl	8002fc6 <_write>
 8005a58:	1c43      	adds	r3, r0, #1
 8005a5a:	d103      	bne.n	8005a64 <_write_r+0x20>
 8005a5c:	682b      	ldr	r3, [r5, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d000      	beq.n	8005a64 <_write_r+0x20>
 8005a62:	6023      	str	r3, [r4, #0]
 8005a64:	bd70      	pop	{r4, r5, r6, pc}
 8005a66:	46c0      	nop			@ (mov r8, r8)
 8005a68:	200003ac 	.word	0x200003ac

08005a6c <__errno>:
 8005a6c:	4b01      	ldr	r3, [pc, #4]	@ (8005a74 <__errno+0x8>)
 8005a6e:	6818      	ldr	r0, [r3, #0]
 8005a70:	4770      	bx	lr
 8005a72:	46c0      	nop			@ (mov r8, r8)
 8005a74:	20000018 	.word	0x20000018

08005a78 <__libc_init_array>:
 8005a78:	b570      	push	{r4, r5, r6, lr}
 8005a7a:	2600      	movs	r6, #0
 8005a7c:	4c0c      	ldr	r4, [pc, #48]	@ (8005ab0 <__libc_init_array+0x38>)
 8005a7e:	4d0d      	ldr	r5, [pc, #52]	@ (8005ab4 <__libc_init_array+0x3c>)
 8005a80:	1b64      	subs	r4, r4, r5
 8005a82:	10a4      	asrs	r4, r4, #2
 8005a84:	42a6      	cmp	r6, r4
 8005a86:	d109      	bne.n	8005a9c <__libc_init_array+0x24>
 8005a88:	2600      	movs	r6, #0
 8005a8a:	f001 ff5f 	bl	800794c <_init>
 8005a8e:	4c0a      	ldr	r4, [pc, #40]	@ (8005ab8 <__libc_init_array+0x40>)
 8005a90:	4d0a      	ldr	r5, [pc, #40]	@ (8005abc <__libc_init_array+0x44>)
 8005a92:	1b64      	subs	r4, r4, r5
 8005a94:	10a4      	asrs	r4, r4, #2
 8005a96:	42a6      	cmp	r6, r4
 8005a98:	d105      	bne.n	8005aa6 <__libc_init_array+0x2e>
 8005a9a:	bd70      	pop	{r4, r5, r6, pc}
 8005a9c:	00b3      	lsls	r3, r6, #2
 8005a9e:	58eb      	ldr	r3, [r5, r3]
 8005aa0:	4798      	blx	r3
 8005aa2:	3601      	adds	r6, #1
 8005aa4:	e7ee      	b.n	8005a84 <__libc_init_array+0xc>
 8005aa6:	00b3      	lsls	r3, r6, #2
 8005aa8:	58eb      	ldr	r3, [r5, r3]
 8005aaa:	4798      	blx	r3
 8005aac:	3601      	adds	r6, #1
 8005aae:	e7f2      	b.n	8005a96 <__libc_init_array+0x1e>
 8005ab0:	08007de0 	.word	0x08007de0
 8005ab4:	08007de0 	.word	0x08007de0
 8005ab8:	08007de4 	.word	0x08007de4
 8005abc:	08007de0 	.word	0x08007de0

08005ac0 <__retarget_lock_init_recursive>:
 8005ac0:	4770      	bx	lr

08005ac2 <__retarget_lock_acquire_recursive>:
 8005ac2:	4770      	bx	lr

08005ac4 <__retarget_lock_release_recursive>:
 8005ac4:	4770      	bx	lr

08005ac6 <memchr>:
 8005ac6:	b2c9      	uxtb	r1, r1
 8005ac8:	1882      	adds	r2, r0, r2
 8005aca:	4290      	cmp	r0, r2
 8005acc:	d101      	bne.n	8005ad2 <memchr+0xc>
 8005ace:	2000      	movs	r0, #0
 8005ad0:	4770      	bx	lr
 8005ad2:	7803      	ldrb	r3, [r0, #0]
 8005ad4:	428b      	cmp	r3, r1
 8005ad6:	d0fb      	beq.n	8005ad0 <memchr+0xa>
 8005ad8:	3001      	adds	r0, #1
 8005ada:	e7f6      	b.n	8005aca <memchr+0x4>

08005adc <quorem>:
 8005adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ade:	6902      	ldr	r2, [r0, #16]
 8005ae0:	690f      	ldr	r7, [r1, #16]
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	0006      	movs	r6, r0
 8005ae6:	000b      	movs	r3, r1
 8005ae8:	2000      	movs	r0, #0
 8005aea:	9102      	str	r1, [sp, #8]
 8005aec:	42ba      	cmp	r2, r7
 8005aee:	db6d      	blt.n	8005bcc <quorem+0xf0>
 8005af0:	3f01      	subs	r7, #1
 8005af2:	00bc      	lsls	r4, r7, #2
 8005af4:	3314      	adds	r3, #20
 8005af6:	9305      	str	r3, [sp, #20]
 8005af8:	191b      	adds	r3, r3, r4
 8005afa:	9303      	str	r3, [sp, #12]
 8005afc:	0033      	movs	r3, r6
 8005afe:	3314      	adds	r3, #20
 8005b00:	191c      	adds	r4, r3, r4
 8005b02:	9301      	str	r3, [sp, #4]
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	9304      	str	r3, [sp, #16]
 8005b08:	9b03      	ldr	r3, [sp, #12]
 8005b0a:	9804      	ldr	r0, [sp, #16]
 8005b0c:	681d      	ldr	r5, [r3, #0]
 8005b0e:	3501      	adds	r5, #1
 8005b10:	0029      	movs	r1, r5
 8005b12:	f7fa fb15 	bl	8000140 <__udivsi3>
 8005b16:	9b04      	ldr	r3, [sp, #16]
 8005b18:	9000      	str	r0, [sp, #0]
 8005b1a:	42ab      	cmp	r3, r5
 8005b1c:	d32b      	bcc.n	8005b76 <quorem+0x9a>
 8005b1e:	9b05      	ldr	r3, [sp, #20]
 8005b20:	9d01      	ldr	r5, [sp, #4]
 8005b22:	469c      	mov	ip, r3
 8005b24:	2300      	movs	r3, #0
 8005b26:	9305      	str	r3, [sp, #20]
 8005b28:	9304      	str	r3, [sp, #16]
 8005b2a:	4662      	mov	r2, ip
 8005b2c:	ca08      	ldmia	r2!, {r3}
 8005b2e:	6828      	ldr	r0, [r5, #0]
 8005b30:	4694      	mov	ip, r2
 8005b32:	9a00      	ldr	r2, [sp, #0]
 8005b34:	b299      	uxth	r1, r3
 8005b36:	4351      	muls	r1, r2
 8005b38:	9a05      	ldr	r2, [sp, #20]
 8005b3a:	0c1b      	lsrs	r3, r3, #16
 8005b3c:	1889      	adds	r1, r1, r2
 8005b3e:	9a00      	ldr	r2, [sp, #0]
 8005b40:	4353      	muls	r3, r2
 8005b42:	0c0a      	lsrs	r2, r1, #16
 8005b44:	189b      	adds	r3, r3, r2
 8005b46:	0c1a      	lsrs	r2, r3, #16
 8005b48:	b289      	uxth	r1, r1
 8005b4a:	9205      	str	r2, [sp, #20]
 8005b4c:	b282      	uxth	r2, r0
 8005b4e:	1a52      	subs	r2, r2, r1
 8005b50:	9904      	ldr	r1, [sp, #16]
 8005b52:	0c00      	lsrs	r0, r0, #16
 8005b54:	1852      	adds	r2, r2, r1
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	1411      	asrs	r1, r2, #16
 8005b5a:	1ac3      	subs	r3, r0, r3
 8005b5c:	185b      	adds	r3, r3, r1
 8005b5e:	1419      	asrs	r1, r3, #16
 8005b60:	b292      	uxth	r2, r2
 8005b62:	041b      	lsls	r3, r3, #16
 8005b64:	431a      	orrs	r2, r3
 8005b66:	9b03      	ldr	r3, [sp, #12]
 8005b68:	9104      	str	r1, [sp, #16]
 8005b6a:	c504      	stmia	r5!, {r2}
 8005b6c:	4563      	cmp	r3, ip
 8005b6e:	d2dc      	bcs.n	8005b2a <quorem+0x4e>
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d030      	beq.n	8005bd8 <quorem+0xfc>
 8005b76:	0030      	movs	r0, r6
 8005b78:	9902      	ldr	r1, [sp, #8]
 8005b7a:	f001 f9c5 	bl	8006f08 <__mcmp>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	db23      	blt.n	8005bca <quorem+0xee>
 8005b82:	0034      	movs	r4, r6
 8005b84:	2500      	movs	r5, #0
 8005b86:	9902      	ldr	r1, [sp, #8]
 8005b88:	3414      	adds	r4, #20
 8005b8a:	3114      	adds	r1, #20
 8005b8c:	6823      	ldr	r3, [r4, #0]
 8005b8e:	c901      	ldmia	r1!, {r0}
 8005b90:	9302      	str	r3, [sp, #8]
 8005b92:	466b      	mov	r3, sp
 8005b94:	891b      	ldrh	r3, [r3, #8]
 8005b96:	b282      	uxth	r2, r0
 8005b98:	1a9a      	subs	r2, r3, r2
 8005b9a:	9b02      	ldr	r3, [sp, #8]
 8005b9c:	1952      	adds	r2, r2, r5
 8005b9e:	0c00      	lsrs	r0, r0, #16
 8005ba0:	0c1b      	lsrs	r3, r3, #16
 8005ba2:	1a1b      	subs	r3, r3, r0
 8005ba4:	1410      	asrs	r0, r2, #16
 8005ba6:	181b      	adds	r3, r3, r0
 8005ba8:	141d      	asrs	r5, r3, #16
 8005baa:	b292      	uxth	r2, r2
 8005bac:	041b      	lsls	r3, r3, #16
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	9b03      	ldr	r3, [sp, #12]
 8005bb2:	c404      	stmia	r4!, {r2}
 8005bb4:	428b      	cmp	r3, r1
 8005bb6:	d2e9      	bcs.n	8005b8c <quorem+0xb0>
 8005bb8:	9a01      	ldr	r2, [sp, #4]
 8005bba:	00bb      	lsls	r3, r7, #2
 8005bbc:	18d3      	adds	r3, r2, r3
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	2a00      	cmp	r2, #0
 8005bc2:	d013      	beq.n	8005bec <quorem+0x110>
 8005bc4:	9b00      	ldr	r3, [sp, #0]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	9800      	ldr	r0, [sp, #0]
 8005bcc:	b007      	add	sp, #28
 8005bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d104      	bne.n	8005be0 <quorem+0x104>
 8005bd6:	3f01      	subs	r7, #1
 8005bd8:	9b01      	ldr	r3, [sp, #4]
 8005bda:	3c04      	subs	r4, #4
 8005bdc:	42a3      	cmp	r3, r4
 8005bde:	d3f7      	bcc.n	8005bd0 <quorem+0xf4>
 8005be0:	6137      	str	r7, [r6, #16]
 8005be2:	e7c8      	b.n	8005b76 <quorem+0x9a>
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	2a00      	cmp	r2, #0
 8005be8:	d104      	bne.n	8005bf4 <quorem+0x118>
 8005bea:	3f01      	subs	r7, #1
 8005bec:	9a01      	ldr	r2, [sp, #4]
 8005bee:	3b04      	subs	r3, #4
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d3f7      	bcc.n	8005be4 <quorem+0x108>
 8005bf4:	6137      	str	r7, [r6, #16]
 8005bf6:	e7e5      	b.n	8005bc4 <quorem+0xe8>

08005bf8 <_dtoa_r>:
 8005bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bfa:	0014      	movs	r4, r2
 8005bfc:	001d      	movs	r5, r3
 8005bfe:	69c6      	ldr	r6, [r0, #28]
 8005c00:	b09d      	sub	sp, #116	@ 0x74
 8005c02:	940a      	str	r4, [sp, #40]	@ 0x28
 8005c04:	950b      	str	r5, [sp, #44]	@ 0x2c
 8005c06:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8005c08:	9003      	str	r0, [sp, #12]
 8005c0a:	2e00      	cmp	r6, #0
 8005c0c:	d10f      	bne.n	8005c2e <_dtoa_r+0x36>
 8005c0e:	2010      	movs	r0, #16
 8005c10:	f000 fe30 	bl	8006874 <malloc>
 8005c14:	9b03      	ldr	r3, [sp, #12]
 8005c16:	1e02      	subs	r2, r0, #0
 8005c18:	61d8      	str	r0, [r3, #28]
 8005c1a:	d104      	bne.n	8005c26 <_dtoa_r+0x2e>
 8005c1c:	21ef      	movs	r1, #239	@ 0xef
 8005c1e:	4bc7      	ldr	r3, [pc, #796]	@ (8005f3c <_dtoa_r+0x344>)
 8005c20:	48c7      	ldr	r0, [pc, #796]	@ (8005f40 <_dtoa_r+0x348>)
 8005c22:	f001 fb55 	bl	80072d0 <__assert_func>
 8005c26:	6046      	str	r6, [r0, #4]
 8005c28:	6086      	str	r6, [r0, #8]
 8005c2a:	6006      	str	r6, [r0, #0]
 8005c2c:	60c6      	str	r6, [r0, #12]
 8005c2e:	9b03      	ldr	r3, [sp, #12]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	6819      	ldr	r1, [r3, #0]
 8005c34:	2900      	cmp	r1, #0
 8005c36:	d00b      	beq.n	8005c50 <_dtoa_r+0x58>
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	4093      	lsls	r3, r2
 8005c3e:	604a      	str	r2, [r1, #4]
 8005c40:	608b      	str	r3, [r1, #8]
 8005c42:	9803      	ldr	r0, [sp, #12]
 8005c44:	f000 ff16 	bl	8006a74 <_Bfree>
 8005c48:	2200      	movs	r2, #0
 8005c4a:	9b03      	ldr	r3, [sp, #12]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	2d00      	cmp	r5, #0
 8005c52:	da1e      	bge.n	8005c92 <_dtoa_r+0x9a>
 8005c54:	2301      	movs	r3, #1
 8005c56:	603b      	str	r3, [r7, #0]
 8005c58:	006b      	lsls	r3, r5, #1
 8005c5a:	085b      	lsrs	r3, r3, #1
 8005c5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c5e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005c60:	4bb8      	ldr	r3, [pc, #736]	@ (8005f44 <_dtoa_r+0x34c>)
 8005c62:	4ab8      	ldr	r2, [pc, #736]	@ (8005f44 <_dtoa_r+0x34c>)
 8005c64:	403b      	ands	r3, r7
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d116      	bne.n	8005c98 <_dtoa_r+0xa0>
 8005c6a:	4bb7      	ldr	r3, [pc, #732]	@ (8005f48 <_dtoa_r+0x350>)
 8005c6c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005c6e:	6013      	str	r3, [r2, #0]
 8005c70:	033b      	lsls	r3, r7, #12
 8005c72:	0b1b      	lsrs	r3, r3, #12
 8005c74:	4323      	orrs	r3, r4
 8005c76:	d101      	bne.n	8005c7c <_dtoa_r+0x84>
 8005c78:	f000 fd83 	bl	8006782 <_dtoa_r+0xb8a>
 8005c7c:	4bb3      	ldr	r3, [pc, #716]	@ (8005f4c <_dtoa_r+0x354>)
 8005c7e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005c80:	9308      	str	r3, [sp, #32]
 8005c82:	2a00      	cmp	r2, #0
 8005c84:	d002      	beq.n	8005c8c <_dtoa_r+0x94>
 8005c86:	4bb2      	ldr	r3, [pc, #712]	@ (8005f50 <_dtoa_r+0x358>)
 8005c88:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005c8a:	6013      	str	r3, [r2, #0]
 8005c8c:	9808      	ldr	r0, [sp, #32]
 8005c8e:	b01d      	add	sp, #116	@ 0x74
 8005c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c92:	2300      	movs	r3, #0
 8005c94:	603b      	str	r3, [r7, #0]
 8005c96:	e7e2      	b.n	8005c5e <_dtoa_r+0x66>
 8005c98:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c9c:	9212      	str	r2, [sp, #72]	@ 0x48
 8005c9e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005ca0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005ca2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f7fa fbd0 	bl	800044c <__aeabi_dcmpeq>
 8005cac:	1e06      	subs	r6, r0, #0
 8005cae:	d00b      	beq.n	8005cc8 <_dtoa_r+0xd0>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <_dtoa_r+0xca>
 8005cbc:	4ba5      	ldr	r3, [pc, #660]	@ (8005f54 <_dtoa_r+0x35c>)
 8005cbe:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	4ba5      	ldr	r3, [pc, #660]	@ (8005f58 <_dtoa_r+0x360>)
 8005cc4:	9308      	str	r3, [sp, #32]
 8005cc6:	e7e1      	b.n	8005c8c <_dtoa_r+0x94>
 8005cc8:	ab1a      	add	r3, sp, #104	@ 0x68
 8005cca:	9301      	str	r3, [sp, #4]
 8005ccc:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	9803      	ldr	r0, [sp, #12]
 8005cd2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005cd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005cd6:	f001 f9cd 	bl	8007074 <__d2b>
 8005cda:	007a      	lsls	r2, r7, #1
 8005cdc:	9005      	str	r0, [sp, #20]
 8005cde:	0d52      	lsrs	r2, r2, #21
 8005ce0:	d100      	bne.n	8005ce4 <_dtoa_r+0xec>
 8005ce2:	e07b      	b.n	8005ddc <_dtoa_r+0x1e4>
 8005ce4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005ce6:	9618      	str	r6, [sp, #96]	@ 0x60
 8005ce8:	0319      	lsls	r1, r3, #12
 8005cea:	4b9c      	ldr	r3, [pc, #624]	@ (8005f5c <_dtoa_r+0x364>)
 8005cec:	0b09      	lsrs	r1, r1, #12
 8005cee:	430b      	orrs	r3, r1
 8005cf0:	499b      	ldr	r1, [pc, #620]	@ (8005f60 <_dtoa_r+0x368>)
 8005cf2:	1857      	adds	r7, r2, r1
 8005cf4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005cf6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005cf8:	0019      	movs	r1, r3
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	4b99      	ldr	r3, [pc, #612]	@ (8005f64 <_dtoa_r+0x36c>)
 8005cfe:	f7fc f8af 	bl	8001e60 <__aeabi_dsub>
 8005d02:	4a99      	ldr	r2, [pc, #612]	@ (8005f68 <_dtoa_r+0x370>)
 8005d04:	4b99      	ldr	r3, [pc, #612]	@ (8005f6c <_dtoa_r+0x374>)
 8005d06:	f7fb fde3 	bl	80018d0 <__aeabi_dmul>
 8005d0a:	4a99      	ldr	r2, [pc, #612]	@ (8005f70 <_dtoa_r+0x378>)
 8005d0c:	4b99      	ldr	r3, [pc, #612]	@ (8005f74 <_dtoa_r+0x37c>)
 8005d0e:	f7fa fe37 	bl	8000980 <__aeabi_dadd>
 8005d12:	0004      	movs	r4, r0
 8005d14:	0038      	movs	r0, r7
 8005d16:	000d      	movs	r5, r1
 8005d18:	f7fc fc9c 	bl	8002654 <__aeabi_i2d>
 8005d1c:	4a96      	ldr	r2, [pc, #600]	@ (8005f78 <_dtoa_r+0x380>)
 8005d1e:	4b97      	ldr	r3, [pc, #604]	@ (8005f7c <_dtoa_r+0x384>)
 8005d20:	f7fb fdd6 	bl	80018d0 <__aeabi_dmul>
 8005d24:	0002      	movs	r2, r0
 8005d26:	000b      	movs	r3, r1
 8005d28:	0020      	movs	r0, r4
 8005d2a:	0029      	movs	r1, r5
 8005d2c:	f7fa fe28 	bl	8000980 <__aeabi_dadd>
 8005d30:	0004      	movs	r4, r0
 8005d32:	000d      	movs	r5, r1
 8005d34:	f7fc fc52 	bl	80025dc <__aeabi_d2iz>
 8005d38:	2200      	movs	r2, #0
 8005d3a:	9004      	str	r0, [sp, #16]
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	0020      	movs	r0, r4
 8005d40:	0029      	movs	r1, r5
 8005d42:	f7fa fb89 	bl	8000458 <__aeabi_dcmplt>
 8005d46:	2800      	cmp	r0, #0
 8005d48:	d00b      	beq.n	8005d62 <_dtoa_r+0x16a>
 8005d4a:	9804      	ldr	r0, [sp, #16]
 8005d4c:	f7fc fc82 	bl	8002654 <__aeabi_i2d>
 8005d50:	002b      	movs	r3, r5
 8005d52:	0022      	movs	r2, r4
 8005d54:	f7fa fb7a 	bl	800044c <__aeabi_dcmpeq>
 8005d58:	4243      	negs	r3, r0
 8005d5a:	4158      	adcs	r0, r3
 8005d5c:	9b04      	ldr	r3, [sp, #16]
 8005d5e:	1a1b      	subs	r3, r3, r0
 8005d60:	9304      	str	r3, [sp, #16]
 8005d62:	2301      	movs	r3, #1
 8005d64:	9315      	str	r3, [sp, #84]	@ 0x54
 8005d66:	9b04      	ldr	r3, [sp, #16]
 8005d68:	2b16      	cmp	r3, #22
 8005d6a:	d810      	bhi.n	8005d8e <_dtoa_r+0x196>
 8005d6c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005d6e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005d70:	9a04      	ldr	r2, [sp, #16]
 8005d72:	4b83      	ldr	r3, [pc, #524]	@ (8005f80 <_dtoa_r+0x388>)
 8005d74:	00d2      	lsls	r2, r2, #3
 8005d76:	189b      	adds	r3, r3, r2
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f7fa fb6c 	bl	8000458 <__aeabi_dcmplt>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	d047      	beq.n	8005e14 <_dtoa_r+0x21c>
 8005d84:	9b04      	ldr	r3, [sp, #16]
 8005d86:	3b01      	subs	r3, #1
 8005d88:	9304      	str	r3, [sp, #16]
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	9315      	str	r3, [sp, #84]	@ 0x54
 8005d8e:	2200      	movs	r2, #0
 8005d90:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8005d92:	9206      	str	r2, [sp, #24]
 8005d94:	1bdb      	subs	r3, r3, r7
 8005d96:	1e5a      	subs	r2, r3, #1
 8005d98:	d53e      	bpl.n	8005e18 <_dtoa_r+0x220>
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	9306      	str	r3, [sp, #24]
 8005da0:	2300      	movs	r3, #0
 8005da2:	930d      	str	r3, [sp, #52]	@ 0x34
 8005da4:	9b04      	ldr	r3, [sp, #16]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	db38      	blt.n	8005e1c <_dtoa_r+0x224>
 8005daa:	9a04      	ldr	r2, [sp, #16]
 8005dac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005dae:	4694      	mov	ip, r2
 8005db0:	4463      	add	r3, ip
 8005db2:	930d      	str	r3, [sp, #52]	@ 0x34
 8005db4:	2300      	movs	r3, #0
 8005db6:	9214      	str	r2, [sp, #80]	@ 0x50
 8005db8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005dba:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005dbc:	2401      	movs	r4, #1
 8005dbe:	2b09      	cmp	r3, #9
 8005dc0:	d867      	bhi.n	8005e92 <_dtoa_r+0x29a>
 8005dc2:	2b05      	cmp	r3, #5
 8005dc4:	dd02      	ble.n	8005dcc <_dtoa_r+0x1d4>
 8005dc6:	2400      	movs	r4, #0
 8005dc8:	3b04      	subs	r3, #4
 8005dca:	9322      	str	r3, [sp, #136]	@ 0x88
 8005dcc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005dce:	1e98      	subs	r0, r3, #2
 8005dd0:	2803      	cmp	r0, #3
 8005dd2:	d867      	bhi.n	8005ea4 <_dtoa_r+0x2ac>
 8005dd4:	f7fa f9a0 	bl	8000118 <__gnu_thumb1_case_uqi>
 8005dd8:	5b383a2b 	.word	0x5b383a2b
 8005ddc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8005dde:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8005de0:	18f6      	adds	r6, r6, r3
 8005de2:	4b68      	ldr	r3, [pc, #416]	@ (8005f84 <_dtoa_r+0x38c>)
 8005de4:	18f2      	adds	r2, r6, r3
 8005de6:	2a20      	cmp	r2, #32
 8005de8:	dd0f      	ble.n	8005e0a <_dtoa_r+0x212>
 8005dea:	2340      	movs	r3, #64	@ 0x40
 8005dec:	1a9b      	subs	r3, r3, r2
 8005dee:	409f      	lsls	r7, r3
 8005df0:	4b65      	ldr	r3, [pc, #404]	@ (8005f88 <_dtoa_r+0x390>)
 8005df2:	0038      	movs	r0, r7
 8005df4:	18f3      	adds	r3, r6, r3
 8005df6:	40dc      	lsrs	r4, r3
 8005df8:	4320      	orrs	r0, r4
 8005dfa:	f7fc fc59 	bl	80026b0 <__aeabi_ui2d>
 8005dfe:	2201      	movs	r2, #1
 8005e00:	4b62      	ldr	r3, [pc, #392]	@ (8005f8c <_dtoa_r+0x394>)
 8005e02:	1e77      	subs	r7, r6, #1
 8005e04:	18cb      	adds	r3, r1, r3
 8005e06:	9218      	str	r2, [sp, #96]	@ 0x60
 8005e08:	e776      	b.n	8005cf8 <_dtoa_r+0x100>
 8005e0a:	2320      	movs	r3, #32
 8005e0c:	0020      	movs	r0, r4
 8005e0e:	1a9b      	subs	r3, r3, r2
 8005e10:	4098      	lsls	r0, r3
 8005e12:	e7f2      	b.n	8005dfa <_dtoa_r+0x202>
 8005e14:	9015      	str	r0, [sp, #84]	@ 0x54
 8005e16:	e7ba      	b.n	8005d8e <_dtoa_r+0x196>
 8005e18:	920d      	str	r2, [sp, #52]	@ 0x34
 8005e1a:	e7c3      	b.n	8005da4 <_dtoa_r+0x1ac>
 8005e1c:	9b06      	ldr	r3, [sp, #24]
 8005e1e:	9a04      	ldr	r2, [sp, #16]
 8005e20:	1a9b      	subs	r3, r3, r2
 8005e22:	9306      	str	r3, [sp, #24]
 8005e24:	4253      	negs	r3, r2
 8005e26:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005e28:	2300      	movs	r3, #0
 8005e2a:	9314      	str	r3, [sp, #80]	@ 0x50
 8005e2c:	e7c5      	b.n	8005dba <_dtoa_r+0x1c2>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	9310      	str	r3, [sp, #64]	@ 0x40
 8005e32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005e34:	930e      	str	r3, [sp, #56]	@ 0x38
 8005e36:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	dc13      	bgt.n	8005e64 <_dtoa_r+0x26c>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	001a      	movs	r2, r3
 8005e40:	930e      	str	r3, [sp, #56]	@ 0x38
 8005e42:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e44:	9223      	str	r2, [sp, #140]	@ 0x8c
 8005e46:	e00d      	b.n	8005e64 <_dtoa_r+0x26c>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e7f1      	b.n	8005e30 <_dtoa_r+0x238>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005e50:	9310      	str	r3, [sp, #64]	@ 0x40
 8005e52:	4694      	mov	ip, r2
 8005e54:	9b04      	ldr	r3, [sp, #16]
 8005e56:	4463      	add	r3, ip
 8005e58:	930e      	str	r3, [sp, #56]	@ 0x38
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	dc00      	bgt.n	8005e64 <_dtoa_r+0x26c>
 8005e62:	2301      	movs	r3, #1
 8005e64:	9a03      	ldr	r2, [sp, #12]
 8005e66:	2100      	movs	r1, #0
 8005e68:	69d0      	ldr	r0, [r2, #28]
 8005e6a:	2204      	movs	r2, #4
 8005e6c:	0015      	movs	r5, r2
 8005e6e:	3514      	adds	r5, #20
 8005e70:	429d      	cmp	r5, r3
 8005e72:	d91b      	bls.n	8005eac <_dtoa_r+0x2b4>
 8005e74:	6041      	str	r1, [r0, #4]
 8005e76:	9803      	ldr	r0, [sp, #12]
 8005e78:	f000 fdb8 	bl	80069ec <_Balloc>
 8005e7c:	9008      	str	r0, [sp, #32]
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	d117      	bne.n	8005eb2 <_dtoa_r+0x2ba>
 8005e82:	21b0      	movs	r1, #176	@ 0xb0
 8005e84:	4b42      	ldr	r3, [pc, #264]	@ (8005f90 <_dtoa_r+0x398>)
 8005e86:	482e      	ldr	r0, [pc, #184]	@ (8005f40 <_dtoa_r+0x348>)
 8005e88:	9a08      	ldr	r2, [sp, #32]
 8005e8a:	31ff      	adds	r1, #255	@ 0xff
 8005e8c:	e6c9      	b.n	8005c22 <_dtoa_r+0x2a>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e7dd      	b.n	8005e4e <_dtoa_r+0x256>
 8005e92:	2300      	movs	r3, #0
 8005e94:	9410      	str	r4, [sp, #64]	@ 0x40
 8005e96:	9322      	str	r3, [sp, #136]	@ 0x88
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	930e      	str	r3, [sp, #56]	@ 0x38
 8005e9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	3313      	adds	r3, #19
 8005ea2:	e7cf      	b.n	8005e44 <_dtoa_r+0x24c>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	9310      	str	r3, [sp, #64]	@ 0x40
 8005ea8:	3b02      	subs	r3, #2
 8005eaa:	e7f6      	b.n	8005e9a <_dtoa_r+0x2a2>
 8005eac:	3101      	adds	r1, #1
 8005eae:	0052      	lsls	r2, r2, #1
 8005eb0:	e7dc      	b.n	8005e6c <_dtoa_r+0x274>
 8005eb2:	9b03      	ldr	r3, [sp, #12]
 8005eb4:	9a08      	ldr	r2, [sp, #32]
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	601a      	str	r2, [r3, #0]
 8005eba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ebc:	2b0e      	cmp	r3, #14
 8005ebe:	d900      	bls.n	8005ec2 <_dtoa_r+0x2ca>
 8005ec0:	e0d9      	b.n	8006076 <_dtoa_r+0x47e>
 8005ec2:	2c00      	cmp	r4, #0
 8005ec4:	d100      	bne.n	8005ec8 <_dtoa_r+0x2d0>
 8005ec6:	e0d6      	b.n	8006076 <_dtoa_r+0x47e>
 8005ec8:	9b04      	ldr	r3, [sp, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	dd64      	ble.n	8005f98 <_dtoa_r+0x3a0>
 8005ece:	210f      	movs	r1, #15
 8005ed0:	9a04      	ldr	r2, [sp, #16]
 8005ed2:	4b2b      	ldr	r3, [pc, #172]	@ (8005f80 <_dtoa_r+0x388>)
 8005ed4:	400a      	ands	r2, r1
 8005ed6:	00d2      	lsls	r2, r2, #3
 8005ed8:	189b      	adds	r3, r3, r2
 8005eda:	681e      	ldr	r6, [r3, #0]
 8005edc:	685f      	ldr	r7, [r3, #4]
 8005ede:	9b04      	ldr	r3, [sp, #16]
 8005ee0:	2402      	movs	r4, #2
 8005ee2:	111d      	asrs	r5, r3, #4
 8005ee4:	05db      	lsls	r3, r3, #23
 8005ee6:	d50a      	bpl.n	8005efe <_dtoa_r+0x306>
 8005ee8:	4b2a      	ldr	r3, [pc, #168]	@ (8005f94 <_dtoa_r+0x39c>)
 8005eea:	400d      	ands	r5, r1
 8005eec:	6a1a      	ldr	r2, [r3, #32]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005ef2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005ef4:	f7fb f8a8 	bl	8001048 <__aeabi_ddiv>
 8005ef8:	900a      	str	r0, [sp, #40]	@ 0x28
 8005efa:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005efc:	3401      	adds	r4, #1
 8005efe:	4b25      	ldr	r3, [pc, #148]	@ (8005f94 <_dtoa_r+0x39c>)
 8005f00:	930c      	str	r3, [sp, #48]	@ 0x30
 8005f02:	2d00      	cmp	r5, #0
 8005f04:	d108      	bne.n	8005f18 <_dtoa_r+0x320>
 8005f06:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005f08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005f0a:	0032      	movs	r2, r6
 8005f0c:	003b      	movs	r3, r7
 8005f0e:	f7fb f89b 	bl	8001048 <__aeabi_ddiv>
 8005f12:	900a      	str	r0, [sp, #40]	@ 0x28
 8005f14:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005f16:	e05a      	b.n	8005fce <_dtoa_r+0x3d6>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	421d      	tst	r5, r3
 8005f1c:	d009      	beq.n	8005f32 <_dtoa_r+0x33a>
 8005f1e:	18e4      	adds	r4, r4, r3
 8005f20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f22:	0030      	movs	r0, r6
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	0039      	movs	r1, r7
 8005f2a:	f7fb fcd1 	bl	80018d0 <__aeabi_dmul>
 8005f2e:	0006      	movs	r6, r0
 8005f30:	000f      	movs	r7, r1
 8005f32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f34:	106d      	asrs	r5, r5, #1
 8005f36:	3308      	adds	r3, #8
 8005f38:	e7e2      	b.n	8005f00 <_dtoa_r+0x308>
 8005f3a:	46c0      	nop			@ (mov r8, r8)
 8005f3c:	08007aad 	.word	0x08007aad
 8005f40:	08007ac4 	.word	0x08007ac4
 8005f44:	7ff00000 	.word	0x7ff00000
 8005f48:	0000270f 	.word	0x0000270f
 8005f4c:	08007aa9 	.word	0x08007aa9
 8005f50:	08007aac 	.word	0x08007aac
 8005f54:	08007a7d 	.word	0x08007a7d
 8005f58:	08007a7c 	.word	0x08007a7c
 8005f5c:	3ff00000 	.word	0x3ff00000
 8005f60:	fffffc01 	.word	0xfffffc01
 8005f64:	3ff80000 	.word	0x3ff80000
 8005f68:	636f4361 	.word	0x636f4361
 8005f6c:	3fd287a7 	.word	0x3fd287a7
 8005f70:	8b60c8b3 	.word	0x8b60c8b3
 8005f74:	3fc68a28 	.word	0x3fc68a28
 8005f78:	509f79fb 	.word	0x509f79fb
 8005f7c:	3fd34413 	.word	0x3fd34413
 8005f80:	08007bc0 	.word	0x08007bc0
 8005f84:	00000432 	.word	0x00000432
 8005f88:	00000412 	.word	0x00000412
 8005f8c:	fe100000 	.word	0xfe100000
 8005f90:	08007b1c 	.word	0x08007b1c
 8005f94:	08007b98 	.word	0x08007b98
 8005f98:	9b04      	ldr	r3, [sp, #16]
 8005f9a:	2402      	movs	r4, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d016      	beq.n	8005fce <_dtoa_r+0x3d6>
 8005fa0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005fa2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005fa4:	220f      	movs	r2, #15
 8005fa6:	425d      	negs	r5, r3
 8005fa8:	402a      	ands	r2, r5
 8005faa:	4bd7      	ldr	r3, [pc, #860]	@ (8006308 <_dtoa_r+0x710>)
 8005fac:	00d2      	lsls	r2, r2, #3
 8005fae:	189b      	adds	r3, r3, r2
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f7fb fc8c 	bl	80018d0 <__aeabi_dmul>
 8005fb8:	2701      	movs	r7, #1
 8005fba:	2300      	movs	r3, #0
 8005fbc:	900a      	str	r0, [sp, #40]	@ 0x28
 8005fbe:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005fc0:	4ed2      	ldr	r6, [pc, #840]	@ (800630c <_dtoa_r+0x714>)
 8005fc2:	112d      	asrs	r5, r5, #4
 8005fc4:	2d00      	cmp	r5, #0
 8005fc6:	d000      	beq.n	8005fca <_dtoa_r+0x3d2>
 8005fc8:	e0ba      	b.n	8006140 <_dtoa_r+0x548>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1a1      	bne.n	8005f12 <_dtoa_r+0x31a>
 8005fce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005fd0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005fd2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d100      	bne.n	8005fda <_dtoa_r+0x3e2>
 8005fd8:	e0bd      	b.n	8006156 <_dtoa_r+0x55e>
 8005fda:	2200      	movs	r2, #0
 8005fdc:	0030      	movs	r0, r6
 8005fde:	0039      	movs	r1, r7
 8005fe0:	4bcb      	ldr	r3, [pc, #812]	@ (8006310 <_dtoa_r+0x718>)
 8005fe2:	f7fa fa39 	bl	8000458 <__aeabi_dcmplt>
 8005fe6:	2800      	cmp	r0, #0
 8005fe8:	d100      	bne.n	8005fec <_dtoa_r+0x3f4>
 8005fea:	e0b4      	b.n	8006156 <_dtoa_r+0x55e>
 8005fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d100      	bne.n	8005ff4 <_dtoa_r+0x3fc>
 8005ff2:	e0b0      	b.n	8006156 <_dtoa_r+0x55e>
 8005ff4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	dd39      	ble.n	800606e <_dtoa_r+0x476>
 8005ffa:	9b04      	ldr	r3, [sp, #16]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	3b01      	subs	r3, #1
 8006000:	930c      	str	r3, [sp, #48]	@ 0x30
 8006002:	0030      	movs	r0, r6
 8006004:	4bc3      	ldr	r3, [pc, #780]	@ (8006314 <_dtoa_r+0x71c>)
 8006006:	0039      	movs	r1, r7
 8006008:	f7fb fc62 	bl	80018d0 <__aeabi_dmul>
 800600c:	900a      	str	r0, [sp, #40]	@ 0x28
 800600e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006010:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006012:	3401      	adds	r4, #1
 8006014:	0020      	movs	r0, r4
 8006016:	9311      	str	r3, [sp, #68]	@ 0x44
 8006018:	f7fc fb1c 	bl	8002654 <__aeabi_i2d>
 800601c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800601e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006020:	f7fb fc56 	bl	80018d0 <__aeabi_dmul>
 8006024:	4bbc      	ldr	r3, [pc, #752]	@ (8006318 <_dtoa_r+0x720>)
 8006026:	2200      	movs	r2, #0
 8006028:	f7fa fcaa 	bl	8000980 <__aeabi_dadd>
 800602c:	4bbb      	ldr	r3, [pc, #748]	@ (800631c <_dtoa_r+0x724>)
 800602e:	0006      	movs	r6, r0
 8006030:	18cf      	adds	r7, r1, r3
 8006032:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006034:	2b00      	cmp	r3, #0
 8006036:	d000      	beq.n	800603a <_dtoa_r+0x442>
 8006038:	e091      	b.n	800615e <_dtoa_r+0x566>
 800603a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800603c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800603e:	2200      	movs	r2, #0
 8006040:	4bb7      	ldr	r3, [pc, #732]	@ (8006320 <_dtoa_r+0x728>)
 8006042:	f7fb ff0d 	bl	8001e60 <__aeabi_dsub>
 8006046:	0032      	movs	r2, r6
 8006048:	003b      	movs	r3, r7
 800604a:	0004      	movs	r4, r0
 800604c:	000d      	movs	r5, r1
 800604e:	f7fa fa17 	bl	8000480 <__aeabi_dcmpgt>
 8006052:	2800      	cmp	r0, #0
 8006054:	d000      	beq.n	8006058 <_dtoa_r+0x460>
 8006056:	e29d      	b.n	8006594 <_dtoa_r+0x99c>
 8006058:	2180      	movs	r1, #128	@ 0x80
 800605a:	0609      	lsls	r1, r1, #24
 800605c:	187b      	adds	r3, r7, r1
 800605e:	0032      	movs	r2, r6
 8006060:	0020      	movs	r0, r4
 8006062:	0029      	movs	r1, r5
 8006064:	f7fa f9f8 	bl	8000458 <__aeabi_dcmplt>
 8006068:	2800      	cmp	r0, #0
 800606a:	d000      	beq.n	800606e <_dtoa_r+0x476>
 800606c:	e130      	b.n	80062d0 <_dtoa_r+0x6d8>
 800606e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006070:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006072:	930a      	str	r3, [sp, #40]	@ 0x28
 8006074:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006076:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006078:	2b00      	cmp	r3, #0
 800607a:	da00      	bge.n	800607e <_dtoa_r+0x486>
 800607c:	e177      	b.n	800636e <_dtoa_r+0x776>
 800607e:	9a04      	ldr	r2, [sp, #16]
 8006080:	2a0e      	cmp	r2, #14
 8006082:	dd00      	ble.n	8006086 <_dtoa_r+0x48e>
 8006084:	e173      	b.n	800636e <_dtoa_r+0x776>
 8006086:	4ba0      	ldr	r3, [pc, #640]	@ (8006308 <_dtoa_r+0x710>)
 8006088:	00d2      	lsls	r2, r2, #3
 800608a:	189b      	adds	r3, r3, r2
 800608c:	685c      	ldr	r4, [r3, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	9306      	str	r3, [sp, #24]
 8006092:	9407      	str	r4, [sp, #28]
 8006094:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006096:	2b00      	cmp	r3, #0
 8006098:	da03      	bge.n	80060a2 <_dtoa_r+0x4aa>
 800609a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800609c:	2b00      	cmp	r3, #0
 800609e:	dc00      	bgt.n	80060a2 <_dtoa_r+0x4aa>
 80060a0:	e106      	b.n	80062b0 <_dtoa_r+0x6b8>
 80060a2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80060a4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80060a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060a8:	9d08      	ldr	r5, [sp, #32]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	195b      	adds	r3, r3, r5
 80060ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80060b0:	9a06      	ldr	r2, [sp, #24]
 80060b2:	9b07      	ldr	r3, [sp, #28]
 80060b4:	0030      	movs	r0, r6
 80060b6:	0039      	movs	r1, r7
 80060b8:	f7fa ffc6 	bl	8001048 <__aeabi_ddiv>
 80060bc:	f7fc fa8e 	bl	80025dc <__aeabi_d2iz>
 80060c0:	9009      	str	r0, [sp, #36]	@ 0x24
 80060c2:	f7fc fac7 	bl	8002654 <__aeabi_i2d>
 80060c6:	9a06      	ldr	r2, [sp, #24]
 80060c8:	9b07      	ldr	r3, [sp, #28]
 80060ca:	f7fb fc01 	bl	80018d0 <__aeabi_dmul>
 80060ce:	0002      	movs	r2, r0
 80060d0:	000b      	movs	r3, r1
 80060d2:	0030      	movs	r0, r6
 80060d4:	0039      	movs	r1, r7
 80060d6:	f7fb fec3 	bl	8001e60 <__aeabi_dsub>
 80060da:	002b      	movs	r3, r5
 80060dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060de:	3501      	adds	r5, #1
 80060e0:	3230      	adds	r2, #48	@ 0x30
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80060e6:	002c      	movs	r4, r5
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d000      	beq.n	80060ee <_dtoa_r+0x4f6>
 80060ec:	e131      	b.n	8006352 <_dtoa_r+0x75a>
 80060ee:	0002      	movs	r2, r0
 80060f0:	000b      	movs	r3, r1
 80060f2:	f7fa fc45 	bl	8000980 <__aeabi_dadd>
 80060f6:	9a06      	ldr	r2, [sp, #24]
 80060f8:	9b07      	ldr	r3, [sp, #28]
 80060fa:	0006      	movs	r6, r0
 80060fc:	000f      	movs	r7, r1
 80060fe:	f7fa f9bf 	bl	8000480 <__aeabi_dcmpgt>
 8006102:	2800      	cmp	r0, #0
 8006104:	d000      	beq.n	8006108 <_dtoa_r+0x510>
 8006106:	e10f      	b.n	8006328 <_dtoa_r+0x730>
 8006108:	9a06      	ldr	r2, [sp, #24]
 800610a:	9b07      	ldr	r3, [sp, #28]
 800610c:	0030      	movs	r0, r6
 800610e:	0039      	movs	r1, r7
 8006110:	f7fa f99c 	bl	800044c <__aeabi_dcmpeq>
 8006114:	2800      	cmp	r0, #0
 8006116:	d003      	beq.n	8006120 <_dtoa_r+0x528>
 8006118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800611a:	07dd      	lsls	r5, r3, #31
 800611c:	d500      	bpl.n	8006120 <_dtoa_r+0x528>
 800611e:	e103      	b.n	8006328 <_dtoa_r+0x730>
 8006120:	9905      	ldr	r1, [sp, #20]
 8006122:	9803      	ldr	r0, [sp, #12]
 8006124:	f000 fca6 	bl	8006a74 <_Bfree>
 8006128:	2300      	movs	r3, #0
 800612a:	7023      	strb	r3, [r4, #0]
 800612c:	9b04      	ldr	r3, [sp, #16]
 800612e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006130:	3301      	adds	r3, #1
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006136:	2b00      	cmp	r3, #0
 8006138:	d100      	bne.n	800613c <_dtoa_r+0x544>
 800613a:	e5a7      	b.n	8005c8c <_dtoa_r+0x94>
 800613c:	601c      	str	r4, [r3, #0]
 800613e:	e5a5      	b.n	8005c8c <_dtoa_r+0x94>
 8006140:	423d      	tst	r5, r7
 8006142:	d005      	beq.n	8006150 <_dtoa_r+0x558>
 8006144:	6832      	ldr	r2, [r6, #0]
 8006146:	6873      	ldr	r3, [r6, #4]
 8006148:	f7fb fbc2 	bl	80018d0 <__aeabi_dmul>
 800614c:	003b      	movs	r3, r7
 800614e:	3401      	adds	r4, #1
 8006150:	106d      	asrs	r5, r5, #1
 8006152:	3608      	adds	r6, #8
 8006154:	e736      	b.n	8005fc4 <_dtoa_r+0x3cc>
 8006156:	9b04      	ldr	r3, [sp, #16]
 8006158:	930c      	str	r3, [sp, #48]	@ 0x30
 800615a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800615c:	e75a      	b.n	8006014 <_dtoa_r+0x41c>
 800615e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006160:	4b69      	ldr	r3, [pc, #420]	@ (8006308 <_dtoa_r+0x710>)
 8006162:	3a01      	subs	r2, #1
 8006164:	00d2      	lsls	r2, r2, #3
 8006166:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006168:	189b      	adds	r3, r3, r2
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2900      	cmp	r1, #0
 8006170:	d04c      	beq.n	800620c <_dtoa_r+0x614>
 8006172:	2000      	movs	r0, #0
 8006174:	496b      	ldr	r1, [pc, #428]	@ (8006324 <_dtoa_r+0x72c>)
 8006176:	f7fa ff67 	bl	8001048 <__aeabi_ddiv>
 800617a:	0032      	movs	r2, r6
 800617c:	003b      	movs	r3, r7
 800617e:	f7fb fe6f 	bl	8001e60 <__aeabi_dsub>
 8006182:	9a08      	ldr	r2, [sp, #32]
 8006184:	0006      	movs	r6, r0
 8006186:	4694      	mov	ip, r2
 8006188:	000f      	movs	r7, r1
 800618a:	9b08      	ldr	r3, [sp, #32]
 800618c:	9316      	str	r3, [sp, #88]	@ 0x58
 800618e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006190:	4463      	add	r3, ip
 8006192:	9311      	str	r3, [sp, #68]	@ 0x44
 8006194:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006196:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006198:	f7fc fa20 	bl	80025dc <__aeabi_d2iz>
 800619c:	0005      	movs	r5, r0
 800619e:	f7fc fa59 	bl	8002654 <__aeabi_i2d>
 80061a2:	0002      	movs	r2, r0
 80061a4:	000b      	movs	r3, r1
 80061a6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80061a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80061aa:	f7fb fe59 	bl	8001e60 <__aeabi_dsub>
 80061ae:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80061b0:	3530      	adds	r5, #48	@ 0x30
 80061b2:	1c5c      	adds	r4, r3, #1
 80061b4:	701d      	strb	r5, [r3, #0]
 80061b6:	0032      	movs	r2, r6
 80061b8:	003b      	movs	r3, r7
 80061ba:	900a      	str	r0, [sp, #40]	@ 0x28
 80061bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80061be:	f7fa f94b 	bl	8000458 <__aeabi_dcmplt>
 80061c2:	2800      	cmp	r0, #0
 80061c4:	d16a      	bne.n	800629c <_dtoa_r+0x6a4>
 80061c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80061c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061ca:	2000      	movs	r0, #0
 80061cc:	4950      	ldr	r1, [pc, #320]	@ (8006310 <_dtoa_r+0x718>)
 80061ce:	f7fb fe47 	bl	8001e60 <__aeabi_dsub>
 80061d2:	0032      	movs	r2, r6
 80061d4:	003b      	movs	r3, r7
 80061d6:	f7fa f93f 	bl	8000458 <__aeabi_dcmplt>
 80061da:	2800      	cmp	r0, #0
 80061dc:	d000      	beq.n	80061e0 <_dtoa_r+0x5e8>
 80061de:	e0a5      	b.n	800632c <_dtoa_r+0x734>
 80061e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80061e2:	42a3      	cmp	r3, r4
 80061e4:	d100      	bne.n	80061e8 <_dtoa_r+0x5f0>
 80061e6:	e742      	b.n	800606e <_dtoa_r+0x476>
 80061e8:	2200      	movs	r2, #0
 80061ea:	0030      	movs	r0, r6
 80061ec:	0039      	movs	r1, r7
 80061ee:	4b49      	ldr	r3, [pc, #292]	@ (8006314 <_dtoa_r+0x71c>)
 80061f0:	f7fb fb6e 	bl	80018d0 <__aeabi_dmul>
 80061f4:	2200      	movs	r2, #0
 80061f6:	0006      	movs	r6, r0
 80061f8:	000f      	movs	r7, r1
 80061fa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80061fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80061fe:	4b45      	ldr	r3, [pc, #276]	@ (8006314 <_dtoa_r+0x71c>)
 8006200:	f7fb fb66 	bl	80018d0 <__aeabi_dmul>
 8006204:	9416      	str	r4, [sp, #88]	@ 0x58
 8006206:	900a      	str	r0, [sp, #40]	@ 0x28
 8006208:	910b      	str	r1, [sp, #44]	@ 0x2c
 800620a:	e7c3      	b.n	8006194 <_dtoa_r+0x59c>
 800620c:	0030      	movs	r0, r6
 800620e:	0039      	movs	r1, r7
 8006210:	f7fb fb5e 	bl	80018d0 <__aeabi_dmul>
 8006214:	9d08      	ldr	r5, [sp, #32]
 8006216:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006218:	002b      	movs	r3, r5
 800621a:	4694      	mov	ip, r2
 800621c:	9016      	str	r0, [sp, #88]	@ 0x58
 800621e:	9117      	str	r1, [sp, #92]	@ 0x5c
 8006220:	4463      	add	r3, ip
 8006222:	9319      	str	r3, [sp, #100]	@ 0x64
 8006224:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006226:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006228:	f7fc f9d8 	bl	80025dc <__aeabi_d2iz>
 800622c:	0004      	movs	r4, r0
 800622e:	f7fc fa11 	bl	8002654 <__aeabi_i2d>
 8006232:	000b      	movs	r3, r1
 8006234:	0002      	movs	r2, r0
 8006236:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006238:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800623a:	f7fb fe11 	bl	8001e60 <__aeabi_dsub>
 800623e:	3430      	adds	r4, #48	@ 0x30
 8006240:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006242:	702c      	strb	r4, [r5, #0]
 8006244:	3501      	adds	r5, #1
 8006246:	0006      	movs	r6, r0
 8006248:	000f      	movs	r7, r1
 800624a:	42ab      	cmp	r3, r5
 800624c:	d129      	bne.n	80062a2 <_dtoa_r+0x6aa>
 800624e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8006250:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8006252:	9b08      	ldr	r3, [sp, #32]
 8006254:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8006256:	469c      	mov	ip, r3
 8006258:	2200      	movs	r2, #0
 800625a:	4b32      	ldr	r3, [pc, #200]	@ (8006324 <_dtoa_r+0x72c>)
 800625c:	4464      	add	r4, ip
 800625e:	f7fa fb8f 	bl	8000980 <__aeabi_dadd>
 8006262:	0002      	movs	r2, r0
 8006264:	000b      	movs	r3, r1
 8006266:	0030      	movs	r0, r6
 8006268:	0039      	movs	r1, r7
 800626a:	f7fa f909 	bl	8000480 <__aeabi_dcmpgt>
 800626e:	2800      	cmp	r0, #0
 8006270:	d15c      	bne.n	800632c <_dtoa_r+0x734>
 8006272:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006274:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006276:	2000      	movs	r0, #0
 8006278:	492a      	ldr	r1, [pc, #168]	@ (8006324 <_dtoa_r+0x72c>)
 800627a:	f7fb fdf1 	bl	8001e60 <__aeabi_dsub>
 800627e:	0002      	movs	r2, r0
 8006280:	000b      	movs	r3, r1
 8006282:	0030      	movs	r0, r6
 8006284:	0039      	movs	r1, r7
 8006286:	f7fa f8e7 	bl	8000458 <__aeabi_dcmplt>
 800628a:	2800      	cmp	r0, #0
 800628c:	d100      	bne.n	8006290 <_dtoa_r+0x698>
 800628e:	e6ee      	b.n	800606e <_dtoa_r+0x476>
 8006290:	0023      	movs	r3, r4
 8006292:	3c01      	subs	r4, #1
 8006294:	7822      	ldrb	r2, [r4, #0]
 8006296:	2a30      	cmp	r2, #48	@ 0x30
 8006298:	d0fa      	beq.n	8006290 <_dtoa_r+0x698>
 800629a:	001c      	movs	r4, r3
 800629c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800629e:	9304      	str	r3, [sp, #16]
 80062a0:	e73e      	b.n	8006120 <_dtoa_r+0x528>
 80062a2:	2200      	movs	r2, #0
 80062a4:	4b1b      	ldr	r3, [pc, #108]	@ (8006314 <_dtoa_r+0x71c>)
 80062a6:	f7fb fb13 	bl	80018d0 <__aeabi_dmul>
 80062aa:	900a      	str	r0, [sp, #40]	@ 0x28
 80062ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 80062ae:	e7b9      	b.n	8006224 <_dtoa_r+0x62c>
 80062b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10c      	bne.n	80062d0 <_dtoa_r+0x6d8>
 80062b6:	9806      	ldr	r0, [sp, #24]
 80062b8:	9907      	ldr	r1, [sp, #28]
 80062ba:	2200      	movs	r2, #0
 80062bc:	4b18      	ldr	r3, [pc, #96]	@ (8006320 <_dtoa_r+0x728>)
 80062be:	f7fb fb07 	bl	80018d0 <__aeabi_dmul>
 80062c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80062c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062c6:	f7fa f8e5 	bl	8000494 <__aeabi_dcmpge>
 80062ca:	2800      	cmp	r0, #0
 80062cc:	d100      	bne.n	80062d0 <_dtoa_r+0x6d8>
 80062ce:	e164      	b.n	800659a <_dtoa_r+0x9a2>
 80062d0:	2600      	movs	r6, #0
 80062d2:	0037      	movs	r7, r6
 80062d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80062d6:	9c08      	ldr	r4, [sp, #32]
 80062d8:	43db      	mvns	r3, r3
 80062da:	930c      	str	r3, [sp, #48]	@ 0x30
 80062dc:	2300      	movs	r3, #0
 80062de:	9304      	str	r3, [sp, #16]
 80062e0:	0031      	movs	r1, r6
 80062e2:	9803      	ldr	r0, [sp, #12]
 80062e4:	f000 fbc6 	bl	8006a74 <_Bfree>
 80062e8:	2f00      	cmp	r7, #0
 80062ea:	d0d7      	beq.n	800629c <_dtoa_r+0x6a4>
 80062ec:	9b04      	ldr	r3, [sp, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d005      	beq.n	80062fe <_dtoa_r+0x706>
 80062f2:	42bb      	cmp	r3, r7
 80062f4:	d003      	beq.n	80062fe <_dtoa_r+0x706>
 80062f6:	0019      	movs	r1, r3
 80062f8:	9803      	ldr	r0, [sp, #12]
 80062fa:	f000 fbbb 	bl	8006a74 <_Bfree>
 80062fe:	0039      	movs	r1, r7
 8006300:	9803      	ldr	r0, [sp, #12]
 8006302:	f000 fbb7 	bl	8006a74 <_Bfree>
 8006306:	e7c9      	b.n	800629c <_dtoa_r+0x6a4>
 8006308:	08007bc0 	.word	0x08007bc0
 800630c:	08007b98 	.word	0x08007b98
 8006310:	3ff00000 	.word	0x3ff00000
 8006314:	40240000 	.word	0x40240000
 8006318:	401c0000 	.word	0x401c0000
 800631c:	fcc00000 	.word	0xfcc00000
 8006320:	40140000 	.word	0x40140000
 8006324:	3fe00000 	.word	0x3fe00000
 8006328:	9b04      	ldr	r3, [sp, #16]
 800632a:	930c      	str	r3, [sp, #48]	@ 0x30
 800632c:	0023      	movs	r3, r4
 800632e:	001c      	movs	r4, r3
 8006330:	3b01      	subs	r3, #1
 8006332:	781a      	ldrb	r2, [r3, #0]
 8006334:	2a39      	cmp	r2, #57	@ 0x39
 8006336:	d108      	bne.n	800634a <_dtoa_r+0x752>
 8006338:	9a08      	ldr	r2, [sp, #32]
 800633a:	429a      	cmp	r2, r3
 800633c:	d1f7      	bne.n	800632e <_dtoa_r+0x736>
 800633e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006340:	9908      	ldr	r1, [sp, #32]
 8006342:	3201      	adds	r2, #1
 8006344:	920c      	str	r2, [sp, #48]	@ 0x30
 8006346:	2230      	movs	r2, #48	@ 0x30
 8006348:	700a      	strb	r2, [r1, #0]
 800634a:	781a      	ldrb	r2, [r3, #0]
 800634c:	3201      	adds	r2, #1
 800634e:	701a      	strb	r2, [r3, #0]
 8006350:	e7a4      	b.n	800629c <_dtoa_r+0x6a4>
 8006352:	2200      	movs	r2, #0
 8006354:	4bc6      	ldr	r3, [pc, #792]	@ (8006670 <_dtoa_r+0xa78>)
 8006356:	f7fb fabb 	bl	80018d0 <__aeabi_dmul>
 800635a:	2200      	movs	r2, #0
 800635c:	2300      	movs	r3, #0
 800635e:	0006      	movs	r6, r0
 8006360:	000f      	movs	r7, r1
 8006362:	f7fa f873 	bl	800044c <__aeabi_dcmpeq>
 8006366:	2800      	cmp	r0, #0
 8006368:	d100      	bne.n	800636c <_dtoa_r+0x774>
 800636a:	e6a1      	b.n	80060b0 <_dtoa_r+0x4b8>
 800636c:	e6d8      	b.n	8006120 <_dtoa_r+0x528>
 800636e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8006370:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8006372:	9c06      	ldr	r4, [sp, #24]
 8006374:	2f00      	cmp	r7, #0
 8006376:	d014      	beq.n	80063a2 <_dtoa_r+0x7aa>
 8006378:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800637a:	2a01      	cmp	r2, #1
 800637c:	dd00      	ble.n	8006380 <_dtoa_r+0x788>
 800637e:	e0c8      	b.n	8006512 <_dtoa_r+0x91a>
 8006380:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8006382:	2a00      	cmp	r2, #0
 8006384:	d100      	bne.n	8006388 <_dtoa_r+0x790>
 8006386:	e0be      	b.n	8006506 <_dtoa_r+0x90e>
 8006388:	4aba      	ldr	r2, [pc, #744]	@ (8006674 <_dtoa_r+0xa7c>)
 800638a:	189b      	adds	r3, r3, r2
 800638c:	9a06      	ldr	r2, [sp, #24]
 800638e:	2101      	movs	r1, #1
 8006390:	18d2      	adds	r2, r2, r3
 8006392:	9206      	str	r2, [sp, #24]
 8006394:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006396:	9803      	ldr	r0, [sp, #12]
 8006398:	18d3      	adds	r3, r2, r3
 800639a:	930d      	str	r3, [sp, #52]	@ 0x34
 800639c:	f000 fc22 	bl	8006be4 <__i2b>
 80063a0:	0007      	movs	r7, r0
 80063a2:	2c00      	cmp	r4, #0
 80063a4:	d00e      	beq.n	80063c4 <_dtoa_r+0x7cc>
 80063a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	dd0b      	ble.n	80063c4 <_dtoa_r+0x7cc>
 80063ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80063ae:	0023      	movs	r3, r4
 80063b0:	4294      	cmp	r4, r2
 80063b2:	dd00      	ble.n	80063b6 <_dtoa_r+0x7be>
 80063b4:	0013      	movs	r3, r2
 80063b6:	9a06      	ldr	r2, [sp, #24]
 80063b8:	1ae4      	subs	r4, r4, r3
 80063ba:	1ad2      	subs	r2, r2, r3
 80063bc:	9206      	str	r2, [sp, #24]
 80063be:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	930d      	str	r3, [sp, #52]	@ 0x34
 80063c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d01f      	beq.n	800640a <_dtoa_r+0x812>
 80063ca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d100      	bne.n	80063d2 <_dtoa_r+0x7da>
 80063d0:	e0b5      	b.n	800653e <_dtoa_r+0x946>
 80063d2:	2d00      	cmp	r5, #0
 80063d4:	d010      	beq.n	80063f8 <_dtoa_r+0x800>
 80063d6:	0039      	movs	r1, r7
 80063d8:	002a      	movs	r2, r5
 80063da:	9803      	ldr	r0, [sp, #12]
 80063dc:	f000 fccc 	bl	8006d78 <__pow5mult>
 80063e0:	9a05      	ldr	r2, [sp, #20]
 80063e2:	0001      	movs	r1, r0
 80063e4:	0007      	movs	r7, r0
 80063e6:	9803      	ldr	r0, [sp, #12]
 80063e8:	f000 fc14 	bl	8006c14 <__multiply>
 80063ec:	0006      	movs	r6, r0
 80063ee:	9905      	ldr	r1, [sp, #20]
 80063f0:	9803      	ldr	r0, [sp, #12]
 80063f2:	f000 fb3f 	bl	8006a74 <_Bfree>
 80063f6:	9605      	str	r6, [sp, #20]
 80063f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063fa:	1b5a      	subs	r2, r3, r5
 80063fc:	42ab      	cmp	r3, r5
 80063fe:	d004      	beq.n	800640a <_dtoa_r+0x812>
 8006400:	9905      	ldr	r1, [sp, #20]
 8006402:	9803      	ldr	r0, [sp, #12]
 8006404:	f000 fcb8 	bl	8006d78 <__pow5mult>
 8006408:	9005      	str	r0, [sp, #20]
 800640a:	2101      	movs	r1, #1
 800640c:	9803      	ldr	r0, [sp, #12]
 800640e:	f000 fbe9 	bl	8006be4 <__i2b>
 8006412:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006414:	0006      	movs	r6, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d100      	bne.n	800641c <_dtoa_r+0x824>
 800641a:	e1bc      	b.n	8006796 <_dtoa_r+0xb9e>
 800641c:	001a      	movs	r2, r3
 800641e:	0001      	movs	r1, r0
 8006420:	9803      	ldr	r0, [sp, #12]
 8006422:	f000 fca9 	bl	8006d78 <__pow5mult>
 8006426:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006428:	0006      	movs	r6, r0
 800642a:	2500      	movs	r5, #0
 800642c:	2b01      	cmp	r3, #1
 800642e:	dc16      	bgt.n	800645e <_dtoa_r+0x866>
 8006430:	2500      	movs	r5, #0
 8006432:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006434:	42ab      	cmp	r3, r5
 8006436:	d10e      	bne.n	8006456 <_dtoa_r+0x85e>
 8006438:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800643a:	031b      	lsls	r3, r3, #12
 800643c:	42ab      	cmp	r3, r5
 800643e:	d10a      	bne.n	8006456 <_dtoa_r+0x85e>
 8006440:	4b8d      	ldr	r3, [pc, #564]	@ (8006678 <_dtoa_r+0xa80>)
 8006442:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006444:	4213      	tst	r3, r2
 8006446:	d006      	beq.n	8006456 <_dtoa_r+0x85e>
 8006448:	9b06      	ldr	r3, [sp, #24]
 800644a:	3501      	adds	r5, #1
 800644c:	3301      	adds	r3, #1
 800644e:	9306      	str	r3, [sp, #24]
 8006450:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006452:	3301      	adds	r3, #1
 8006454:	930d      	str	r3, [sp, #52]	@ 0x34
 8006456:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006458:	2001      	movs	r0, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d008      	beq.n	8006470 <_dtoa_r+0x878>
 800645e:	6933      	ldr	r3, [r6, #16]
 8006460:	3303      	adds	r3, #3
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	18f3      	adds	r3, r6, r3
 8006466:	6858      	ldr	r0, [r3, #4]
 8006468:	f000 fb6c 	bl	8006b44 <__hi0bits>
 800646c:	2320      	movs	r3, #32
 800646e:	1a18      	subs	r0, r3, r0
 8006470:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006472:	1818      	adds	r0, r3, r0
 8006474:	0002      	movs	r2, r0
 8006476:	231f      	movs	r3, #31
 8006478:	401a      	ands	r2, r3
 800647a:	4218      	tst	r0, r3
 800647c:	d065      	beq.n	800654a <_dtoa_r+0x952>
 800647e:	3301      	adds	r3, #1
 8006480:	1a9b      	subs	r3, r3, r2
 8006482:	2b04      	cmp	r3, #4
 8006484:	dd5d      	ble.n	8006542 <_dtoa_r+0x94a>
 8006486:	231c      	movs	r3, #28
 8006488:	1a9b      	subs	r3, r3, r2
 800648a:	9a06      	ldr	r2, [sp, #24]
 800648c:	18e4      	adds	r4, r4, r3
 800648e:	18d2      	adds	r2, r2, r3
 8006490:	9206      	str	r2, [sp, #24]
 8006492:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006494:	18d3      	adds	r3, r2, r3
 8006496:	930d      	str	r3, [sp, #52]	@ 0x34
 8006498:	9b06      	ldr	r3, [sp, #24]
 800649a:	2b00      	cmp	r3, #0
 800649c:	dd05      	ble.n	80064aa <_dtoa_r+0x8b2>
 800649e:	001a      	movs	r2, r3
 80064a0:	9905      	ldr	r1, [sp, #20]
 80064a2:	9803      	ldr	r0, [sp, #12]
 80064a4:	f000 fcc4 	bl	8006e30 <__lshift>
 80064a8:	9005      	str	r0, [sp, #20]
 80064aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	dd05      	ble.n	80064bc <_dtoa_r+0x8c4>
 80064b0:	0031      	movs	r1, r6
 80064b2:	001a      	movs	r2, r3
 80064b4:	9803      	ldr	r0, [sp, #12]
 80064b6:	f000 fcbb 	bl	8006e30 <__lshift>
 80064ba:	0006      	movs	r6, r0
 80064bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d045      	beq.n	800654e <_dtoa_r+0x956>
 80064c2:	0031      	movs	r1, r6
 80064c4:	9805      	ldr	r0, [sp, #20]
 80064c6:	f000 fd1f 	bl	8006f08 <__mcmp>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	da3f      	bge.n	800654e <_dtoa_r+0x956>
 80064ce:	9b04      	ldr	r3, [sp, #16]
 80064d0:	220a      	movs	r2, #10
 80064d2:	3b01      	subs	r3, #1
 80064d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80064d6:	9905      	ldr	r1, [sp, #20]
 80064d8:	2300      	movs	r3, #0
 80064da:	9803      	ldr	r0, [sp, #12]
 80064dc:	f000 faee 	bl	8006abc <__multadd>
 80064e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80064e2:	9005      	str	r0, [sp, #20]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d100      	bne.n	80064ea <_dtoa_r+0x8f2>
 80064e8:	e15c      	b.n	80067a4 <_dtoa_r+0xbac>
 80064ea:	2300      	movs	r3, #0
 80064ec:	0039      	movs	r1, r7
 80064ee:	220a      	movs	r2, #10
 80064f0:	9803      	ldr	r0, [sp, #12]
 80064f2:	f000 fae3 	bl	8006abc <__multadd>
 80064f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064f8:	0007      	movs	r7, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	dc55      	bgt.n	80065aa <_dtoa_r+0x9b2>
 80064fe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006500:	2b02      	cmp	r3, #2
 8006502:	dc2d      	bgt.n	8006560 <_dtoa_r+0x968>
 8006504:	e051      	b.n	80065aa <_dtoa_r+0x9b2>
 8006506:	2336      	movs	r3, #54	@ 0x36
 8006508:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800650a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800650c:	9c06      	ldr	r4, [sp, #24]
 800650e:	1a9b      	subs	r3, r3, r2
 8006510:	e73c      	b.n	800638c <_dtoa_r+0x794>
 8006512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006514:	1e5d      	subs	r5, r3, #1
 8006516:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006518:	42ab      	cmp	r3, r5
 800651a:	db08      	blt.n	800652e <_dtoa_r+0x936>
 800651c:	1b5d      	subs	r5, r3, r5
 800651e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006520:	9c06      	ldr	r4, [sp, #24]
 8006522:	2b00      	cmp	r3, #0
 8006524:	db00      	blt.n	8006528 <_dtoa_r+0x930>
 8006526:	e731      	b.n	800638c <_dtoa_r+0x794>
 8006528:	1ae4      	subs	r4, r4, r3
 800652a:	2300      	movs	r3, #0
 800652c:	e72e      	b.n	800638c <_dtoa_r+0x794>
 800652e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006530:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006532:	1aeb      	subs	r3, r5, r3
 8006534:	18d3      	adds	r3, r2, r3
 8006536:	950f      	str	r5, [sp, #60]	@ 0x3c
 8006538:	9314      	str	r3, [sp, #80]	@ 0x50
 800653a:	2500      	movs	r5, #0
 800653c:	e7ef      	b.n	800651e <_dtoa_r+0x926>
 800653e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006540:	e75e      	b.n	8006400 <_dtoa_r+0x808>
 8006542:	2b04      	cmp	r3, #4
 8006544:	d0a8      	beq.n	8006498 <_dtoa_r+0x8a0>
 8006546:	331c      	adds	r3, #28
 8006548:	e79f      	b.n	800648a <_dtoa_r+0x892>
 800654a:	0013      	movs	r3, r2
 800654c:	e7fb      	b.n	8006546 <_dtoa_r+0x94e>
 800654e:	9b04      	ldr	r3, [sp, #16]
 8006550:	930c      	str	r3, [sp, #48]	@ 0x30
 8006552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006554:	930e      	str	r3, [sp, #56]	@ 0x38
 8006556:	2b00      	cmp	r3, #0
 8006558:	dc23      	bgt.n	80065a2 <_dtoa_r+0x9aa>
 800655a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800655c:	2b02      	cmp	r3, #2
 800655e:	dd20      	ble.n	80065a2 <_dtoa_r+0x9aa>
 8006560:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006562:	2b00      	cmp	r3, #0
 8006564:	d000      	beq.n	8006568 <_dtoa_r+0x970>
 8006566:	e6b5      	b.n	80062d4 <_dtoa_r+0x6dc>
 8006568:	0031      	movs	r1, r6
 800656a:	2205      	movs	r2, #5
 800656c:	9803      	ldr	r0, [sp, #12]
 800656e:	f000 faa5 	bl	8006abc <__multadd>
 8006572:	0006      	movs	r6, r0
 8006574:	0001      	movs	r1, r0
 8006576:	9805      	ldr	r0, [sp, #20]
 8006578:	f000 fcc6 	bl	8006f08 <__mcmp>
 800657c:	2800      	cmp	r0, #0
 800657e:	dc00      	bgt.n	8006582 <_dtoa_r+0x98a>
 8006580:	e6a8      	b.n	80062d4 <_dtoa_r+0x6dc>
 8006582:	9b08      	ldr	r3, [sp, #32]
 8006584:	9a08      	ldr	r2, [sp, #32]
 8006586:	1c5c      	adds	r4, r3, #1
 8006588:	2331      	movs	r3, #49	@ 0x31
 800658a:	7013      	strb	r3, [r2, #0]
 800658c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800658e:	3301      	adds	r3, #1
 8006590:	930c      	str	r3, [sp, #48]	@ 0x30
 8006592:	e6a3      	b.n	80062dc <_dtoa_r+0x6e4>
 8006594:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8006596:	0037      	movs	r7, r6
 8006598:	e7f3      	b.n	8006582 <_dtoa_r+0x98a>
 800659a:	9b04      	ldr	r3, [sp, #16]
 800659c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800659e:	930c      	str	r3, [sp, #48]	@ 0x30
 80065a0:	e7f9      	b.n	8006596 <_dtoa_r+0x99e>
 80065a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d100      	bne.n	80065aa <_dtoa_r+0x9b2>
 80065a8:	e100      	b.n	80067ac <_dtoa_r+0xbb4>
 80065aa:	2c00      	cmp	r4, #0
 80065ac:	dd05      	ble.n	80065ba <_dtoa_r+0x9c2>
 80065ae:	0039      	movs	r1, r7
 80065b0:	0022      	movs	r2, r4
 80065b2:	9803      	ldr	r0, [sp, #12]
 80065b4:	f000 fc3c 	bl	8006e30 <__lshift>
 80065b8:	0007      	movs	r7, r0
 80065ba:	0038      	movs	r0, r7
 80065bc:	2d00      	cmp	r5, #0
 80065be:	d018      	beq.n	80065f2 <_dtoa_r+0x9fa>
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	9803      	ldr	r0, [sp, #12]
 80065c4:	f000 fa12 	bl	80069ec <_Balloc>
 80065c8:	1e04      	subs	r4, r0, #0
 80065ca:	d105      	bne.n	80065d8 <_dtoa_r+0x9e0>
 80065cc:	0022      	movs	r2, r4
 80065ce:	4b2b      	ldr	r3, [pc, #172]	@ (800667c <_dtoa_r+0xa84>)
 80065d0:	482b      	ldr	r0, [pc, #172]	@ (8006680 <_dtoa_r+0xa88>)
 80065d2:	492c      	ldr	r1, [pc, #176]	@ (8006684 <_dtoa_r+0xa8c>)
 80065d4:	f7ff fb25 	bl	8005c22 <_dtoa_r+0x2a>
 80065d8:	0039      	movs	r1, r7
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	310c      	adds	r1, #12
 80065de:	3202      	adds	r2, #2
 80065e0:	0092      	lsls	r2, r2, #2
 80065e2:	300c      	adds	r0, #12
 80065e4:	f000 fe6a 	bl	80072bc <memcpy>
 80065e8:	2201      	movs	r2, #1
 80065ea:	0021      	movs	r1, r4
 80065ec:	9803      	ldr	r0, [sp, #12]
 80065ee:	f000 fc1f 	bl	8006e30 <__lshift>
 80065f2:	9b08      	ldr	r3, [sp, #32]
 80065f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065f6:	9306      	str	r3, [sp, #24]
 80065f8:	3b01      	subs	r3, #1
 80065fa:	189b      	adds	r3, r3, r2
 80065fc:	2201      	movs	r2, #1
 80065fe:	9704      	str	r7, [sp, #16]
 8006600:	0007      	movs	r7, r0
 8006602:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006606:	4013      	ands	r3, r2
 8006608:	930e      	str	r3, [sp, #56]	@ 0x38
 800660a:	0031      	movs	r1, r6
 800660c:	9805      	ldr	r0, [sp, #20]
 800660e:	f7ff fa65 	bl	8005adc <quorem>
 8006612:	9904      	ldr	r1, [sp, #16]
 8006614:	0005      	movs	r5, r0
 8006616:	900a      	str	r0, [sp, #40]	@ 0x28
 8006618:	9805      	ldr	r0, [sp, #20]
 800661a:	f000 fc75 	bl	8006f08 <__mcmp>
 800661e:	003a      	movs	r2, r7
 8006620:	900d      	str	r0, [sp, #52]	@ 0x34
 8006622:	0031      	movs	r1, r6
 8006624:	9803      	ldr	r0, [sp, #12]
 8006626:	f000 fc8b 	bl	8006f40 <__mdiff>
 800662a:	2201      	movs	r2, #1
 800662c:	68c3      	ldr	r3, [r0, #12]
 800662e:	0004      	movs	r4, r0
 8006630:	3530      	adds	r5, #48	@ 0x30
 8006632:	9209      	str	r2, [sp, #36]	@ 0x24
 8006634:	2b00      	cmp	r3, #0
 8006636:	d104      	bne.n	8006642 <_dtoa_r+0xa4a>
 8006638:	0001      	movs	r1, r0
 800663a:	9805      	ldr	r0, [sp, #20]
 800663c:	f000 fc64 	bl	8006f08 <__mcmp>
 8006640:	9009      	str	r0, [sp, #36]	@ 0x24
 8006642:	0021      	movs	r1, r4
 8006644:	9803      	ldr	r0, [sp, #12]
 8006646:	f000 fa15 	bl	8006a74 <_Bfree>
 800664a:	9b06      	ldr	r3, [sp, #24]
 800664c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800664e:	1c5c      	adds	r4, r3, #1
 8006650:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006652:	4313      	orrs	r3, r2
 8006654:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006656:	4313      	orrs	r3, r2
 8006658:	d116      	bne.n	8006688 <_dtoa_r+0xa90>
 800665a:	2d39      	cmp	r5, #57	@ 0x39
 800665c:	d02f      	beq.n	80066be <_dtoa_r+0xac6>
 800665e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006660:	2b00      	cmp	r3, #0
 8006662:	dd01      	ble.n	8006668 <_dtoa_r+0xa70>
 8006664:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8006666:	3531      	adds	r5, #49	@ 0x31
 8006668:	9b06      	ldr	r3, [sp, #24]
 800666a:	701d      	strb	r5, [r3, #0]
 800666c:	e638      	b.n	80062e0 <_dtoa_r+0x6e8>
 800666e:	46c0      	nop			@ (mov r8, r8)
 8006670:	40240000 	.word	0x40240000
 8006674:	00000433 	.word	0x00000433
 8006678:	7ff00000 	.word	0x7ff00000
 800667c:	08007b1c 	.word	0x08007b1c
 8006680:	08007ac4 	.word	0x08007ac4
 8006684:	000002ef 	.word	0x000002ef
 8006688:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800668a:	2b00      	cmp	r3, #0
 800668c:	db04      	blt.n	8006698 <_dtoa_r+0xaa0>
 800668e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006690:	4313      	orrs	r3, r2
 8006692:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006694:	4313      	orrs	r3, r2
 8006696:	d11e      	bne.n	80066d6 <_dtoa_r+0xade>
 8006698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800669a:	2b00      	cmp	r3, #0
 800669c:	dde4      	ble.n	8006668 <_dtoa_r+0xa70>
 800669e:	9905      	ldr	r1, [sp, #20]
 80066a0:	2201      	movs	r2, #1
 80066a2:	9803      	ldr	r0, [sp, #12]
 80066a4:	f000 fbc4 	bl	8006e30 <__lshift>
 80066a8:	0031      	movs	r1, r6
 80066aa:	9005      	str	r0, [sp, #20]
 80066ac:	f000 fc2c 	bl	8006f08 <__mcmp>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	dc02      	bgt.n	80066ba <_dtoa_r+0xac2>
 80066b4:	d1d8      	bne.n	8006668 <_dtoa_r+0xa70>
 80066b6:	07eb      	lsls	r3, r5, #31
 80066b8:	d5d6      	bpl.n	8006668 <_dtoa_r+0xa70>
 80066ba:	2d39      	cmp	r5, #57	@ 0x39
 80066bc:	d1d2      	bne.n	8006664 <_dtoa_r+0xa6c>
 80066be:	2339      	movs	r3, #57	@ 0x39
 80066c0:	9a06      	ldr	r2, [sp, #24]
 80066c2:	7013      	strb	r3, [r2, #0]
 80066c4:	0023      	movs	r3, r4
 80066c6:	001c      	movs	r4, r3
 80066c8:	3b01      	subs	r3, #1
 80066ca:	781a      	ldrb	r2, [r3, #0]
 80066cc:	2a39      	cmp	r2, #57	@ 0x39
 80066ce:	d04f      	beq.n	8006770 <_dtoa_r+0xb78>
 80066d0:	3201      	adds	r2, #1
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	e604      	b.n	80062e0 <_dtoa_r+0x6e8>
 80066d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066d8:	2b00      	cmp	r3, #0
 80066da:	dd03      	ble.n	80066e4 <_dtoa_r+0xaec>
 80066dc:	2d39      	cmp	r5, #57	@ 0x39
 80066de:	d0ee      	beq.n	80066be <_dtoa_r+0xac6>
 80066e0:	3501      	adds	r5, #1
 80066e2:	e7c1      	b.n	8006668 <_dtoa_r+0xa70>
 80066e4:	9b06      	ldr	r3, [sp, #24]
 80066e6:	9a06      	ldr	r2, [sp, #24]
 80066e8:	701d      	strb	r5, [r3, #0]
 80066ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d02a      	beq.n	8006746 <_dtoa_r+0xb4e>
 80066f0:	2300      	movs	r3, #0
 80066f2:	220a      	movs	r2, #10
 80066f4:	9905      	ldr	r1, [sp, #20]
 80066f6:	9803      	ldr	r0, [sp, #12]
 80066f8:	f000 f9e0 	bl	8006abc <__multadd>
 80066fc:	9b04      	ldr	r3, [sp, #16]
 80066fe:	9005      	str	r0, [sp, #20]
 8006700:	42bb      	cmp	r3, r7
 8006702:	d109      	bne.n	8006718 <_dtoa_r+0xb20>
 8006704:	2300      	movs	r3, #0
 8006706:	220a      	movs	r2, #10
 8006708:	9904      	ldr	r1, [sp, #16]
 800670a:	9803      	ldr	r0, [sp, #12]
 800670c:	f000 f9d6 	bl	8006abc <__multadd>
 8006710:	9004      	str	r0, [sp, #16]
 8006712:	0007      	movs	r7, r0
 8006714:	9406      	str	r4, [sp, #24]
 8006716:	e778      	b.n	800660a <_dtoa_r+0xa12>
 8006718:	9904      	ldr	r1, [sp, #16]
 800671a:	2300      	movs	r3, #0
 800671c:	220a      	movs	r2, #10
 800671e:	9803      	ldr	r0, [sp, #12]
 8006720:	f000 f9cc 	bl	8006abc <__multadd>
 8006724:	2300      	movs	r3, #0
 8006726:	9004      	str	r0, [sp, #16]
 8006728:	220a      	movs	r2, #10
 800672a:	0039      	movs	r1, r7
 800672c:	9803      	ldr	r0, [sp, #12]
 800672e:	f000 f9c5 	bl	8006abc <__multadd>
 8006732:	e7ee      	b.n	8006712 <_dtoa_r+0xb1a>
 8006734:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006736:	2401      	movs	r4, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	dd00      	ble.n	800673e <_dtoa_r+0xb46>
 800673c:	001c      	movs	r4, r3
 800673e:	9b08      	ldr	r3, [sp, #32]
 8006740:	191c      	adds	r4, r3, r4
 8006742:	2300      	movs	r3, #0
 8006744:	9304      	str	r3, [sp, #16]
 8006746:	9905      	ldr	r1, [sp, #20]
 8006748:	2201      	movs	r2, #1
 800674a:	9803      	ldr	r0, [sp, #12]
 800674c:	f000 fb70 	bl	8006e30 <__lshift>
 8006750:	0031      	movs	r1, r6
 8006752:	9005      	str	r0, [sp, #20]
 8006754:	f000 fbd8 	bl	8006f08 <__mcmp>
 8006758:	2800      	cmp	r0, #0
 800675a:	dcb3      	bgt.n	80066c4 <_dtoa_r+0xacc>
 800675c:	d101      	bne.n	8006762 <_dtoa_r+0xb6a>
 800675e:	07ed      	lsls	r5, r5, #31
 8006760:	d4b0      	bmi.n	80066c4 <_dtoa_r+0xacc>
 8006762:	0023      	movs	r3, r4
 8006764:	001c      	movs	r4, r3
 8006766:	3b01      	subs	r3, #1
 8006768:	781a      	ldrb	r2, [r3, #0]
 800676a:	2a30      	cmp	r2, #48	@ 0x30
 800676c:	d0fa      	beq.n	8006764 <_dtoa_r+0xb6c>
 800676e:	e5b7      	b.n	80062e0 <_dtoa_r+0x6e8>
 8006770:	9a08      	ldr	r2, [sp, #32]
 8006772:	429a      	cmp	r2, r3
 8006774:	d1a7      	bne.n	80066c6 <_dtoa_r+0xace>
 8006776:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006778:	3301      	adds	r3, #1
 800677a:	930c      	str	r3, [sp, #48]	@ 0x30
 800677c:	2331      	movs	r3, #49	@ 0x31
 800677e:	7013      	strb	r3, [r2, #0]
 8006780:	e5ae      	b.n	80062e0 <_dtoa_r+0x6e8>
 8006782:	4b15      	ldr	r3, [pc, #84]	@ (80067d8 <_dtoa_r+0xbe0>)
 8006784:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006786:	9308      	str	r3, [sp, #32]
 8006788:	4b14      	ldr	r3, [pc, #80]	@ (80067dc <_dtoa_r+0xbe4>)
 800678a:	2a00      	cmp	r2, #0
 800678c:	d001      	beq.n	8006792 <_dtoa_r+0xb9a>
 800678e:	f7ff fa7b 	bl	8005c88 <_dtoa_r+0x90>
 8006792:	f7ff fa7b 	bl	8005c8c <_dtoa_r+0x94>
 8006796:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006798:	2b01      	cmp	r3, #1
 800679a:	dc00      	bgt.n	800679e <_dtoa_r+0xba6>
 800679c:	e648      	b.n	8006430 <_dtoa_r+0x838>
 800679e:	2001      	movs	r0, #1
 80067a0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80067a2:	e665      	b.n	8006470 <_dtoa_r+0x878>
 80067a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	dc00      	bgt.n	80067ac <_dtoa_r+0xbb4>
 80067aa:	e6d6      	b.n	800655a <_dtoa_r+0x962>
 80067ac:	2400      	movs	r4, #0
 80067ae:	0031      	movs	r1, r6
 80067b0:	9805      	ldr	r0, [sp, #20]
 80067b2:	f7ff f993 	bl	8005adc <quorem>
 80067b6:	9b08      	ldr	r3, [sp, #32]
 80067b8:	3030      	adds	r0, #48	@ 0x30
 80067ba:	5518      	strb	r0, [r3, r4]
 80067bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067be:	3401      	adds	r4, #1
 80067c0:	0005      	movs	r5, r0
 80067c2:	429c      	cmp	r4, r3
 80067c4:	dab6      	bge.n	8006734 <_dtoa_r+0xb3c>
 80067c6:	2300      	movs	r3, #0
 80067c8:	220a      	movs	r2, #10
 80067ca:	9905      	ldr	r1, [sp, #20]
 80067cc:	9803      	ldr	r0, [sp, #12]
 80067ce:	f000 f975 	bl	8006abc <__multadd>
 80067d2:	9005      	str	r0, [sp, #20]
 80067d4:	e7eb      	b.n	80067ae <_dtoa_r+0xbb6>
 80067d6:	46c0      	nop			@ (mov r8, r8)
 80067d8:	08007aa0 	.word	0x08007aa0
 80067dc:	08007aa8 	.word	0x08007aa8

080067e0 <_free_r>:
 80067e0:	b570      	push	{r4, r5, r6, lr}
 80067e2:	0005      	movs	r5, r0
 80067e4:	1e0c      	subs	r4, r1, #0
 80067e6:	d010      	beq.n	800680a <_free_r+0x2a>
 80067e8:	3c04      	subs	r4, #4
 80067ea:	6823      	ldr	r3, [r4, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	da00      	bge.n	80067f2 <_free_r+0x12>
 80067f0:	18e4      	adds	r4, r4, r3
 80067f2:	0028      	movs	r0, r5
 80067f4:	f000 f8ea 	bl	80069cc <__malloc_lock>
 80067f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006870 <_free_r+0x90>)
 80067fa:	6813      	ldr	r3, [r2, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d105      	bne.n	800680c <_free_r+0x2c>
 8006800:	6063      	str	r3, [r4, #4]
 8006802:	6014      	str	r4, [r2, #0]
 8006804:	0028      	movs	r0, r5
 8006806:	f000 f8e9 	bl	80069dc <__malloc_unlock>
 800680a:	bd70      	pop	{r4, r5, r6, pc}
 800680c:	42a3      	cmp	r3, r4
 800680e:	d908      	bls.n	8006822 <_free_r+0x42>
 8006810:	6820      	ldr	r0, [r4, #0]
 8006812:	1821      	adds	r1, r4, r0
 8006814:	428b      	cmp	r3, r1
 8006816:	d1f3      	bne.n	8006800 <_free_r+0x20>
 8006818:	6819      	ldr	r1, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	1809      	adds	r1, r1, r0
 800681e:	6021      	str	r1, [r4, #0]
 8006820:	e7ee      	b.n	8006800 <_free_r+0x20>
 8006822:	001a      	movs	r2, r3
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <_free_r+0x4e>
 800682a:	42a3      	cmp	r3, r4
 800682c:	d9f9      	bls.n	8006822 <_free_r+0x42>
 800682e:	6811      	ldr	r1, [r2, #0]
 8006830:	1850      	adds	r0, r2, r1
 8006832:	42a0      	cmp	r0, r4
 8006834:	d10b      	bne.n	800684e <_free_r+0x6e>
 8006836:	6820      	ldr	r0, [r4, #0]
 8006838:	1809      	adds	r1, r1, r0
 800683a:	1850      	adds	r0, r2, r1
 800683c:	6011      	str	r1, [r2, #0]
 800683e:	4283      	cmp	r3, r0
 8006840:	d1e0      	bne.n	8006804 <_free_r+0x24>
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	1841      	adds	r1, r0, r1
 8006848:	6011      	str	r1, [r2, #0]
 800684a:	6053      	str	r3, [r2, #4]
 800684c:	e7da      	b.n	8006804 <_free_r+0x24>
 800684e:	42a0      	cmp	r0, r4
 8006850:	d902      	bls.n	8006858 <_free_r+0x78>
 8006852:	230c      	movs	r3, #12
 8006854:	602b      	str	r3, [r5, #0]
 8006856:	e7d5      	b.n	8006804 <_free_r+0x24>
 8006858:	6820      	ldr	r0, [r4, #0]
 800685a:	1821      	adds	r1, r4, r0
 800685c:	428b      	cmp	r3, r1
 800685e:	d103      	bne.n	8006868 <_free_r+0x88>
 8006860:	6819      	ldr	r1, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	1809      	adds	r1, r1, r0
 8006866:	6021      	str	r1, [r4, #0]
 8006868:	6063      	str	r3, [r4, #4]
 800686a:	6054      	str	r4, [r2, #4]
 800686c:	e7ca      	b.n	8006804 <_free_r+0x24>
 800686e:	46c0      	nop			@ (mov r8, r8)
 8006870:	200003b8 	.word	0x200003b8

08006874 <malloc>:
 8006874:	b510      	push	{r4, lr}
 8006876:	4b03      	ldr	r3, [pc, #12]	@ (8006884 <malloc+0x10>)
 8006878:	0001      	movs	r1, r0
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	f000 f826 	bl	80068cc <_malloc_r>
 8006880:	bd10      	pop	{r4, pc}
 8006882:	46c0      	nop			@ (mov r8, r8)
 8006884:	20000018 	.word	0x20000018

08006888 <sbrk_aligned>:
 8006888:	b570      	push	{r4, r5, r6, lr}
 800688a:	4e0f      	ldr	r6, [pc, #60]	@ (80068c8 <sbrk_aligned+0x40>)
 800688c:	000d      	movs	r5, r1
 800688e:	6831      	ldr	r1, [r6, #0]
 8006890:	0004      	movs	r4, r0
 8006892:	2900      	cmp	r1, #0
 8006894:	d102      	bne.n	800689c <sbrk_aligned+0x14>
 8006896:	f000 fcff 	bl	8007298 <_sbrk_r>
 800689a:	6030      	str	r0, [r6, #0]
 800689c:	0029      	movs	r1, r5
 800689e:	0020      	movs	r0, r4
 80068a0:	f000 fcfa 	bl	8007298 <_sbrk_r>
 80068a4:	1c43      	adds	r3, r0, #1
 80068a6:	d103      	bne.n	80068b0 <sbrk_aligned+0x28>
 80068a8:	2501      	movs	r5, #1
 80068aa:	426d      	negs	r5, r5
 80068ac:	0028      	movs	r0, r5
 80068ae:	bd70      	pop	{r4, r5, r6, pc}
 80068b0:	2303      	movs	r3, #3
 80068b2:	1cc5      	adds	r5, r0, #3
 80068b4:	439d      	bics	r5, r3
 80068b6:	42a8      	cmp	r0, r5
 80068b8:	d0f8      	beq.n	80068ac <sbrk_aligned+0x24>
 80068ba:	1a29      	subs	r1, r5, r0
 80068bc:	0020      	movs	r0, r4
 80068be:	f000 fceb 	bl	8007298 <_sbrk_r>
 80068c2:	3001      	adds	r0, #1
 80068c4:	d1f2      	bne.n	80068ac <sbrk_aligned+0x24>
 80068c6:	e7ef      	b.n	80068a8 <sbrk_aligned+0x20>
 80068c8:	200003b4 	.word	0x200003b4

080068cc <_malloc_r>:
 80068cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068ce:	2203      	movs	r2, #3
 80068d0:	1ccb      	adds	r3, r1, #3
 80068d2:	4393      	bics	r3, r2
 80068d4:	3308      	adds	r3, #8
 80068d6:	0005      	movs	r5, r0
 80068d8:	001f      	movs	r7, r3
 80068da:	2b0c      	cmp	r3, #12
 80068dc:	d234      	bcs.n	8006948 <_malloc_r+0x7c>
 80068de:	270c      	movs	r7, #12
 80068e0:	42b9      	cmp	r1, r7
 80068e2:	d833      	bhi.n	800694c <_malloc_r+0x80>
 80068e4:	0028      	movs	r0, r5
 80068e6:	f000 f871 	bl	80069cc <__malloc_lock>
 80068ea:	4e37      	ldr	r6, [pc, #220]	@ (80069c8 <_malloc_r+0xfc>)
 80068ec:	6833      	ldr	r3, [r6, #0]
 80068ee:	001c      	movs	r4, r3
 80068f0:	2c00      	cmp	r4, #0
 80068f2:	d12f      	bne.n	8006954 <_malloc_r+0x88>
 80068f4:	0039      	movs	r1, r7
 80068f6:	0028      	movs	r0, r5
 80068f8:	f7ff ffc6 	bl	8006888 <sbrk_aligned>
 80068fc:	0004      	movs	r4, r0
 80068fe:	1c43      	adds	r3, r0, #1
 8006900:	d15f      	bne.n	80069c2 <_malloc_r+0xf6>
 8006902:	6834      	ldr	r4, [r6, #0]
 8006904:	9400      	str	r4, [sp, #0]
 8006906:	9b00      	ldr	r3, [sp, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d14a      	bne.n	80069a2 <_malloc_r+0xd6>
 800690c:	2c00      	cmp	r4, #0
 800690e:	d052      	beq.n	80069b6 <_malloc_r+0xea>
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	0028      	movs	r0, r5
 8006914:	18e3      	adds	r3, r4, r3
 8006916:	9900      	ldr	r1, [sp, #0]
 8006918:	9301      	str	r3, [sp, #4]
 800691a:	f000 fcbd 	bl	8007298 <_sbrk_r>
 800691e:	9b01      	ldr	r3, [sp, #4]
 8006920:	4283      	cmp	r3, r0
 8006922:	d148      	bne.n	80069b6 <_malloc_r+0xea>
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	0028      	movs	r0, r5
 8006928:	1aff      	subs	r7, r7, r3
 800692a:	0039      	movs	r1, r7
 800692c:	f7ff ffac 	bl	8006888 <sbrk_aligned>
 8006930:	3001      	adds	r0, #1
 8006932:	d040      	beq.n	80069b6 <_malloc_r+0xea>
 8006934:	6823      	ldr	r3, [r4, #0]
 8006936:	19db      	adds	r3, r3, r7
 8006938:	6023      	str	r3, [r4, #0]
 800693a:	6833      	ldr	r3, [r6, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	2a00      	cmp	r2, #0
 8006940:	d133      	bne.n	80069aa <_malloc_r+0xde>
 8006942:	9b00      	ldr	r3, [sp, #0]
 8006944:	6033      	str	r3, [r6, #0]
 8006946:	e019      	b.n	800697c <_malloc_r+0xb0>
 8006948:	2b00      	cmp	r3, #0
 800694a:	dac9      	bge.n	80068e0 <_malloc_r+0x14>
 800694c:	230c      	movs	r3, #12
 800694e:	602b      	str	r3, [r5, #0]
 8006950:	2000      	movs	r0, #0
 8006952:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006954:	6821      	ldr	r1, [r4, #0]
 8006956:	1bc9      	subs	r1, r1, r7
 8006958:	d420      	bmi.n	800699c <_malloc_r+0xd0>
 800695a:	290b      	cmp	r1, #11
 800695c:	d90a      	bls.n	8006974 <_malloc_r+0xa8>
 800695e:	19e2      	adds	r2, r4, r7
 8006960:	6027      	str	r7, [r4, #0]
 8006962:	42a3      	cmp	r3, r4
 8006964:	d104      	bne.n	8006970 <_malloc_r+0xa4>
 8006966:	6032      	str	r2, [r6, #0]
 8006968:	6863      	ldr	r3, [r4, #4]
 800696a:	6011      	str	r1, [r2, #0]
 800696c:	6053      	str	r3, [r2, #4]
 800696e:	e005      	b.n	800697c <_malloc_r+0xb0>
 8006970:	605a      	str	r2, [r3, #4]
 8006972:	e7f9      	b.n	8006968 <_malloc_r+0x9c>
 8006974:	6862      	ldr	r2, [r4, #4]
 8006976:	42a3      	cmp	r3, r4
 8006978:	d10e      	bne.n	8006998 <_malloc_r+0xcc>
 800697a:	6032      	str	r2, [r6, #0]
 800697c:	0028      	movs	r0, r5
 800697e:	f000 f82d 	bl	80069dc <__malloc_unlock>
 8006982:	0020      	movs	r0, r4
 8006984:	2207      	movs	r2, #7
 8006986:	300b      	adds	r0, #11
 8006988:	1d23      	adds	r3, r4, #4
 800698a:	4390      	bics	r0, r2
 800698c:	1ac2      	subs	r2, r0, r3
 800698e:	4298      	cmp	r0, r3
 8006990:	d0df      	beq.n	8006952 <_malloc_r+0x86>
 8006992:	1a1b      	subs	r3, r3, r0
 8006994:	50a3      	str	r3, [r4, r2]
 8006996:	e7dc      	b.n	8006952 <_malloc_r+0x86>
 8006998:	605a      	str	r2, [r3, #4]
 800699a:	e7ef      	b.n	800697c <_malloc_r+0xb0>
 800699c:	0023      	movs	r3, r4
 800699e:	6864      	ldr	r4, [r4, #4]
 80069a0:	e7a6      	b.n	80068f0 <_malloc_r+0x24>
 80069a2:	9c00      	ldr	r4, [sp, #0]
 80069a4:	6863      	ldr	r3, [r4, #4]
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	e7ad      	b.n	8006906 <_malloc_r+0x3a>
 80069aa:	001a      	movs	r2, r3
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	42a3      	cmp	r3, r4
 80069b0:	d1fb      	bne.n	80069aa <_malloc_r+0xde>
 80069b2:	2300      	movs	r3, #0
 80069b4:	e7da      	b.n	800696c <_malloc_r+0xa0>
 80069b6:	230c      	movs	r3, #12
 80069b8:	0028      	movs	r0, r5
 80069ba:	602b      	str	r3, [r5, #0]
 80069bc:	f000 f80e 	bl	80069dc <__malloc_unlock>
 80069c0:	e7c6      	b.n	8006950 <_malloc_r+0x84>
 80069c2:	6007      	str	r7, [r0, #0]
 80069c4:	e7da      	b.n	800697c <_malloc_r+0xb0>
 80069c6:	46c0      	nop			@ (mov r8, r8)
 80069c8:	200003b8 	.word	0x200003b8

080069cc <__malloc_lock>:
 80069cc:	b510      	push	{r4, lr}
 80069ce:	4802      	ldr	r0, [pc, #8]	@ (80069d8 <__malloc_lock+0xc>)
 80069d0:	f7ff f877 	bl	8005ac2 <__retarget_lock_acquire_recursive>
 80069d4:	bd10      	pop	{r4, pc}
 80069d6:	46c0      	nop			@ (mov r8, r8)
 80069d8:	200003b0 	.word	0x200003b0

080069dc <__malloc_unlock>:
 80069dc:	b510      	push	{r4, lr}
 80069de:	4802      	ldr	r0, [pc, #8]	@ (80069e8 <__malloc_unlock+0xc>)
 80069e0:	f7ff f870 	bl	8005ac4 <__retarget_lock_release_recursive>
 80069e4:	bd10      	pop	{r4, pc}
 80069e6:	46c0      	nop			@ (mov r8, r8)
 80069e8:	200003b0 	.word	0x200003b0

080069ec <_Balloc>:
 80069ec:	b570      	push	{r4, r5, r6, lr}
 80069ee:	69c5      	ldr	r5, [r0, #28]
 80069f0:	0006      	movs	r6, r0
 80069f2:	000c      	movs	r4, r1
 80069f4:	2d00      	cmp	r5, #0
 80069f6:	d10e      	bne.n	8006a16 <_Balloc+0x2a>
 80069f8:	2010      	movs	r0, #16
 80069fa:	f7ff ff3b 	bl	8006874 <malloc>
 80069fe:	1e02      	subs	r2, r0, #0
 8006a00:	61f0      	str	r0, [r6, #28]
 8006a02:	d104      	bne.n	8006a0e <_Balloc+0x22>
 8006a04:	216b      	movs	r1, #107	@ 0x6b
 8006a06:	4b19      	ldr	r3, [pc, #100]	@ (8006a6c <_Balloc+0x80>)
 8006a08:	4819      	ldr	r0, [pc, #100]	@ (8006a70 <_Balloc+0x84>)
 8006a0a:	f000 fc61 	bl	80072d0 <__assert_func>
 8006a0e:	6045      	str	r5, [r0, #4]
 8006a10:	6085      	str	r5, [r0, #8]
 8006a12:	6005      	str	r5, [r0, #0]
 8006a14:	60c5      	str	r5, [r0, #12]
 8006a16:	69f5      	ldr	r5, [r6, #28]
 8006a18:	68eb      	ldr	r3, [r5, #12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d013      	beq.n	8006a46 <_Balloc+0x5a>
 8006a1e:	69f3      	ldr	r3, [r6, #28]
 8006a20:	00a2      	lsls	r2, r4, #2
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	189b      	adds	r3, r3, r2
 8006a26:	6818      	ldr	r0, [r3, #0]
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d118      	bne.n	8006a5e <_Balloc+0x72>
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	000d      	movs	r5, r1
 8006a30:	40a5      	lsls	r5, r4
 8006a32:	1d6a      	adds	r2, r5, #5
 8006a34:	0030      	movs	r0, r6
 8006a36:	0092      	lsls	r2, r2, #2
 8006a38:	f000 fc68 	bl	800730c <_calloc_r>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	d00c      	beq.n	8006a5a <_Balloc+0x6e>
 8006a40:	6044      	str	r4, [r0, #4]
 8006a42:	6085      	str	r5, [r0, #8]
 8006a44:	e00d      	b.n	8006a62 <_Balloc+0x76>
 8006a46:	2221      	movs	r2, #33	@ 0x21
 8006a48:	2104      	movs	r1, #4
 8006a4a:	0030      	movs	r0, r6
 8006a4c:	f000 fc5e 	bl	800730c <_calloc_r>
 8006a50:	69f3      	ldr	r3, [r6, #28]
 8006a52:	60e8      	str	r0, [r5, #12]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1e1      	bne.n	8006a1e <_Balloc+0x32>
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	bd70      	pop	{r4, r5, r6, pc}
 8006a5e:	6802      	ldr	r2, [r0, #0]
 8006a60:	601a      	str	r2, [r3, #0]
 8006a62:	2300      	movs	r3, #0
 8006a64:	6103      	str	r3, [r0, #16]
 8006a66:	60c3      	str	r3, [r0, #12]
 8006a68:	e7f8      	b.n	8006a5c <_Balloc+0x70>
 8006a6a:	46c0      	nop			@ (mov r8, r8)
 8006a6c:	08007aad 	.word	0x08007aad
 8006a70:	08007b2d 	.word	0x08007b2d

08006a74 <_Bfree>:
 8006a74:	b570      	push	{r4, r5, r6, lr}
 8006a76:	69c6      	ldr	r6, [r0, #28]
 8006a78:	0005      	movs	r5, r0
 8006a7a:	000c      	movs	r4, r1
 8006a7c:	2e00      	cmp	r6, #0
 8006a7e:	d10e      	bne.n	8006a9e <_Bfree+0x2a>
 8006a80:	2010      	movs	r0, #16
 8006a82:	f7ff fef7 	bl	8006874 <malloc>
 8006a86:	1e02      	subs	r2, r0, #0
 8006a88:	61e8      	str	r0, [r5, #28]
 8006a8a:	d104      	bne.n	8006a96 <_Bfree+0x22>
 8006a8c:	218f      	movs	r1, #143	@ 0x8f
 8006a8e:	4b09      	ldr	r3, [pc, #36]	@ (8006ab4 <_Bfree+0x40>)
 8006a90:	4809      	ldr	r0, [pc, #36]	@ (8006ab8 <_Bfree+0x44>)
 8006a92:	f000 fc1d 	bl	80072d0 <__assert_func>
 8006a96:	6046      	str	r6, [r0, #4]
 8006a98:	6086      	str	r6, [r0, #8]
 8006a9a:	6006      	str	r6, [r0, #0]
 8006a9c:	60c6      	str	r6, [r0, #12]
 8006a9e:	2c00      	cmp	r4, #0
 8006aa0:	d007      	beq.n	8006ab2 <_Bfree+0x3e>
 8006aa2:	69eb      	ldr	r3, [r5, #28]
 8006aa4:	6862      	ldr	r2, [r4, #4]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	0092      	lsls	r2, r2, #2
 8006aaa:	189b      	adds	r3, r3, r2
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	6022      	str	r2, [r4, #0]
 8006ab0:	601c      	str	r4, [r3, #0]
 8006ab2:	bd70      	pop	{r4, r5, r6, pc}
 8006ab4:	08007aad 	.word	0x08007aad
 8006ab8:	08007b2d 	.word	0x08007b2d

08006abc <__multadd>:
 8006abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006abe:	000f      	movs	r7, r1
 8006ac0:	9001      	str	r0, [sp, #4]
 8006ac2:	000c      	movs	r4, r1
 8006ac4:	001e      	movs	r6, r3
 8006ac6:	2000      	movs	r0, #0
 8006ac8:	690d      	ldr	r5, [r1, #16]
 8006aca:	3714      	adds	r7, #20
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	3001      	adds	r0, #1
 8006ad0:	b299      	uxth	r1, r3
 8006ad2:	4351      	muls	r1, r2
 8006ad4:	0c1b      	lsrs	r3, r3, #16
 8006ad6:	4353      	muls	r3, r2
 8006ad8:	1989      	adds	r1, r1, r6
 8006ada:	0c0e      	lsrs	r6, r1, #16
 8006adc:	199b      	adds	r3, r3, r6
 8006ade:	0c1e      	lsrs	r6, r3, #16
 8006ae0:	b289      	uxth	r1, r1
 8006ae2:	041b      	lsls	r3, r3, #16
 8006ae4:	185b      	adds	r3, r3, r1
 8006ae6:	c708      	stmia	r7!, {r3}
 8006ae8:	4285      	cmp	r5, r0
 8006aea:	dcef      	bgt.n	8006acc <__multadd+0x10>
 8006aec:	2e00      	cmp	r6, #0
 8006aee:	d022      	beq.n	8006b36 <__multadd+0x7a>
 8006af0:	68a3      	ldr	r3, [r4, #8]
 8006af2:	42ab      	cmp	r3, r5
 8006af4:	dc19      	bgt.n	8006b2a <__multadd+0x6e>
 8006af6:	6861      	ldr	r1, [r4, #4]
 8006af8:	9801      	ldr	r0, [sp, #4]
 8006afa:	3101      	adds	r1, #1
 8006afc:	f7ff ff76 	bl	80069ec <_Balloc>
 8006b00:	1e07      	subs	r7, r0, #0
 8006b02:	d105      	bne.n	8006b10 <__multadd+0x54>
 8006b04:	003a      	movs	r2, r7
 8006b06:	21ba      	movs	r1, #186	@ 0xba
 8006b08:	4b0c      	ldr	r3, [pc, #48]	@ (8006b3c <__multadd+0x80>)
 8006b0a:	480d      	ldr	r0, [pc, #52]	@ (8006b40 <__multadd+0x84>)
 8006b0c:	f000 fbe0 	bl	80072d0 <__assert_func>
 8006b10:	0021      	movs	r1, r4
 8006b12:	6922      	ldr	r2, [r4, #16]
 8006b14:	310c      	adds	r1, #12
 8006b16:	3202      	adds	r2, #2
 8006b18:	0092      	lsls	r2, r2, #2
 8006b1a:	300c      	adds	r0, #12
 8006b1c:	f000 fbce 	bl	80072bc <memcpy>
 8006b20:	0021      	movs	r1, r4
 8006b22:	9801      	ldr	r0, [sp, #4]
 8006b24:	f7ff ffa6 	bl	8006a74 <_Bfree>
 8006b28:	003c      	movs	r4, r7
 8006b2a:	1d2b      	adds	r3, r5, #4
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	18e3      	adds	r3, r4, r3
 8006b30:	3501      	adds	r5, #1
 8006b32:	605e      	str	r6, [r3, #4]
 8006b34:	6125      	str	r5, [r4, #16]
 8006b36:	0020      	movs	r0, r4
 8006b38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b3a:	46c0      	nop			@ (mov r8, r8)
 8006b3c:	08007b1c 	.word	0x08007b1c
 8006b40:	08007b2d 	.word	0x08007b2d

08006b44 <__hi0bits>:
 8006b44:	2280      	movs	r2, #128	@ 0x80
 8006b46:	0003      	movs	r3, r0
 8006b48:	0252      	lsls	r2, r2, #9
 8006b4a:	2000      	movs	r0, #0
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d201      	bcs.n	8006b54 <__hi0bits+0x10>
 8006b50:	041b      	lsls	r3, r3, #16
 8006b52:	3010      	adds	r0, #16
 8006b54:	2280      	movs	r2, #128	@ 0x80
 8006b56:	0452      	lsls	r2, r2, #17
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d201      	bcs.n	8006b60 <__hi0bits+0x1c>
 8006b5c:	3008      	adds	r0, #8
 8006b5e:	021b      	lsls	r3, r3, #8
 8006b60:	2280      	movs	r2, #128	@ 0x80
 8006b62:	0552      	lsls	r2, r2, #21
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d201      	bcs.n	8006b6c <__hi0bits+0x28>
 8006b68:	3004      	adds	r0, #4
 8006b6a:	011b      	lsls	r3, r3, #4
 8006b6c:	2280      	movs	r2, #128	@ 0x80
 8006b6e:	05d2      	lsls	r2, r2, #23
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d201      	bcs.n	8006b78 <__hi0bits+0x34>
 8006b74:	3002      	adds	r0, #2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	db03      	blt.n	8006b84 <__hi0bits+0x40>
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	4213      	tst	r3, r2
 8006b80:	d100      	bne.n	8006b84 <__hi0bits+0x40>
 8006b82:	2020      	movs	r0, #32
 8006b84:	4770      	bx	lr

08006b86 <__lo0bits>:
 8006b86:	6803      	ldr	r3, [r0, #0]
 8006b88:	0001      	movs	r1, r0
 8006b8a:	2207      	movs	r2, #7
 8006b8c:	0018      	movs	r0, r3
 8006b8e:	4010      	ands	r0, r2
 8006b90:	4213      	tst	r3, r2
 8006b92:	d00d      	beq.n	8006bb0 <__lo0bits+0x2a>
 8006b94:	3a06      	subs	r2, #6
 8006b96:	2000      	movs	r0, #0
 8006b98:	4213      	tst	r3, r2
 8006b9a:	d105      	bne.n	8006ba8 <__lo0bits+0x22>
 8006b9c:	3002      	adds	r0, #2
 8006b9e:	4203      	tst	r3, r0
 8006ba0:	d003      	beq.n	8006baa <__lo0bits+0x24>
 8006ba2:	40d3      	lsrs	r3, r2
 8006ba4:	0010      	movs	r0, r2
 8006ba6:	600b      	str	r3, [r1, #0]
 8006ba8:	4770      	bx	lr
 8006baa:	089b      	lsrs	r3, r3, #2
 8006bac:	600b      	str	r3, [r1, #0]
 8006bae:	e7fb      	b.n	8006ba8 <__lo0bits+0x22>
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	2a00      	cmp	r2, #0
 8006bb4:	d101      	bne.n	8006bba <__lo0bits+0x34>
 8006bb6:	2010      	movs	r0, #16
 8006bb8:	0c1b      	lsrs	r3, r3, #16
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	2a00      	cmp	r2, #0
 8006bbe:	d101      	bne.n	8006bc4 <__lo0bits+0x3e>
 8006bc0:	3008      	adds	r0, #8
 8006bc2:	0a1b      	lsrs	r3, r3, #8
 8006bc4:	071a      	lsls	r2, r3, #28
 8006bc6:	d101      	bne.n	8006bcc <__lo0bits+0x46>
 8006bc8:	3004      	adds	r0, #4
 8006bca:	091b      	lsrs	r3, r3, #4
 8006bcc:	079a      	lsls	r2, r3, #30
 8006bce:	d101      	bne.n	8006bd4 <__lo0bits+0x4e>
 8006bd0:	3002      	adds	r0, #2
 8006bd2:	089b      	lsrs	r3, r3, #2
 8006bd4:	07da      	lsls	r2, r3, #31
 8006bd6:	d4e9      	bmi.n	8006bac <__lo0bits+0x26>
 8006bd8:	3001      	adds	r0, #1
 8006bda:	085b      	lsrs	r3, r3, #1
 8006bdc:	d1e6      	bne.n	8006bac <__lo0bits+0x26>
 8006bde:	2020      	movs	r0, #32
 8006be0:	e7e2      	b.n	8006ba8 <__lo0bits+0x22>
	...

08006be4 <__i2b>:
 8006be4:	b510      	push	{r4, lr}
 8006be6:	000c      	movs	r4, r1
 8006be8:	2101      	movs	r1, #1
 8006bea:	f7ff feff 	bl	80069ec <_Balloc>
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	d107      	bne.n	8006c02 <__i2b+0x1e>
 8006bf2:	2146      	movs	r1, #70	@ 0x46
 8006bf4:	4c05      	ldr	r4, [pc, #20]	@ (8006c0c <__i2b+0x28>)
 8006bf6:	0002      	movs	r2, r0
 8006bf8:	4b05      	ldr	r3, [pc, #20]	@ (8006c10 <__i2b+0x2c>)
 8006bfa:	0020      	movs	r0, r4
 8006bfc:	31ff      	adds	r1, #255	@ 0xff
 8006bfe:	f000 fb67 	bl	80072d0 <__assert_func>
 8006c02:	2301      	movs	r3, #1
 8006c04:	6144      	str	r4, [r0, #20]
 8006c06:	6103      	str	r3, [r0, #16]
 8006c08:	bd10      	pop	{r4, pc}
 8006c0a:	46c0      	nop			@ (mov r8, r8)
 8006c0c:	08007b2d 	.word	0x08007b2d
 8006c10:	08007b1c 	.word	0x08007b1c

08006c14 <__multiply>:
 8006c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c16:	0014      	movs	r4, r2
 8006c18:	690a      	ldr	r2, [r1, #16]
 8006c1a:	6923      	ldr	r3, [r4, #16]
 8006c1c:	000d      	movs	r5, r1
 8006c1e:	b08b      	sub	sp, #44	@ 0x2c
 8006c20:	429a      	cmp	r2, r3
 8006c22:	db02      	blt.n	8006c2a <__multiply+0x16>
 8006c24:	0023      	movs	r3, r4
 8006c26:	000c      	movs	r4, r1
 8006c28:	001d      	movs	r5, r3
 8006c2a:	6927      	ldr	r7, [r4, #16]
 8006c2c:	692e      	ldr	r6, [r5, #16]
 8006c2e:	6861      	ldr	r1, [r4, #4]
 8006c30:	19bb      	adds	r3, r7, r6
 8006c32:	9303      	str	r3, [sp, #12]
 8006c34:	68a3      	ldr	r3, [r4, #8]
 8006c36:	19ba      	adds	r2, r7, r6
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	da00      	bge.n	8006c3e <__multiply+0x2a>
 8006c3c:	3101      	adds	r1, #1
 8006c3e:	f7ff fed5 	bl	80069ec <_Balloc>
 8006c42:	9002      	str	r0, [sp, #8]
 8006c44:	2800      	cmp	r0, #0
 8006c46:	d106      	bne.n	8006c56 <__multiply+0x42>
 8006c48:	21b1      	movs	r1, #177	@ 0xb1
 8006c4a:	4b49      	ldr	r3, [pc, #292]	@ (8006d70 <__multiply+0x15c>)
 8006c4c:	4849      	ldr	r0, [pc, #292]	@ (8006d74 <__multiply+0x160>)
 8006c4e:	9a02      	ldr	r2, [sp, #8]
 8006c50:	0049      	lsls	r1, r1, #1
 8006c52:	f000 fb3d 	bl	80072d0 <__assert_func>
 8006c56:	9b02      	ldr	r3, [sp, #8]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	3314      	adds	r3, #20
 8006c5c:	469c      	mov	ip, r3
 8006c5e:	19bb      	adds	r3, r7, r6
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4463      	add	r3, ip
 8006c64:	9304      	str	r3, [sp, #16]
 8006c66:	4663      	mov	r3, ip
 8006c68:	9904      	ldr	r1, [sp, #16]
 8006c6a:	428b      	cmp	r3, r1
 8006c6c:	d32a      	bcc.n	8006cc4 <__multiply+0xb0>
 8006c6e:	0023      	movs	r3, r4
 8006c70:	00bf      	lsls	r7, r7, #2
 8006c72:	3314      	adds	r3, #20
 8006c74:	3514      	adds	r5, #20
 8006c76:	9308      	str	r3, [sp, #32]
 8006c78:	00b6      	lsls	r6, r6, #2
 8006c7a:	19db      	adds	r3, r3, r7
 8006c7c:	9305      	str	r3, [sp, #20]
 8006c7e:	19ab      	adds	r3, r5, r6
 8006c80:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c82:	2304      	movs	r3, #4
 8006c84:	9306      	str	r3, [sp, #24]
 8006c86:	0023      	movs	r3, r4
 8006c88:	9a05      	ldr	r2, [sp, #20]
 8006c8a:	3315      	adds	r3, #21
 8006c8c:	9501      	str	r5, [sp, #4]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d305      	bcc.n	8006c9e <__multiply+0x8a>
 8006c92:	1b13      	subs	r3, r2, r4
 8006c94:	3b15      	subs	r3, #21
 8006c96:	089b      	lsrs	r3, r3, #2
 8006c98:	3301      	adds	r3, #1
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	9306      	str	r3, [sp, #24]
 8006c9e:	9b01      	ldr	r3, [sp, #4]
 8006ca0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d310      	bcc.n	8006cc8 <__multiply+0xb4>
 8006ca6:	9b03      	ldr	r3, [sp, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	dd05      	ble.n	8006cb8 <__multiply+0xa4>
 8006cac:	9b04      	ldr	r3, [sp, #16]
 8006cae:	3b04      	subs	r3, #4
 8006cb0:	9304      	str	r3, [sp, #16]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d056      	beq.n	8006d66 <__multiply+0x152>
 8006cb8:	9b02      	ldr	r3, [sp, #8]
 8006cba:	9a03      	ldr	r2, [sp, #12]
 8006cbc:	0018      	movs	r0, r3
 8006cbe:	611a      	str	r2, [r3, #16]
 8006cc0:	b00b      	add	sp, #44	@ 0x2c
 8006cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cc4:	c304      	stmia	r3!, {r2}
 8006cc6:	e7cf      	b.n	8006c68 <__multiply+0x54>
 8006cc8:	9b01      	ldr	r3, [sp, #4]
 8006cca:	6818      	ldr	r0, [r3, #0]
 8006ccc:	b280      	uxth	r0, r0
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	d01e      	beq.n	8006d10 <__multiply+0xfc>
 8006cd2:	4667      	mov	r7, ip
 8006cd4:	2500      	movs	r5, #0
 8006cd6:	9e08      	ldr	r6, [sp, #32]
 8006cd8:	ce02      	ldmia	r6!, {r1}
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	9307      	str	r3, [sp, #28]
 8006cde:	b28b      	uxth	r3, r1
 8006ce0:	4343      	muls	r3, r0
 8006ce2:	001a      	movs	r2, r3
 8006ce4:	466b      	mov	r3, sp
 8006ce6:	0c09      	lsrs	r1, r1, #16
 8006ce8:	8b9b      	ldrh	r3, [r3, #28]
 8006cea:	4341      	muls	r1, r0
 8006cec:	18d3      	adds	r3, r2, r3
 8006cee:	9a07      	ldr	r2, [sp, #28]
 8006cf0:	195b      	adds	r3, r3, r5
 8006cf2:	0c12      	lsrs	r2, r2, #16
 8006cf4:	1889      	adds	r1, r1, r2
 8006cf6:	0c1a      	lsrs	r2, r3, #16
 8006cf8:	188a      	adds	r2, r1, r2
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	0c15      	lsrs	r5, r2, #16
 8006cfe:	0412      	lsls	r2, r2, #16
 8006d00:	431a      	orrs	r2, r3
 8006d02:	9b05      	ldr	r3, [sp, #20]
 8006d04:	c704      	stmia	r7!, {r2}
 8006d06:	42b3      	cmp	r3, r6
 8006d08:	d8e6      	bhi.n	8006cd8 <__multiply+0xc4>
 8006d0a:	4663      	mov	r3, ip
 8006d0c:	9a06      	ldr	r2, [sp, #24]
 8006d0e:	509d      	str	r5, [r3, r2]
 8006d10:	9b01      	ldr	r3, [sp, #4]
 8006d12:	6818      	ldr	r0, [r3, #0]
 8006d14:	0c00      	lsrs	r0, r0, #16
 8006d16:	d020      	beq.n	8006d5a <__multiply+0x146>
 8006d18:	4663      	mov	r3, ip
 8006d1a:	0025      	movs	r5, r4
 8006d1c:	4661      	mov	r1, ip
 8006d1e:	2700      	movs	r7, #0
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3514      	adds	r5, #20
 8006d24:	682a      	ldr	r2, [r5, #0]
 8006d26:	680e      	ldr	r6, [r1, #0]
 8006d28:	b292      	uxth	r2, r2
 8006d2a:	4342      	muls	r2, r0
 8006d2c:	0c36      	lsrs	r6, r6, #16
 8006d2e:	1992      	adds	r2, r2, r6
 8006d30:	19d2      	adds	r2, r2, r7
 8006d32:	0416      	lsls	r6, r2, #16
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	431e      	orrs	r6, r3
 8006d38:	600e      	str	r6, [r1, #0]
 8006d3a:	cd40      	ldmia	r5!, {r6}
 8006d3c:	684b      	ldr	r3, [r1, #4]
 8006d3e:	0c36      	lsrs	r6, r6, #16
 8006d40:	4346      	muls	r6, r0
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	0c12      	lsrs	r2, r2, #16
 8006d46:	18f3      	adds	r3, r6, r3
 8006d48:	189b      	adds	r3, r3, r2
 8006d4a:	9a05      	ldr	r2, [sp, #20]
 8006d4c:	0c1f      	lsrs	r7, r3, #16
 8006d4e:	3104      	adds	r1, #4
 8006d50:	42aa      	cmp	r2, r5
 8006d52:	d8e7      	bhi.n	8006d24 <__multiply+0x110>
 8006d54:	4662      	mov	r2, ip
 8006d56:	9906      	ldr	r1, [sp, #24]
 8006d58:	5053      	str	r3, [r2, r1]
 8006d5a:	9b01      	ldr	r3, [sp, #4]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	9301      	str	r3, [sp, #4]
 8006d60:	2304      	movs	r3, #4
 8006d62:	449c      	add	ip, r3
 8006d64:	e79b      	b.n	8006c9e <__multiply+0x8a>
 8006d66:	9b03      	ldr	r3, [sp, #12]
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	9303      	str	r3, [sp, #12]
 8006d6c:	e79b      	b.n	8006ca6 <__multiply+0x92>
 8006d6e:	46c0      	nop			@ (mov r8, r8)
 8006d70:	08007b1c 	.word	0x08007b1c
 8006d74:	08007b2d 	.word	0x08007b2d

08006d78 <__pow5mult>:
 8006d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	0015      	movs	r5, r2
 8006d7e:	0007      	movs	r7, r0
 8006d80:	000e      	movs	r6, r1
 8006d82:	401a      	ands	r2, r3
 8006d84:	421d      	tst	r5, r3
 8006d86:	d008      	beq.n	8006d9a <__pow5mult+0x22>
 8006d88:	4925      	ldr	r1, [pc, #148]	@ (8006e20 <__pow5mult+0xa8>)
 8006d8a:	3a01      	subs	r2, #1
 8006d8c:	0092      	lsls	r2, r2, #2
 8006d8e:	5852      	ldr	r2, [r2, r1]
 8006d90:	2300      	movs	r3, #0
 8006d92:	0031      	movs	r1, r6
 8006d94:	f7ff fe92 	bl	8006abc <__multadd>
 8006d98:	0006      	movs	r6, r0
 8006d9a:	10ad      	asrs	r5, r5, #2
 8006d9c:	d03d      	beq.n	8006e1a <__pow5mult+0xa2>
 8006d9e:	69fc      	ldr	r4, [r7, #28]
 8006da0:	2c00      	cmp	r4, #0
 8006da2:	d10f      	bne.n	8006dc4 <__pow5mult+0x4c>
 8006da4:	2010      	movs	r0, #16
 8006da6:	f7ff fd65 	bl	8006874 <malloc>
 8006daa:	1e02      	subs	r2, r0, #0
 8006dac:	61f8      	str	r0, [r7, #28]
 8006dae:	d105      	bne.n	8006dbc <__pow5mult+0x44>
 8006db0:	21b4      	movs	r1, #180	@ 0xb4
 8006db2:	4b1c      	ldr	r3, [pc, #112]	@ (8006e24 <__pow5mult+0xac>)
 8006db4:	481c      	ldr	r0, [pc, #112]	@ (8006e28 <__pow5mult+0xb0>)
 8006db6:	31ff      	adds	r1, #255	@ 0xff
 8006db8:	f000 fa8a 	bl	80072d0 <__assert_func>
 8006dbc:	6044      	str	r4, [r0, #4]
 8006dbe:	6084      	str	r4, [r0, #8]
 8006dc0:	6004      	str	r4, [r0, #0]
 8006dc2:	60c4      	str	r4, [r0, #12]
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	689c      	ldr	r4, [r3, #8]
 8006dc8:	9301      	str	r3, [sp, #4]
 8006dca:	2c00      	cmp	r4, #0
 8006dcc:	d108      	bne.n	8006de0 <__pow5mult+0x68>
 8006dce:	0038      	movs	r0, r7
 8006dd0:	4916      	ldr	r1, [pc, #88]	@ (8006e2c <__pow5mult+0xb4>)
 8006dd2:	f7ff ff07 	bl	8006be4 <__i2b>
 8006dd6:	9b01      	ldr	r3, [sp, #4]
 8006dd8:	0004      	movs	r4, r0
 8006dda:	6098      	str	r0, [r3, #8]
 8006ddc:	2300      	movs	r3, #0
 8006dde:	6003      	str	r3, [r0, #0]
 8006de0:	2301      	movs	r3, #1
 8006de2:	421d      	tst	r5, r3
 8006de4:	d00a      	beq.n	8006dfc <__pow5mult+0x84>
 8006de6:	0031      	movs	r1, r6
 8006de8:	0022      	movs	r2, r4
 8006dea:	0038      	movs	r0, r7
 8006dec:	f7ff ff12 	bl	8006c14 <__multiply>
 8006df0:	0031      	movs	r1, r6
 8006df2:	9001      	str	r0, [sp, #4]
 8006df4:	0038      	movs	r0, r7
 8006df6:	f7ff fe3d 	bl	8006a74 <_Bfree>
 8006dfa:	9e01      	ldr	r6, [sp, #4]
 8006dfc:	106d      	asrs	r5, r5, #1
 8006dfe:	d00c      	beq.n	8006e1a <__pow5mult+0xa2>
 8006e00:	6820      	ldr	r0, [r4, #0]
 8006e02:	2800      	cmp	r0, #0
 8006e04:	d107      	bne.n	8006e16 <__pow5mult+0x9e>
 8006e06:	0022      	movs	r2, r4
 8006e08:	0021      	movs	r1, r4
 8006e0a:	0038      	movs	r0, r7
 8006e0c:	f7ff ff02 	bl	8006c14 <__multiply>
 8006e10:	2300      	movs	r3, #0
 8006e12:	6020      	str	r0, [r4, #0]
 8006e14:	6003      	str	r3, [r0, #0]
 8006e16:	0004      	movs	r4, r0
 8006e18:	e7e2      	b.n	8006de0 <__pow5mult+0x68>
 8006e1a:	0030      	movs	r0, r6
 8006e1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e1e:	46c0      	nop			@ (mov r8, r8)
 8006e20:	08007b88 	.word	0x08007b88
 8006e24:	08007aad 	.word	0x08007aad
 8006e28:	08007b2d 	.word	0x08007b2d
 8006e2c:	00000271 	.word	0x00000271

08006e30 <__lshift>:
 8006e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e32:	000c      	movs	r4, r1
 8006e34:	0016      	movs	r6, r2
 8006e36:	6923      	ldr	r3, [r4, #16]
 8006e38:	1157      	asrs	r7, r2, #5
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	18fb      	adds	r3, r7, r3
 8006e3e:	9301      	str	r3, [sp, #4]
 8006e40:	3301      	adds	r3, #1
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	6849      	ldr	r1, [r1, #4]
 8006e46:	68a3      	ldr	r3, [r4, #8]
 8006e48:	9002      	str	r0, [sp, #8]
 8006e4a:	9a00      	ldr	r2, [sp, #0]
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	db10      	blt.n	8006e72 <__lshift+0x42>
 8006e50:	9802      	ldr	r0, [sp, #8]
 8006e52:	f7ff fdcb 	bl	80069ec <_Balloc>
 8006e56:	2300      	movs	r3, #0
 8006e58:	0001      	movs	r1, r0
 8006e5a:	0005      	movs	r5, r0
 8006e5c:	001a      	movs	r2, r3
 8006e5e:	3114      	adds	r1, #20
 8006e60:	4298      	cmp	r0, r3
 8006e62:	d10c      	bne.n	8006e7e <__lshift+0x4e>
 8006e64:	21ef      	movs	r1, #239	@ 0xef
 8006e66:	002a      	movs	r2, r5
 8006e68:	4b25      	ldr	r3, [pc, #148]	@ (8006f00 <__lshift+0xd0>)
 8006e6a:	4826      	ldr	r0, [pc, #152]	@ (8006f04 <__lshift+0xd4>)
 8006e6c:	0049      	lsls	r1, r1, #1
 8006e6e:	f000 fa2f 	bl	80072d0 <__assert_func>
 8006e72:	3101      	adds	r1, #1
 8006e74:	005b      	lsls	r3, r3, #1
 8006e76:	e7e8      	b.n	8006e4a <__lshift+0x1a>
 8006e78:	0098      	lsls	r0, r3, #2
 8006e7a:	500a      	str	r2, [r1, r0]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	42bb      	cmp	r3, r7
 8006e80:	dbfa      	blt.n	8006e78 <__lshift+0x48>
 8006e82:	43fb      	mvns	r3, r7
 8006e84:	17db      	asrs	r3, r3, #31
 8006e86:	401f      	ands	r7, r3
 8006e88:	00bf      	lsls	r7, r7, #2
 8006e8a:	0023      	movs	r3, r4
 8006e8c:	201f      	movs	r0, #31
 8006e8e:	19c9      	adds	r1, r1, r7
 8006e90:	0037      	movs	r7, r6
 8006e92:	6922      	ldr	r2, [r4, #16]
 8006e94:	3314      	adds	r3, #20
 8006e96:	0092      	lsls	r2, r2, #2
 8006e98:	189a      	adds	r2, r3, r2
 8006e9a:	4007      	ands	r7, r0
 8006e9c:	4206      	tst	r6, r0
 8006e9e:	d029      	beq.n	8006ef4 <__lshift+0xc4>
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	1bc0      	subs	r0, r0, r7
 8006ea4:	9003      	str	r0, [sp, #12]
 8006ea6:	468c      	mov	ip, r1
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	681e      	ldr	r6, [r3, #0]
 8006eac:	40be      	lsls	r6, r7
 8006eae:	4306      	orrs	r6, r0
 8006eb0:	4660      	mov	r0, ip
 8006eb2:	c040      	stmia	r0!, {r6}
 8006eb4:	4684      	mov	ip, r0
 8006eb6:	9e03      	ldr	r6, [sp, #12]
 8006eb8:	cb01      	ldmia	r3!, {r0}
 8006eba:	40f0      	lsrs	r0, r6
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d8f4      	bhi.n	8006eaa <__lshift+0x7a>
 8006ec0:	0026      	movs	r6, r4
 8006ec2:	3615      	adds	r6, #21
 8006ec4:	2304      	movs	r3, #4
 8006ec6:	42b2      	cmp	r2, r6
 8006ec8:	d304      	bcc.n	8006ed4 <__lshift+0xa4>
 8006eca:	1b13      	subs	r3, r2, r4
 8006ecc:	3b15      	subs	r3, #21
 8006ece:	089b      	lsrs	r3, r3, #2
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	50c8      	str	r0, [r1, r3]
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	d002      	beq.n	8006ee0 <__lshift+0xb0>
 8006eda:	9b01      	ldr	r3, [sp, #4]
 8006edc:	3302      	adds	r3, #2
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	9b00      	ldr	r3, [sp, #0]
 8006ee2:	9802      	ldr	r0, [sp, #8]
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	0021      	movs	r1, r4
 8006ee8:	612b      	str	r3, [r5, #16]
 8006eea:	f7ff fdc3 	bl	8006a74 <_Bfree>
 8006eee:	0028      	movs	r0, r5
 8006ef0:	b005      	add	sp, #20
 8006ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ef4:	cb01      	ldmia	r3!, {r0}
 8006ef6:	c101      	stmia	r1!, {r0}
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d8fb      	bhi.n	8006ef4 <__lshift+0xc4>
 8006efc:	e7f0      	b.n	8006ee0 <__lshift+0xb0>
 8006efe:	46c0      	nop			@ (mov r8, r8)
 8006f00:	08007b1c 	.word	0x08007b1c
 8006f04:	08007b2d 	.word	0x08007b2d

08006f08 <__mcmp>:
 8006f08:	b530      	push	{r4, r5, lr}
 8006f0a:	690b      	ldr	r3, [r1, #16]
 8006f0c:	6904      	ldr	r4, [r0, #16]
 8006f0e:	0002      	movs	r2, r0
 8006f10:	1ae0      	subs	r0, r4, r3
 8006f12:	429c      	cmp	r4, r3
 8006f14:	d10f      	bne.n	8006f36 <__mcmp+0x2e>
 8006f16:	3214      	adds	r2, #20
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	3114      	adds	r1, #20
 8006f1c:	0014      	movs	r4, r2
 8006f1e:	18c9      	adds	r1, r1, r3
 8006f20:	18d2      	adds	r2, r2, r3
 8006f22:	3a04      	subs	r2, #4
 8006f24:	3904      	subs	r1, #4
 8006f26:	6815      	ldr	r5, [r2, #0]
 8006f28:	680b      	ldr	r3, [r1, #0]
 8006f2a:	429d      	cmp	r5, r3
 8006f2c:	d004      	beq.n	8006f38 <__mcmp+0x30>
 8006f2e:	2001      	movs	r0, #1
 8006f30:	429d      	cmp	r5, r3
 8006f32:	d200      	bcs.n	8006f36 <__mcmp+0x2e>
 8006f34:	3802      	subs	r0, #2
 8006f36:	bd30      	pop	{r4, r5, pc}
 8006f38:	4294      	cmp	r4, r2
 8006f3a:	d3f2      	bcc.n	8006f22 <__mcmp+0x1a>
 8006f3c:	e7fb      	b.n	8006f36 <__mcmp+0x2e>
	...

08006f40 <__mdiff>:
 8006f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f42:	000c      	movs	r4, r1
 8006f44:	b087      	sub	sp, #28
 8006f46:	9000      	str	r0, [sp, #0]
 8006f48:	0011      	movs	r1, r2
 8006f4a:	0020      	movs	r0, r4
 8006f4c:	0017      	movs	r7, r2
 8006f4e:	f7ff ffdb 	bl	8006f08 <__mcmp>
 8006f52:	1e05      	subs	r5, r0, #0
 8006f54:	d110      	bne.n	8006f78 <__mdiff+0x38>
 8006f56:	0001      	movs	r1, r0
 8006f58:	9800      	ldr	r0, [sp, #0]
 8006f5a:	f7ff fd47 	bl	80069ec <_Balloc>
 8006f5e:	1e02      	subs	r2, r0, #0
 8006f60:	d104      	bne.n	8006f6c <__mdiff+0x2c>
 8006f62:	4b40      	ldr	r3, [pc, #256]	@ (8007064 <__mdiff+0x124>)
 8006f64:	4840      	ldr	r0, [pc, #256]	@ (8007068 <__mdiff+0x128>)
 8006f66:	4941      	ldr	r1, [pc, #260]	@ (800706c <__mdiff+0x12c>)
 8006f68:	f000 f9b2 	bl	80072d0 <__assert_func>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	6145      	str	r5, [r0, #20]
 8006f70:	6103      	str	r3, [r0, #16]
 8006f72:	0010      	movs	r0, r2
 8006f74:	b007      	add	sp, #28
 8006f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f78:	2600      	movs	r6, #0
 8006f7a:	42b0      	cmp	r0, r6
 8006f7c:	da03      	bge.n	8006f86 <__mdiff+0x46>
 8006f7e:	0023      	movs	r3, r4
 8006f80:	003c      	movs	r4, r7
 8006f82:	001f      	movs	r7, r3
 8006f84:	3601      	adds	r6, #1
 8006f86:	6861      	ldr	r1, [r4, #4]
 8006f88:	9800      	ldr	r0, [sp, #0]
 8006f8a:	f7ff fd2f 	bl	80069ec <_Balloc>
 8006f8e:	1e02      	subs	r2, r0, #0
 8006f90:	d103      	bne.n	8006f9a <__mdiff+0x5a>
 8006f92:	4b34      	ldr	r3, [pc, #208]	@ (8007064 <__mdiff+0x124>)
 8006f94:	4834      	ldr	r0, [pc, #208]	@ (8007068 <__mdiff+0x128>)
 8006f96:	4936      	ldr	r1, [pc, #216]	@ (8007070 <__mdiff+0x130>)
 8006f98:	e7e6      	b.n	8006f68 <__mdiff+0x28>
 8006f9a:	6923      	ldr	r3, [r4, #16]
 8006f9c:	3414      	adds	r4, #20
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	18e3      	adds	r3, r4, r3
 8006fa4:	0021      	movs	r1, r4
 8006fa6:	9401      	str	r4, [sp, #4]
 8006fa8:	003c      	movs	r4, r7
 8006faa:	9302      	str	r3, [sp, #8]
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	3414      	adds	r4, #20
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	18e3      	adds	r3, r4, r3
 8006fb4:	9303      	str	r3, [sp, #12]
 8006fb6:	0003      	movs	r3, r0
 8006fb8:	60c6      	str	r6, [r0, #12]
 8006fba:	468c      	mov	ip, r1
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	3314      	adds	r3, #20
 8006fc0:	9304      	str	r3, [sp, #16]
 8006fc2:	9305      	str	r3, [sp, #20]
 8006fc4:	4663      	mov	r3, ip
 8006fc6:	cb20      	ldmia	r3!, {r5}
 8006fc8:	b2a9      	uxth	r1, r5
 8006fca:	000e      	movs	r6, r1
 8006fcc:	469c      	mov	ip, r3
 8006fce:	cc08      	ldmia	r4!, {r3}
 8006fd0:	0c2d      	lsrs	r5, r5, #16
 8006fd2:	b299      	uxth	r1, r3
 8006fd4:	1a71      	subs	r1, r6, r1
 8006fd6:	1809      	adds	r1, r1, r0
 8006fd8:	0c1b      	lsrs	r3, r3, #16
 8006fda:	1408      	asrs	r0, r1, #16
 8006fdc:	1aeb      	subs	r3, r5, r3
 8006fde:	181b      	adds	r3, r3, r0
 8006fe0:	1418      	asrs	r0, r3, #16
 8006fe2:	b289      	uxth	r1, r1
 8006fe4:	041b      	lsls	r3, r3, #16
 8006fe6:	4319      	orrs	r1, r3
 8006fe8:	9b05      	ldr	r3, [sp, #20]
 8006fea:	c302      	stmia	r3!, {r1}
 8006fec:	9305      	str	r3, [sp, #20]
 8006fee:	9b03      	ldr	r3, [sp, #12]
 8006ff0:	42a3      	cmp	r3, r4
 8006ff2:	d8e7      	bhi.n	8006fc4 <__mdiff+0x84>
 8006ff4:	0039      	movs	r1, r7
 8006ff6:	9c03      	ldr	r4, [sp, #12]
 8006ff8:	3115      	adds	r1, #21
 8006ffa:	2304      	movs	r3, #4
 8006ffc:	428c      	cmp	r4, r1
 8006ffe:	d304      	bcc.n	800700a <__mdiff+0xca>
 8007000:	1be3      	subs	r3, r4, r7
 8007002:	3b15      	subs	r3, #21
 8007004:	089b      	lsrs	r3, r3, #2
 8007006:	3301      	adds	r3, #1
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	9901      	ldr	r1, [sp, #4]
 800700c:	18cd      	adds	r5, r1, r3
 800700e:	9904      	ldr	r1, [sp, #16]
 8007010:	002e      	movs	r6, r5
 8007012:	18cb      	adds	r3, r1, r3
 8007014:	001f      	movs	r7, r3
 8007016:	9902      	ldr	r1, [sp, #8]
 8007018:	428e      	cmp	r6, r1
 800701a:	d311      	bcc.n	8007040 <__mdiff+0x100>
 800701c:	9c02      	ldr	r4, [sp, #8]
 800701e:	1ee9      	subs	r1, r5, #3
 8007020:	2000      	movs	r0, #0
 8007022:	428c      	cmp	r4, r1
 8007024:	d304      	bcc.n	8007030 <__mdiff+0xf0>
 8007026:	0021      	movs	r1, r4
 8007028:	3103      	adds	r1, #3
 800702a:	1b49      	subs	r1, r1, r5
 800702c:	0889      	lsrs	r1, r1, #2
 800702e:	0088      	lsls	r0, r1, #2
 8007030:	181b      	adds	r3, r3, r0
 8007032:	3b04      	subs	r3, #4
 8007034:	6819      	ldr	r1, [r3, #0]
 8007036:	2900      	cmp	r1, #0
 8007038:	d010      	beq.n	800705c <__mdiff+0x11c>
 800703a:	9b00      	ldr	r3, [sp, #0]
 800703c:	6113      	str	r3, [r2, #16]
 800703e:	e798      	b.n	8006f72 <__mdiff+0x32>
 8007040:	4684      	mov	ip, r0
 8007042:	ce02      	ldmia	r6!, {r1}
 8007044:	b288      	uxth	r0, r1
 8007046:	4460      	add	r0, ip
 8007048:	1400      	asrs	r0, r0, #16
 800704a:	0c0c      	lsrs	r4, r1, #16
 800704c:	1904      	adds	r4, r0, r4
 800704e:	4461      	add	r1, ip
 8007050:	1420      	asrs	r0, r4, #16
 8007052:	b289      	uxth	r1, r1
 8007054:	0424      	lsls	r4, r4, #16
 8007056:	4321      	orrs	r1, r4
 8007058:	c702      	stmia	r7!, {r1}
 800705a:	e7dc      	b.n	8007016 <__mdiff+0xd6>
 800705c:	9900      	ldr	r1, [sp, #0]
 800705e:	3901      	subs	r1, #1
 8007060:	9100      	str	r1, [sp, #0]
 8007062:	e7e6      	b.n	8007032 <__mdiff+0xf2>
 8007064:	08007b1c 	.word	0x08007b1c
 8007068:	08007b2d 	.word	0x08007b2d
 800706c:	00000237 	.word	0x00000237
 8007070:	00000245 	.word	0x00000245

08007074 <__d2b>:
 8007074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007076:	2101      	movs	r1, #1
 8007078:	0016      	movs	r6, r2
 800707a:	001f      	movs	r7, r3
 800707c:	f7ff fcb6 	bl	80069ec <_Balloc>
 8007080:	1e04      	subs	r4, r0, #0
 8007082:	d105      	bne.n	8007090 <__d2b+0x1c>
 8007084:	0022      	movs	r2, r4
 8007086:	4b25      	ldr	r3, [pc, #148]	@ (800711c <__d2b+0xa8>)
 8007088:	4825      	ldr	r0, [pc, #148]	@ (8007120 <__d2b+0xac>)
 800708a:	4926      	ldr	r1, [pc, #152]	@ (8007124 <__d2b+0xb0>)
 800708c:	f000 f920 	bl	80072d0 <__assert_func>
 8007090:	033b      	lsls	r3, r7, #12
 8007092:	007d      	lsls	r5, r7, #1
 8007094:	0b1b      	lsrs	r3, r3, #12
 8007096:	0d6d      	lsrs	r5, r5, #21
 8007098:	d002      	beq.n	80070a0 <__d2b+0x2c>
 800709a:	2280      	movs	r2, #128	@ 0x80
 800709c:	0352      	lsls	r2, r2, #13
 800709e:	4313      	orrs	r3, r2
 80070a0:	9301      	str	r3, [sp, #4]
 80070a2:	2e00      	cmp	r6, #0
 80070a4:	d025      	beq.n	80070f2 <__d2b+0x7e>
 80070a6:	4668      	mov	r0, sp
 80070a8:	9600      	str	r6, [sp, #0]
 80070aa:	f7ff fd6c 	bl	8006b86 <__lo0bits>
 80070ae:	9b01      	ldr	r3, [sp, #4]
 80070b0:	9900      	ldr	r1, [sp, #0]
 80070b2:	2800      	cmp	r0, #0
 80070b4:	d01b      	beq.n	80070ee <__d2b+0x7a>
 80070b6:	2220      	movs	r2, #32
 80070b8:	001e      	movs	r6, r3
 80070ba:	1a12      	subs	r2, r2, r0
 80070bc:	4096      	lsls	r6, r2
 80070be:	0032      	movs	r2, r6
 80070c0:	40c3      	lsrs	r3, r0
 80070c2:	430a      	orrs	r2, r1
 80070c4:	6162      	str	r2, [r4, #20]
 80070c6:	9301      	str	r3, [sp, #4]
 80070c8:	9e01      	ldr	r6, [sp, #4]
 80070ca:	61a6      	str	r6, [r4, #24]
 80070cc:	1e73      	subs	r3, r6, #1
 80070ce:	419e      	sbcs	r6, r3
 80070d0:	3601      	adds	r6, #1
 80070d2:	6126      	str	r6, [r4, #16]
 80070d4:	2d00      	cmp	r5, #0
 80070d6:	d014      	beq.n	8007102 <__d2b+0x8e>
 80070d8:	2635      	movs	r6, #53	@ 0x35
 80070da:	4b13      	ldr	r3, [pc, #76]	@ (8007128 <__d2b+0xb4>)
 80070dc:	18ed      	adds	r5, r5, r3
 80070de:	9b08      	ldr	r3, [sp, #32]
 80070e0:	182d      	adds	r5, r5, r0
 80070e2:	601d      	str	r5, [r3, #0]
 80070e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070e6:	1a36      	subs	r6, r6, r0
 80070e8:	601e      	str	r6, [r3, #0]
 80070ea:	0020      	movs	r0, r4
 80070ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070ee:	6161      	str	r1, [r4, #20]
 80070f0:	e7ea      	b.n	80070c8 <__d2b+0x54>
 80070f2:	a801      	add	r0, sp, #4
 80070f4:	f7ff fd47 	bl	8006b86 <__lo0bits>
 80070f8:	9b01      	ldr	r3, [sp, #4]
 80070fa:	2601      	movs	r6, #1
 80070fc:	6163      	str	r3, [r4, #20]
 80070fe:	3020      	adds	r0, #32
 8007100:	e7e7      	b.n	80070d2 <__d2b+0x5e>
 8007102:	4b0a      	ldr	r3, [pc, #40]	@ (800712c <__d2b+0xb8>)
 8007104:	18c0      	adds	r0, r0, r3
 8007106:	9b08      	ldr	r3, [sp, #32]
 8007108:	6018      	str	r0, [r3, #0]
 800710a:	4b09      	ldr	r3, [pc, #36]	@ (8007130 <__d2b+0xbc>)
 800710c:	18f3      	adds	r3, r6, r3
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	18e3      	adds	r3, r4, r3
 8007112:	6958      	ldr	r0, [r3, #20]
 8007114:	f7ff fd16 	bl	8006b44 <__hi0bits>
 8007118:	0176      	lsls	r6, r6, #5
 800711a:	e7e3      	b.n	80070e4 <__d2b+0x70>
 800711c:	08007b1c 	.word	0x08007b1c
 8007120:	08007b2d 	.word	0x08007b2d
 8007124:	0000030f 	.word	0x0000030f
 8007128:	fffffbcd 	.word	0xfffffbcd
 800712c:	fffffbce 	.word	0xfffffbce
 8007130:	3fffffff 	.word	0x3fffffff

08007134 <__sflush_r>:
 8007134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007136:	220c      	movs	r2, #12
 8007138:	5e8b      	ldrsh	r3, [r1, r2]
 800713a:	0005      	movs	r5, r0
 800713c:	000c      	movs	r4, r1
 800713e:	071a      	lsls	r2, r3, #28
 8007140:	d456      	bmi.n	80071f0 <__sflush_r+0xbc>
 8007142:	684a      	ldr	r2, [r1, #4]
 8007144:	2a00      	cmp	r2, #0
 8007146:	dc02      	bgt.n	800714e <__sflush_r+0x1a>
 8007148:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800714a:	2a00      	cmp	r2, #0
 800714c:	dd4e      	ble.n	80071ec <__sflush_r+0xb8>
 800714e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007150:	2f00      	cmp	r7, #0
 8007152:	d04b      	beq.n	80071ec <__sflush_r+0xb8>
 8007154:	2200      	movs	r2, #0
 8007156:	2080      	movs	r0, #128	@ 0x80
 8007158:	682e      	ldr	r6, [r5, #0]
 800715a:	602a      	str	r2, [r5, #0]
 800715c:	001a      	movs	r2, r3
 800715e:	0140      	lsls	r0, r0, #5
 8007160:	6a21      	ldr	r1, [r4, #32]
 8007162:	4002      	ands	r2, r0
 8007164:	4203      	tst	r3, r0
 8007166:	d033      	beq.n	80071d0 <__sflush_r+0x9c>
 8007168:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800716a:	89a3      	ldrh	r3, [r4, #12]
 800716c:	075b      	lsls	r3, r3, #29
 800716e:	d506      	bpl.n	800717e <__sflush_r+0x4a>
 8007170:	6863      	ldr	r3, [r4, #4]
 8007172:	1ad2      	subs	r2, r2, r3
 8007174:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <__sflush_r+0x4a>
 800717a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800717c:	1ad2      	subs	r2, r2, r3
 800717e:	2300      	movs	r3, #0
 8007180:	0028      	movs	r0, r5
 8007182:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007184:	6a21      	ldr	r1, [r4, #32]
 8007186:	47b8      	blx	r7
 8007188:	89a2      	ldrh	r2, [r4, #12]
 800718a:	1c43      	adds	r3, r0, #1
 800718c:	d106      	bne.n	800719c <__sflush_r+0x68>
 800718e:	6829      	ldr	r1, [r5, #0]
 8007190:	291d      	cmp	r1, #29
 8007192:	d846      	bhi.n	8007222 <__sflush_r+0xee>
 8007194:	4b29      	ldr	r3, [pc, #164]	@ (800723c <__sflush_r+0x108>)
 8007196:	410b      	asrs	r3, r1
 8007198:	07db      	lsls	r3, r3, #31
 800719a:	d442      	bmi.n	8007222 <__sflush_r+0xee>
 800719c:	2300      	movs	r3, #0
 800719e:	6063      	str	r3, [r4, #4]
 80071a0:	6923      	ldr	r3, [r4, #16]
 80071a2:	6023      	str	r3, [r4, #0]
 80071a4:	04d2      	lsls	r2, r2, #19
 80071a6:	d505      	bpl.n	80071b4 <__sflush_r+0x80>
 80071a8:	1c43      	adds	r3, r0, #1
 80071aa:	d102      	bne.n	80071b2 <__sflush_r+0x7e>
 80071ac:	682b      	ldr	r3, [r5, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d100      	bne.n	80071b4 <__sflush_r+0x80>
 80071b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80071b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071b6:	602e      	str	r6, [r5, #0]
 80071b8:	2900      	cmp	r1, #0
 80071ba:	d017      	beq.n	80071ec <__sflush_r+0xb8>
 80071bc:	0023      	movs	r3, r4
 80071be:	3344      	adds	r3, #68	@ 0x44
 80071c0:	4299      	cmp	r1, r3
 80071c2:	d002      	beq.n	80071ca <__sflush_r+0x96>
 80071c4:	0028      	movs	r0, r5
 80071c6:	f7ff fb0b 	bl	80067e0 <_free_r>
 80071ca:	2300      	movs	r3, #0
 80071cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80071ce:	e00d      	b.n	80071ec <__sflush_r+0xb8>
 80071d0:	2301      	movs	r3, #1
 80071d2:	0028      	movs	r0, r5
 80071d4:	47b8      	blx	r7
 80071d6:	0002      	movs	r2, r0
 80071d8:	1c43      	adds	r3, r0, #1
 80071da:	d1c6      	bne.n	800716a <__sflush_r+0x36>
 80071dc:	682b      	ldr	r3, [r5, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d0c3      	beq.n	800716a <__sflush_r+0x36>
 80071e2:	2b1d      	cmp	r3, #29
 80071e4:	d001      	beq.n	80071ea <__sflush_r+0xb6>
 80071e6:	2b16      	cmp	r3, #22
 80071e8:	d11a      	bne.n	8007220 <__sflush_r+0xec>
 80071ea:	602e      	str	r6, [r5, #0]
 80071ec:	2000      	movs	r0, #0
 80071ee:	e01e      	b.n	800722e <__sflush_r+0xfa>
 80071f0:	690e      	ldr	r6, [r1, #16]
 80071f2:	2e00      	cmp	r6, #0
 80071f4:	d0fa      	beq.n	80071ec <__sflush_r+0xb8>
 80071f6:	680f      	ldr	r7, [r1, #0]
 80071f8:	600e      	str	r6, [r1, #0]
 80071fa:	1bba      	subs	r2, r7, r6
 80071fc:	9201      	str	r2, [sp, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	079b      	lsls	r3, r3, #30
 8007202:	d100      	bne.n	8007206 <__sflush_r+0xd2>
 8007204:	694a      	ldr	r2, [r1, #20]
 8007206:	60a2      	str	r2, [r4, #8]
 8007208:	9b01      	ldr	r3, [sp, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	ddee      	ble.n	80071ec <__sflush_r+0xb8>
 800720e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007210:	0032      	movs	r2, r6
 8007212:	001f      	movs	r7, r3
 8007214:	0028      	movs	r0, r5
 8007216:	9b01      	ldr	r3, [sp, #4]
 8007218:	6a21      	ldr	r1, [r4, #32]
 800721a:	47b8      	blx	r7
 800721c:	2800      	cmp	r0, #0
 800721e:	dc07      	bgt.n	8007230 <__sflush_r+0xfc>
 8007220:	89a2      	ldrh	r2, [r4, #12]
 8007222:	2340      	movs	r3, #64	@ 0x40
 8007224:	2001      	movs	r0, #1
 8007226:	4313      	orrs	r3, r2
 8007228:	b21b      	sxth	r3, r3
 800722a:	81a3      	strh	r3, [r4, #12]
 800722c:	4240      	negs	r0, r0
 800722e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007230:	9b01      	ldr	r3, [sp, #4]
 8007232:	1836      	adds	r6, r6, r0
 8007234:	1a1b      	subs	r3, r3, r0
 8007236:	9301      	str	r3, [sp, #4]
 8007238:	e7e6      	b.n	8007208 <__sflush_r+0xd4>
 800723a:	46c0      	nop			@ (mov r8, r8)
 800723c:	dfbffffe 	.word	0xdfbffffe

08007240 <_fflush_r>:
 8007240:	690b      	ldr	r3, [r1, #16]
 8007242:	b570      	push	{r4, r5, r6, lr}
 8007244:	0005      	movs	r5, r0
 8007246:	000c      	movs	r4, r1
 8007248:	2b00      	cmp	r3, #0
 800724a:	d102      	bne.n	8007252 <_fflush_r+0x12>
 800724c:	2500      	movs	r5, #0
 800724e:	0028      	movs	r0, r5
 8007250:	bd70      	pop	{r4, r5, r6, pc}
 8007252:	2800      	cmp	r0, #0
 8007254:	d004      	beq.n	8007260 <_fflush_r+0x20>
 8007256:	6a03      	ldr	r3, [r0, #32]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <_fflush_r+0x20>
 800725c:	f7fe fb2c 	bl	80058b8 <__sinit>
 8007260:	220c      	movs	r2, #12
 8007262:	5ea3      	ldrsh	r3, [r4, r2]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d0f1      	beq.n	800724c <_fflush_r+0xc>
 8007268:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800726a:	07d2      	lsls	r2, r2, #31
 800726c:	d404      	bmi.n	8007278 <_fflush_r+0x38>
 800726e:	059b      	lsls	r3, r3, #22
 8007270:	d402      	bmi.n	8007278 <_fflush_r+0x38>
 8007272:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007274:	f7fe fc25 	bl	8005ac2 <__retarget_lock_acquire_recursive>
 8007278:	0028      	movs	r0, r5
 800727a:	0021      	movs	r1, r4
 800727c:	f7ff ff5a 	bl	8007134 <__sflush_r>
 8007280:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007282:	0005      	movs	r5, r0
 8007284:	07db      	lsls	r3, r3, #31
 8007286:	d4e2      	bmi.n	800724e <_fflush_r+0xe>
 8007288:	89a3      	ldrh	r3, [r4, #12]
 800728a:	059b      	lsls	r3, r3, #22
 800728c:	d4df      	bmi.n	800724e <_fflush_r+0xe>
 800728e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007290:	f7fe fc18 	bl	8005ac4 <__retarget_lock_release_recursive>
 8007294:	e7db      	b.n	800724e <_fflush_r+0xe>
	...

08007298 <_sbrk_r>:
 8007298:	2300      	movs	r3, #0
 800729a:	b570      	push	{r4, r5, r6, lr}
 800729c:	4d06      	ldr	r5, [pc, #24]	@ (80072b8 <_sbrk_r+0x20>)
 800729e:	0004      	movs	r4, r0
 80072a0:	0008      	movs	r0, r1
 80072a2:	602b      	str	r3, [r5, #0]
 80072a4:	f7fb fed8 	bl	8003058 <_sbrk>
 80072a8:	1c43      	adds	r3, r0, #1
 80072aa:	d103      	bne.n	80072b4 <_sbrk_r+0x1c>
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d000      	beq.n	80072b4 <_sbrk_r+0x1c>
 80072b2:	6023      	str	r3, [r4, #0]
 80072b4:	bd70      	pop	{r4, r5, r6, pc}
 80072b6:	46c0      	nop			@ (mov r8, r8)
 80072b8:	200003ac 	.word	0x200003ac

080072bc <memcpy>:
 80072bc:	2300      	movs	r3, #0
 80072be:	b510      	push	{r4, lr}
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d100      	bne.n	80072c6 <memcpy+0xa>
 80072c4:	bd10      	pop	{r4, pc}
 80072c6:	5ccc      	ldrb	r4, [r1, r3]
 80072c8:	54c4      	strb	r4, [r0, r3]
 80072ca:	3301      	adds	r3, #1
 80072cc:	e7f8      	b.n	80072c0 <memcpy+0x4>
	...

080072d0 <__assert_func>:
 80072d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80072d2:	0014      	movs	r4, r2
 80072d4:	001a      	movs	r2, r3
 80072d6:	4b09      	ldr	r3, [pc, #36]	@ (80072fc <__assert_func+0x2c>)
 80072d8:	0005      	movs	r5, r0
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	000e      	movs	r6, r1
 80072de:	68d8      	ldr	r0, [r3, #12]
 80072e0:	4b07      	ldr	r3, [pc, #28]	@ (8007300 <__assert_func+0x30>)
 80072e2:	2c00      	cmp	r4, #0
 80072e4:	d101      	bne.n	80072ea <__assert_func+0x1a>
 80072e6:	4b07      	ldr	r3, [pc, #28]	@ (8007304 <__assert_func+0x34>)
 80072e8:	001c      	movs	r4, r3
 80072ea:	4907      	ldr	r1, [pc, #28]	@ (8007308 <__assert_func+0x38>)
 80072ec:	9301      	str	r3, [sp, #4]
 80072ee:	9402      	str	r4, [sp, #8]
 80072f0:	002b      	movs	r3, r5
 80072f2:	9600      	str	r6, [sp, #0]
 80072f4:	f000 f856 	bl	80073a4 <fiprintf>
 80072f8:	f000 f864 	bl	80073c4 <abort>
 80072fc:	20000018 	.word	0x20000018
 8007300:	08007c92 	.word	0x08007c92
 8007304:	08007ccd 	.word	0x08007ccd
 8007308:	08007c9f 	.word	0x08007c9f

0800730c <_calloc_r>:
 800730c:	b570      	push	{r4, r5, r6, lr}
 800730e:	0c0b      	lsrs	r3, r1, #16
 8007310:	0c15      	lsrs	r5, r2, #16
 8007312:	2b00      	cmp	r3, #0
 8007314:	d11e      	bne.n	8007354 <_calloc_r+0x48>
 8007316:	2d00      	cmp	r5, #0
 8007318:	d10c      	bne.n	8007334 <_calloc_r+0x28>
 800731a:	b289      	uxth	r1, r1
 800731c:	b294      	uxth	r4, r2
 800731e:	434c      	muls	r4, r1
 8007320:	0021      	movs	r1, r4
 8007322:	f7ff fad3 	bl	80068cc <_malloc_r>
 8007326:	1e05      	subs	r5, r0, #0
 8007328:	d01a      	beq.n	8007360 <_calloc_r+0x54>
 800732a:	0022      	movs	r2, r4
 800732c:	2100      	movs	r1, #0
 800732e:	f7fe fb43 	bl	80059b8 <memset>
 8007332:	e016      	b.n	8007362 <_calloc_r+0x56>
 8007334:	1c2b      	adds	r3, r5, #0
 8007336:	1c0c      	adds	r4, r1, #0
 8007338:	b289      	uxth	r1, r1
 800733a:	b292      	uxth	r2, r2
 800733c:	434a      	muls	r2, r1
 800733e:	b29b      	uxth	r3, r3
 8007340:	b2a1      	uxth	r1, r4
 8007342:	4359      	muls	r1, r3
 8007344:	0c14      	lsrs	r4, r2, #16
 8007346:	190c      	adds	r4, r1, r4
 8007348:	0c23      	lsrs	r3, r4, #16
 800734a:	d107      	bne.n	800735c <_calloc_r+0x50>
 800734c:	0424      	lsls	r4, r4, #16
 800734e:	b292      	uxth	r2, r2
 8007350:	4314      	orrs	r4, r2
 8007352:	e7e5      	b.n	8007320 <_calloc_r+0x14>
 8007354:	2d00      	cmp	r5, #0
 8007356:	d101      	bne.n	800735c <_calloc_r+0x50>
 8007358:	1c14      	adds	r4, r2, #0
 800735a:	e7ed      	b.n	8007338 <_calloc_r+0x2c>
 800735c:	230c      	movs	r3, #12
 800735e:	6003      	str	r3, [r0, #0]
 8007360:	2500      	movs	r5, #0
 8007362:	0028      	movs	r0, r5
 8007364:	bd70      	pop	{r4, r5, r6, pc}

08007366 <__ascii_mbtowc>:
 8007366:	b082      	sub	sp, #8
 8007368:	2900      	cmp	r1, #0
 800736a:	d100      	bne.n	800736e <__ascii_mbtowc+0x8>
 800736c:	a901      	add	r1, sp, #4
 800736e:	1e10      	subs	r0, r2, #0
 8007370:	d006      	beq.n	8007380 <__ascii_mbtowc+0x1a>
 8007372:	2b00      	cmp	r3, #0
 8007374:	d006      	beq.n	8007384 <__ascii_mbtowc+0x1e>
 8007376:	7813      	ldrb	r3, [r2, #0]
 8007378:	600b      	str	r3, [r1, #0]
 800737a:	7810      	ldrb	r0, [r2, #0]
 800737c:	1e43      	subs	r3, r0, #1
 800737e:	4198      	sbcs	r0, r3
 8007380:	b002      	add	sp, #8
 8007382:	4770      	bx	lr
 8007384:	2002      	movs	r0, #2
 8007386:	4240      	negs	r0, r0
 8007388:	e7fa      	b.n	8007380 <__ascii_mbtowc+0x1a>

0800738a <__ascii_wctomb>:
 800738a:	0003      	movs	r3, r0
 800738c:	1e08      	subs	r0, r1, #0
 800738e:	d005      	beq.n	800739c <__ascii_wctomb+0x12>
 8007390:	2aff      	cmp	r2, #255	@ 0xff
 8007392:	d904      	bls.n	800739e <__ascii_wctomb+0x14>
 8007394:	228a      	movs	r2, #138	@ 0x8a
 8007396:	2001      	movs	r0, #1
 8007398:	601a      	str	r2, [r3, #0]
 800739a:	4240      	negs	r0, r0
 800739c:	4770      	bx	lr
 800739e:	2001      	movs	r0, #1
 80073a0:	700a      	strb	r2, [r1, #0]
 80073a2:	e7fb      	b.n	800739c <__ascii_wctomb+0x12>

080073a4 <fiprintf>:
 80073a4:	b40e      	push	{r1, r2, r3}
 80073a6:	b517      	push	{r0, r1, r2, r4, lr}
 80073a8:	4c05      	ldr	r4, [pc, #20]	@ (80073c0 <fiprintf+0x1c>)
 80073aa:	ab05      	add	r3, sp, #20
 80073ac:	cb04      	ldmia	r3!, {r2}
 80073ae:	0001      	movs	r1, r0
 80073b0:	6820      	ldr	r0, [r4, #0]
 80073b2:	9301      	str	r3, [sp, #4]
 80073b4:	f000 f834 	bl	8007420 <_vfiprintf_r>
 80073b8:	bc1e      	pop	{r1, r2, r3, r4}
 80073ba:	bc08      	pop	{r3}
 80073bc:	b003      	add	sp, #12
 80073be:	4718      	bx	r3
 80073c0:	20000018 	.word	0x20000018

080073c4 <abort>:
 80073c4:	2006      	movs	r0, #6
 80073c6:	b510      	push	{r4, lr}
 80073c8:	f000 fa10 	bl	80077ec <raise>
 80073cc:	2001      	movs	r0, #1
 80073ce:	f7fb fdd0 	bl	8002f72 <_exit>

080073d2 <__sfputc_r>:
 80073d2:	6893      	ldr	r3, [r2, #8]
 80073d4:	b510      	push	{r4, lr}
 80073d6:	3b01      	subs	r3, #1
 80073d8:	6093      	str	r3, [r2, #8]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	da04      	bge.n	80073e8 <__sfputc_r+0x16>
 80073de:	6994      	ldr	r4, [r2, #24]
 80073e0:	42a3      	cmp	r3, r4
 80073e2:	db07      	blt.n	80073f4 <__sfputc_r+0x22>
 80073e4:	290a      	cmp	r1, #10
 80073e6:	d005      	beq.n	80073f4 <__sfputc_r+0x22>
 80073e8:	6813      	ldr	r3, [r2, #0]
 80073ea:	1c58      	adds	r0, r3, #1
 80073ec:	6010      	str	r0, [r2, #0]
 80073ee:	7019      	strb	r1, [r3, #0]
 80073f0:	0008      	movs	r0, r1
 80073f2:	bd10      	pop	{r4, pc}
 80073f4:	f000 f930 	bl	8007658 <__swbuf_r>
 80073f8:	0001      	movs	r1, r0
 80073fa:	e7f9      	b.n	80073f0 <__sfputc_r+0x1e>

080073fc <__sfputs_r>:
 80073fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fe:	0006      	movs	r6, r0
 8007400:	000f      	movs	r7, r1
 8007402:	0014      	movs	r4, r2
 8007404:	18d5      	adds	r5, r2, r3
 8007406:	42ac      	cmp	r4, r5
 8007408:	d101      	bne.n	800740e <__sfputs_r+0x12>
 800740a:	2000      	movs	r0, #0
 800740c:	e007      	b.n	800741e <__sfputs_r+0x22>
 800740e:	7821      	ldrb	r1, [r4, #0]
 8007410:	003a      	movs	r2, r7
 8007412:	0030      	movs	r0, r6
 8007414:	f7ff ffdd 	bl	80073d2 <__sfputc_r>
 8007418:	3401      	adds	r4, #1
 800741a:	1c43      	adds	r3, r0, #1
 800741c:	d1f3      	bne.n	8007406 <__sfputs_r+0xa>
 800741e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007420 <_vfiprintf_r>:
 8007420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007422:	b0a1      	sub	sp, #132	@ 0x84
 8007424:	000f      	movs	r7, r1
 8007426:	0015      	movs	r5, r2
 8007428:	001e      	movs	r6, r3
 800742a:	9003      	str	r0, [sp, #12]
 800742c:	2800      	cmp	r0, #0
 800742e:	d004      	beq.n	800743a <_vfiprintf_r+0x1a>
 8007430:	6a03      	ldr	r3, [r0, #32]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <_vfiprintf_r+0x1a>
 8007436:	f7fe fa3f 	bl	80058b8 <__sinit>
 800743a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800743c:	07db      	lsls	r3, r3, #31
 800743e:	d405      	bmi.n	800744c <_vfiprintf_r+0x2c>
 8007440:	89bb      	ldrh	r3, [r7, #12]
 8007442:	059b      	lsls	r3, r3, #22
 8007444:	d402      	bmi.n	800744c <_vfiprintf_r+0x2c>
 8007446:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007448:	f7fe fb3b 	bl	8005ac2 <__retarget_lock_acquire_recursive>
 800744c:	89bb      	ldrh	r3, [r7, #12]
 800744e:	071b      	lsls	r3, r3, #28
 8007450:	d502      	bpl.n	8007458 <_vfiprintf_r+0x38>
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d113      	bne.n	8007480 <_vfiprintf_r+0x60>
 8007458:	0039      	movs	r1, r7
 800745a:	9803      	ldr	r0, [sp, #12]
 800745c:	f000 f93e 	bl	80076dc <__swsetup_r>
 8007460:	2800      	cmp	r0, #0
 8007462:	d00d      	beq.n	8007480 <_vfiprintf_r+0x60>
 8007464:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007466:	07db      	lsls	r3, r3, #31
 8007468:	d503      	bpl.n	8007472 <_vfiprintf_r+0x52>
 800746a:	2001      	movs	r0, #1
 800746c:	4240      	negs	r0, r0
 800746e:	b021      	add	sp, #132	@ 0x84
 8007470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007472:	89bb      	ldrh	r3, [r7, #12]
 8007474:	059b      	lsls	r3, r3, #22
 8007476:	d4f8      	bmi.n	800746a <_vfiprintf_r+0x4a>
 8007478:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800747a:	f7fe fb23 	bl	8005ac4 <__retarget_lock_release_recursive>
 800747e:	e7f4      	b.n	800746a <_vfiprintf_r+0x4a>
 8007480:	2300      	movs	r3, #0
 8007482:	ac08      	add	r4, sp, #32
 8007484:	6163      	str	r3, [r4, #20]
 8007486:	3320      	adds	r3, #32
 8007488:	7663      	strb	r3, [r4, #25]
 800748a:	3310      	adds	r3, #16
 800748c:	76a3      	strb	r3, [r4, #26]
 800748e:	9607      	str	r6, [sp, #28]
 8007490:	002e      	movs	r6, r5
 8007492:	7833      	ldrb	r3, [r6, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <_vfiprintf_r+0x7c>
 8007498:	2b25      	cmp	r3, #37	@ 0x25
 800749a:	d148      	bne.n	800752e <_vfiprintf_r+0x10e>
 800749c:	1b73      	subs	r3, r6, r5
 800749e:	9305      	str	r3, [sp, #20]
 80074a0:	42ae      	cmp	r6, r5
 80074a2:	d00b      	beq.n	80074bc <_vfiprintf_r+0x9c>
 80074a4:	002a      	movs	r2, r5
 80074a6:	0039      	movs	r1, r7
 80074a8:	9803      	ldr	r0, [sp, #12]
 80074aa:	f7ff ffa7 	bl	80073fc <__sfputs_r>
 80074ae:	3001      	adds	r0, #1
 80074b0:	d100      	bne.n	80074b4 <_vfiprintf_r+0x94>
 80074b2:	e0ae      	b.n	8007612 <_vfiprintf_r+0x1f2>
 80074b4:	6963      	ldr	r3, [r4, #20]
 80074b6:	9a05      	ldr	r2, [sp, #20]
 80074b8:	189b      	adds	r3, r3, r2
 80074ba:	6163      	str	r3, [r4, #20]
 80074bc:	7833      	ldrb	r3, [r6, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d100      	bne.n	80074c4 <_vfiprintf_r+0xa4>
 80074c2:	e0a6      	b.n	8007612 <_vfiprintf_r+0x1f2>
 80074c4:	2201      	movs	r2, #1
 80074c6:	2300      	movs	r3, #0
 80074c8:	4252      	negs	r2, r2
 80074ca:	6062      	str	r2, [r4, #4]
 80074cc:	a904      	add	r1, sp, #16
 80074ce:	3254      	adds	r2, #84	@ 0x54
 80074d0:	1852      	adds	r2, r2, r1
 80074d2:	1c75      	adds	r5, r6, #1
 80074d4:	6023      	str	r3, [r4, #0]
 80074d6:	60e3      	str	r3, [r4, #12]
 80074d8:	60a3      	str	r3, [r4, #8]
 80074da:	7013      	strb	r3, [r2, #0]
 80074dc:	65a3      	str	r3, [r4, #88]	@ 0x58
 80074de:	4b59      	ldr	r3, [pc, #356]	@ (8007644 <_vfiprintf_r+0x224>)
 80074e0:	2205      	movs	r2, #5
 80074e2:	0018      	movs	r0, r3
 80074e4:	7829      	ldrb	r1, [r5, #0]
 80074e6:	9305      	str	r3, [sp, #20]
 80074e8:	f7fe faed 	bl	8005ac6 <memchr>
 80074ec:	1c6e      	adds	r6, r5, #1
 80074ee:	2800      	cmp	r0, #0
 80074f0:	d11f      	bne.n	8007532 <_vfiprintf_r+0x112>
 80074f2:	6822      	ldr	r2, [r4, #0]
 80074f4:	06d3      	lsls	r3, r2, #27
 80074f6:	d504      	bpl.n	8007502 <_vfiprintf_r+0xe2>
 80074f8:	2353      	movs	r3, #83	@ 0x53
 80074fa:	a904      	add	r1, sp, #16
 80074fc:	185b      	adds	r3, r3, r1
 80074fe:	2120      	movs	r1, #32
 8007500:	7019      	strb	r1, [r3, #0]
 8007502:	0713      	lsls	r3, r2, #28
 8007504:	d504      	bpl.n	8007510 <_vfiprintf_r+0xf0>
 8007506:	2353      	movs	r3, #83	@ 0x53
 8007508:	a904      	add	r1, sp, #16
 800750a:	185b      	adds	r3, r3, r1
 800750c:	212b      	movs	r1, #43	@ 0x2b
 800750e:	7019      	strb	r1, [r3, #0]
 8007510:	782b      	ldrb	r3, [r5, #0]
 8007512:	2b2a      	cmp	r3, #42	@ 0x2a
 8007514:	d016      	beq.n	8007544 <_vfiprintf_r+0x124>
 8007516:	002e      	movs	r6, r5
 8007518:	2100      	movs	r1, #0
 800751a:	200a      	movs	r0, #10
 800751c:	68e3      	ldr	r3, [r4, #12]
 800751e:	7832      	ldrb	r2, [r6, #0]
 8007520:	1c75      	adds	r5, r6, #1
 8007522:	3a30      	subs	r2, #48	@ 0x30
 8007524:	2a09      	cmp	r2, #9
 8007526:	d950      	bls.n	80075ca <_vfiprintf_r+0x1aa>
 8007528:	2900      	cmp	r1, #0
 800752a:	d111      	bne.n	8007550 <_vfiprintf_r+0x130>
 800752c:	e017      	b.n	800755e <_vfiprintf_r+0x13e>
 800752e:	3601      	adds	r6, #1
 8007530:	e7af      	b.n	8007492 <_vfiprintf_r+0x72>
 8007532:	9b05      	ldr	r3, [sp, #20]
 8007534:	6822      	ldr	r2, [r4, #0]
 8007536:	1ac0      	subs	r0, r0, r3
 8007538:	2301      	movs	r3, #1
 800753a:	4083      	lsls	r3, r0
 800753c:	4313      	orrs	r3, r2
 800753e:	0035      	movs	r5, r6
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	e7cc      	b.n	80074de <_vfiprintf_r+0xbe>
 8007544:	9b07      	ldr	r3, [sp, #28]
 8007546:	1d19      	adds	r1, r3, #4
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	9107      	str	r1, [sp, #28]
 800754c:	2b00      	cmp	r3, #0
 800754e:	db01      	blt.n	8007554 <_vfiprintf_r+0x134>
 8007550:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007552:	e004      	b.n	800755e <_vfiprintf_r+0x13e>
 8007554:	425b      	negs	r3, r3
 8007556:	60e3      	str	r3, [r4, #12]
 8007558:	2302      	movs	r3, #2
 800755a:	4313      	orrs	r3, r2
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	7833      	ldrb	r3, [r6, #0]
 8007560:	2b2e      	cmp	r3, #46	@ 0x2e
 8007562:	d10c      	bne.n	800757e <_vfiprintf_r+0x15e>
 8007564:	7873      	ldrb	r3, [r6, #1]
 8007566:	2b2a      	cmp	r3, #42	@ 0x2a
 8007568:	d134      	bne.n	80075d4 <_vfiprintf_r+0x1b4>
 800756a:	9b07      	ldr	r3, [sp, #28]
 800756c:	3602      	adds	r6, #2
 800756e:	1d1a      	adds	r2, r3, #4
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	9207      	str	r2, [sp, #28]
 8007574:	2b00      	cmp	r3, #0
 8007576:	da01      	bge.n	800757c <_vfiprintf_r+0x15c>
 8007578:	2301      	movs	r3, #1
 800757a:	425b      	negs	r3, r3
 800757c:	9309      	str	r3, [sp, #36]	@ 0x24
 800757e:	4d32      	ldr	r5, [pc, #200]	@ (8007648 <_vfiprintf_r+0x228>)
 8007580:	2203      	movs	r2, #3
 8007582:	0028      	movs	r0, r5
 8007584:	7831      	ldrb	r1, [r6, #0]
 8007586:	f7fe fa9e 	bl	8005ac6 <memchr>
 800758a:	2800      	cmp	r0, #0
 800758c:	d006      	beq.n	800759c <_vfiprintf_r+0x17c>
 800758e:	2340      	movs	r3, #64	@ 0x40
 8007590:	1b40      	subs	r0, r0, r5
 8007592:	4083      	lsls	r3, r0
 8007594:	6822      	ldr	r2, [r4, #0]
 8007596:	3601      	adds	r6, #1
 8007598:	4313      	orrs	r3, r2
 800759a:	6023      	str	r3, [r4, #0]
 800759c:	7831      	ldrb	r1, [r6, #0]
 800759e:	2206      	movs	r2, #6
 80075a0:	482a      	ldr	r0, [pc, #168]	@ (800764c <_vfiprintf_r+0x22c>)
 80075a2:	1c75      	adds	r5, r6, #1
 80075a4:	7621      	strb	r1, [r4, #24]
 80075a6:	f7fe fa8e 	bl	8005ac6 <memchr>
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d040      	beq.n	8007630 <_vfiprintf_r+0x210>
 80075ae:	4b28      	ldr	r3, [pc, #160]	@ (8007650 <_vfiprintf_r+0x230>)
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d122      	bne.n	80075fa <_vfiprintf_r+0x1da>
 80075b4:	2207      	movs	r2, #7
 80075b6:	9b07      	ldr	r3, [sp, #28]
 80075b8:	3307      	adds	r3, #7
 80075ba:	4393      	bics	r3, r2
 80075bc:	3308      	adds	r3, #8
 80075be:	9307      	str	r3, [sp, #28]
 80075c0:	6963      	ldr	r3, [r4, #20]
 80075c2:	9a04      	ldr	r2, [sp, #16]
 80075c4:	189b      	adds	r3, r3, r2
 80075c6:	6163      	str	r3, [r4, #20]
 80075c8:	e762      	b.n	8007490 <_vfiprintf_r+0x70>
 80075ca:	4343      	muls	r3, r0
 80075cc:	002e      	movs	r6, r5
 80075ce:	2101      	movs	r1, #1
 80075d0:	189b      	adds	r3, r3, r2
 80075d2:	e7a4      	b.n	800751e <_vfiprintf_r+0xfe>
 80075d4:	2300      	movs	r3, #0
 80075d6:	200a      	movs	r0, #10
 80075d8:	0019      	movs	r1, r3
 80075da:	3601      	adds	r6, #1
 80075dc:	6063      	str	r3, [r4, #4]
 80075de:	7832      	ldrb	r2, [r6, #0]
 80075e0:	1c75      	adds	r5, r6, #1
 80075e2:	3a30      	subs	r2, #48	@ 0x30
 80075e4:	2a09      	cmp	r2, #9
 80075e6:	d903      	bls.n	80075f0 <_vfiprintf_r+0x1d0>
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d0c8      	beq.n	800757e <_vfiprintf_r+0x15e>
 80075ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80075ee:	e7c6      	b.n	800757e <_vfiprintf_r+0x15e>
 80075f0:	4341      	muls	r1, r0
 80075f2:	002e      	movs	r6, r5
 80075f4:	2301      	movs	r3, #1
 80075f6:	1889      	adds	r1, r1, r2
 80075f8:	e7f1      	b.n	80075de <_vfiprintf_r+0x1be>
 80075fa:	aa07      	add	r2, sp, #28
 80075fc:	9200      	str	r2, [sp, #0]
 80075fe:	0021      	movs	r1, r4
 8007600:	003a      	movs	r2, r7
 8007602:	4b14      	ldr	r3, [pc, #80]	@ (8007654 <_vfiprintf_r+0x234>)
 8007604:	9803      	ldr	r0, [sp, #12]
 8007606:	f7fd fd0b 	bl	8005020 <_printf_float>
 800760a:	9004      	str	r0, [sp, #16]
 800760c:	9b04      	ldr	r3, [sp, #16]
 800760e:	3301      	adds	r3, #1
 8007610:	d1d6      	bne.n	80075c0 <_vfiprintf_r+0x1a0>
 8007612:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007614:	07db      	lsls	r3, r3, #31
 8007616:	d405      	bmi.n	8007624 <_vfiprintf_r+0x204>
 8007618:	89bb      	ldrh	r3, [r7, #12]
 800761a:	059b      	lsls	r3, r3, #22
 800761c:	d402      	bmi.n	8007624 <_vfiprintf_r+0x204>
 800761e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007620:	f7fe fa50 	bl	8005ac4 <__retarget_lock_release_recursive>
 8007624:	89bb      	ldrh	r3, [r7, #12]
 8007626:	065b      	lsls	r3, r3, #25
 8007628:	d500      	bpl.n	800762c <_vfiprintf_r+0x20c>
 800762a:	e71e      	b.n	800746a <_vfiprintf_r+0x4a>
 800762c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800762e:	e71e      	b.n	800746e <_vfiprintf_r+0x4e>
 8007630:	aa07      	add	r2, sp, #28
 8007632:	9200      	str	r2, [sp, #0]
 8007634:	0021      	movs	r1, r4
 8007636:	003a      	movs	r2, r7
 8007638:	4b06      	ldr	r3, [pc, #24]	@ (8007654 <_vfiprintf_r+0x234>)
 800763a:	9803      	ldr	r0, [sp, #12]
 800763c:	f7fd ff9e 	bl	800557c <_printf_i>
 8007640:	e7e3      	b.n	800760a <_vfiprintf_r+0x1ea>
 8007642:	46c0      	nop			@ (mov r8, r8)
 8007644:	08007dcf 	.word	0x08007dcf
 8007648:	08007dd5 	.word	0x08007dd5
 800764c:	08007dd9 	.word	0x08007dd9
 8007650:	08005021 	.word	0x08005021
 8007654:	080073fd 	.word	0x080073fd

08007658 <__swbuf_r>:
 8007658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765a:	0006      	movs	r6, r0
 800765c:	000d      	movs	r5, r1
 800765e:	0014      	movs	r4, r2
 8007660:	2800      	cmp	r0, #0
 8007662:	d004      	beq.n	800766e <__swbuf_r+0x16>
 8007664:	6a03      	ldr	r3, [r0, #32]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <__swbuf_r+0x16>
 800766a:	f7fe f925 	bl	80058b8 <__sinit>
 800766e:	69a3      	ldr	r3, [r4, #24]
 8007670:	60a3      	str	r3, [r4, #8]
 8007672:	89a3      	ldrh	r3, [r4, #12]
 8007674:	071b      	lsls	r3, r3, #28
 8007676:	d502      	bpl.n	800767e <__swbuf_r+0x26>
 8007678:	6923      	ldr	r3, [r4, #16]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d109      	bne.n	8007692 <__swbuf_r+0x3a>
 800767e:	0021      	movs	r1, r4
 8007680:	0030      	movs	r0, r6
 8007682:	f000 f82b 	bl	80076dc <__swsetup_r>
 8007686:	2800      	cmp	r0, #0
 8007688:	d003      	beq.n	8007692 <__swbuf_r+0x3a>
 800768a:	2501      	movs	r5, #1
 800768c:	426d      	negs	r5, r5
 800768e:	0028      	movs	r0, r5
 8007690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007692:	6923      	ldr	r3, [r4, #16]
 8007694:	6820      	ldr	r0, [r4, #0]
 8007696:	b2ef      	uxtb	r7, r5
 8007698:	1ac0      	subs	r0, r0, r3
 800769a:	6963      	ldr	r3, [r4, #20]
 800769c:	b2ed      	uxtb	r5, r5
 800769e:	4283      	cmp	r3, r0
 80076a0:	dc05      	bgt.n	80076ae <__swbuf_r+0x56>
 80076a2:	0021      	movs	r1, r4
 80076a4:	0030      	movs	r0, r6
 80076a6:	f7ff fdcb 	bl	8007240 <_fflush_r>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	d1ed      	bne.n	800768a <__swbuf_r+0x32>
 80076ae:	68a3      	ldr	r3, [r4, #8]
 80076b0:	3001      	adds	r0, #1
 80076b2:	3b01      	subs	r3, #1
 80076b4:	60a3      	str	r3, [r4, #8]
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	1c5a      	adds	r2, r3, #1
 80076ba:	6022      	str	r2, [r4, #0]
 80076bc:	701f      	strb	r7, [r3, #0]
 80076be:	6963      	ldr	r3, [r4, #20]
 80076c0:	4283      	cmp	r3, r0
 80076c2:	d004      	beq.n	80076ce <__swbuf_r+0x76>
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	07db      	lsls	r3, r3, #31
 80076c8:	d5e1      	bpl.n	800768e <__swbuf_r+0x36>
 80076ca:	2d0a      	cmp	r5, #10
 80076cc:	d1df      	bne.n	800768e <__swbuf_r+0x36>
 80076ce:	0021      	movs	r1, r4
 80076d0:	0030      	movs	r0, r6
 80076d2:	f7ff fdb5 	bl	8007240 <_fflush_r>
 80076d6:	2800      	cmp	r0, #0
 80076d8:	d0d9      	beq.n	800768e <__swbuf_r+0x36>
 80076da:	e7d6      	b.n	800768a <__swbuf_r+0x32>

080076dc <__swsetup_r>:
 80076dc:	4b2d      	ldr	r3, [pc, #180]	@ (8007794 <__swsetup_r+0xb8>)
 80076de:	b570      	push	{r4, r5, r6, lr}
 80076e0:	0005      	movs	r5, r0
 80076e2:	6818      	ldr	r0, [r3, #0]
 80076e4:	000c      	movs	r4, r1
 80076e6:	2800      	cmp	r0, #0
 80076e8:	d004      	beq.n	80076f4 <__swsetup_r+0x18>
 80076ea:	6a03      	ldr	r3, [r0, #32]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d101      	bne.n	80076f4 <__swsetup_r+0x18>
 80076f0:	f7fe f8e2 	bl	80058b8 <__sinit>
 80076f4:	230c      	movs	r3, #12
 80076f6:	5ee2      	ldrsh	r2, [r4, r3]
 80076f8:	0713      	lsls	r3, r2, #28
 80076fa:	d423      	bmi.n	8007744 <__swsetup_r+0x68>
 80076fc:	06d3      	lsls	r3, r2, #27
 80076fe:	d407      	bmi.n	8007710 <__swsetup_r+0x34>
 8007700:	2309      	movs	r3, #9
 8007702:	602b      	str	r3, [r5, #0]
 8007704:	2340      	movs	r3, #64	@ 0x40
 8007706:	2001      	movs	r0, #1
 8007708:	4313      	orrs	r3, r2
 800770a:	81a3      	strh	r3, [r4, #12]
 800770c:	4240      	negs	r0, r0
 800770e:	e03a      	b.n	8007786 <__swsetup_r+0xaa>
 8007710:	0752      	lsls	r2, r2, #29
 8007712:	d513      	bpl.n	800773c <__swsetup_r+0x60>
 8007714:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007716:	2900      	cmp	r1, #0
 8007718:	d008      	beq.n	800772c <__swsetup_r+0x50>
 800771a:	0023      	movs	r3, r4
 800771c:	3344      	adds	r3, #68	@ 0x44
 800771e:	4299      	cmp	r1, r3
 8007720:	d002      	beq.n	8007728 <__swsetup_r+0x4c>
 8007722:	0028      	movs	r0, r5
 8007724:	f7ff f85c 	bl	80067e0 <_free_r>
 8007728:	2300      	movs	r3, #0
 800772a:	6363      	str	r3, [r4, #52]	@ 0x34
 800772c:	2224      	movs	r2, #36	@ 0x24
 800772e:	89a3      	ldrh	r3, [r4, #12]
 8007730:	4393      	bics	r3, r2
 8007732:	81a3      	strh	r3, [r4, #12]
 8007734:	2300      	movs	r3, #0
 8007736:	6063      	str	r3, [r4, #4]
 8007738:	6923      	ldr	r3, [r4, #16]
 800773a:	6023      	str	r3, [r4, #0]
 800773c:	2308      	movs	r3, #8
 800773e:	89a2      	ldrh	r2, [r4, #12]
 8007740:	4313      	orrs	r3, r2
 8007742:	81a3      	strh	r3, [r4, #12]
 8007744:	6923      	ldr	r3, [r4, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10b      	bne.n	8007762 <__swsetup_r+0x86>
 800774a:	21a0      	movs	r1, #160	@ 0xa0
 800774c:	2280      	movs	r2, #128	@ 0x80
 800774e:	89a3      	ldrh	r3, [r4, #12]
 8007750:	0089      	lsls	r1, r1, #2
 8007752:	0092      	lsls	r2, r2, #2
 8007754:	400b      	ands	r3, r1
 8007756:	4293      	cmp	r3, r2
 8007758:	d003      	beq.n	8007762 <__swsetup_r+0x86>
 800775a:	0021      	movs	r1, r4
 800775c:	0028      	movs	r0, r5
 800775e:	f000 f88f 	bl	8007880 <__smakebuf_r>
 8007762:	230c      	movs	r3, #12
 8007764:	5ee2      	ldrsh	r2, [r4, r3]
 8007766:	2101      	movs	r1, #1
 8007768:	0013      	movs	r3, r2
 800776a:	400b      	ands	r3, r1
 800776c:	420a      	tst	r2, r1
 800776e:	d00b      	beq.n	8007788 <__swsetup_r+0xac>
 8007770:	2300      	movs	r3, #0
 8007772:	60a3      	str	r3, [r4, #8]
 8007774:	6963      	ldr	r3, [r4, #20]
 8007776:	425b      	negs	r3, r3
 8007778:	61a3      	str	r3, [r4, #24]
 800777a:	2000      	movs	r0, #0
 800777c:	6923      	ldr	r3, [r4, #16]
 800777e:	4283      	cmp	r3, r0
 8007780:	d101      	bne.n	8007786 <__swsetup_r+0xaa>
 8007782:	0613      	lsls	r3, r2, #24
 8007784:	d4be      	bmi.n	8007704 <__swsetup_r+0x28>
 8007786:	bd70      	pop	{r4, r5, r6, pc}
 8007788:	0791      	lsls	r1, r2, #30
 800778a:	d400      	bmi.n	800778e <__swsetup_r+0xb2>
 800778c:	6963      	ldr	r3, [r4, #20]
 800778e:	60a3      	str	r3, [r4, #8]
 8007790:	e7f3      	b.n	800777a <__swsetup_r+0x9e>
 8007792:	46c0      	nop			@ (mov r8, r8)
 8007794:	20000018 	.word	0x20000018

08007798 <_raise_r>:
 8007798:	b570      	push	{r4, r5, r6, lr}
 800779a:	0004      	movs	r4, r0
 800779c:	000d      	movs	r5, r1
 800779e:	291f      	cmp	r1, #31
 80077a0:	d904      	bls.n	80077ac <_raise_r+0x14>
 80077a2:	2316      	movs	r3, #22
 80077a4:	6003      	str	r3, [r0, #0]
 80077a6:	2001      	movs	r0, #1
 80077a8:	4240      	negs	r0, r0
 80077aa:	bd70      	pop	{r4, r5, r6, pc}
 80077ac:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d004      	beq.n	80077bc <_raise_r+0x24>
 80077b2:	008a      	lsls	r2, r1, #2
 80077b4:	189b      	adds	r3, r3, r2
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	2a00      	cmp	r2, #0
 80077ba:	d108      	bne.n	80077ce <_raise_r+0x36>
 80077bc:	0020      	movs	r0, r4
 80077be:	f000 f831 	bl	8007824 <_getpid_r>
 80077c2:	002a      	movs	r2, r5
 80077c4:	0001      	movs	r1, r0
 80077c6:	0020      	movs	r0, r4
 80077c8:	f000 f81a 	bl	8007800 <_kill_r>
 80077cc:	e7ed      	b.n	80077aa <_raise_r+0x12>
 80077ce:	2a01      	cmp	r2, #1
 80077d0:	d009      	beq.n	80077e6 <_raise_r+0x4e>
 80077d2:	1c51      	adds	r1, r2, #1
 80077d4:	d103      	bne.n	80077de <_raise_r+0x46>
 80077d6:	2316      	movs	r3, #22
 80077d8:	6003      	str	r3, [r0, #0]
 80077da:	2001      	movs	r0, #1
 80077dc:	e7e5      	b.n	80077aa <_raise_r+0x12>
 80077de:	2100      	movs	r1, #0
 80077e0:	0028      	movs	r0, r5
 80077e2:	6019      	str	r1, [r3, #0]
 80077e4:	4790      	blx	r2
 80077e6:	2000      	movs	r0, #0
 80077e8:	e7df      	b.n	80077aa <_raise_r+0x12>
	...

080077ec <raise>:
 80077ec:	b510      	push	{r4, lr}
 80077ee:	4b03      	ldr	r3, [pc, #12]	@ (80077fc <raise+0x10>)
 80077f0:	0001      	movs	r1, r0
 80077f2:	6818      	ldr	r0, [r3, #0]
 80077f4:	f7ff ffd0 	bl	8007798 <_raise_r>
 80077f8:	bd10      	pop	{r4, pc}
 80077fa:	46c0      	nop			@ (mov r8, r8)
 80077fc:	20000018 	.word	0x20000018

08007800 <_kill_r>:
 8007800:	2300      	movs	r3, #0
 8007802:	b570      	push	{r4, r5, r6, lr}
 8007804:	4d06      	ldr	r5, [pc, #24]	@ (8007820 <_kill_r+0x20>)
 8007806:	0004      	movs	r4, r0
 8007808:	0008      	movs	r0, r1
 800780a:	0011      	movs	r1, r2
 800780c:	602b      	str	r3, [r5, #0]
 800780e:	f7fb fba0 	bl	8002f52 <_kill>
 8007812:	1c43      	adds	r3, r0, #1
 8007814:	d103      	bne.n	800781e <_kill_r+0x1e>
 8007816:	682b      	ldr	r3, [r5, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d000      	beq.n	800781e <_kill_r+0x1e>
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	bd70      	pop	{r4, r5, r6, pc}
 8007820:	200003ac 	.word	0x200003ac

08007824 <_getpid_r>:
 8007824:	b510      	push	{r4, lr}
 8007826:	f7fb fb8e 	bl	8002f46 <_getpid>
 800782a:	bd10      	pop	{r4, pc}

0800782c <__swhatbuf_r>:
 800782c:	b570      	push	{r4, r5, r6, lr}
 800782e:	000e      	movs	r6, r1
 8007830:	001d      	movs	r5, r3
 8007832:	230e      	movs	r3, #14
 8007834:	5ec9      	ldrsh	r1, [r1, r3]
 8007836:	0014      	movs	r4, r2
 8007838:	b096      	sub	sp, #88	@ 0x58
 800783a:	2900      	cmp	r1, #0
 800783c:	da0c      	bge.n	8007858 <__swhatbuf_r+0x2c>
 800783e:	89b2      	ldrh	r2, [r6, #12]
 8007840:	2380      	movs	r3, #128	@ 0x80
 8007842:	0011      	movs	r1, r2
 8007844:	4019      	ands	r1, r3
 8007846:	421a      	tst	r2, r3
 8007848:	d114      	bne.n	8007874 <__swhatbuf_r+0x48>
 800784a:	2380      	movs	r3, #128	@ 0x80
 800784c:	00db      	lsls	r3, r3, #3
 800784e:	2000      	movs	r0, #0
 8007850:	6029      	str	r1, [r5, #0]
 8007852:	6023      	str	r3, [r4, #0]
 8007854:	b016      	add	sp, #88	@ 0x58
 8007856:	bd70      	pop	{r4, r5, r6, pc}
 8007858:	466a      	mov	r2, sp
 800785a:	f000 f853 	bl	8007904 <_fstat_r>
 800785e:	2800      	cmp	r0, #0
 8007860:	dbed      	blt.n	800783e <__swhatbuf_r+0x12>
 8007862:	23f0      	movs	r3, #240	@ 0xf0
 8007864:	9901      	ldr	r1, [sp, #4]
 8007866:	021b      	lsls	r3, r3, #8
 8007868:	4019      	ands	r1, r3
 800786a:	4b04      	ldr	r3, [pc, #16]	@ (800787c <__swhatbuf_r+0x50>)
 800786c:	18c9      	adds	r1, r1, r3
 800786e:	424b      	negs	r3, r1
 8007870:	4159      	adcs	r1, r3
 8007872:	e7ea      	b.n	800784a <__swhatbuf_r+0x1e>
 8007874:	2100      	movs	r1, #0
 8007876:	2340      	movs	r3, #64	@ 0x40
 8007878:	e7e9      	b.n	800784e <__swhatbuf_r+0x22>
 800787a:	46c0      	nop			@ (mov r8, r8)
 800787c:	ffffe000 	.word	0xffffe000

08007880 <__smakebuf_r>:
 8007880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007882:	2602      	movs	r6, #2
 8007884:	898b      	ldrh	r3, [r1, #12]
 8007886:	0005      	movs	r5, r0
 8007888:	000c      	movs	r4, r1
 800788a:	b085      	sub	sp, #20
 800788c:	4233      	tst	r3, r6
 800788e:	d007      	beq.n	80078a0 <__smakebuf_r+0x20>
 8007890:	0023      	movs	r3, r4
 8007892:	3347      	adds	r3, #71	@ 0x47
 8007894:	6023      	str	r3, [r4, #0]
 8007896:	6123      	str	r3, [r4, #16]
 8007898:	2301      	movs	r3, #1
 800789a:	6163      	str	r3, [r4, #20]
 800789c:	b005      	add	sp, #20
 800789e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078a0:	ab03      	add	r3, sp, #12
 80078a2:	aa02      	add	r2, sp, #8
 80078a4:	f7ff ffc2 	bl	800782c <__swhatbuf_r>
 80078a8:	9f02      	ldr	r7, [sp, #8]
 80078aa:	9001      	str	r0, [sp, #4]
 80078ac:	0039      	movs	r1, r7
 80078ae:	0028      	movs	r0, r5
 80078b0:	f7ff f80c 	bl	80068cc <_malloc_r>
 80078b4:	2800      	cmp	r0, #0
 80078b6:	d108      	bne.n	80078ca <__smakebuf_r+0x4a>
 80078b8:	220c      	movs	r2, #12
 80078ba:	5ea3      	ldrsh	r3, [r4, r2]
 80078bc:	059a      	lsls	r2, r3, #22
 80078be:	d4ed      	bmi.n	800789c <__smakebuf_r+0x1c>
 80078c0:	2203      	movs	r2, #3
 80078c2:	4393      	bics	r3, r2
 80078c4:	431e      	orrs	r6, r3
 80078c6:	81a6      	strh	r6, [r4, #12]
 80078c8:	e7e2      	b.n	8007890 <__smakebuf_r+0x10>
 80078ca:	2380      	movs	r3, #128	@ 0x80
 80078cc:	89a2      	ldrh	r2, [r4, #12]
 80078ce:	6020      	str	r0, [r4, #0]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	81a3      	strh	r3, [r4, #12]
 80078d4:	9b03      	ldr	r3, [sp, #12]
 80078d6:	6120      	str	r0, [r4, #16]
 80078d8:	6167      	str	r7, [r4, #20]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00c      	beq.n	80078f8 <__smakebuf_r+0x78>
 80078de:	0028      	movs	r0, r5
 80078e0:	230e      	movs	r3, #14
 80078e2:	5ee1      	ldrsh	r1, [r4, r3]
 80078e4:	f000 f820 	bl	8007928 <_isatty_r>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d005      	beq.n	80078f8 <__smakebuf_r+0x78>
 80078ec:	2303      	movs	r3, #3
 80078ee:	89a2      	ldrh	r2, [r4, #12]
 80078f0:	439a      	bics	r2, r3
 80078f2:	3b02      	subs	r3, #2
 80078f4:	4313      	orrs	r3, r2
 80078f6:	81a3      	strh	r3, [r4, #12]
 80078f8:	89a3      	ldrh	r3, [r4, #12]
 80078fa:	9a01      	ldr	r2, [sp, #4]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	81a3      	strh	r3, [r4, #12]
 8007900:	e7cc      	b.n	800789c <__smakebuf_r+0x1c>
	...

08007904 <_fstat_r>:
 8007904:	2300      	movs	r3, #0
 8007906:	b570      	push	{r4, r5, r6, lr}
 8007908:	4d06      	ldr	r5, [pc, #24]	@ (8007924 <_fstat_r+0x20>)
 800790a:	0004      	movs	r4, r0
 800790c:	0008      	movs	r0, r1
 800790e:	0011      	movs	r1, r2
 8007910:	602b      	str	r3, [r5, #0]
 8007912:	f7fb fb7e 	bl	8003012 <_fstat>
 8007916:	1c43      	adds	r3, r0, #1
 8007918:	d103      	bne.n	8007922 <_fstat_r+0x1e>
 800791a:	682b      	ldr	r3, [r5, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d000      	beq.n	8007922 <_fstat_r+0x1e>
 8007920:	6023      	str	r3, [r4, #0]
 8007922:	bd70      	pop	{r4, r5, r6, pc}
 8007924:	200003ac 	.word	0x200003ac

08007928 <_isatty_r>:
 8007928:	2300      	movs	r3, #0
 800792a:	b570      	push	{r4, r5, r6, lr}
 800792c:	4d06      	ldr	r5, [pc, #24]	@ (8007948 <_isatty_r+0x20>)
 800792e:	0004      	movs	r4, r0
 8007930:	0008      	movs	r0, r1
 8007932:	602b      	str	r3, [r5, #0]
 8007934:	f7fb fb7b 	bl	800302e <_isatty>
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	d103      	bne.n	8007944 <_isatty_r+0x1c>
 800793c:	682b      	ldr	r3, [r5, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d000      	beq.n	8007944 <_isatty_r+0x1c>
 8007942:	6023      	str	r3, [r4, #0]
 8007944:	bd70      	pop	{r4, r5, r6, pc}
 8007946:	46c0      	nop			@ (mov r8, r8)
 8007948:	200003ac 	.word	0x200003ac

0800794c <_init>:
 800794c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794e:	46c0      	nop			@ (mov r8, r8)
 8007950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007952:	bc08      	pop	{r3}
 8007954:	469e      	mov	lr, r3
 8007956:	4770      	bx	lr

08007958 <_fini>:
 8007958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795a:	46c0      	nop			@ (mov r8, r8)
 800795c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800795e:	bc08      	pop	{r3}
 8007960:	469e      	mov	lr, r3
 8007962:	4770      	bx	lr
