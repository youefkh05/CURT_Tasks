
MPU_9250_6500_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009288  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08009398  08009398  0000a398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096e0  080096e0  0000b098  2**0
                  CONTENTS
  4 .ARM          00000000  080096e0  080096e0  0000b098  2**0
                  CONTENTS
  5 .preinit_array 00000000  080096e0  080096e0  0000b098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096e0  080096e0  0000a6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080096e4  080096e4  0000a6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  080096e8  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001598  20000098  08009780  0000b098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001630  08009780  0000b630  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007939  00000000  00000000  0000b0c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001753  00000000  00000000  000129fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  00014150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000605  00000000  00000000  00014938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181d2  00000000  00000000  00014f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b533  00000000  00000000  0002d10f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000854da  00000000  00000000  00038642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bdb1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ef8  00000000  00000000  000bdb60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000c0a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000098 	.word	0x20000098
 800012c:	00000000 	.word	0x00000000
 8000130:	08009380 	.word	0x08009380

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000009c 	.word	0x2000009c
 800014c:	08009380 	.word	0x08009380

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	@ 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	bf28      	it	cs
 8000bc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bc8:	d2ed      	bcs.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fmul>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d06f      	beq.n	8000e1c <__aeabi_fmul+0xf8>
 8000d3c:	441a      	add	r2, r3
 8000d3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d42:	0240      	lsls	r0, r0, #9
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4a:	d01e      	beq.n	8000d8a <__aeabi_fmul+0x66>
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d58:	fba0 3101 	umull	r3, r1, r0, r1
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d60:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d64:	bf3e      	ittt	cc
 8000d66:	0049      	lslcc	r1, r1, #1
 8000d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	ea40 0001 	orr.w	r0, r0, r1
 8000d72:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d76:	2afd      	cmp	r2, #253	@ 0xfd
 8000d78:	d81d      	bhi.n	8000db6 <__aeabi_fmul+0x92>
 8000d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	4770      	bx	lr
 8000d8a:	f090 0f00 	teq	r0, #0
 8000d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	0249      	lsleq	r1, r1, #9
 8000d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9e:	3a7f      	subs	r2, #127	@ 0x7f
 8000da0:	bfc2      	ittt	gt
 8000da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000daa:	4770      	bxgt	lr
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	3a01      	subs	r2, #1
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_fmul+0x150>
 8000db8:	f112 0f19 	cmn.w	r2, #25
 8000dbc:	bfdc      	itt	le
 8000dbe:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dc2:	4770      	bxle	lr
 8000dc4:	f1c2 0200 	rsb	r2, r2, #0
 8000dc8:	0041      	lsls	r1, r0, #1
 8000dca:	fa21 f102 	lsr.w	r1, r1, r2
 8000dce:	f1c2 0220 	rsb	r2, r2, #32
 8000dd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dda:	f140 0000 	adc.w	r0, r0, #0
 8000dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de2:	bf08      	it	eq
 8000de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de8:	4770      	bx	lr
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fmul+0xce>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xe6>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fmul+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	bf18      	it	ne
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_fmul+0x11e>
 8000e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e30:	bf18      	it	ne
 8000e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e36:	d1d8      	bne.n	8000dea <__aeabi_fmul+0xc6>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f090 0f00 	teq	r0, #0
 8000e46:	bf17      	itett	ne
 8000e48:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e4c:	4608      	moveq	r0, r1
 8000e4e:	f091 0f00 	teqne	r1, #0
 8000e52:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e56:	d014      	beq.n	8000e82 <__aeabi_fmul+0x15e>
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_fmul+0x13e>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d10f      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e62:	ea93 0f0c 	teq	r3, ip
 8000e66:	d103      	bne.n	8000e70 <__aeabi_fmul+0x14c>
 8000e68:	024b      	lsls	r3, r1, #9
 8000e6a:	bf18      	it	ne
 8000e6c:	4608      	movne	r0, r1
 8000e6e:	d108      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e78:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e80:	4770      	bx	lr
 8000e82:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e86:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_fdiv>:
 8000e8c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e94:	bf1e      	ittt	ne
 8000e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9a:	ea92 0f0c 	teqne	r2, ip
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d069      	beq.n	8000f78 <__aeabi_fdiv+0xec>
 8000ea4:	eba2 0203 	sub.w	r2, r2, r3
 8000ea8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb2:	d037      	beq.n	8000f24 <__aeabi_fdiv+0x98>
 8000eb4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf38      	it	cc
 8000ec8:	005b      	lslcc	r3, r3, #1
 8000eca:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ece:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	bf24      	itt	cs
 8000ed6:	1a5b      	subcs	r3, r3, r1
 8000ed8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eee:	bf24      	itt	cs
 8000ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	bf18      	it	ne
 8000f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0e:	d1e0      	bne.n	8000ed2 <__aeabi_fdiv+0x46>
 8000f10:	2afd      	cmp	r2, #253	@ 0xfd
 8000f12:	f63f af50 	bhi.w	8000db6 <__aeabi_fmul+0x92>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f1c:	bf08      	it	eq
 8000f1e:	f020 0001 	biceq.w	r0, r0, #1
 8000f22:	4770      	bx	lr
 8000f24:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2c:	327f      	adds	r2, #127	@ 0x7f
 8000f2e:	bfc2      	ittt	gt
 8000f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f38:	4770      	bxgt	lr
 8000f3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	3a01      	subs	r2, #1
 8000f44:	e737      	b.n	8000db6 <__aeabi_fmul+0x92>
 8000f46:	f092 0f00 	teq	r2, #0
 8000f4a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f4e:	bf02      	ittt	eq
 8000f50:	0040      	lsleq	r0, r0, #1
 8000f52:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f56:	3a01      	subeq	r2, #1
 8000f58:	d0f9      	beq.n	8000f4e <__aeabi_fdiv+0xc2>
 8000f5a:	ea40 000c 	orr.w	r0, r0, ip
 8000f5e:	f093 0f00 	teq	r3, #0
 8000f62:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0049      	lsleq	r1, r1, #1
 8000f6a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f6e:	3b01      	subeq	r3, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xda>
 8000f72:	ea41 010c 	orr.w	r1, r1, ip
 8000f76:	e795      	b.n	8000ea4 <__aeabi_fdiv+0x18>
 8000f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f7c:	ea92 0f0c 	teq	r2, ip
 8000f80:	d108      	bne.n	8000f94 <__aeabi_fdiv+0x108>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	f47f af7d 	bne.w	8000e82 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	f47f af70 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e776      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_fdiv+0x118>
 8000f9a:	024b      	lsls	r3, r1, #9
 8000f9c:	f43f af4c 	beq.w	8000e38 <__aeabi_fmul+0x114>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e76e      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fa8:	bf18      	it	ne
 8000faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fae:	d1ca      	bne.n	8000f46 <__aeabi_fdiv+0xba>
 8000fb0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fb4:	f47f af5c 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000fb8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fbc:	f47f af3c 	bne.w	8000e38 <__aeabi_fmul+0x114>
 8000fc0:	e75f      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fc2:	bf00      	nop

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmpun>:
 80010b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010bc:	d102      	bne.n	80010c4 <__aeabi_fcmpun+0x14>
 80010be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010c2:	d108      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c8:	d102      	bne.n	80010d0 <__aeabi_fcmpun+0x20>
 80010ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ce:	d102      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010d0:	f04f 0000 	mov.w	r0, #0
 80010d4:	4770      	bx	lr
 80010d6:	f04f 0001 	mov.w	r0, #1
 80010da:	4770      	bx	lr

080010dc <__aeabi_f2iz>:
 80010dc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010e4:	d30f      	bcc.n	8001106 <__aeabi_f2iz+0x2a>
 80010e6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010ea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ee:	d90d      	bls.n	800110c <__aeabi_f2iz+0x30>
 80010f0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010f8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010fc:	fa23 f002 	lsr.w	r0, r3, r2
 8001100:	bf18      	it	ne
 8001102:	4240      	negne	r0, r0
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr
 800110c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001110:	d101      	bne.n	8001116 <__aeabi_f2iz+0x3a>
 8001112:	0242      	lsls	r2, r0, #9
 8001114:	d105      	bne.n	8001122 <__aeabi_f2iz+0x46>
 8001116:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800111a:	bf08      	it	eq
 800111c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001120:	4770      	bx	lr
 8001122:	f04f 0000 	mov.w	r0, #0
 8001126:	4770      	bx	lr

08001128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112e:	f003 ff73 	bl	8005018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001132:	f000 f843 	bl	80011bc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  if (!MPU9255_Init(&hi2c1)) {
 8001136:	481d      	ldr	r0, [pc, #116]	@ (80011ac <main+0x84>)
 8001138:	f000 fa3e 	bl	80015b8 <MPU9255_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d108      	bne.n	8001154 <main+0x2c>
          // Blink LED fast if init fails
          while(1) {
              HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001142:	2180      	movs	r1, #128	@ 0x80
 8001144:	481a      	ldr	r0, [pc, #104]	@ (80011b0 <main+0x88>)
 8001146:	f004 fa6d 	bl	8005624 <HAL_GPIO_TogglePin>
              HAL_Delay(100);
 800114a:	2064      	movs	r0, #100	@ 0x64
 800114c:	f003 ffc6 	bl	80050dc <HAL_Delay>
              HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001150:	bf00      	nop
 8001152:	e7f6      	b.n	8001142 <main+0x1a>
      }

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001154:	f000 f8a6 	bl	80012a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001158:	f000 f876 	bl	8001248 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  // Main data collection loop
  uint32_t lastTick = HAL_GetTick();
 800115c:	f003 ffb4 	bl	80050c8 <HAL_GetTick>
 8001160:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
          /* USER CODE BEGIN 3 */
          readAll(&hi2c1, &IMU_Data);
 8001162:	4914      	ldr	r1, [pc, #80]	@ (80011b4 <main+0x8c>)
 8001164:	4811      	ldr	r0, [pc, #68]	@ (80011ac <main+0x84>)
 8001166:	f000 faa7 	bl	80016b8 <readAll>
          storeSensorData();
 800116a:	f000 f8e5 	bl	8001338 <storeSensorData>

          // Toggle LED every 100ms (visual feedback)
          static uint32_t lastToggle = 0;
          if (HAL_GetTick() - lastToggle > 100) {
 800116e:	f003 ffab 	bl	80050c8 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <main+0x90>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b64      	cmp	r3, #100	@ 0x64
 800117c:	d90a      	bls.n	8001194 <main+0x6c>
              HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800117e:	2180      	movs	r1, #128	@ 0x80
 8001180:	480b      	ldr	r0, [pc, #44]	@ (80011b0 <main+0x88>)
 8001182:	f004 fa4f 	bl	8005624 <HAL_GPIO_TogglePin>
              lastToggle = HAL_GetTick();
 8001186:	f003 ff9f 	bl	80050c8 <HAL_GetTick>
 800118a:	4603      	mov	r3, r0
 800118c:	4a0a      	ldr	r2, [pc, #40]	@ (80011b8 <main+0x90>)
 800118e:	6013      	str	r3, [r2, #0]
          }

          // Precise 100Hz timing
          while ((HAL_GetTick() - lastTick) < (1000/SAMPLE_RATE_HZ)) { __NOP(); }
 8001190:	e000      	b.n	8001194 <main+0x6c>
 8001192:	bf00      	nop
 8001194:	f003 ff98 	bl	80050c8 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b09      	cmp	r3, #9
 80011a0:	d9f7      	bls.n	8001192 <main+0x6a>
          lastTick = HAL_GetTick();
 80011a2:	f003 ff91 	bl	80050c8 <HAL_GetTick>
 80011a6:	6078      	str	r0, [r7, #4]
  while (1) {
 80011a8:	e7db      	b.n	8001162 <main+0x3a>
 80011aa:	bf00      	nop
 80011ac:	200000b4 	.word	0x200000b4
 80011b0:	40010800 	.word	0x40010800
 80011b4:	20000108 	.word	0x20000108
 80011b8:	20001400 	.word	0x20001400

080011bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b090      	sub	sp, #64	@ 0x40
 80011c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c2:	f107 0318 	add.w	r3, r7, #24
 80011c6:	2228      	movs	r2, #40	@ 0x28
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f006 f8b0 	bl	8007330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011de:	2301      	movs	r3, #1
 80011e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ec:	2301      	movs	r3, #1
 80011ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f0:	2302      	movs	r3, #2
 80011f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011fa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80011fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001200:	f107 0318 	add.w	r3, r7, #24
 8001204:	4618      	mov	r0, r3
 8001206:	f005 fa8d 	bl	8006724 <HAL_RCC_OscConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001210:	f000 f9cc 	bl	80015ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001214:	230f      	movs	r3, #15
 8001216:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001218:	2302      	movs	r3, #2
 800121a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001220:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001224:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2102      	movs	r1, #2
 800122e:	4618      	mov	r0, r3
 8001230:	f005 fcfa 	bl	8006c28 <HAL_RCC_ClockConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800123a:	f000 f9b7 	bl	80015ac <Error_Handler>
  }
}
 800123e:	bf00      	nop
 8001240:	3740      	adds	r7, #64	@ 0x40
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800124c:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <MX_I2C1_Init+0x50>)
 800124e:	4a13      	ldr	r2, [pc, #76]	@ (800129c <MX_I2C1_Init+0x54>)
 8001250:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001252:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <MX_I2C1_Init+0x50>)
 8001254:	4a12      	ldr	r2, [pc, #72]	@ (80012a0 <MX_I2C1_Init+0x58>)
 8001256:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001258:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <MX_I2C1_Init+0x50>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800125e:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <MX_I2C1_Init+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <MX_I2C1_Init+0x50>)
 8001266:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800126a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800126c:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <MX_I2C1_Init+0x50>)
 800126e:	2200      	movs	r2, #0
 8001270:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <MX_I2C1_Init+0x50>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001278:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <MX_I2C1_Init+0x50>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <MX_I2C1_Init+0x50>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001284:	4804      	ldr	r0, [pc, #16]	@ (8001298 <MX_I2C1_Init+0x50>)
 8001286:	f004 f9e7 	bl	8005658 <HAL_I2C_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001290:	f000 f98c 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200000b4 	.word	0x200000b4
 800129c:	40005400 	.word	0x40005400
 80012a0:	000186a0 	.word	0x000186a0

080012a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	f107 0310 	add.w	r3, r7, #16
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001330 <MX_GPIO_Init+0x8c>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001330 <MX_GPIO_Init+0x8c>)
 80012be:	f043 0320 	orr.w	r3, r3, #32
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001330 <MX_GPIO_Init+0x8c>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0320 	and.w	r3, r3, #32
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	4b17      	ldr	r3, [pc, #92]	@ (8001330 <MX_GPIO_Init+0x8c>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	4a16      	ldr	r2, [pc, #88]	@ (8001330 <MX_GPIO_Init+0x8c>)
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	6193      	str	r3, [r2, #24]
 80012dc:	4b14      	ldr	r3, [pc, #80]	@ (8001330 <MX_GPIO_Init+0x8c>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e8:	4b11      	ldr	r3, [pc, #68]	@ (8001330 <MX_GPIO_Init+0x8c>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a10      	ldr	r2, [pc, #64]	@ (8001330 <MX_GPIO_Init+0x8c>)
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001330 <MX_GPIO_Init+0x8c>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0308 	and.w	r3, r3, #8
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001300:	2201      	movs	r2, #1
 8001302:	2180      	movs	r1, #128	@ 0x80
 8001304:	480b      	ldr	r0, [pc, #44]	@ (8001334 <MX_GPIO_Init+0x90>)
 8001306:	f004 f975 	bl	80055f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800130a:	2380      	movs	r3, #128	@ 0x80
 800130c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130e:	2301      	movs	r3, #1
 8001310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2302      	movs	r3, #2
 8001318:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	4619      	mov	r1, r3
 8001320:	4804      	ldr	r0, [pc, #16]	@ (8001334 <MX_GPIO_Init+0x90>)
 8001322:	f003 ffe3 	bl	80052ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001326:	bf00      	nop
 8001328:	3720      	adds	r7, #32
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000
 8001334:	40010800 	.word	0x40010800

08001338 <storeSensorData>:

/* USER CODE BEGIN 4 */
void storeSensorData(void) {
 8001338:	b598      	push	{r3, r4, r7, lr}
 800133a:	af00      	add	r7, sp, #0
    // Store scaled integer values
    sensorBuffer[bufferHead].accel[0] = (int16_t)(IMU_Data.AccelX * 100); // 0.01 m/s² resolution
 800133c:	4b93      	ldr	r3, [pc, #588]	@ (800158c <storeSensorData+0x254>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4993      	ldr	r1, [pc, #588]	@ (8001590 <storeSensorData+0x258>)
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fcee 	bl	8000d24 <__aeabi_fmul>
 8001348:	4603      	mov	r3, r0
 800134a:	461a      	mov	r2, r3
 800134c:	4b91      	ldr	r3, [pc, #580]	@ (8001594 <storeSensorData+0x25c>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	b29b      	uxth	r3, r3
 8001352:	461c      	mov	r4, r3
 8001354:	4610      	mov	r0, r2
 8001356:	f7ff fec1 	bl	80010dc <__aeabi_f2iz>
 800135a:	4603      	mov	r3, r0
 800135c:	b219      	sxth	r1, r3
 800135e:	4a8e      	ldr	r2, [pc, #568]	@ (8001598 <storeSensorData+0x260>)
 8001360:	4623      	mov	r3, r4
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	4423      	add	r3, r4
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	4413      	add	r3, r2
 800136a:	460a      	mov	r2, r1
 800136c:	801a      	strh	r2, [r3, #0]
    sensorBuffer[bufferHead].accel[1] = (int16_t)(IMU_Data.AccelY * 100);
 800136e:	4b87      	ldr	r3, [pc, #540]	@ (800158c <storeSensorData+0x254>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	4987      	ldr	r1, [pc, #540]	@ (8001590 <storeSensorData+0x258>)
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fcd5 	bl	8000d24 <__aeabi_fmul>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	4b85      	ldr	r3, [pc, #532]	@ (8001594 <storeSensorData+0x25c>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	b29b      	uxth	r3, r3
 8001384:	461c      	mov	r4, r3
 8001386:	4610      	mov	r0, r2
 8001388:	f7ff fea8 	bl	80010dc <__aeabi_f2iz>
 800138c:	4603      	mov	r3, r0
 800138e:	b219      	sxth	r1, r3
 8001390:	4a81      	ldr	r2, [pc, #516]	@ (8001598 <storeSensorData+0x260>)
 8001392:	4623      	mov	r3, r4
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4423      	add	r3, r4
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4413      	add	r3, r2
 800139c:	3302      	adds	r3, #2
 800139e:	460a      	mov	r2, r1
 80013a0:	801a      	strh	r2, [r3, #0]
    sensorBuffer[bufferHead].accel[2] = (int16_t)(IMU_Data.AccelZ * 100);
 80013a2:	4b7a      	ldr	r3, [pc, #488]	@ (800158c <storeSensorData+0x254>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	497a      	ldr	r1, [pc, #488]	@ (8001590 <storeSensorData+0x258>)
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fcbb 	bl	8000d24 <__aeabi_fmul>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b78      	ldr	r3, [pc, #480]	@ (8001594 <storeSensorData+0x25c>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	461c      	mov	r4, r3
 80013ba:	4610      	mov	r0, r2
 80013bc:	f7ff fe8e 	bl	80010dc <__aeabi_f2iz>
 80013c0:	4603      	mov	r3, r0
 80013c2:	b219      	sxth	r1, r3
 80013c4:	4a74      	ldr	r2, [pc, #464]	@ (8001598 <storeSensorData+0x260>)
 80013c6:	4623      	mov	r3, r4
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4423      	add	r3, r4
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	4413      	add	r3, r2
 80013d0:	3304      	adds	r3, #4
 80013d2:	460a      	mov	r2, r1
 80013d4:	801a      	strh	r2, [r3, #0]

    sensorBuffer[bufferHead].gyro[0] = (int16_t)(IMU_Data.GyroX * 100);   // 0.01 °/s resolution
 80013d6:	4b6d      	ldr	r3, [pc, #436]	@ (800158c <storeSensorData+0x254>)
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	496d      	ldr	r1, [pc, #436]	@ (8001590 <storeSensorData+0x258>)
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fca1 	bl	8000d24 <__aeabi_fmul>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b6b      	ldr	r3, [pc, #428]	@ (8001594 <storeSensorData+0x25c>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	461c      	mov	r4, r3
 80013ee:	4610      	mov	r0, r2
 80013f0:	f7ff fe74 	bl	80010dc <__aeabi_f2iz>
 80013f4:	4603      	mov	r3, r0
 80013f6:	b219      	sxth	r1, r3
 80013f8:	4a67      	ldr	r2, [pc, #412]	@ (8001598 <storeSensorData+0x260>)
 80013fa:	4623      	mov	r3, r4
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4423      	add	r3, r4
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	4413      	add	r3, r2
 8001404:	3306      	adds	r3, #6
 8001406:	460a      	mov	r2, r1
 8001408:	801a      	strh	r2, [r3, #0]
    sensorBuffer[bufferHead].gyro[1] = (int16_t)(IMU_Data.GyroY * 100);
 800140a:	4b60      	ldr	r3, [pc, #384]	@ (800158c <storeSensorData+0x254>)
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	4960      	ldr	r1, [pc, #384]	@ (8001590 <storeSensorData+0x258>)
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fc87 	bl	8000d24 <__aeabi_fmul>
 8001416:	4603      	mov	r3, r0
 8001418:	461a      	mov	r2, r3
 800141a:	4b5e      	ldr	r3, [pc, #376]	@ (8001594 <storeSensorData+0x25c>)
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	b29b      	uxth	r3, r3
 8001420:	461c      	mov	r4, r3
 8001422:	4610      	mov	r0, r2
 8001424:	f7ff fe5a 	bl	80010dc <__aeabi_f2iz>
 8001428:	4603      	mov	r3, r0
 800142a:	b219      	sxth	r1, r3
 800142c:	4a5a      	ldr	r2, [pc, #360]	@ (8001598 <storeSensorData+0x260>)
 800142e:	4623      	mov	r3, r4
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4423      	add	r3, r4
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4413      	add	r3, r2
 8001438:	3308      	adds	r3, #8
 800143a:	460a      	mov	r2, r1
 800143c:	801a      	strh	r2, [r3, #0]
    sensorBuffer[bufferHead].gyro[2] = (int16_t)(IMU_Data.GyroZ * 100);
 800143e:	4b53      	ldr	r3, [pc, #332]	@ (800158c <storeSensorData+0x254>)
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	4953      	ldr	r1, [pc, #332]	@ (8001590 <storeSensorData+0x258>)
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fc6d 	bl	8000d24 <__aeabi_fmul>
 800144a:	4603      	mov	r3, r0
 800144c:	461a      	mov	r2, r3
 800144e:	4b51      	ldr	r3, [pc, #324]	@ (8001594 <storeSensorData+0x25c>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	b29b      	uxth	r3, r3
 8001454:	461c      	mov	r4, r3
 8001456:	4610      	mov	r0, r2
 8001458:	f7ff fe40 	bl	80010dc <__aeabi_f2iz>
 800145c:	4603      	mov	r3, r0
 800145e:	b219      	sxth	r1, r3
 8001460:	4a4d      	ldr	r2, [pc, #308]	@ (8001598 <storeSensorData+0x260>)
 8001462:	4623      	mov	r3, r4
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	4423      	add	r3, r4
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	4413      	add	r3, r2
 800146c:	330a      	adds	r3, #10
 800146e:	460a      	mov	r2, r1
 8001470:	801a      	strh	r2, [r3, #0]

    sensorBuffer[bufferHead].mag[0] = (int16_t)(IMU_Data.MagX * 10);      // 0.1 μT resolution
 8001472:	4b46      	ldr	r3, [pc, #280]	@ (800158c <storeSensorData+0x254>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	4949      	ldr	r1, [pc, #292]	@ (800159c <storeSensorData+0x264>)
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fc53 	bl	8000d24 <__aeabi_fmul>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	4b44      	ldr	r3, [pc, #272]	@ (8001594 <storeSensorData+0x25c>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	b29b      	uxth	r3, r3
 8001488:	461c      	mov	r4, r3
 800148a:	4610      	mov	r0, r2
 800148c:	f7ff fe26 	bl	80010dc <__aeabi_f2iz>
 8001490:	4603      	mov	r3, r0
 8001492:	b219      	sxth	r1, r3
 8001494:	4a40      	ldr	r2, [pc, #256]	@ (8001598 <storeSensorData+0x260>)
 8001496:	4623      	mov	r3, r4
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4423      	add	r3, r4
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4413      	add	r3, r2
 80014a0:	330c      	adds	r3, #12
 80014a2:	460a      	mov	r2, r1
 80014a4:	801a      	strh	r2, [r3, #0]
    sensorBuffer[bufferHead].mag[1] = (int16_t)(IMU_Data.MagY * 10);
 80014a6:	4b39      	ldr	r3, [pc, #228]	@ (800158c <storeSensorData+0x254>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	493c      	ldr	r1, [pc, #240]	@ (800159c <storeSensorData+0x264>)
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fc39 	bl	8000d24 <__aeabi_fmul>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b37      	ldr	r3, [pc, #220]	@ (8001594 <storeSensorData+0x25c>)
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	461c      	mov	r4, r3
 80014be:	4610      	mov	r0, r2
 80014c0:	f7ff fe0c 	bl	80010dc <__aeabi_f2iz>
 80014c4:	4603      	mov	r3, r0
 80014c6:	b219      	sxth	r1, r3
 80014c8:	4a33      	ldr	r2, [pc, #204]	@ (8001598 <storeSensorData+0x260>)
 80014ca:	4623      	mov	r3, r4
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4423      	add	r3, r4
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	4413      	add	r3, r2
 80014d4:	330e      	adds	r3, #14
 80014d6:	460a      	mov	r2, r1
 80014d8:	801a      	strh	r2, [r3, #0]
    sensorBuffer[bufferHead].mag[2] = (int16_t)(IMU_Data.MagZ * 10);
 80014da:	4b2c      	ldr	r3, [pc, #176]	@ (800158c <storeSensorData+0x254>)
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	492f      	ldr	r1, [pc, #188]	@ (800159c <storeSensorData+0x264>)
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fc1f 	bl	8000d24 <__aeabi_fmul>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001594 <storeSensorData+0x25c>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	461c      	mov	r4, r3
 80014f2:	4610      	mov	r0, r2
 80014f4:	f7ff fdf2 	bl	80010dc <__aeabi_f2iz>
 80014f8:	4603      	mov	r3, r0
 80014fa:	b219      	sxth	r1, r3
 80014fc:	4a26      	ldr	r2, [pc, #152]	@ (8001598 <storeSensorData+0x260>)
 80014fe:	4623      	mov	r3, r4
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4423      	add	r3, r4
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4413      	add	r3, r2
 8001508:	3310      	adds	r3, #16
 800150a:	460a      	mov	r2, r1
 800150c:	801a      	strh	r2, [r3, #0]

    sensorBuffer[bufferHead].timestamp = HAL_GetTick();
 800150e:	4b21      	ldr	r3, [pc, #132]	@ (8001594 <storeSensorData+0x25c>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	b29b      	uxth	r3, r3
 8001514:	461c      	mov	r4, r3
 8001516:	f003 fdd7 	bl	80050c8 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	491e      	ldr	r1, [pc, #120]	@ (8001598 <storeSensorData+0x260>)
 800151e:	4623      	mov	r3, r4
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4423      	add	r3, r4
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	440b      	add	r3, r1
 8001528:	3314      	adds	r3, #20
 800152a:	601a      	str	r2, [r3, #0]

    // Advance head pointer
    bufferHead = (bufferHead + 1) % BUFFER_SIZE;
 800152c:	4b19      	ldr	r3, [pc, #100]	@ (8001594 <storeSensorData+0x25c>)
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	b29b      	uxth	r3, r3
 8001532:	3301      	adds	r3, #1
 8001534:	4a1a      	ldr	r2, [pc, #104]	@ (80015a0 <storeSensorData+0x268>)
 8001536:	fb82 1203 	smull	r1, r2, r2, r3
 800153a:	1191      	asrs	r1, r2, #6
 800153c:	17da      	asrs	r2, r3, #31
 800153e:	1a8a      	subs	r2, r1, r2
 8001540:	21c8      	movs	r1, #200	@ 0xc8
 8001542:	fb01 f202 	mul.w	r2, r1, r2
 8001546:	1a9a      	subs	r2, r3, r2
 8001548:	b292      	uxth	r2, r2
 800154a:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <storeSensorData+0x25c>)
 800154c:	801a      	strh	r2, [r3, #0]

    // Handle buffer full condition
    if (bufferHead == bufferTail) {
 800154e:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <storeSensorData+0x25c>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	b29a      	uxth	r2, r3
 8001554:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <storeSensorData+0x26c>)
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	b29b      	uxth	r3, r3
 800155a:	429a      	cmp	r2, r3
 800155c:	d113      	bne.n	8001586 <storeSensorData+0x24e>
        bufferFull = 1;
 800155e:	4b12      	ldr	r3, [pc, #72]	@ (80015a8 <storeSensorData+0x270>)
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
        bufferTail = (bufferTail + 1) % BUFFER_SIZE; // Overwrite oldest data
 8001564:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <storeSensorData+0x26c>)
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	b29b      	uxth	r3, r3
 800156a:	3301      	adds	r3, #1
 800156c:	4a0c      	ldr	r2, [pc, #48]	@ (80015a0 <storeSensorData+0x268>)
 800156e:	fb82 1203 	smull	r1, r2, r2, r3
 8001572:	1191      	asrs	r1, r2, #6
 8001574:	17da      	asrs	r2, r3, #31
 8001576:	1a8a      	subs	r2, r1, r2
 8001578:	21c8      	movs	r1, #200	@ 0xc8
 800157a:	fb01 f202 	mul.w	r2, r1, r2
 800157e:	1a9a      	subs	r2, r3, r2
 8001580:	b292      	uxth	r2, r2
 8001582:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <storeSensorData+0x26c>)
 8001584:	801a      	strh	r2, [r3, #0]
    }
}
 8001586:	bf00      	nop
 8001588:	bd98      	pop	{r3, r4, r7, pc}
 800158a:	bf00      	nop
 800158c:	20000108 	.word	0x20000108
 8001590:	42c80000 	.word	0x42c80000
 8001594:	200013f8 	.word	0x200013f8
 8001598:	20000138 	.word	0x20000138
 800159c:	41200000 	.word	0x41200000
 80015a0:	51eb851f 	.word	0x51eb851f
 80015a4:	200013fa 	.word	0x200013fa
 80015a8:	200013fc 	.word	0x200013fc

080015ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b0:	b672      	cpsid	i
}
 80015b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <Error_Handler+0x8>

080015b8 <MPU9255_Init>:

//===================================================================================================================
//====== MAIN INIT FUNCTION
//===================================================================================================================

uint8_t MPU9255_Init(I2C_HandleTypeDef *I2Cx){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af04      	add	r7, sp, #16
 80015be:	6078      	str	r0, [r7, #4]
	//pre-def. vars
	uint8_t readData;
	uint8_t writeData;
	printf("**************************** \r\n");
 80015c0:	4833      	ldr	r0, [pc, #204]	@ (8001690 <MPU9255_Init+0xd8>)
 80015c2:	f005 fdd5 	bl	8007170 <puts>
	printf("MPU9250 STM32 Implementation \r\n");
 80015c6:	4833      	ldr	r0, [pc, #204]	@ (8001694 <MPU9255_Init+0xdc>)
 80015c8:	f005 fdd2 	bl	8007170 <puts>
	printf("**************************** \r\n");
 80015cc:	4830      	ldr	r0, [pc, #192]	@ (8001690 <MPU9255_Init+0xd8>)
 80015ce:	f005 fdcf 	bl	8007170 <puts>

	//read MPU9255 WHOAMI
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, WHO_AM_I_MPU9250, 1, &readData, 1, i2c_timeout);
 80015d2:	2364      	movs	r3, #100	@ 0x64
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	2301      	movs	r3, #1
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	f107 030f 	add.w	r3, r7, #15
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	2275      	movs	r2, #117	@ 0x75
 80015e4:	21d0      	movs	r1, #208	@ 0xd0
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f004 fa74 	bl	8005ad4 <HAL_I2C_Mem_Read>

	if (SerialDebugA) {printf("MPU -WHO AM I- is: (Must return 113) %d\r\n", readData);}
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	4619      	mov	r1, r3
 80015f0:	4829      	ldr	r0, [pc, #164]	@ (8001698 <MPU9255_Init+0xe0>)
 80015f2:	f005 fd55 	bl	80070a0 <iprintf>

	if (readData == 113) {
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	2b71      	cmp	r3, #113	@ 0x71
 80015fa:	d143      	bne.n	8001684 <MPU9255_Init+0xcc>

		//Start by performing self test and reporting values
		MPU9250SelfTest(I2Cx, SelfTest);
 80015fc:	4927      	ldr	r1, [pc, #156]	@ (800169c <MPU9255_Init+0xe4>)
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f001 fd92 	bl	8003128 <MPU9250SelfTest>

		//Calibrate gyro and accelerometers, load biases in bias registers
		calibrateMPU9250(I2Cx, gyroBias, accelBias);
 8001604:	4a26      	ldr	r2, [pc, #152]	@ (80016a0 <MPU9255_Init+0xe8>)
 8001606:	4927      	ldr	r1, [pc, #156]	@ (80016a4 <MPU9255_Init+0xec>)
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f001 f8a9 	bl	8002760 <calibrateMPU9250>
		HAL_Delay(1000);
 800160e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001612:	f003 fd63 	bl	80050dc <HAL_Delay>

		//init Gyro and Accelerometer
		initMPU9250(I2Cx);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 ffbc 	bl	8002594 <initMPU9250>

		//enable Mag bypass
		writeData = 0x22;
 800161c:	2322      	movs	r3, #34	@ 0x22
 800161e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_PIN_CFG, 1, &writeData, 1, i2c_timeout);
 8001620:	2364      	movs	r3, #100	@ 0x64
 8001622:	9302      	str	r3, [sp, #8]
 8001624:	2301      	movs	r3, #1
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	f107 030e 	add.w	r3, r7, #14
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	2301      	movs	r3, #1
 8001630:	2237      	movs	r2, #55	@ 0x37
 8001632:	21d0      	movs	r1, #208	@ 0xd0
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f004 f953 	bl	80058e0 <HAL_I2C_Mem_Write>

		//Read the WHO_AM_I register of the magnetometer
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_WHO_AM_I, 1, &readData, 1, i2c_timeout);// Read WHO_AM_I register for AK8963
 800163a:	2364      	movs	r3, #100	@ 0x64
 800163c:	9302      	str	r3, [sp, #8]
 800163e:	2301      	movs	r3, #1
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	f107 030f 	add.w	r3, r7, #15
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	2301      	movs	r3, #1
 800164a:	2200      	movs	r2, #0
 800164c:	2118      	movs	r1, #24
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f004 fa40 	bl	8005ad4 <HAL_I2C_Mem_Read>
		if (SerialDebugA) {printf("MAG -WHO AM I- is: (Must return 72) %d\r\n", readData);}
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	4619      	mov	r1, r3
 8001658:	4813      	ldr	r0, [pc, #76]	@ (80016a8 <MPU9255_Init+0xf0>)
 800165a:	f005 fd21 	bl	80070a0 <iprintf>
		HAL_Delay(1000);
 800165e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001662:	f003 fd3b 	bl	80050dc <HAL_Delay>

		//Get magnetometer calibration from AK8963 ROM
		initAK8963(I2Cx, magCalibration);  // Initialize device for active mode read of magnetometer
 8001666:	4911      	ldr	r1, [pc, #68]	@ (80016ac <MPU9255_Init+0xf4>)
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fd1d 	bl	80020a8 <initAK8963>

		calibrateMag(I2Cx, magBias, magScale);
 800166e:	4a10      	ldr	r2, [pc, #64]	@ (80016b0 <MPU9255_Init+0xf8>)
 8001670:	4910      	ldr	r1, [pc, #64]	@ (80016b4 <MPU9255_Init+0xfc>)
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 fe1a 	bl	80022ac <calibrateMag>

		HAL_Delay(1000);
 8001678:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800167c:	f003 fd2e 	bl	80050dc <HAL_Delay>
		return 0;
 8001680:	2300      	movs	r3, #0
 8001682:	e000      	b.n	8001686 <MPU9255_Init+0xce>
	}
	return 1; // Loop forever if communication doesn't happen
 8001684:	2301      	movs	r3, #1
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	08009398 	.word	0x08009398
 8001694:	080093b8 	.word	0x080093b8
 8001698:	080093d8 	.word	0x080093d8
 800169c:	20001464 	.word	0x20001464
 80016a0:	20001440 	.word	0x20001440
 80016a4:	20001434 	.word	0x20001434
 80016a8:	08009404 	.word	0x08009404
 80016ac:	20001428 	.word	0x20001428
 80016b0:	20001458 	.word	0x20001458
 80016b4:	2000144c 	.word	0x2000144c

080016b8 <readAll>:

void readAll(I2C_HandleTypeDef *I2Cx, MPU9255_t*DataStruct) {
 80016b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016bc:	b08b      	sub	sp, #44	@ 0x2c
 80016be:	af06      	add	r7, sp, #24
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]
	uint8_t Data;

	// If intPin goes high, all data registers have new data
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, INT_STATUS, 1, &Data, 1, i2c_timeout);
 80016c4:	2364      	movs	r3, #100	@ 0x64
 80016c6:	9302      	str	r3, [sp, #8]
 80016c8:	2301      	movs	r3, #1
 80016ca:	9301      	str	r3, [sp, #4]
 80016cc:	f107 030f 	add.w	r3, r7, #15
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	2301      	movs	r3, #1
 80016d4:	223a      	movs	r2, #58	@ 0x3a
 80016d6:	21d0      	movs	r1, #208	@ 0xd0
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f004 f9fb 	bl	8005ad4 <HAL_I2C_Mem_Read>
	if (Data & 0x01) {  // On interrupt, check if data ready interrupt
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 8123 	beq.w	8001930 <readAll+0x278>
		readAccelData(I2Cx, accelCount);  // Read the x/y/z adc values
 80016ea:	4997      	ldr	r1, [pc, #604]	@ (8001948 <readAll+0x290>)
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 fc29 	bl	8001f44 <readAccelData>
		getAres();
 80016f2:	f000 fbf9 	bl	8001ee8 <getAres>

		// Now we'll calculate the accleration value into actual g's
		ax = (float)accelCount[0]*aRes; // - accelBias[0];  // get actual g value, this depends on scale being set
 80016f6:	4b94      	ldr	r3, [pc, #592]	@ (8001948 <readAll+0x290>)
 80016f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fabd 	bl	8000c7c <__aeabi_i2f>
 8001702:	4602      	mov	r2, r0
 8001704:	4b91      	ldr	r3, [pc, #580]	@ (800194c <readAll+0x294>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4619      	mov	r1, r3
 800170a:	4610      	mov	r0, r2
 800170c:	f7ff fb0a 	bl	8000d24 <__aeabi_fmul>
 8001710:	4603      	mov	r3, r0
 8001712:	461a      	mov	r2, r3
 8001714:	4b8e      	ldr	r3, [pc, #568]	@ (8001950 <readAll+0x298>)
 8001716:	601a      	str	r2, [r3, #0]
		ay = (float)accelCount[1]*aRes; // - accelBias[1];
 8001718:	4b8b      	ldr	r3, [pc, #556]	@ (8001948 <readAll+0x290>)
 800171a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff faac 	bl	8000c7c <__aeabi_i2f>
 8001724:	4602      	mov	r2, r0
 8001726:	4b89      	ldr	r3, [pc, #548]	@ (800194c <readAll+0x294>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4619      	mov	r1, r3
 800172c:	4610      	mov	r0, r2
 800172e:	f7ff faf9 	bl	8000d24 <__aeabi_fmul>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	4b87      	ldr	r3, [pc, #540]	@ (8001954 <readAll+0x29c>)
 8001738:	601a      	str	r2, [r3, #0]
		az = (float)accelCount[2]*aRes; // - accelBias[2];
 800173a:	4b83      	ldr	r3, [pc, #524]	@ (8001948 <readAll+0x290>)
 800173c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fa9b 	bl	8000c7c <__aeabi_i2f>
 8001746:	4602      	mov	r2, r0
 8001748:	4b80      	ldr	r3, [pc, #512]	@ (800194c <readAll+0x294>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4619      	mov	r1, r3
 800174e:	4610      	mov	r0, r2
 8001750:	f7ff fae8 	bl	8000d24 <__aeabi_fmul>
 8001754:	4603      	mov	r3, r0
 8001756:	461a      	mov	r2, r3
 8001758:	4b7f      	ldr	r3, [pc, #508]	@ (8001958 <readAll+0x2a0>)
 800175a:	601a      	str	r2, [r3, #0]

		DataStruct->AccelX = ax;
 800175c:	4b7c      	ldr	r3, [pc, #496]	@ (8001950 <readAll+0x298>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	601a      	str	r2, [r3, #0]
		DataStruct->AccelY = ay;
 8001764:	4b7b      	ldr	r3, [pc, #492]	@ (8001954 <readAll+0x29c>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	605a      	str	r2, [r3, #4]
		DataStruct->AccelZ = az;
 800176c:	4b7a      	ldr	r3, [pc, #488]	@ (8001958 <readAll+0x2a0>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	609a      	str	r2, [r3, #8]

		readGyroData(I2Cx, gyroCount);  // Read the x/y/z adc values
 8001774:	4979      	ldr	r1, [pc, #484]	@ (800195c <readAll+0x2a4>)
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 fc17 	bl	8001faa <readGyroData>
		getGres();
 800177c:	f000 fb82 	bl	8001e84 <getGres>

		// Calculate the gyro value into actual degrees per second
		gx = (float)gyroCount[0]*gRes;  // get actual gyro value, this depends on scale being set
 8001780:	4b76      	ldr	r3, [pc, #472]	@ (800195c <readAll+0x2a4>)
 8001782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fa78 	bl	8000c7c <__aeabi_i2f>
 800178c:	4602      	mov	r2, r0
 800178e:	4b74      	ldr	r3, [pc, #464]	@ (8001960 <readAll+0x2a8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4619      	mov	r1, r3
 8001794:	4610      	mov	r0, r2
 8001796:	f7ff fac5 	bl	8000d24 <__aeabi_fmul>
 800179a:	4603      	mov	r3, r0
 800179c:	461a      	mov	r2, r3
 800179e:	4b71      	ldr	r3, [pc, #452]	@ (8001964 <readAll+0x2ac>)
 80017a0:	601a      	str	r2, [r3, #0]
		gy = (float)gyroCount[1]*gRes;
 80017a2:	4b6e      	ldr	r3, [pc, #440]	@ (800195c <readAll+0x2a4>)
 80017a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fa67 	bl	8000c7c <__aeabi_i2f>
 80017ae:	4602      	mov	r2, r0
 80017b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001960 <readAll+0x2a8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4619      	mov	r1, r3
 80017b6:	4610      	mov	r0, r2
 80017b8:	f7ff fab4 	bl	8000d24 <__aeabi_fmul>
 80017bc:	4603      	mov	r3, r0
 80017be:	461a      	mov	r2, r3
 80017c0:	4b69      	ldr	r3, [pc, #420]	@ (8001968 <readAll+0x2b0>)
 80017c2:	601a      	str	r2, [r3, #0]
		gz = (float)gyroCount[2]*gRes;
 80017c4:	4b65      	ldr	r3, [pc, #404]	@ (800195c <readAll+0x2a4>)
 80017c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fa56 	bl	8000c7c <__aeabi_i2f>
 80017d0:	4602      	mov	r2, r0
 80017d2:	4b63      	ldr	r3, [pc, #396]	@ (8001960 <readAll+0x2a8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4619      	mov	r1, r3
 80017d8:	4610      	mov	r0, r2
 80017da:	f7ff faa3 	bl	8000d24 <__aeabi_fmul>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b62      	ldr	r3, [pc, #392]	@ (800196c <readAll+0x2b4>)
 80017e4:	601a      	str	r2, [r3, #0]

		DataStruct->GyroX = gx;
 80017e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001964 <readAll+0x2ac>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	60da      	str	r2, [r3, #12]
		DataStruct->GyroY = gy;
 80017ee:	4b5e      	ldr	r3, [pc, #376]	@ (8001968 <readAll+0x2b0>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	611a      	str	r2, [r3, #16]
		DataStruct->GyroZ = gz;
 80017f6:	4b5d      	ldr	r3, [pc, #372]	@ (800196c <readAll+0x2b4>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	615a      	str	r2, [r3, #20]

		readMagData(I2Cx, magCount);  // Read the x/y/z adc values
 80017fe:	495c      	ldr	r1, [pc, #368]	@ (8001970 <readAll+0x2b8>)
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 fc05 	bl	8002010 <readMagData>
		getMres();
 8001806:	f000 fb1f 	bl	8001e48 <getMres>

		// Calculate the magnetometer values in milliGauss
		// Include factory calibration per data sheet and user environmental corrections
		mx = (float)magCount[0]*mRes*magCalibration[0] - magBias[0];  // get actual magnetometer value, this depends on scale being set
 800180a:	4b59      	ldr	r3, [pc, #356]	@ (8001970 <readAll+0x2b8>)
 800180c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fa33 	bl	8000c7c <__aeabi_i2f>
 8001816:	4602      	mov	r2, r0
 8001818:	4b56      	ldr	r3, [pc, #344]	@ (8001974 <readAll+0x2bc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	4610      	mov	r0, r2
 8001820:	f7ff fa80 	bl	8000d24 <__aeabi_fmul>
 8001824:	4603      	mov	r3, r0
 8001826:	461a      	mov	r2, r3
 8001828:	4b53      	ldr	r3, [pc, #332]	@ (8001978 <readAll+0x2c0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	4610      	mov	r0, r2
 8001830:	f7ff fa78 	bl	8000d24 <__aeabi_fmul>
 8001834:	4603      	mov	r3, r0
 8001836:	461a      	mov	r2, r3
 8001838:	4b50      	ldr	r3, [pc, #320]	@ (800197c <readAll+0x2c4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4619      	mov	r1, r3
 800183e:	4610      	mov	r0, r2
 8001840:	f7ff f966 	bl	8000b10 <__aeabi_fsub>
 8001844:	4603      	mov	r3, r0
 8001846:	461a      	mov	r2, r3
 8001848:	4b4d      	ldr	r3, [pc, #308]	@ (8001980 <readAll+0x2c8>)
 800184a:	601a      	str	r2, [r3, #0]
		my = (float)magCount[1]*mRes*magCalibration[1] - magBias[1];
 800184c:	4b48      	ldr	r3, [pc, #288]	@ (8001970 <readAll+0x2b8>)
 800184e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fa12 	bl	8000c7c <__aeabi_i2f>
 8001858:	4602      	mov	r2, r0
 800185a:	4b46      	ldr	r3, [pc, #280]	@ (8001974 <readAll+0x2bc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4619      	mov	r1, r3
 8001860:	4610      	mov	r0, r2
 8001862:	f7ff fa5f 	bl	8000d24 <__aeabi_fmul>
 8001866:	4603      	mov	r3, r0
 8001868:	461a      	mov	r2, r3
 800186a:	4b43      	ldr	r3, [pc, #268]	@ (8001978 <readAll+0x2c0>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4619      	mov	r1, r3
 8001870:	4610      	mov	r0, r2
 8001872:	f7ff fa57 	bl	8000d24 <__aeabi_fmul>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	4b40      	ldr	r3, [pc, #256]	@ (800197c <readAll+0x2c4>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4619      	mov	r1, r3
 8001880:	4610      	mov	r0, r2
 8001882:	f7ff f945 	bl	8000b10 <__aeabi_fsub>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	4b3e      	ldr	r3, [pc, #248]	@ (8001984 <readAll+0x2cc>)
 800188c:	601a      	str	r2, [r3, #0]
		mz = (float)magCount[2]*mRes*magCalibration[2] - magBias[2];
 800188e:	4b38      	ldr	r3, [pc, #224]	@ (8001970 <readAll+0x2b8>)
 8001890:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff f9f1 	bl	8000c7c <__aeabi_i2f>
 800189a:	4602      	mov	r2, r0
 800189c:	4b35      	ldr	r3, [pc, #212]	@ (8001974 <readAll+0x2bc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4619      	mov	r1, r3
 80018a2:	4610      	mov	r0, r2
 80018a4:	f7ff fa3e 	bl	8000d24 <__aeabi_fmul>
 80018a8:	4603      	mov	r3, r0
 80018aa:	461a      	mov	r2, r3
 80018ac:	4b32      	ldr	r3, [pc, #200]	@ (8001978 <readAll+0x2c0>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4619      	mov	r1, r3
 80018b2:	4610      	mov	r0, r2
 80018b4:	f7ff fa36 	bl	8000d24 <__aeabi_fmul>
 80018b8:	4603      	mov	r3, r0
 80018ba:	461a      	mov	r2, r3
 80018bc:	4b2f      	ldr	r3, [pc, #188]	@ (800197c <readAll+0x2c4>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	4619      	mov	r1, r3
 80018c2:	4610      	mov	r0, r2
 80018c4:	f7ff f924 	bl	8000b10 <__aeabi_fsub>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001988 <readAll+0x2d0>)
 80018ce:	601a      	str	r2, [r3, #0]
		mx *= magScale[0];
 80018d0:	4b2e      	ldr	r3, [pc, #184]	@ (800198c <readAll+0x2d4>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a2a      	ldr	r2, [pc, #168]	@ (8001980 <readAll+0x2c8>)
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	4611      	mov	r1, r2
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fa22 	bl	8000d24 <__aeabi_fmul>
 80018e0:	4603      	mov	r3, r0
 80018e2:	461a      	mov	r2, r3
 80018e4:	4b26      	ldr	r3, [pc, #152]	@ (8001980 <readAll+0x2c8>)
 80018e6:	601a      	str	r2, [r3, #0]
		my *= magScale[1];
 80018e8:	4b28      	ldr	r3, [pc, #160]	@ (800198c <readAll+0x2d4>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	4a25      	ldr	r2, [pc, #148]	@ (8001984 <readAll+0x2cc>)
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	4611      	mov	r1, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fa16 	bl	8000d24 <__aeabi_fmul>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	4b21      	ldr	r3, [pc, #132]	@ (8001984 <readAll+0x2cc>)
 80018fe:	601a      	str	r2, [r3, #0]
		mz *= magScale[2];
 8001900:	4b22      	ldr	r3, [pc, #136]	@ (800198c <readAll+0x2d4>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	4a20      	ldr	r2, [pc, #128]	@ (8001988 <readAll+0x2d0>)
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	4611      	mov	r1, r2
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fa0a 	bl	8000d24 <__aeabi_fmul>
 8001910:	4603      	mov	r3, r0
 8001912:	461a      	mov	r2, r3
 8001914:	4b1c      	ldr	r3, [pc, #112]	@ (8001988 <readAll+0x2d0>)
 8001916:	601a      	str	r2, [r3, #0]

		DataStruct->MagX = mx;
 8001918:	4b19      	ldr	r3, [pc, #100]	@ (8001980 <readAll+0x2c8>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	619a      	str	r2, [r3, #24]
		DataStruct->MagY = my;
 8001920:	4b18      	ldr	r3, [pc, #96]	@ (8001984 <readAll+0x2cc>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	61da      	str	r2, [r3, #28]
		DataStruct->MagZ = mz;
 8001928:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <readAll+0x2d0>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	621a      	str	r2, [r3, #32]
	}

	//Now = __HAL_TIM_GET_COUNTER(&htim1);
	Now = HAL_GetTick();
 8001930:	f003 fbca 	bl	80050c8 <HAL_GetTick>
 8001934:	4603      	mov	r3, r0
 8001936:	4a16      	ldr	r2, [pc, #88]	@ (8001990 <readAll+0x2d8>)
 8001938:	6013      	str	r3, [r2, #0]
	deltat = ((Now - lastUpdate)/1000.0f); // set integration time by time elapsed since last filter update
 800193a:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <readAll+0x2d8>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <readAll+0x2dc>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	4618      	mov	r0, r3
 8001946:	e027      	b.n	8001998 <readAll+0x2e0>
 8001948:	20001410 	.word	0x20001410
 800194c:	20001404 	.word	0x20001404
 8001950:	20001498 	.word	0x20001498
 8001954:	2000149c 	.word	0x2000149c
 8001958:	200014a0 	.word	0x200014a0
 800195c:	20001418 	.word	0x20001418
 8001960:	20001408 	.word	0x20001408
 8001964:	200014a4 	.word	0x200014a4
 8001968:	200014a8 	.word	0x200014a8
 800196c:	200014ac 	.word	0x200014ac
 8001970:	20001420 	.word	0x20001420
 8001974:	2000140c 	.word	0x2000140c
 8001978:	20001428 	.word	0x20001428
 800197c:	2000144c 	.word	0x2000144c
 8001980:	200014b0 	.word	0x200014b0
 8001984:	200014b4 	.word	0x200014b4
 8001988:	200014b8 	.word	0x200014b8
 800198c:	20001458 	.word	0x20001458
 8001990:	20001494 	.word	0x20001494
 8001994:	20001490 	.word	0x20001490
 8001998:	f7ff f96c 	bl	8000c74 <__aeabi_ui2f>
 800199c:	4603      	mov	r3, r0
 800199e:	499c      	ldr	r1, [pc, #624]	@ (8001c10 <readAll+0x558>)
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fa73 	bl	8000e8c <__aeabi_fdiv>
 80019a6:	4603      	mov	r3, r0
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b9a      	ldr	r3, [pc, #616]	@ (8001c14 <readAll+0x55c>)
 80019ac:	601a      	str	r2, [r3, #0]
	lastUpdate = Now;
 80019ae:	4b9a      	ldr	r3, [pc, #616]	@ (8001c18 <readAll+0x560>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a9a      	ldr	r2, [pc, #616]	@ (8001c1c <readAll+0x564>)
 80019b4:	6013      	str	r3, [r2, #0]
	sum += deltat; // sum for averaging filter update rate
 80019b6:	4b9a      	ldr	r3, [pc, #616]	@ (8001c20 <readAll+0x568>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a96      	ldr	r2, [pc, #600]	@ (8001c14 <readAll+0x55c>)
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff f8a7 	bl	8000b14 <__addsf3>
 80019c6:	4603      	mov	r3, r0
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b95      	ldr	r3, [pc, #596]	@ (8001c20 <readAll+0x568>)
 80019cc:	601a      	str	r2, [r3, #0]

	// Calculate quaternions based on Madgwick's filter
	//Since MPU9250's mag. and IMU modules are different and seperate (AK8963 and MPU6050), their...
	//...coordinate systems also different. So, to compensate this, order should be my - mx - mz
	//QuaternionUpdate(-ax, ay, az, gx*PI/180.0f, -gy*PI/180.0f, -gz*PI/180.0f,  my,  -mx, mz);
	QuaternionUpdate(ax, ay, az, gx*PI/180.0f, gy*PI/180.0f, gz*PI/180.0f,  my,  mx, mz);
 80019ce:	4b95      	ldr	r3, [pc, #596]	@ (8001c24 <readAll+0x56c>)
 80019d0:	681c      	ldr	r4, [r3, #0]
 80019d2:	4b95      	ldr	r3, [pc, #596]	@ (8001c28 <readAll+0x570>)
 80019d4:	681d      	ldr	r5, [r3, #0]
 80019d6:	4b95      	ldr	r3, [pc, #596]	@ (8001c2c <readAll+0x574>)
 80019d8:	681e      	ldr	r6, [r3, #0]
 80019da:	4b95      	ldr	r3, [pc, #596]	@ (8001c30 <readAll+0x578>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fd1a 	bl	8000418 <__aeabi_f2d>
 80019e4:	a388      	add	r3, pc, #544	@ (adr r3, 8001c08 <readAll+0x550>)
 80019e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ea:	f7fe fd6d 	bl	80004c8 <__aeabi_dmul>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	4b8e      	ldr	r3, [pc, #568]	@ (8001c34 <readAll+0x57c>)
 80019fc:	f7fe fe8e 	bl	800071c <__aeabi_ddiv>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	f7ff f82e 	bl	8000a68 <__aeabi_d2f>
 8001a0c:	4681      	mov	r9, r0
 8001a0e:	4b8a      	ldr	r3, [pc, #552]	@ (8001c38 <readAll+0x580>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fd00 	bl	8000418 <__aeabi_f2d>
 8001a18:	a37b      	add	r3, pc, #492	@ (adr r3, 8001c08 <readAll+0x550>)
 8001a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1e:	f7fe fd53 	bl	80004c8 <__aeabi_dmul>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	4b81      	ldr	r3, [pc, #516]	@ (8001c34 <readAll+0x57c>)
 8001a30:	f7fe fe74 	bl	800071c <__aeabi_ddiv>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f7ff f814 	bl	8000a68 <__aeabi_d2f>
 8001a40:	4680      	mov	r8, r0
 8001a42:	4b7e      	ldr	r3, [pc, #504]	@ (8001c3c <readAll+0x584>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fce6 	bl	8000418 <__aeabi_f2d>
 8001a4c:	a36e      	add	r3, pc, #440	@ (adr r3, 8001c08 <readAll+0x550>)
 8001a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a52:	f7fe fd39 	bl	80004c8 <__aeabi_dmul>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	4b74      	ldr	r3, [pc, #464]	@ (8001c34 <readAll+0x57c>)
 8001a64:	f7fe fe5a 	bl	800071c <__aeabi_ddiv>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f7fe fffa 	bl	8000a68 <__aeabi_d2f>
 8001a74:	4b72      	ldr	r3, [pc, #456]	@ (8001c40 <readAll+0x588>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a72      	ldr	r2, [pc, #456]	@ (8001c44 <readAll+0x58c>)
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	4972      	ldr	r1, [pc, #456]	@ (8001c48 <readAll+0x590>)
 8001a7e:	6809      	ldr	r1, [r1, #0]
 8001a80:	9104      	str	r1, [sp, #16]
 8001a82:	9203      	str	r2, [sp, #12]
 8001a84:	9302      	str	r3, [sp, #8]
 8001a86:	9001      	str	r0, [sp, #4]
 8001a88:	f8cd 8000 	str.w	r8, [sp]
 8001a8c:	464b      	mov	r3, r9
 8001a8e:	4632      	mov	r2, r6
 8001a90:	4629      	mov	r1, r5
 8001a92:	4620      	mov	r0, r4
 8001a94:	f002 f896 	bl	8003bc4 <QuaternionUpdate>

	// Convert quaternions to Euler angles
	a12 =   2.0f * (q[1] * q[2] + q[0] * q[3]);
 8001a98:	4b6c      	ldr	r3, [pc, #432]	@ (8001c4c <readAll+0x594>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4a6b      	ldr	r2, [pc, #428]	@ (8001c4c <readAll+0x594>)
 8001a9e:	6892      	ldr	r2, [r2, #8]
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f93e 	bl	8000d24 <__aeabi_fmul>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461c      	mov	r4, r3
 8001aac:	4b67      	ldr	r3, [pc, #412]	@ (8001c4c <readAll+0x594>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a66      	ldr	r2, [pc, #408]	@ (8001c4c <readAll+0x594>)
 8001ab2:	68d2      	ldr	r2, [r2, #12]
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f934 	bl	8000d24 <__aeabi_fmul>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f7ff f827 	bl	8000b14 <__addsf3>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff f822 	bl	8000b14 <__addsf3>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b5e      	ldr	r3, [pc, #376]	@ (8001c50 <readAll+0x598>)
 8001ad6:	601a      	str	r2, [r3, #0]
	a22 =   q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3];
 8001ad8:	4b5c      	ldr	r3, [pc, #368]	@ (8001c4c <readAll+0x594>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a5b      	ldr	r2, [pc, #364]	@ (8001c4c <readAll+0x594>)
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff f91e 	bl	8000d24 <__aeabi_fmul>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	461c      	mov	r4, r3
 8001aec:	4b57      	ldr	r3, [pc, #348]	@ (8001c4c <readAll+0x594>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	4a56      	ldr	r2, [pc, #344]	@ (8001c4c <readAll+0x594>)
 8001af2:	6852      	ldr	r2, [r2, #4]
 8001af4:	4611      	mov	r1, r2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff f914 	bl	8000d24 <__aeabi_fmul>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4619      	mov	r1, r3
 8001b00:	4620      	mov	r0, r4
 8001b02:	f7ff f807 	bl	8000b14 <__addsf3>
 8001b06:	4603      	mov	r3, r0
 8001b08:	461c      	mov	r4, r3
 8001b0a:	4b50      	ldr	r3, [pc, #320]	@ (8001c4c <readAll+0x594>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	4a4f      	ldr	r2, [pc, #316]	@ (8001c4c <readAll+0x594>)
 8001b10:	6892      	ldr	r2, [r2, #8]
 8001b12:	4611      	mov	r1, r2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff f905 	bl	8000d24 <__aeabi_fmul>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4620      	mov	r0, r4
 8001b20:	f7fe fff6 	bl	8000b10 <__aeabi_fsub>
 8001b24:	4603      	mov	r3, r0
 8001b26:	461c      	mov	r4, r3
 8001b28:	4b48      	ldr	r3, [pc, #288]	@ (8001c4c <readAll+0x594>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	4a47      	ldr	r2, [pc, #284]	@ (8001c4c <readAll+0x594>)
 8001b2e:	68d2      	ldr	r2, [r2, #12]
 8001b30:	4611      	mov	r1, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff f8f6 	bl	8000d24 <__aeabi_fmul>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f7fe ffe7 	bl	8000b10 <__aeabi_fsub>
 8001b42:	4603      	mov	r3, r0
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b43      	ldr	r3, [pc, #268]	@ (8001c54 <readAll+0x59c>)
 8001b48:	601a      	str	r2, [r3, #0]
	a31 =   2.0f * (q[0] * q[1] + q[2] * q[3]);
 8001b4a:	4b40      	ldr	r3, [pc, #256]	@ (8001c4c <readAll+0x594>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a3f      	ldr	r2, [pc, #252]	@ (8001c4c <readAll+0x594>)
 8001b50:	6852      	ldr	r2, [r2, #4]
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff f8e5 	bl	8000d24 <__aeabi_fmul>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	461c      	mov	r4, r3
 8001b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c4c <readAll+0x594>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	4a3a      	ldr	r2, [pc, #232]	@ (8001c4c <readAll+0x594>)
 8001b64:	68d2      	ldr	r2, [r2, #12]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff f8db 	bl	8000d24 <__aeabi_fmul>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4619      	mov	r1, r3
 8001b72:	4620      	mov	r0, r4
 8001b74:	f7fe ffce 	bl	8000b14 <__addsf3>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe ffc9 	bl	8000b14 <__addsf3>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b34      	ldr	r3, [pc, #208]	@ (8001c58 <readAll+0x5a0>)
 8001b88:	601a      	str	r2, [r3, #0]
	a32 =   2.0f * (q[1] * q[3] - q[0] * q[2]);
 8001b8a:	4b30      	ldr	r3, [pc, #192]	@ (8001c4c <readAll+0x594>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4a2f      	ldr	r2, [pc, #188]	@ (8001c4c <readAll+0x594>)
 8001b90:	68d2      	ldr	r2, [r2, #12]
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff f8c5 	bl	8000d24 <__aeabi_fmul>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	461c      	mov	r4, r3
 8001b9e:	4b2b      	ldr	r3, [pc, #172]	@ (8001c4c <readAll+0x594>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a2a      	ldr	r2, [pc, #168]	@ (8001c4c <readAll+0x594>)
 8001ba4:	6892      	ldr	r2, [r2, #8]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff f8bb 	bl	8000d24 <__aeabi_fmul>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	f7fe ffac 	bl	8000b10 <__aeabi_fsub>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe ffa9 	bl	8000b14 <__addsf3>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b25      	ldr	r3, [pc, #148]	@ (8001c5c <readAll+0x5a4>)
 8001bc8:	601a      	str	r2, [r3, #0]
	a33 =   q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3];
 8001bca:	4b20      	ldr	r3, [pc, #128]	@ (8001c4c <readAll+0x594>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a1f      	ldr	r2, [pc, #124]	@ (8001c4c <readAll+0x594>)
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff f8a5 	bl	8000d24 <__aeabi_fmul>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	461c      	mov	r4, r3
 8001bde:	4b1b      	ldr	r3, [pc, #108]	@ (8001c4c <readAll+0x594>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	4a1a      	ldr	r2, [pc, #104]	@ (8001c4c <readAll+0x594>)
 8001be4:	6852      	ldr	r2, [r2, #4]
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff f89b 	bl	8000d24 <__aeabi_fmul>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f7fe ff8c 	bl	8000b10 <__aeabi_fsub>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461c      	mov	r4, r3
 8001bfc:	4b13      	ldr	r3, [pc, #76]	@ (8001c4c <readAll+0x594>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	4a12      	ldr	r2, [pc, #72]	@ (8001c4c <readAll+0x594>)
 8001c02:	6892      	ldr	r2, [r2, #8]
 8001c04:	e02c      	b.n	8001c60 <readAll+0x5a8>
 8001c06:	bf00      	nop
 8001c08:	35f80991 	.word	0x35f80991
 8001c0c:	40092492 	.word	0x40092492
 8001c10:	447a0000 	.word	0x447a0000
 8001c14:	20001488 	.word	0x20001488
 8001c18:	20001494 	.word	0x20001494
 8001c1c:	20001490 	.word	0x20001490
 8001c20:	2000148c 	.word	0x2000148c
 8001c24:	20001498 	.word	0x20001498
 8001c28:	2000149c 	.word	0x2000149c
 8001c2c:	200014a0 	.word	0x200014a0
 8001c30:	200014a4 	.word	0x200014a4
 8001c34:	40668000 	.word	0x40668000
 8001c38:	200014a8 	.word	0x200014a8
 8001c3c:	200014ac 	.word	0x200014ac
 8001c40:	200014b4 	.word	0x200014b4
 8001c44:	200014b0 	.word	0x200014b0
 8001c48:	200014b8 	.word	0x200014b8
 8001c4c:	20000008 	.word	0x20000008
 8001c50:	200014c8 	.word	0x200014c8
 8001c54:	200014cc 	.word	0x200014cc
 8001c58:	200014d0 	.word	0x200014d0
 8001c5c:	200014d4 	.word	0x200014d4
 8001c60:	4611      	mov	r1, r2
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff f85e 	bl	8000d24 <__aeabi_fmul>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f7fe ff4f 	bl	8000b10 <__aeabi_fsub>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461c      	mov	r4, r3
 8001c76:	4b62      	ldr	r3, [pc, #392]	@ (8001e00 <readAll+0x748>)
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	4a61      	ldr	r2, [pc, #388]	@ (8001e00 <readAll+0x748>)
 8001c7c:	68d2      	ldr	r2, [r2, #12]
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff f84f 	bl	8000d24 <__aeabi_fmul>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	f7fe ff42 	bl	8000b14 <__addsf3>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	4b5b      	ldr	r3, [pc, #364]	@ (8001e04 <readAll+0x74c>)
 8001c96:	601a      	str	r2, [r3, #0]

	pitch = -asinf(a32);
 8001c98:	4b5b      	ldr	r3, [pc, #364]	@ (8001e08 <readAll+0x750>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f006 f93d 	bl	8007f1c <asinf>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001ca8:	4a58      	ldr	r2, [pc, #352]	@ (8001e0c <readAll+0x754>)
 8001caa:	6013      	str	r3, [r2, #0]
	roll  = atan2f(a31, a33);
 8001cac:	4b58      	ldr	r3, [pc, #352]	@ (8001e10 <readAll+0x758>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a54      	ldr	r2, [pc, #336]	@ (8001e04 <readAll+0x74c>)
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f006 f950 	bl	8007f5c <atan2f>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4a55      	ldr	r2, [pc, #340]	@ (8001e14 <readAll+0x75c>)
 8001cc0:	6013      	str	r3, [r2, #0]
	yaw   = atan2f(a12, a22);
 8001cc2:	4b55      	ldr	r3, [pc, #340]	@ (8001e18 <readAll+0x760>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a55      	ldr	r2, [pc, #340]	@ (8001e1c <readAll+0x764>)
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f006 f945 	bl	8007f5c <atan2f>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	4a52      	ldr	r2, [pc, #328]	@ (8001e20 <readAll+0x768>)
 8001cd6:	6013      	str	r3, [r2, #0]
	pitch *= 180.0f / PI;
 8001cd8:	4b4c      	ldr	r3, [pc, #304]	@ (8001e0c <readAll+0x754>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fb9b 	bl	8000418 <__aeabi_f2d>
 8001ce2:	a345      	add	r3, pc, #276	@ (adr r3, 8001df8 <readAll+0x740>)
 8001ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce8:	f7fe fbee 	bl	80004c8 <__aeabi_dmul>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f7fe feb8 	bl	8000a68 <__aeabi_d2f>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	4a44      	ldr	r2, [pc, #272]	@ (8001e0c <readAll+0x754>)
 8001cfc:	6013      	str	r3, [r2, #0]
	yaw   *= 180.0f / PI;
 8001cfe:	4b48      	ldr	r3, [pc, #288]	@ (8001e20 <readAll+0x768>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fb88 	bl	8000418 <__aeabi_f2d>
 8001d08:	a33b      	add	r3, pc, #236	@ (adr r3, 8001df8 <readAll+0x740>)
 8001d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0e:	f7fe fbdb 	bl	80004c8 <__aeabi_dmul>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4610      	mov	r0, r2
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f7fe fea5 	bl	8000a68 <__aeabi_d2f>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	4a3f      	ldr	r2, [pc, #252]	@ (8001e20 <readAll+0x768>)
 8001d22:	6013      	str	r3, [r2, #0]
	yaw   += 5.53f; // Declination
 8001d24:	4b3e      	ldr	r3, [pc, #248]	@ (8001e20 <readAll+0x768>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	493e      	ldr	r1, [pc, #248]	@ (8001e24 <readAll+0x76c>)
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fef2 	bl	8000b14 <__addsf3>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461a      	mov	r2, r3
 8001d34:	4b3a      	ldr	r3, [pc, #232]	@ (8001e20 <readAll+0x768>)
 8001d36:	601a      	str	r2, [r3, #0]

	if(yaw < 0) yaw   += 360.0f; // Ensure yaw stays between 0 and 360
 8001d38:	4b39      	ldr	r3, [pc, #228]	@ (8001e20 <readAll+0x768>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f04f 0100 	mov.w	r1, #0
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff f98d 	bl	8001060 <__aeabi_fcmplt>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d009      	beq.n	8001d60 <readAll+0x6a8>
 8001d4c:	4b34      	ldr	r3, [pc, #208]	@ (8001e20 <readAll+0x768>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4935      	ldr	r1, [pc, #212]	@ (8001e28 <readAll+0x770>)
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fede 	bl	8000b14 <__addsf3>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b30      	ldr	r3, [pc, #192]	@ (8001e20 <readAll+0x768>)
 8001d5e:	601a      	str	r2, [r3, #0]
	roll  *= 180.0f / PI;
 8001d60:	4b2c      	ldr	r3, [pc, #176]	@ (8001e14 <readAll+0x75c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fb57 	bl	8000418 <__aeabi_f2d>
 8001d6a:	a323      	add	r3, pc, #140	@ (adr r3, 8001df8 <readAll+0x740>)
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	f7fe fbaa 	bl	80004c8 <__aeabi_dmul>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f7fe fe74 	bl	8000a68 <__aeabi_d2f>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4a24      	ldr	r2, [pc, #144]	@ (8001e14 <readAll+0x75c>)
 8001d84:	6013      	str	r3, [r2, #0]
	lin_ax = ax + a31;
 8001d86:	4b29      	ldr	r3, [pc, #164]	@ (8001e2c <readAll+0x774>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a21      	ldr	r2, [pc, #132]	@ (8001e10 <readAll+0x758>)
 8001d8c:	6812      	ldr	r2, [r2, #0]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe febf 	bl	8000b14 <__addsf3>
 8001d96:	4603      	mov	r3, r0
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b25      	ldr	r3, [pc, #148]	@ (8001e30 <readAll+0x778>)
 8001d9c:	601a      	str	r2, [r3, #0]
	lin_ay = ay + a32;
 8001d9e:	4b25      	ldr	r3, [pc, #148]	@ (8001e34 <readAll+0x77c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a19      	ldr	r2, [pc, #100]	@ (8001e08 <readAll+0x750>)
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe feb3 	bl	8000b14 <__addsf3>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b21      	ldr	r3, [pc, #132]	@ (8001e38 <readAll+0x780>)
 8001db4:	601a      	str	r2, [r3, #0]
	lin_az = az - a33;
 8001db6:	4b21      	ldr	r3, [pc, #132]	@ (8001e3c <readAll+0x784>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a12      	ldr	r2, [pc, #72]	@ (8001e04 <readAll+0x74c>)
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fea5 	bl	8000b10 <__aeabi_fsub>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b1d      	ldr	r3, [pc, #116]	@ (8001e40 <readAll+0x788>)
 8001dcc:	601a      	str	r2, [r3, #0]


	DataStruct->yaw = yaw;
 8001dce:	4b14      	ldr	r3, [pc, #80]	@ (8001e20 <readAll+0x768>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	62da      	str	r2, [r3, #44]	@ 0x2c
	DataStruct->pitch = pitch;
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e0c <readAll+0x754>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	625a      	str	r2, [r3, #36]	@ 0x24
	DataStruct->roll = roll;
 8001dde:	4b0d      	ldr	r3, [pc, #52]	@ (8001e14 <readAll+0x75c>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	629a      	str	r2, [r3, #40]	@ 0x28

	sum = 0;
 8001de6:	4b17      	ldr	r3, [pc, #92]	@ (8001e44 <readAll+0x78c>)
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
	}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001df8:	d0051a32 	.word	0xd0051a32
 8001dfc:	404ca2e8 	.word	0x404ca2e8
 8001e00:	20000008 	.word	0x20000008
 8001e04:	200014d8 	.word	0x200014d8
 8001e08:	200014d4 	.word	0x200014d4
 8001e0c:	2000147c 	.word	0x2000147c
 8001e10:	200014d0 	.word	0x200014d0
 8001e14:	20001484 	.word	0x20001484
 8001e18:	200014c8 	.word	0x200014c8
 8001e1c:	200014cc 	.word	0x200014cc
 8001e20:	20001480 	.word	0x20001480
 8001e24:	40b0f5c3 	.word	0x40b0f5c3
 8001e28:	43b40000 	.word	0x43b40000
 8001e2c:	20001498 	.word	0x20001498
 8001e30:	200014bc 	.word	0x200014bc
 8001e34:	2000149c 	.word	0x2000149c
 8001e38:	200014c0 	.word	0x200014c0
 8001e3c:	200014a0 	.word	0x200014a0
 8001e40:	200014c4 	.word	0x200014c4
 8001e44:	2000148c 	.word	0x2000148c

08001e48 <getMres>:

//==========================================================================================================
//====== FUNCTIONS TO READ AND WRITE DATA FROM REGISTERS AND ALSO INITS KALMAN AND QUATERNION FILTERS ======
//==========================================================================================================

void getMres() {
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  switch (Mscale)
 8001e4c:	4b09      	ldr	r3, [pc, #36]	@ (8001e74 <getMres+0x2c>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <getMres+0x12>
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d004      	beq.n	8001e62 <getMres+0x1a>
          break;
    case MFS_16BITS:
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
          break;
  }
}
 8001e58:	e007      	b.n	8001e6a <getMres+0x22>
          mRes = 10.*4912./8190.; // Proper scale to return milliGauss
 8001e5a:	4b07      	ldr	r3, [pc, #28]	@ (8001e78 <getMres+0x30>)
 8001e5c:	4a07      	ldr	r2, [pc, #28]	@ (8001e7c <getMres+0x34>)
 8001e5e:	601a      	str	r2, [r3, #0]
          break;
 8001e60:	e003      	b.n	8001e6a <getMres+0x22>
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
 8001e62:	4b05      	ldr	r3, [pc, #20]	@ (8001e78 <getMres+0x30>)
 8001e64:	4a06      	ldr	r2, [pc, #24]	@ (8001e80 <getMres+0x38>)
 8001e66:	601a      	str	r2, [r3, #0]
          break;
 8001e68:	bf00      	nop
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000002 	.word	0x20000002
 8001e78:	2000140c 	.word	0x2000140c
 8001e7c:	40bfebff 	.word	0x40bfebff
 8001e80:	3fbfebff 	.word	0x3fbfebff

08001e84 <getGres>:

void getGres() {
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  switch (Gscale)
 8001e88:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <getGres+0x4c>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d81b      	bhi.n	8001ec8 <getGres+0x44>
 8001e90:	a201      	add	r2, pc, #4	@ (adr r2, 8001e98 <getGres+0x14>)
 8001e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e96:	bf00      	nop
 8001e98:	08001ea9 	.word	0x08001ea9
 8001e9c:	08001eb1 	.word	0x08001eb1
 8001ea0:	08001eb9 	.word	0x08001eb9
 8001ea4:	08001ec1 	.word	0x08001ec1
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          gRes = 250.0/32768.0;
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed4 <getGres+0x50>)
 8001eaa:	4a0b      	ldr	r2, [pc, #44]	@ (8001ed8 <getGres+0x54>)
 8001eac:	601a      	str	r2, [r3, #0]
          break;
 8001eae:	e00b      	b.n	8001ec8 <getGres+0x44>
    case GFS_500DPS:
          gRes = 500.0/32768.0;
 8001eb0:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <getGres+0x50>)
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001edc <getGres+0x58>)
 8001eb4:	601a      	str	r2, [r3, #0]
          break;
 8001eb6:	e007      	b.n	8001ec8 <getGres+0x44>
    case GFS_1000DPS:
          gRes = 1000.0/32768.0;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <getGres+0x50>)
 8001eba:	4a09      	ldr	r2, [pc, #36]	@ (8001ee0 <getGres+0x5c>)
 8001ebc:	601a      	str	r2, [r3, #0]
          break;
 8001ebe:	e003      	b.n	8001ec8 <getGres+0x44>
    case GFS_2000DPS:
          gRes = 2000.0/32768.0;
 8001ec0:	4b04      	ldr	r3, [pc, #16]	@ (8001ed4 <getGres+0x50>)
 8001ec2:	4a08      	ldr	r2, [pc, #32]	@ (8001ee4 <getGres+0x60>)
 8001ec4:	601a      	str	r2, [r3, #0]
          break;
 8001ec6:	bf00      	nop
  }
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20001408 	.word	0x20001408
 8001ed8:	3bfa0000 	.word	0x3bfa0000
 8001edc:	3c7a0000 	.word	0x3c7a0000
 8001ee0:	3cfa0000 	.word	0x3cfa0000
 8001ee4:	3d7a0000 	.word	0x3d7a0000

08001ee8 <getAres>:

void getAres() {
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  switch (Ascale)
 8001eec:	4b13      	ldr	r3, [pc, #76]	@ (8001f3c <getAres+0x54>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d81f      	bhi.n	8001f34 <getAres+0x4c>
 8001ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8001efc <getAres+0x14>)
 8001ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efa:	bf00      	nop
 8001efc:	08001f0d 	.word	0x08001f0d
 8001f00:	08001f17 	.word	0x08001f17
 8001f04:	08001f21 	.word	0x08001f21
 8001f08:	08001f2b 	.word	0x08001f2b
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
          aRes = 2.0/32768.0;
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f40 <getAres+0x58>)
 8001f0e:	f04f 5262 	mov.w	r2, #947912704	@ 0x38800000
 8001f12:	601a      	str	r2, [r3, #0]
          break;
 8001f14:	e00e      	b.n	8001f34 <getAres+0x4c>
    case AFS_4G:
          aRes = 4.0/32768.0;
 8001f16:	4b0a      	ldr	r3, [pc, #40]	@ (8001f40 <getAres+0x58>)
 8001f18:	f04f 5264 	mov.w	r2, #956301312	@ 0x39000000
 8001f1c:	601a      	str	r2, [r3, #0]
          break;
 8001f1e:	e009      	b.n	8001f34 <getAres+0x4c>
    case AFS_8G:
          aRes = 8.0/32768.0;
 8001f20:	4b07      	ldr	r3, [pc, #28]	@ (8001f40 <getAres+0x58>)
 8001f22:	f04f 5266 	mov.w	r2, #964689920	@ 0x39800000
 8001f26:	601a      	str	r2, [r3, #0]
          break;
 8001f28:	e004      	b.n	8001f34 <getAres+0x4c>
    case AFS_16G:
          aRes = 16.0/32768.0;
 8001f2a:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <getAres+0x58>)
 8001f2c:	f04f 5268 	mov.w	r2, #973078528	@ 0x3a000000
 8001f30:	601a      	str	r2, [r3, #0]
          break;
 8001f32:	bf00      	nop
  }
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	20000001 	.word	0x20000001
 8001f40:	20001404 	.word	0x20001404

08001f44 <readAccelData>:

//read raw Accelerometer values from registers
void readAccelData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af04      	add	r7, sp, #16
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint8_t rawAccelData[6];  // x/y/z accel register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawAccelData[0], 6, i2c_timeout); // Read the six raw data registers into data array
 8001f4e:	2364      	movs	r3, #100	@ 0x64
 8001f50:	9302      	str	r3, [sp, #8]
 8001f52:	2306      	movs	r3, #6
 8001f54:	9301      	str	r3, [sp, #4]
 8001f56:	f107 0308 	add.w	r3, r7, #8
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	223b      	movs	r2, #59	@ 0x3b
 8001f60:	21d0      	movs	r1, #208	@ 0xd0
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f003 fdb6 	bl	8005ad4 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawAccelData[0] << 8) | rawAccelData[1];  // Turn the MSB and LSB into a signed 16-bit value
 8001f68:	7a3b      	ldrb	r3, [r7, #8]
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	b21a      	sxth	r2, r3
 8001f6e:	7a7b      	ldrb	r3, [r7, #9]
 8001f70:	b21b      	sxth	r3, r3
 8001f72:	4313      	orrs	r3, r2
 8001f74:	b21a      	sxth	r2, r3
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawAccelData[2] << 8) | rawAccelData[3];
 8001f7a:	7abb      	ldrb	r3, [r7, #10]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	b219      	sxth	r1, r3
 8001f80:	7afb      	ldrb	r3, [r7, #11]
 8001f82:	b21a      	sxth	r2, r3
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	3302      	adds	r3, #2
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	b212      	sxth	r2, r2
 8001f8c:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawAccelData[4] << 8) | rawAccelData[5];
 8001f8e:	7b3b      	ldrb	r3, [r7, #12]
 8001f90:	021b      	lsls	r3, r3, #8
 8001f92:	b219      	sxth	r1, r3
 8001f94:	7b7b      	ldrb	r3, [r7, #13]
 8001f96:	b21a      	sxth	r2, r3
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	b212      	sxth	r2, r2
 8001fa0:	801a      	strh	r2, [r3, #0]
	printf("Acc X: %d\r\n", destination[0]);
	printf("Acc Y: %d\r\n", destination[1]);
	printf("Acc Z: %d\r\n", destination[2]);
	printf("-------------------------\r\n");
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <readGyroData>:

//read raw Gyro values from registers
void readGyroData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b088      	sub	sp, #32
 8001fae:	af04      	add	r7, sp, #16
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	6039      	str	r1, [r7, #0]
  uint8_t rawGyroData[6];  // x/y/z gyro register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawGyroData[0], 6, i2c_timeout);  // Read the six raw data registers sequentially into data array
 8001fb4:	2364      	movs	r3, #100	@ 0x64
 8001fb6:	9302      	str	r3, [sp, #8]
 8001fb8:	2306      	movs	r3, #6
 8001fba:	9301      	str	r3, [sp, #4]
 8001fbc:	f107 0308 	add.w	r3, r7, #8
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	2243      	movs	r2, #67	@ 0x43
 8001fc6:	21d0      	movs	r1, #208	@ 0xd0
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f003 fd83 	bl	8005ad4 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawGyroData[0] << 8) | rawGyroData[1];  // Turn the MSB and LSB into a signed 16-bit value
 8001fce:	7a3b      	ldrb	r3, [r7, #8]
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	b21a      	sxth	r2, r3
 8001fd4:	7a7b      	ldrb	r3, [r7, #9]
 8001fd6:	b21b      	sxth	r3, r3
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	b21a      	sxth	r2, r3
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawGyroData[2] << 8) | rawGyroData[3];
 8001fe0:	7abb      	ldrb	r3, [r7, #10]
 8001fe2:	021b      	lsls	r3, r3, #8
 8001fe4:	b219      	sxth	r1, r3
 8001fe6:	7afb      	ldrb	r3, [r7, #11]
 8001fe8:	b21a      	sxth	r2, r3
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	3302      	adds	r3, #2
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	b212      	sxth	r2, r2
 8001ff2:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawGyroData[4] << 8) | rawGyroData[5];
 8001ff4:	7b3b      	ldrb	r3, [r7, #12]
 8001ff6:	021b      	lsls	r3, r3, #8
 8001ff8:	b219      	sxth	r1, r3
 8001ffa:	7b7b      	ldrb	r3, [r7, #13]
 8001ffc:	b21a      	sxth	r2, r3
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	3304      	adds	r3, #4
 8002002:	430a      	orrs	r2, r1
 8002004:	b212      	sxth	r2, r2
 8002006:	801a      	strh	r2, [r3, #0]
	printf("Gyro X: %d\r\n", destination[0]);
	printf("Gyro Y: %d\r\n", destination[1]);
	printf("Gyro Z: %d\r\n", destination[2]);
	printf("---------------------------\r\n");
  }
}
 8002008:	bf00      	nop
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <readMagData>:

void readMagData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	@ 0x28
 8002014:	af04      	add	r7, sp, #16
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]

	uint8_t readData;

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ST1, 1, &readData, 1, i2c_timeout);
 800201a:	2364      	movs	r3, #100	@ 0x64
 800201c:	9302      	str	r3, [sp, #8]
 800201e:	2301      	movs	r3, #1
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	f107 0316 	add.w	r3, r7, #22
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2301      	movs	r3, #1
 800202a:	2202      	movs	r2, #2
 800202c:	2118      	movs	r1, #24
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f003 fd50 	bl	8005ad4 <HAL_I2C_Mem_Read>
	if( (readData & 0x01) == 0x01 ){
 8002034:	7dbb      	ldrb	r3, [r7, #22]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d030      	beq.n	80020a0 <readMagData+0x90>
		uint8_t rawMagData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_XOUT_L, 1, &rawMagData[0], 7, i2c_timeout);  // Read the six raw data and ST2 registers sequentially into data array
 800203e:	2364      	movs	r3, #100	@ 0x64
 8002040:	9302      	str	r3, [sp, #8]
 8002042:	2307      	movs	r3, #7
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	f107 030c 	add.w	r3, r7, #12
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	2301      	movs	r3, #1
 800204e:	2203      	movs	r2, #3
 8002050:	2118      	movs	r1, #24
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f003 fd3e 	bl	8005ad4 <HAL_I2C_Mem_Read>
		uint8_t c = rawMagData[6];
 8002058:	7cbb      	ldrb	r3, [r7, #18]
 800205a:	75fb      	strb	r3, [r7, #23]
		if(!(c & 0x08)) {
 800205c:	7dfb      	ldrb	r3, [r7, #23]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d11c      	bne.n	80020a0 <readMagData+0x90>
			destination[0] = ((int16_t)rawMagData[1] << 8) | rawMagData[0] ;  // Turn the MSB and LSB into a signed 16-bit value
 8002066:	7b7b      	ldrb	r3, [r7, #13]
 8002068:	021b      	lsls	r3, r3, #8
 800206a:	b21a      	sxth	r2, r3
 800206c:	7b3b      	ldrb	r3, [r7, #12]
 800206e:	b21b      	sxth	r3, r3
 8002070:	4313      	orrs	r3, r2
 8002072:	b21a      	sxth	r2, r3
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	801a      	strh	r2, [r3, #0]
			destination[1] = ((int16_t)rawMagData[3] << 8) | rawMagData[2] ;  // Data stored as little Endian
 8002078:	7bfb      	ldrb	r3, [r7, #15]
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	b219      	sxth	r1, r3
 800207e:	7bbb      	ldrb	r3, [r7, #14]
 8002080:	b21a      	sxth	r2, r3
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	3302      	adds	r3, #2
 8002086:	430a      	orrs	r2, r1
 8002088:	b212      	sxth	r2, r2
 800208a:	801a      	strh	r2, [r3, #0]
			destination[2] = ((int16_t)rawMagData[5] << 8) | rawMagData[4] ;
 800208c:	7c7b      	ldrb	r3, [r7, #17]
 800208e:	021b      	lsls	r3, r3, #8
 8002090:	b219      	sxth	r1, r3
 8002092:	7c3b      	ldrb	r3, [r7, #16]
 8002094:	b21a      	sxth	r2, r3
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	3304      	adds	r3, #4
 800209a:	430a      	orrs	r2, r1
 800209c:	b212      	sxth	r2, r2
 800209e:	801a      	strh	r2, [r3, #0]
				printf("Mag Z: %d\r\n", destination[2]);
				printf("-------------------------\r\n");
			}
		}
	}
}
 80020a0:	bf00      	nop
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <initAK8963>:

void initAK8963(I2C_HandleTypeDef *I2Cx, float * destination){
 80020a8:	b590      	push	{r4, r7, lr}
 80020aa:	b089      	sub	sp, #36	@ 0x24
 80020ac:	af04      	add	r7, sp, #16
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  //First extract the factory calibration for each magnetometer axis
  // x/y/z gyro calibration data stored here
  uint8_t rawMagCalData[3];

  //Power down magnetometer
  writeData = 0x00;
 80020b2:	2300      	movs	r3, #0
 80020b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
 80020b6:	2364      	movs	r3, #100	@ 0x64
 80020b8:	9302      	str	r3, [sp, #8]
 80020ba:	2301      	movs	r3, #1
 80020bc:	9301      	str	r3, [sp, #4]
 80020be:	f107 030f 	add.w	r3, r7, #15
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	2301      	movs	r3, #1
 80020c6:	220a      	movs	r2, #10
 80020c8:	2118      	movs	r1, #24
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f003 fc08 	bl	80058e0 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 80020d0:	2064      	movs	r0, #100	@ 0x64
 80020d2:	f003 f803 	bl	80050dc <HAL_Delay>

  writeData = 0x0F;
 80020d6:	230f      	movs	r3, #15
 80020d8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Enter Fuse ROM access mode
 80020da:	2364      	movs	r3, #100	@ 0x64
 80020dc:	9302      	str	r3, [sp, #8]
 80020de:	2301      	movs	r3, #1
 80020e0:	9301      	str	r3, [sp, #4]
 80020e2:	f107 030f 	add.w	r3, r7, #15
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2301      	movs	r3, #1
 80020ea:	220a      	movs	r2, #10
 80020ec:	2118      	movs	r1, #24
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f003 fbf6 	bl	80058e0 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 80020f4:	2064      	movs	r0, #100	@ 0x64
 80020f6:	f002 fff1 	bl	80050dc <HAL_Delay>


  HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ASAX, 1, &rawMagCalData[0], 3, i2c_timeout);// Read the x-, y-, and z-axis calibration values
 80020fa:	2364      	movs	r3, #100	@ 0x64
 80020fc:	9302      	str	r3, [sp, #8]
 80020fe:	2303      	movs	r3, #3
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	f107 030c 	add.w	r3, r7, #12
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	2301      	movs	r3, #1
 800210a:	2210      	movs	r2, #16
 800210c:	2118      	movs	r1, #24
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f003 fce0 	bl	8005ad4 <HAL_I2C_Mem_Read>
  destination[0] =  (float)(rawMagCalData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
 8002114:	7b3b      	ldrb	r3, [r7, #12]
 8002116:	3b80      	subs	r3, #128	@ 0x80
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe fdaf 	bl	8000c7c <__aeabi_i2f>
 800211e:	4603      	mov	r3, r0
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe f979 	bl	8000418 <__aeabi_f2d>
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	4b57      	ldr	r3, [pc, #348]	@ (8002288 <initAK8963+0x1e0>)
 800212c:	f7fe faf6 	bl	800071c <__aeabi_ddiv>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	4b53      	ldr	r3, [pc, #332]	@ (800228c <initAK8963+0x1e4>)
 800213e:	f7fe f80d 	bl	800015c <__adddf3>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	f7fe fc8d 	bl	8000a68 <__aeabi_d2f>
 800214e:	4602      	mov	r2, r0
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	601a      	str	r2, [r3, #0]
  destination[1] =  (float)(rawMagCalData[1] - 128)/256. + 1.;
 8002154:	7b7b      	ldrb	r3, [r7, #13]
 8002156:	3b80      	subs	r3, #128	@ 0x80
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe fd8f 	bl	8000c7c <__aeabi_i2f>
 800215e:	4603      	mov	r3, r0
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe f959 	bl	8000418 <__aeabi_f2d>
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	4b47      	ldr	r3, [pc, #284]	@ (8002288 <initAK8963+0x1e0>)
 800216c:	f7fe fad6 	bl	800071c <__aeabi_ddiv>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	4b43      	ldr	r3, [pc, #268]	@ (800228c <initAK8963+0x1e4>)
 800217e:	f7fd ffed 	bl	800015c <__adddf3>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	1d1c      	adds	r4, r3, #4
 800218e:	f7fe fc6b 	bl	8000a68 <__aeabi_d2f>
 8002192:	4603      	mov	r3, r0
 8002194:	6023      	str	r3, [r4, #0]
  destination[2] =  (float)(rawMagCalData[2] - 128)/256. + 1.;
 8002196:	7bbb      	ldrb	r3, [r7, #14]
 8002198:	3b80      	subs	r3, #128	@ 0x80
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fd6e 	bl	8000c7c <__aeabi_i2f>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f938 	bl	8000418 <__aeabi_f2d>
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	4b36      	ldr	r3, [pc, #216]	@ (8002288 <initAK8963+0x1e0>)
 80021ae:	f7fe fab5 	bl	800071c <__aeabi_ddiv>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4610      	mov	r0, r2
 80021b8:	4619      	mov	r1, r3
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	4b33      	ldr	r3, [pc, #204]	@ (800228c <initAK8963+0x1e4>)
 80021c0:	f7fd ffcc 	bl	800015c <__adddf3>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4610      	mov	r0, r2
 80021ca:	4619      	mov	r1, r3
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f103 0408 	add.w	r4, r3, #8
 80021d2:	f7fe fc49 	bl	8000a68 <__aeabi_d2f>
 80021d6:	4603      	mov	r3, r0
 80021d8:	6023      	str	r3, [r4, #0]

  if(SerialDebugA){
	printf("Mag cal off X: %f\r\n", destination[0]);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe f91a 	bl	8000418 <__aeabi_f2d>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4829      	ldr	r0, [pc, #164]	@ (8002290 <initAK8963+0x1e8>)
 80021ea:	f004 ff59 	bl	80070a0 <iprintf>
	printf("Mag cal off Y: %f\r\n", destination[1]);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	3304      	adds	r3, #4
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe f90f 	bl	8000418 <__aeabi_f2d>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4825      	ldr	r0, [pc, #148]	@ (8002294 <initAK8963+0x1ec>)
 8002200:	f004 ff4e 	bl	80070a0 <iprintf>
	printf("Mag cal off Z: %f\r\n", destination[2]);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	3308      	adds	r3, #8
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe f904 	bl	8000418 <__aeabi_f2d>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4820      	ldr	r0, [pc, #128]	@ (8002298 <initAK8963+0x1f0>)
 8002216:	f004 ff43 	bl	80070a0 <iprintf>
	printf("-------------------------\r\n");
 800221a:	4820      	ldr	r0, [pc, #128]	@ (800229c <initAK8963+0x1f4>)
 800221c:	f004 ffa8 	bl	8007170 <puts>
  }

  writeData = 0x00;
 8002220:	2300      	movs	r3, #0
 8002222:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Power down magnetometer
 8002224:	2364      	movs	r3, #100	@ 0x64
 8002226:	9302      	str	r3, [sp, #8]
 8002228:	2301      	movs	r3, #1
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	f107 030f 	add.w	r3, r7, #15
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	2301      	movs	r3, #1
 8002234:	220a      	movs	r2, #10
 8002236:	2118      	movs	r1, #24
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f003 fb51 	bl	80058e0 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 800223e:	2064      	movs	r0, #100	@ 0x64
 8002240:	f002 ff4c 	bl	80050dc <HAL_Delay>

  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeData = Mscale << 4 | Mmode;
 8002244:	4b16      	ldr	r3, [pc, #88]	@ (80022a0 <initAK8963+0x1f8>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	b25a      	sxtb	r2, r3
 800224c:	4b15      	ldr	r3, [pc, #84]	@ (80022a4 <initAK8963+0x1fc>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	b25b      	sxtb	r3, r3
 8002252:	4313      	orrs	r3, r2
 8002254:	b25b      	sxtb	r3, r3
 8002256:	b2db      	uxtb	r3, r3
 8002258:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Set magnetometer data resolution and sample ODR
 800225a:	2364      	movs	r3, #100	@ 0x64
 800225c:	9302      	str	r3, [sp, #8]
 800225e:	2301      	movs	r3, #1
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	f107 030f 	add.w	r3, r7, #15
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	2301      	movs	r3, #1
 800226a:	220a      	movs	r2, #10
 800226c:	2118      	movs	r1, #24
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f003 fb36 	bl	80058e0 <HAL_I2C_Mem_Write>

//writeData = 0x16;
//HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
  HAL_Delay(10);
 8002274:	200a      	movs	r0, #10
 8002276:	f002 ff31 	bl	80050dc <HAL_Delay>

  if(SerialDebugA){printf("MAG Init Succesful! \r\n");}
 800227a:	480b      	ldr	r0, [pc, #44]	@ (80022a8 <initAK8963+0x200>)
 800227c:	f004 ff78 	bl	8007170 <puts>
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	bd90      	pop	{r4, r7, pc}
 8002288:	40700000 	.word	0x40700000
 800228c:	3ff00000 	.word	0x3ff00000
 8002290:	08009430 	.word	0x08009430
 8002294:	08009444 	.word	0x08009444
 8002298:	08009458 	.word	0x08009458
 800229c:	0800946c 	.word	0x0800946c
 80022a0:	20000002 	.word	0x20000002
 80022a4:	20000003 	.word	0x20000003
 80022a8:	08009488 	.word	0x08009488

080022ac <calibrateMag>:

void calibrateMag(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 80022ac:	b590      	push	{r4, r7, lr}
 80022ae:	b095      	sub	sp, #84	@ 0x54
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]

  uint16_t ii = 0, sample_count = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80022be:	2300      	movs	r3, #0
 80022c0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
  int32_t mag_bias[3] = {0, 0, 0}, mag_scale[3] = {0, 0, 0};
 80022c4:	2300      	movs	r3, #0
 80022c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022c8:	2300      	movs	r3, #0
 80022ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022cc:	2300      	movs	r3, #0
 80022ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80022d0:	2300      	movs	r3, #0
 80022d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022d4:	2300      	movs	r3, #0
 80022d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80022d8:	2300      	movs	r3, #0
 80022da:	637b      	str	r3, [r7, #52]	@ 0x34
  int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 80022dc:	4aa5      	ldr	r2, [pc, #660]	@ (8002574 <calibrateMag+0x2c8>)
 80022de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022e6:	6018      	str	r0, [r3, #0]
 80022e8:	3304      	adds	r3, #4
 80022ea:	8019      	strh	r1, [r3, #0]
 80022ec:	4aa2      	ldr	r2, [pc, #648]	@ (8002578 <calibrateMag+0x2cc>)
 80022ee:	f107 031c 	add.w	r3, r7, #28
 80022f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022f6:	6018      	str	r0, [r3, #0]
 80022f8:	3304      	adds	r3, #4
 80022fa:	8019      	strh	r1, [r3, #0]
 80022fc:	2300      	movs	r3, #0
 80022fe:	82bb      	strh	r3, [r7, #20]
 8002300:	2300      	movs	r3, #0
 8002302:	82fb      	strh	r3, [r7, #22]
 8002304:	2300      	movs	r3, #0
 8002306:	833b      	strh	r3, [r7, #24]

  if (SerialDebugA){printf("Mag Calibration: Wave device in a figure eight until done!\r\n");}
 8002308:	489c      	ldr	r0, [pc, #624]	@ (800257c <calibrateMag+0x2d0>)
 800230a:	f004 ff31 	bl	8007170 <puts>
  HAL_Delay(4000);
 800230e:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8002312:	f002 fee3 	bl	80050dc <HAL_Delay>

    // shoot for ~fifteen seconds of mag data
    if(Mmode == 0x02) sample_count = 128;  // at 8 Hz ODR, new mag data is available every 125 ms
 8002316:	4b9a      	ldr	r3, [pc, #616]	@ (8002580 <calibrateMag+0x2d4>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d102      	bne.n	8002324 <calibrateMag+0x78>
 800231e:	2380      	movs	r3, #128	@ 0x80
 8002320:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if(Mmode == 0x06) sample_count = 1500;  // at 100 Hz ODR, new mag data is available every 10 ms
 8002324:	4b96      	ldr	r3, [pc, #600]	@ (8002580 <calibrateMag+0x2d4>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b06      	cmp	r3, #6
 800232a:	d103      	bne.n	8002334 <calibrateMag+0x88>
 800232c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002330:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
   for(ii = 0; ii < sample_count; ii++) {
 8002334:	2300      	movs	r3, #0
 8002336:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800233a:	e055      	b.n	80023e8 <calibrateMag+0x13c>
    readMagData(I2Cx, mag_temp);  // Read the mag data
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	4619      	mov	r1, r3
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f7ff fe64 	bl	8002010 <readMagData>
    for (int jj = 0; jj < 3; jj++) {
 8002348:	2300      	movs	r3, #0
 800234a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800234c:	e036      	b.n	80023bc <calibrateMag+0x110>
      if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 800234e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	3350      	adds	r3, #80	@ 0x50
 8002354:	443b      	add	r3, r7
 8002356:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 800235a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	3350      	adds	r3, #80	@ 0x50
 8002360:	443b      	add	r3, r7
 8002362:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8002366:	429a      	cmp	r2, r3
 8002368:	dd0b      	ble.n	8002382 <calibrateMag+0xd6>
 800236a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	3350      	adds	r3, #80	@ 0x50
 8002370:	443b      	add	r3, r7
 8002372:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8002376:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	3350      	adds	r3, #80	@ 0x50
 800237c:	443b      	add	r3, r7
 800237e:	f823 2c2c 	strh.w	r2, [r3, #-44]
      if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 8002382:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	3350      	adds	r3, #80	@ 0x50
 8002388:	443b      	add	r3, r7
 800238a:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 800238e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	3350      	adds	r3, #80	@ 0x50
 8002394:	443b      	add	r3, r7
 8002396:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 800239a:	429a      	cmp	r2, r3
 800239c:	da0b      	bge.n	80023b6 <calibrateMag+0x10a>
 800239e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	3350      	adds	r3, #80	@ 0x50
 80023a4:	443b      	add	r3, r7
 80023a6:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80023aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	3350      	adds	r3, #80	@ 0x50
 80023b0:	443b      	add	r3, r7
 80023b2:	f823 2c34 	strh.w	r2, [r3, #-52]
    for (int jj = 0; jj < 3; jj++) {
 80023b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023b8:	3301      	adds	r3, #1
 80023ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023be:	2b02      	cmp	r3, #2
 80023c0:	ddc5      	ble.n	800234e <calibrateMag+0xa2>
    }
    if(Mmode == 0x02) HAL_Delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms
 80023c2:	4b6f      	ldr	r3, [pc, #444]	@ (8002580 <calibrateMag+0x2d4>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d102      	bne.n	80023d0 <calibrateMag+0x124>
 80023ca:	2087      	movs	r0, #135	@ 0x87
 80023cc:	f002 fe86 	bl	80050dc <HAL_Delay>
    if(Mmode == 0x06) HAL_Delay(12);  // at 100 Hz ODR, new mag data is available every 10 ms
 80023d0:	4b6b      	ldr	r3, [pc, #428]	@ (8002580 <calibrateMag+0x2d4>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b06      	cmp	r3, #6
 80023d6:	d102      	bne.n	80023de <calibrateMag+0x132>
 80023d8:	200c      	movs	r0, #12
 80023da:	f002 fe7f 	bl	80050dc <HAL_Delay>
   for(ii = 0; ii < sample_count; ii++) {
 80023de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80023e2:	3301      	adds	r3, #1
 80023e4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80023e8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80023ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d3a3      	bcc.n	800233c <calibrateMag+0x90>
    }

    // Get hard iron correction
    mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 80023f4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80023f8:	461a      	mov	r2, r3
 80023fa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80023fe:	4413      	add	r3, r2
 8002400:	0fda      	lsrs	r2, r3, #31
 8002402:	4413      	add	r3, r2
 8002404:	105b      	asrs	r3, r3, #1
 8002406:	63bb      	str	r3, [r7, #56]	@ 0x38
    mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 8002408:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800240c:	461a      	mov	r2, r3
 800240e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002412:	4413      	add	r3, r2
 8002414:	0fda      	lsrs	r2, r3, #31
 8002416:	4413      	add	r3, r2
 8002418:	105b      	asrs	r3, r3, #1
 800241a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 800241c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8002420:	461a      	mov	r2, r3
 8002422:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002426:	4413      	add	r3, r2
 8002428:	0fda      	lsrs	r2, r3, #31
 800242a:	4413      	add	r3, r2
 800242c:	105b      	asrs	r3, r3, #1
 800242e:	643b      	str	r3, [r7, #64]	@ 0x40

    dest1[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 8002430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fc22 	bl	8000c7c <__aeabi_i2f>
 8002438:	4602      	mov	r2, r0
 800243a:	4b52      	ldr	r3, [pc, #328]	@ (8002584 <calibrateMag+0x2d8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4619      	mov	r1, r3
 8002440:	4610      	mov	r0, r2
 8002442:	f7fe fc6f 	bl	8000d24 <__aeabi_fmul>
 8002446:	4603      	mov	r3, r0
 8002448:	461a      	mov	r2, r3
 800244a:	4b4f      	ldr	r3, [pc, #316]	@ (8002588 <calibrateMag+0x2dc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4619      	mov	r1, r3
 8002450:	4610      	mov	r0, r2
 8002452:	f7fe fc67 	bl	8000d24 <__aeabi_fmul>
 8002456:	4603      	mov	r3, r0
 8002458:	461a      	mov	r2, r3
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	601a      	str	r2, [r3, #0]
    dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 800245e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002460:	4618      	mov	r0, r3
 8002462:	f7fe fc0b 	bl	8000c7c <__aeabi_i2f>
 8002466:	4602      	mov	r2, r0
 8002468:	4b46      	ldr	r3, [pc, #280]	@ (8002584 <calibrateMag+0x2d8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4619      	mov	r1, r3
 800246e:	4610      	mov	r0, r2
 8002470:	f7fe fc58 	bl	8000d24 <__aeabi_fmul>
 8002474:	4603      	mov	r3, r0
 8002476:	4618      	mov	r0, r3
 8002478:	4b43      	ldr	r3, [pc, #268]	@ (8002588 <calibrateMag+0x2dc>)
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	1d1c      	adds	r4, r3, #4
 8002480:	4611      	mov	r1, r2
 8002482:	f7fe fc4f 	bl	8000d24 <__aeabi_fmul>
 8002486:	4603      	mov	r3, r0
 8002488:	6023      	str	r3, [r4, #0]
    dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 800248a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe fbf5 	bl	8000c7c <__aeabi_i2f>
 8002492:	4602      	mov	r2, r0
 8002494:	4b3b      	ldr	r3, [pc, #236]	@ (8002584 <calibrateMag+0x2d8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4619      	mov	r1, r3
 800249a:	4610      	mov	r0, r2
 800249c:	f7fe fc42 	bl	8000d24 <__aeabi_fmul>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4618      	mov	r0, r3
 80024a4:	4b38      	ldr	r3, [pc, #224]	@ (8002588 <calibrateMag+0x2dc>)
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f103 0408 	add.w	r4, r3, #8
 80024ae:	4611      	mov	r1, r2
 80024b0:	f7fe fc38 	bl	8000d24 <__aeabi_fmul>
 80024b4:	4603      	mov	r3, r0
 80024b6:	6023      	str	r3, [r4, #0]

    // Get soft iron correction estimate
    mag_scale[0]  = (mag_max[0] - mag_min[0])/2;  // get average x axis max chord length in counts
 80024b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80024bc:	461a      	mov	r2, r3
 80024be:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	0fda      	lsrs	r2, r3, #31
 80024c6:	4413      	add	r3, r2
 80024c8:	105b      	asrs	r3, r3, #1
 80024ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mag_scale[1]  = (mag_max[1] - mag_min[1])/2;  // get average y axis max chord length in counts
 80024cc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80024d0:	461a      	mov	r2, r3
 80024d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	0fda      	lsrs	r2, r3, #31
 80024da:	4413      	add	r3, r2
 80024dc:	105b      	asrs	r3, r3, #1
 80024de:	633b      	str	r3, [r7, #48]	@ 0x30
    mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts
 80024e0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80024e4:	461a      	mov	r2, r3
 80024e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	0fda      	lsrs	r2, r3, #31
 80024ee:	4413      	add	r3, r2
 80024f0:	105b      	asrs	r3, r3, #1
 80024f2:	637b      	str	r3, [r7, #52]	@ 0x34

    float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
 80024f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f8:	441a      	add	r2, r3
 80024fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024fc:	4413      	add	r3, r2
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe fbbc 	bl	8000c7c <__aeabi_i2f>
 8002504:	4603      	mov	r3, r0
 8002506:	647b      	str	r3, [r7, #68]	@ 0x44
    avg_rad /= 3.0;
 8002508:	4920      	ldr	r1, [pc, #128]	@ (800258c <calibrateMag+0x2e0>)
 800250a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800250c:	f7fe fcbe 	bl	8000e8c <__aeabi_fdiv>
 8002510:	4603      	mov	r3, r0
 8002512:	647b      	str	r3, [r7, #68]	@ 0x44

    dest2[0] = avg_rad/((float)mag_scale[0]);
 8002514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fbb0 	bl	8000c7c <__aeabi_i2f>
 800251c:	4603      	mov	r3, r0
 800251e:	4619      	mov	r1, r3
 8002520:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002522:	f7fe fcb3 	bl	8000e8c <__aeabi_fdiv>
 8002526:	4603      	mov	r3, r0
 8002528:	461a      	mov	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	601a      	str	r2, [r3, #0]
    dest2[1] = avg_rad/((float)mag_scale[1]);
 800252e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe fba3 	bl	8000c7c <__aeabi_i2f>
 8002536:	4602      	mov	r2, r0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	1d1c      	adds	r4, r3, #4
 800253c:	4611      	mov	r1, r2
 800253e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002540:	f7fe fca4 	bl	8000e8c <__aeabi_fdiv>
 8002544:	4603      	mov	r3, r0
 8002546:	6023      	str	r3, [r4, #0]
    dest2[2] = avg_rad/((float)mag_scale[2]);
 8002548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe fb96 	bl	8000c7c <__aeabi_i2f>
 8002550:	4602      	mov	r2, r0
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f103 0408 	add.w	r4, r3, #8
 8002558:	4611      	mov	r1, r2
 800255a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800255c:	f7fe fc96 	bl	8000e8c <__aeabi_fdiv>
 8002560:	4603      	mov	r3, r0
 8002562:	6023      	str	r3, [r4, #0]

    if (SerialDebugA){printf("Mag Calibration done!\r\n");}
 8002564:	480a      	ldr	r0, [pc, #40]	@ (8002590 <calibrateMag+0x2e4>)
 8002566:	f004 fe03 	bl	8007170 <puts>
}
 800256a:	bf00      	nop
 800256c:	3754      	adds	r7, #84	@ 0x54
 800256e:	46bd      	mov	sp, r7
 8002570:	bd90      	pop	{r4, r7, pc}
 8002572:	bf00      	nop
 8002574:	080094f4 	.word	0x080094f4
 8002578:	080094fc 	.word	0x080094fc
 800257c:	080094a0 	.word	0x080094a0
 8002580:	20000003 	.word	0x20000003
 8002584:	2000140c 	.word	0x2000140c
 8002588:	20001428 	.word	0x20001428
 800258c:	40400000 	.word	0x40400000
 8002590:	080094dc 	.word	0x080094dc

08002594 <initMPU9250>:


void initMPU9250(I2C_HandleTypeDef *I2Cx){
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af04      	add	r7, sp, #16
 800259a:	6078      	str	r0, [r7, #4]
	//pre def. vars
	uint8_t readData;
	uint8_t writeData;

	//Wake up device
	writeData = 0x00;
 800259c:	2300      	movs	r3, #0
 800259e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 80025a0:	2364      	movs	r3, #100	@ 0x64
 80025a2:	9302      	str	r3, [sp, #8]
 80025a4:	2301      	movs	r3, #1
 80025a6:	9301      	str	r3, [sp, #4]
 80025a8:	f107 030e 	add.w	r3, r7, #14
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	2301      	movs	r3, #1
 80025b0:	226b      	movs	r2, #107	@ 0x6b
 80025b2:	21d0      	movs	r1, #208	@ 0xd0
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f003 f993 	bl	80058e0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80025ba:	2064      	movs	r0, #100	@ 0x64
 80025bc:	f002 fd8e 	bl	80050dc <HAL_Delay>

	writeData = 0x01;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 80025c4:	2364      	movs	r3, #100	@ 0x64
 80025c6:	9302      	str	r3, [sp, #8]
 80025c8:	2301      	movs	r3, #1
 80025ca:	9301      	str	r3, [sp, #4]
 80025cc:	f107 030e 	add.w	r3, r7, #14
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	2301      	movs	r3, #1
 80025d4:	226b      	movs	r2, #107	@ 0x6b
 80025d6:	21d0      	movs	r1, #208	@ 0xd0
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f003 f981 	bl	80058e0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80025de:	2064      	movs	r0, #100	@ 0x64
 80025e0:	f002 fd7c 	bl	80050dc <HAL_Delay>

	writeData = 0x03;
 80025e4:	2303      	movs	r3, #3
 80025e6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);
 80025e8:	2364      	movs	r3, #100	@ 0x64
 80025ea:	9302      	str	r3, [sp, #8]
 80025ec:	2301      	movs	r3, #1
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	f107 030e 	add.w	r3, r7, #14
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	2301      	movs	r3, #1
 80025f8:	221a      	movs	r2, #26
 80025fa:	21d0      	movs	r1, #208	@ 0xd0
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f003 f96f 	bl	80058e0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002602:	2064      	movs	r0, #100	@ 0x64
 8002604:	f002 fd6a 	bl	80050dc <HAL_Delay>

	writeData = 0x04;
 8002608:	2304      	movs	r3, #4
 800260a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);
 800260c:	2364      	movs	r3, #100	@ 0x64
 800260e:	9302      	str	r3, [sp, #8]
 8002610:	2301      	movs	r3, #1
 8002612:	9301      	str	r3, [sp, #4]
 8002614:	f107 030e 	add.w	r3, r7, #14
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	2301      	movs	r3, #1
 800261c:	2219      	movs	r2, #25
 800261e:	21d0      	movs	r1, #208	@ 0xd0
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f003 f95d 	bl	80058e0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002626:	2064      	movs	r0, #100	@ 0x64
 8002628:	f002 fd58 	bl	80050dc <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &readData, 1, i2c_timeout);
 800262c:	2364      	movs	r3, #100	@ 0x64
 800262e:	9302      	str	r3, [sp, #8]
 8002630:	2301      	movs	r3, #1
 8002632:	9301      	str	r3, [sp, #4]
 8002634:	f107 030f 	add.w	r3, r7, #15
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	2301      	movs	r3, #1
 800263c:	221b      	movs	r2, #27
 800263e:	21d0      	movs	r1, #208	@ 0xd0
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f003 fa47 	bl	8005ad4 <HAL_I2C_Mem_Read>
	readData = readData & ~0x03; // Clear Fchoice bits [1:0]
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	f023 0303 	bic.w	r3, r3, #3
 800264c:	b2db      	uxtb	r3, r3
 800264e:	73fb      	strb	r3, [r7, #15]
	readData = readData & ~0x18; // Clear GFS bits [4:3]
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	f023 0318 	bic.w	r3, r3, #24
 8002656:	b2db      	uxtb	r3, r3
 8002658:	73fb      	strb	r3, [r7, #15]
	readData = readData | Gscale << 3; // Set full scale range for the gyro
 800265a:	4b3e      	ldr	r3, [pc, #248]	@ (8002754 <initMPU9250+0x1c0>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	b25a      	sxtb	r2, r3
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	b25b      	sxtb	r3, r3
 8002666:	4313      	orrs	r3, r2
 8002668:	b25b      	sxtb	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 800266e:	2064      	movs	r0, #100	@ 0x64
 8002670:	f002 fd34 	bl	80050dc <HAL_Delay>

	writeData = readData;
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 8002678:	2364      	movs	r3, #100	@ 0x64
 800267a:	9302      	str	r3, [sp, #8]
 800267c:	2301      	movs	r3, #1
 800267e:	9301      	str	r3, [sp, #4]
 8002680:	f107 030e 	add.w	r3, r7, #14
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	2301      	movs	r3, #1
 8002688:	221b      	movs	r2, #27
 800268a:	21d0      	movs	r1, #208	@ 0xd0
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f003 f927 	bl	80058e0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002692:	2064      	movs	r0, #100	@ 0x64
 8002694:	f002 fd22 	bl	80050dc <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &readData, 1, i2c_timeout);
 8002698:	2364      	movs	r3, #100	@ 0x64
 800269a:	9302      	str	r3, [sp, #8]
 800269c:	2301      	movs	r3, #1
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	f107 030f 	add.w	r3, r7, #15
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	2301      	movs	r3, #1
 80026a8:	221c      	movs	r2, #28
 80026aa:	21d0      	movs	r1, #208	@ 0xd0
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f003 fa11 	bl	8005ad4 <HAL_I2C_Mem_Read>
	readData = readData & ~0x18;  // Clear AFS bits [4:3]
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	f023 0318 	bic.w	r3, r3, #24
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	73fb      	strb	r3, [r7, #15]
	readData = readData | Ascale << 3; // Set full scale range for the accelerometer
 80026bc:	4b26      	ldr	r3, [pc, #152]	@ (8002758 <initMPU9250+0x1c4>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	b25a      	sxtb	r2, r3
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	4313      	orrs	r3, r2
 80026ca:	b25b      	sxtb	r3, r3
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 80026d4:	2364      	movs	r3, #100	@ 0x64
 80026d6:	9302      	str	r3, [sp, #8]
 80026d8:	2301      	movs	r3, #1
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	f107 030e 	add.w	r3, r7, #14
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	2301      	movs	r3, #1
 80026e4:	221c      	movs	r2, #28
 80026e6:	21d0      	movs	r1, #208	@ 0xd0
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f003 f8f9 	bl	80058e0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80026ee:	2064      	movs	r0, #100	@ 0x64
 80026f0:	f002 fcf4 	bl	80050dc <HAL_Delay>
	//**
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &readData, 1, i2c_timeout);
 80026f4:	2364      	movs	r3, #100	@ 0x64
 80026f6:	9302      	str	r3, [sp, #8]
 80026f8:	2301      	movs	r3, #1
 80026fa:	9301      	str	r3, [sp, #4]
 80026fc:	f107 030f 	add.w	r3, r7, #15
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	2301      	movs	r3, #1
 8002704:	221d      	movs	r2, #29
 8002706:	21d0      	movs	r1, #208	@ 0xd0
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f003 f9e3 	bl	8005ad4 <HAL_I2C_Mem_Read>
	readData = readData & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	f023 030f 	bic.w	r3, r3, #15
 8002714:	b2db      	uxtb	r3, r3
 8002716:	73fb      	strb	r3, [r7, #15]
	readData = readData | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	f043 0303 	orr.w	r3, r3, #3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);
 8002726:	2364      	movs	r3, #100	@ 0x64
 8002728:	9302      	str	r3, [sp, #8]
 800272a:	2301      	movs	r3, #1
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	f107 030e 	add.w	r3, r7, #14
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	2301      	movs	r3, #1
 8002736:	221d      	movs	r2, #29
 8002738:	21d0      	movs	r1, #208	@ 0xd0
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f003 f8d0 	bl	80058e0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002740:	2064      	movs	r0, #100	@ 0x64
 8002742:	f002 fccb 	bl	80050dc <HAL_Delay>

	if(SerialDebugA){printf("MPU Init Succesful! \r\n");}
 8002746:	4805      	ldr	r0, [pc, #20]	@ (800275c <initMPU9250+0x1c8>)
 8002748:	f004 fd12 	bl	8007170 <puts>
}
 800274c:	bf00      	nop
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000000 	.word	0x20000000
 8002758:	20000001 	.word	0x20000001
 800275c:	08009504 	.word	0x08009504

08002760 <calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 8002760:	b5b0      	push	{r4, r5, r7, lr}
 8002762:	b0a4      	sub	sp, #144	@ 0x90
 8002764:	af04      	add	r7, sp, #16
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  //pre def. vars
  uint8_t writeData;

	uint8_t calibData[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 800276c:	2300      	movs	r3, #0
 800276e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002770:	2300      	movs	r3, #0
 8002772:	643b      	str	r3, [r7, #64]	@ 0x40
 8002774:	2300      	movs	r3, #0
 8002776:	647b      	str	r3, [r7, #68]	@ 0x44
 8002778:	2300      	movs	r3, #0
 800277a:	633b      	str	r3, [r7, #48]	@ 0x30
 800277c:	2300      	movs	r3, #0
 800277e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002780:	2300      	movs	r3, #0
 8002782:	63bb      	str	r3, [r7, #56]	@ 0x38

	// reset device
	writeData = 0x80;
 8002784:	2380      	movs	r3, #128	@ 0x80
 8002786:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Write a one to bit 7 reset bit; toggle reset device
 800278a:	2364      	movs	r3, #100	@ 0x64
 800278c:	9302      	str	r3, [sp, #8]
 800278e:	2301      	movs	r3, #1
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	2301      	movs	r3, #1
 800279a:	226b      	movs	r2, #107	@ 0x6b
 800279c:	21d0      	movs	r1, #208	@ 0xd0
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f003 f89e 	bl	80058e0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80027a4:	2064      	movs	r0, #100	@ 0x64
 80027a6:	f002 fc99 	bl	80050dc <HAL_Delay>

	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeData = 0x01;
 80027aa:	2301      	movs	r3, #1
 80027ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 80027b0:	2364      	movs	r3, #100	@ 0x64
 80027b2:	9302      	str	r3, [sp, #8]
 80027b4:	2301      	movs	r3, #1
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	2301      	movs	r3, #1
 80027c0:	226b      	movs	r2, #107	@ 0x6b
 80027c2:	21d0      	movs	r1, #208	@ 0xd0
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f003 f88b 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80027ca:	2300      	movs	r3, #0
 80027cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_2, 1, &writeData, 1, i2c_timeout);
 80027d0:	2364      	movs	r3, #100	@ 0x64
 80027d2:	9302      	str	r3, [sp, #8]
 80027d4:	2301      	movs	r3, #1
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	2301      	movs	r3, #1
 80027e0:	226c      	movs	r2, #108	@ 0x6c
 80027e2:	21d0      	movs	r1, #208	@ 0xd0
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f003 f87b 	bl	80058e0 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 80027ea:	20c8      	movs	r0, #200	@ 0xc8
 80027ec:	f002 fc76 	bl	80050dc <HAL_Delay>

	// Configure device for bias calculation
	writeData = 0x00;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_ENABLE, 1, &writeData, 1, i2c_timeout);// Disable all interrupts
 80027f6:	2364      	movs	r3, #100	@ 0x64
 80027f8:	9302      	str	r3, [sp, #8]
 80027fa:	2301      	movs	r3, #1
 80027fc:	9301      	str	r3, [sp, #4]
 80027fe:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	2301      	movs	r3, #1
 8002806:	2238      	movs	r2, #56	@ 0x38
 8002808:	21d0      	movs	r1, #208	@ 0xd0
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f003 f868 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002810:	2300      	movs	r3, #0
 8002812:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable FIFO
 8002816:	2364      	movs	r3, #100	@ 0x64
 8002818:	9302      	str	r3, [sp, #8]
 800281a:	2301      	movs	r3, #1
 800281c:	9301      	str	r3, [sp, #4]
 800281e:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	2301      	movs	r3, #1
 8002826:	2223      	movs	r2, #35	@ 0x23
 8002828:	21d0      	movs	r1, #208	@ 0xd0
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f003 f858 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002830:	2300      	movs	r3, #0
 8002832:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Turn on internal clock source
 8002836:	2364      	movs	r3, #100	@ 0x64
 8002838:	9302      	str	r3, [sp, #8]
 800283a:	2301      	movs	r3, #1
 800283c:	9301      	str	r3, [sp, #4]
 800283e:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	2301      	movs	r3, #1
 8002846:	226b      	movs	r2, #107	@ 0x6b
 8002848:	21d0      	movs	r1, #208	@ 0xd0
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f003 f848 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002850:	2300      	movs	r3, #0
 8002852:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, I2C_MST_CTRL, 1, &writeData, 1, i2c_timeout);// Disable I2C master
 8002856:	2364      	movs	r3, #100	@ 0x64
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	2301      	movs	r3, #1
 800285c:	9301      	str	r3, [sp, #4]
 800285e:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	2301      	movs	r3, #1
 8002866:	2224      	movs	r2, #36	@ 0x24
 8002868:	21d0      	movs	r1, #208	@ 0xd0
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f003 f838 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002870:	2300      	movs	r3, #0
 8002872:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Disable FIFO and I2C master modes
 8002876:	2364      	movs	r3, #100	@ 0x64
 8002878:	9302      	str	r3, [sp, #8]
 800287a:	2301      	movs	r3, #1
 800287c:	9301      	str	r3, [sp, #4]
 800287e:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	2301      	movs	r3, #1
 8002886:	226a      	movs	r2, #106	@ 0x6a
 8002888:	21d0      	movs	r1, #208	@ 0xd0
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f003 f828 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = 0x0C;
 8002890:	230c      	movs	r3, #12
 8002892:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Reset FIFO and DMP
 8002896:	2364      	movs	r3, #100	@ 0x64
 8002898:	9302      	str	r3, [sp, #8]
 800289a:	2301      	movs	r3, #1
 800289c:	9301      	str	r3, [sp, #4]
 800289e:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	2301      	movs	r3, #1
 80028a6:	226a      	movs	r2, #106	@ 0x6a
 80028a8:	21d0      	movs	r1, #208	@ 0xd0
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f003 f818 	bl	80058e0 <HAL_I2C_Mem_Write>
	HAL_Delay(15);
 80028b0:	200f      	movs	r0, #15
 80028b2:	f002 fc13 	bl	80050dc <HAL_Delay>

	// Configure MPU6050 gyro and accelerometer for bias calculation
	writeData = 0x01;
 80028b6:	2301      	movs	r3, #1
 80028b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set low-pass filter to 188 Hz
 80028bc:	2364      	movs	r3, #100	@ 0x64
 80028be:	9302      	str	r3, [sp, #8]
 80028c0:	2301      	movs	r3, #1
 80028c2:	9301      	str	r3, [sp, #4]
 80028c4:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	2301      	movs	r3, #1
 80028cc:	221a      	movs	r2, #26
 80028ce:	21d0      	movs	r1, #208	@ 0xd0
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f003 f805 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set sample rate to 1 kHz
 80028dc:	2364      	movs	r3, #100	@ 0x64
 80028de:	9302      	str	r3, [sp, #8]
 80028e0:	2301      	movs	r3, #1
 80028e2:	9301      	str	r3, [sp, #4]
 80028e4:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	2301      	movs	r3, #1
 80028ec:	2219      	movs	r2, #25
 80028ee:	21d0      	movs	r1, #208	@ 0xd0
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f002 fff5 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80028f6:	2300      	movs	r3, #0
 80028f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 80028fc:	2364      	movs	r3, #100	@ 0x64
 80028fe:	9302      	str	r3, [sp, #8]
 8002900:	2301      	movs	r3, #1
 8002902:	9301      	str	r3, [sp, #4]
 8002904:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	2301      	movs	r3, #1
 800290c:	221b      	movs	r2, #27
 800290e:	21d0      	movs	r1, #208	@ 0xd0
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f002 ffe5 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002916:	2300      	movs	r3, #0
 8002918:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set accelerometer full-scale to 2 g, maximum sensitivity
 800291c:	2364      	movs	r3, #100	@ 0x64
 800291e:	9302      	str	r3, [sp, #8]
 8002920:	2301      	movs	r3, #1
 8002922:	9301      	str	r3, [sp, #4]
 8002924:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	2301      	movs	r3, #1
 800292c:	221c      	movs	r2, #28
 800292e:	21d0      	movs	r1, #208	@ 0xd0
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f002 ffd5 	bl	80058e0 <HAL_I2C_Mem_Write>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8002936:	2383      	movs	r3, #131	@ 0x83
 8002938:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 800293c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002940:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeData = 0x40;
 8002944:	2340      	movs	r3, #64	@ 0x40
 8002946:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Enable FIFO
 800294a:	2364      	movs	r3, #100	@ 0x64
 800294c:	9302      	str	r3, [sp, #8]
 800294e:	2301      	movs	r3, #1
 8002950:	9301      	str	r3, [sp, #4]
 8002952:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	2301      	movs	r3, #1
 800295a:	226a      	movs	r2, #106	@ 0x6a
 800295c:	21d0      	movs	r1, #208	@ 0xd0
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f002 ffbe 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = 0x78;
 8002964:	2378      	movs	r3, #120	@ 0x78
 8002966:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 800296a:	2364      	movs	r3, #100	@ 0x64
 800296c:	9302      	str	r3, [sp, #8]
 800296e:	2301      	movs	r3, #1
 8002970:	9301      	str	r3, [sp, #4]
 8002972:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	2301      	movs	r3, #1
 800297a:	2223      	movs	r2, #35	@ 0x23
 800297c:	21d0      	movs	r1, #208	@ 0xd0
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f002 ffae 	bl	80058e0 <HAL_I2C_Mem_Write>
	HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8002984:	2028      	movs	r0, #40	@ 0x28
 8002986:	f002 fba9 	bl	80050dc <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeData = 0x00;
 800298a:	2300      	movs	r3, #0
 800298c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable gyro and accelerometer sensors for FIFO
 8002990:	2364      	movs	r3, #100	@ 0x64
 8002992:	9302      	str	r3, [sp, #8]
 8002994:	2301      	movs	r3, #1
 8002996:	9301      	str	r3, [sp, #4]
 8002998:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	2301      	movs	r3, #1
 80029a0:	2223      	movs	r2, #35	@ 0x23
 80029a2:	21d0      	movs	r1, #208	@ 0xd0
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f002 ff9b 	bl	80058e0 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_COUNTH, 1, &calibData[0], 2, i2c_timeout);// read FIFO sample count
 80029aa:	2364      	movs	r3, #100	@ 0x64
 80029ac:	9302      	str	r3, [sp, #8]
 80029ae:	2302      	movs	r3, #2
 80029b0:	9301      	str	r3, [sp, #4]
 80029b2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2301      	movs	r3, #1
 80029ba:	2272      	movs	r2, #114	@ 0x72
 80029bc:	21d0      	movs	r1, #208	@ 0xd0
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f003 f888 	bl	8005ad4 <HAL_I2C_Mem_Read>
	fifo_count = ((uint16_t)calibData[0] << 8) | calibData[1];
 80029c4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80029c8:	021b      	lsls	r3, r3, #8
 80029ca:	b21a      	sxth	r2, r3
 80029cc:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80029d0:	b21b      	sxth	r3, r3
 80029d2:	4313      	orrs	r3, r2
 80029d4:	b21b      	sxth	r3, r3
 80029d6:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 80029da:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80029de:	4a5a      	ldr	r2, [pc, #360]	@ (8002b48 <calibrateMPU9250+0x3e8>)
 80029e0:	fba2 2303 	umull	r2, r3, r2, r3
 80029e4:	08db      	lsrs	r3, r3, #3
 80029e6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

	for (ii = 0; ii < packet_count; ii++) {
 80029ea:	2300      	movs	r3, #0
 80029ec:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 80029f0:	e077      	b.n	8002ae2 <calibrateMPU9250+0x382>
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 80029f2:	2300      	movs	r3, #0
 80029f4:	833b      	strh	r3, [r7, #24]
 80029f6:	2300      	movs	r3, #0
 80029f8:	837b      	strh	r3, [r7, #26]
 80029fa:	2300      	movs	r3, #0
 80029fc:	83bb      	strh	r3, [r7, #28]
 80029fe:	2300      	movs	r3, #0
 8002a00:	823b      	strh	r3, [r7, #16]
 8002a02:	2300      	movs	r3, #0
 8002a04:	827b      	strh	r3, [r7, #18]
 8002a06:	2300      	movs	r3, #0
 8002a08:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_R_W, 1, &calibData[0], 12, i2c_timeout);
 8002a0a:	2364      	movs	r3, #100	@ 0x64
 8002a0c:	9302      	str	r3, [sp, #8]
 8002a0e:	230c      	movs	r3, #12
 8002a10:	9301      	str	r3, [sp, #4]
 8002a12:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	2301      	movs	r3, #1
 8002a1a:	2274      	movs	r2, #116	@ 0x74
 8002a1c:	21d0      	movs	r1, #208	@ 0xd0
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f003 f858 	bl	8005ad4 <HAL_I2C_Mem_Read>

		//Form signed 16-bit integer for each sample in FIFO
		accel_temp[0] = (int16_t) (((int16_t)calibData[0] << 8) | calibData[1]  ) ;
 8002a24:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002a28:	021b      	lsls	r3, r3, #8
 8002a2a:	b21a      	sxth	r2, r3
 8002a2c:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8002a30:	b21b      	sxth	r3, r3
 8002a32:	4313      	orrs	r3, r2
 8002a34:	b21b      	sxth	r3, r3
 8002a36:	833b      	strh	r3, [r7, #24]
		accel_temp[1] = (int16_t) (((int16_t)calibData[2] << 8) | calibData[3]  ) ;
 8002a38:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8002a3c:	021b      	lsls	r3, r3, #8
 8002a3e:	b21a      	sxth	r2, r3
 8002a40:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002a44:	b21b      	sxth	r3, r3
 8002a46:	4313      	orrs	r3, r2
 8002a48:	b21b      	sxth	r3, r3
 8002a4a:	837b      	strh	r3, [r7, #26]
		accel_temp[2] = (int16_t) (((int16_t)calibData[4] << 8) | calibData[5]  ) ;
 8002a4c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002a50:	021b      	lsls	r3, r3, #8
 8002a52:	b21a      	sxth	r2, r3
 8002a54:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a58:	b21b      	sxth	r3, r3
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	b21b      	sxth	r3, r3
 8002a5e:	83bb      	strh	r3, [r7, #28]
		gyro_temp[0]  = (int16_t) (((int16_t)calibData[6] << 8) | calibData[7]  ) ;
 8002a60:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002a64:	021b      	lsls	r3, r3, #8
 8002a66:	b21a      	sxth	r2, r3
 8002a68:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002a6c:	b21b      	sxth	r3, r3
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	b21b      	sxth	r3, r3
 8002a72:	823b      	strh	r3, [r7, #16]
		gyro_temp[1]  = (int16_t) (((int16_t)calibData[8] << 8) | calibData[9]  ) ;
 8002a74:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	b21a      	sxth	r2, r3
 8002a7c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8002a80:	b21b      	sxth	r3, r3
 8002a82:	4313      	orrs	r3, r2
 8002a84:	b21b      	sxth	r3, r3
 8002a86:	827b      	strh	r3, [r7, #18]
		gyro_temp[2]  = (int16_t) (((int16_t)calibData[10] << 8) | calibData[11]) ;
 8002a88:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8002a8c:	021b      	lsls	r3, r3, #8
 8002a8e:	b21a      	sxth	r2, r3
 8002a90:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002a94:	b21b      	sxth	r3, r3
 8002a96:	4313      	orrs	r3, r2
 8002a98:	b21b      	sxth	r3, r3
 8002a9a:	82bb      	strh	r3, [r7, #20]

		//Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[0] += (int32_t) accel_temp[0];
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a9e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	633b      	str	r3, [r7, #48]	@ 0x30
		accel_bias[1] += (int32_t) accel_temp[1];
 8002aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aa8:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002aac:	4413      	add	r3, r2
 8002aae:	637b      	str	r3, [r7, #52]	@ 0x34
		accel_bias[2] += (int32_t) accel_temp[2];
 8002ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ab2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 8002aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002abc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 8002ac4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ac6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002aca:	4413      	add	r3, r2
 8002acc:	643b      	str	r3, [r7, #64]	@ 0x40
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 8002ace:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ad0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	647b      	str	r3, [r7, #68]	@ 0x44
	for (ii = 0; ii < packet_count; ii++) {
 8002ad8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8002adc:	3301      	adds	r3, #1
 8002ade:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 8002ae2:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 8002ae6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d381      	bcc.n	80029f2 <calibrateMPU9250+0x292>
	}

	//Normalize sums to get average count biases
	accel_bias[0] /= (int32_t) packet_count;
 8002aee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002af0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8002af4:	fb92 f3f3 	sdiv	r3, r2, r3
 8002af8:	633b      	str	r3, [r7, #48]	@ 0x30
	accel_bias[1] /= (int32_t) packet_count;
 8002afa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002afc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8002b00:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b04:	637b      	str	r3, [r7, #52]	@ 0x34
	accel_bias[2] /= (int32_t) packet_count;
 8002b06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b08:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8002b0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b10:	63bb      	str	r3, [r7, #56]	@ 0x38
	gyro_bias[0]  /= (int32_t) packet_count;
 8002b12:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b14:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8002b18:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	gyro_bias[1]  /= (int32_t) packet_count;
 8002b1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b20:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8002b24:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b28:	643b      	str	r3, [r7, #64]	@ 0x40
	gyro_bias[2]  /= (int32_t) packet_count;
 8002b2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b2c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8002b30:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b34:	647b      	str	r3, [r7, #68]	@ 0x44

	//Remove gravity from the z-axis accelerometer bias calculation
	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}
 8002b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	dd07      	ble.n	8002b4c <calibrateMPU9250+0x3ec>
 8002b3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b3e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b46:	e006      	b.n	8002b56 <calibrateMPU9250+0x3f6>
 8002b48:	aaaaaaab 	.word	0xaaaaaaab
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 8002b4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b4e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002b52:	4413      	add	r3, r2
 8002b54:	63bb      	str	r3, [r7, #56]	@ 0x38

	//Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	calibData[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8002b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b58:	425b      	negs	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	da00      	bge.n	8002b60 <calibrateMPU9250+0x400>
 8002b5e:	3303      	adds	r3, #3
 8002b60:	109b      	asrs	r3, r3, #2
 8002b62:	121b      	asrs	r3, r3, #8
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
	calibData[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8002b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b6c:	425b      	negs	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	da00      	bge.n	8002b74 <calibrateMPU9250+0x414>
 8002b72:	3303      	adds	r3, #3
 8002b74:	109b      	asrs	r3, r3, #2
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	calibData[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8002b7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b7e:	425b      	negs	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	da00      	bge.n	8002b86 <calibrateMPU9250+0x426>
 8002b84:	3303      	adds	r3, #3
 8002b86:	109b      	asrs	r3, r3, #2
 8002b88:	121b      	asrs	r3, r3, #8
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
	calibData[3] = (-gyro_bias[1]/4)       & 0xFF;
 8002b90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b92:	425b      	negs	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	da00      	bge.n	8002b9a <calibrateMPU9250+0x43a>
 8002b98:	3303      	adds	r3, #3
 8002b9a:	109b      	asrs	r3, r3, #2
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	calibData[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8002ba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ba4:	425b      	negs	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	da00      	bge.n	8002bac <calibrateMPU9250+0x44c>
 8002baa:	3303      	adds	r3, #3
 8002bac:	109b      	asrs	r3, r3, #2
 8002bae:	121b      	asrs	r3, r3, #8
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	calibData[5] = (-gyro_bias[2]/4)       & 0xFF;
 8002bb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bb8:	425b      	negs	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	da00      	bge.n	8002bc0 <calibrateMPU9250+0x460>
 8002bbe:	3303      	adds	r3, #3
 8002bc0:	109b      	asrs	r3, r3, #2
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

	//Push gyro biases to hardware registers
	writeData = calibData[0];
 8002bc8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002bcc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8002bd0:	2364      	movs	r3, #100	@ 0x64
 8002bd2:	9302      	str	r3, [sp, #8]
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	9301      	str	r3, [sp, #4]
 8002bd8:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	2301      	movs	r3, #1
 8002be0:	2213      	movs	r2, #19
 8002be2:	21d0      	movs	r1, #208	@ 0xd0
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f002 fe7b 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8002bea:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8002bee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8002bf2:	2364      	movs	r3, #100	@ 0x64
 8002bf4:	9302      	str	r3, [sp, #8]
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	9301      	str	r3, [sp, #4]
 8002bfa:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	2301      	movs	r3, #1
 8002c02:	2214      	movs	r2, #20
 8002c04:	21d0      	movs	r1, #208	@ 0xd0
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f002 fe6a 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8002c0c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8002c10:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8002c14:	2364      	movs	r3, #100	@ 0x64
 8002c16:	9302      	str	r3, [sp, #8]
 8002c18:	2301      	movs	r3, #1
 8002c1a:	9301      	str	r3, [sp, #4]
 8002c1c:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	2301      	movs	r3, #1
 8002c24:	2215      	movs	r2, #21
 8002c26:	21d0      	movs	r1, #208	@ 0xd0
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f002 fe59 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 8002c2e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002c32:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8002c36:	2364      	movs	r3, #100	@ 0x64
 8002c38:	9302      	str	r3, [sp, #8]
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	2301      	movs	r3, #1
 8002c46:	2216      	movs	r2, #22
 8002c48:	21d0      	movs	r1, #208	@ 0xd0
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f002 fe48 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 8002c50:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002c54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8002c58:	2364      	movs	r3, #100	@ 0x64
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	9301      	str	r3, [sp, #4]
 8002c60:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	2301      	movs	r3, #1
 8002c68:	2217      	movs	r2, #23
 8002c6a:	21d0      	movs	r1, #208	@ 0xd0
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f002 fe37 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8002c72:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002c76:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8002c7a:	2364      	movs	r3, #100	@ 0x64
 8002c7c:	9302      	str	r3, [sp, #8]
 8002c7e:	2301      	movs	r3, #1
 8002c80:	9301      	str	r3, [sp, #4]
 8002c82:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	2301      	movs	r3, #1
 8002c8a:	2218      	movs	r2, #24
 8002c8c:	21d0      	movs	r1, #208	@ 0xd0
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f002 fe26 	bl	80058e0 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 8002c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd fff0 	bl	8000c7c <__aeabi_i2f>
 8002c9c:	4604      	mov	r4, r0
 8002c9e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fd ffe6 	bl	8000c74 <__aeabi_ui2f>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4619      	mov	r1, r3
 8002cac:	4620      	mov	r0, r4
 8002cae:	f7fe f8ed 	bl	8000e8c <__aeabi_fdiv>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	601a      	str	r2, [r3, #0]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8002cba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fd ffdd 	bl	8000c7c <__aeabi_i2f>
 8002cc2:	4605      	mov	r5, r0
 8002cc4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd ffd3 	bl	8000c74 <__aeabi_ui2f>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	1d1c      	adds	r4, r3, #4
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4628      	mov	r0, r5
 8002cd8:	f7fe f8d8 	bl	8000e8c <__aeabi_fdiv>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	6023      	str	r3, [r4, #0]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8002ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fd ffca 	bl	8000c7c <__aeabi_i2f>
 8002ce8:	4605      	mov	r5, r0
 8002cea:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd ffc0 	bl	8000c74 <__aeabi_ui2f>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f103 0408 	add.w	r4, r3, #8
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	4628      	mov	r0, r5
 8002d00:	f7fe f8c4 	bl	8000e8c <__aeabi_fdiv>
 8002d04:	4603      	mov	r3, r0
 8002d06:	6023      	str	r3, [r4, #0]

	if(SerialDebugA){
		float gyroBiasX = (float) gyro_bias[0]/(float) gyrosensitivity;
 8002d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fd ffb6 	bl	8000c7c <__aeabi_i2f>
 8002d10:	4604      	mov	r4, r0
 8002d12:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fd ffac 	bl	8000c74 <__aeabi_ui2f>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4620      	mov	r0, r4
 8002d22:	f7fe f8b3 	bl	8000e8c <__aeabi_fdiv>
 8002d26:	4603      	mov	r3, r0
 8002d28:	673b      	str	r3, [r7, #112]	@ 0x70
		float gyroBiasY = (float) gyro_bias[1]/(float) gyrosensitivity;
 8002d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fd ffa5 	bl	8000c7c <__aeabi_i2f>
 8002d32:	4604      	mov	r4, r0
 8002d34:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fd ff9b 	bl	8000c74 <__aeabi_ui2f>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	4619      	mov	r1, r3
 8002d42:	4620      	mov	r0, r4
 8002d44:	f7fe f8a2 	bl	8000e8c <__aeabi_fdiv>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
		float gyroBiasZ = (float) gyro_bias[2]/(float) gyrosensitivity;
 8002d4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd ff94 	bl	8000c7c <__aeabi_i2f>
 8002d54:	4604      	mov	r4, r0
 8002d56:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fd ff8a 	bl	8000c74 <__aeabi_ui2f>
 8002d60:	4603      	mov	r3, r0
 8002d62:	4619      	mov	r1, r3
 8002d64:	4620      	mov	r0, r4
 8002d66:	f7fe f891 	bl	8000e8c <__aeabi_fdiv>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	66bb      	str	r3, [r7, #104]	@ 0x68

		printf("Gyro bias X: %f\r\n", gyroBiasX);
 8002d6e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002d70:	f7fd fb52 	bl	8000418 <__aeabi_f2d>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4833      	ldr	r0, [pc, #204]	@ (8002e48 <calibrateMPU9250+0x6e8>)
 8002d7a:	f004 f991 	bl	80070a0 <iprintf>
		printf("Gyro bias Y: %f\r\n", gyroBiasY);
 8002d7e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002d80:	f7fd fb4a 	bl	8000418 <__aeabi_f2d>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4830      	ldr	r0, [pc, #192]	@ (8002e4c <calibrateMPU9250+0x6ec>)
 8002d8a:	f004 f989 	bl	80070a0 <iprintf>
		printf("Gyro bias Z: %f\r\n", gyroBiasZ);
 8002d8e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002d90:	f7fd fb42 	bl	8000418 <__aeabi_f2d>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	482d      	ldr	r0, [pc, #180]	@ (8002e50 <calibrateMPU9250+0x6f0>)
 8002d9a:	f004 f981 	bl	80070a0 <iprintf>

		printf("-------------------------\r\n");
 8002d9e:	482d      	ldr	r0, [pc, #180]	@ (8002e54 <calibrateMPU9250+0x6f4>)
 8002da0:	f004 f9e6 	bl	8007170 <puts>
	}

	//Construct the accelerometer biases for push to the hardware accelerometer bias registers.
	int32_t accel_bias_reg[3] = {0, 0, 0}; //A place to hold the factory accelerometer trim biases
 8002da4:	2300      	movs	r3, #0
 8002da6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da8:	2300      	movs	r3, #0
 8002daa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dac:	2300      	movs	r3, #0
 8002dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout); //Read factory accelerometer trim values
 8002db0:	2364      	movs	r3, #100	@ 0x64
 8002db2:	9302      	str	r3, [sp, #8]
 8002db4:	2302      	movs	r3, #2
 8002db6:	9301      	str	r3, [sp, #4]
 8002db8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	2277      	movs	r2, #119	@ 0x77
 8002dc2:	21d0      	movs	r1, #208	@ 0xd0
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f002 fe85 	bl	8005ad4 <HAL_I2C_Mem_Read>
	accel_bias_reg[0] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8002dca:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002dce:	021b      	lsls	r3, r3, #8
 8002dd0:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8002dd8:	2364      	movs	r3, #100	@ 0x64
 8002dda:	9302      	str	r3, [sp, #8]
 8002ddc:	2302      	movs	r3, #2
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	2301      	movs	r3, #1
 8002de8:	227a      	movs	r2, #122	@ 0x7a
 8002dea:	21d0      	movs	r1, #208	@ 0xd0
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f002 fe71 	bl	8005ad4 <HAL_I2C_Mem_Read>
	accel_bias_reg[1] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8002df2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002df6:	021b      	lsls	r3, r3, #8
 8002df8:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8002e00:	2364      	movs	r3, #100	@ 0x64
 8002e02:	9302      	str	r3, [sp, #8]
 8002e04:	2302      	movs	r3, #2
 8002e06:	9301      	str	r3, [sp, #4]
 8002e08:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	2301      	movs	r3, #1
 8002e10:	227d      	movs	r2, #125	@ 0x7d
 8002e12:	21d0      	movs	r1, #208	@ 0xd0
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f002 fe5d 	bl	8005ad4 <HAL_I2C_Mem_Read>
	accel_bias_reg[2] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8002e1a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002e1e:	021b      	lsls	r3, r3, #8
 8002e20:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8002e24:	4313      	orrs	r3, r2
 8002e26:	62fb      	str	r3, [r7, #44]	@ 0x2c

	//Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint32_t mask = 1uL;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	667b      	str	r3, [r7, #100]	@ 0x64
	//Define array to hold mask bit for each accelerometer bias axis
	uint8_t mask_bit[3] = {0, 0, 0};
 8002e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e58 <calibrateMPU9250+0x6f8>)
 8002e2e:	f107 0320 	add.w	r3, r7, #32
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	4611      	mov	r1, r2
 8002e36:	8019      	strh	r1, [r3, #0]
 8002e38:	3302      	adds	r3, #2
 8002e3a:	0c12      	lsrs	r2, r2, #16
 8002e3c:	701a      	strb	r2, [r3, #0]

	for(ii = 0; ii < 3; ii++) {
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 8002e44:	e022      	b.n	8002e8c <calibrateMPU9250+0x72c>
 8002e46:	bf00      	nop
 8002e48:	0800951c 	.word	0x0800951c
 8002e4c:	08009530 	.word	0x08009530
 8002e50:	08009544 	.word	0x08009544
 8002e54:	0800946c 	.word	0x0800946c
 8002e58:	08009594 	.word	0x08009594
		//If temperature compensation bit is set, record that fact in mask_bit
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01;
 8002e5c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	3380      	adds	r3, #128	@ 0x80
 8002e64:	443b      	add	r3, r7
 8002e66:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d006      	beq.n	8002e82 <calibrateMPU9250+0x722>
 8002e74:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8002e78:	3380      	adds	r3, #128	@ 0x80
 8002e7a:	443b      	add	r3, r7
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f803 2c60 	strb.w	r2, [r3, #-96]
	for(ii = 0; ii < 3; ii++) {
 8002e82:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8002e86:	3301      	adds	r3, #1
 8002e88:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 8002e8c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d9e3      	bls.n	8002e5c <calibrateMPU9250+0x6fc>
	}

	//Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); //Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8002e94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	da00      	bge.n	8002e9e <calibrateMPU9250+0x73e>
 8002e9c:	3307      	adds	r3, #7
 8002e9e:	10db      	asrs	r3, r3, #3
 8002ea0:	425b      	negs	r3, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	627b      	str	r3, [r7, #36]	@ 0x24
	accel_bias_reg[1] -= (accel_bias[1]/8);
 8002ea6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	da00      	bge.n	8002eb0 <calibrateMPU9250+0x750>
 8002eae:	3307      	adds	r3, #7
 8002eb0:	10db      	asrs	r3, r3, #3
 8002eb2:	425b      	negs	r3, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
	accel_bias_reg[2] -= (accel_bias[2]/8);
 8002eb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	da00      	bge.n	8002ec2 <calibrateMPU9250+0x762>
 8002ec0:	3307      	adds	r3, #7
 8002ec2:	10db      	asrs	r3, r3, #3
 8002ec4:	425b      	negs	r3, r3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	calibData[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	121b      	asrs	r3, r3, #8
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
	calibData[1] = (accel_bias_reg[0])      & 0xFF;
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	calibData[1] = calibData[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8002edc:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8002ee0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	calibData[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8002eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eee:	121b      	asrs	r3, r3, #8
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
	calibData[3] = (accel_bias_reg[1])      & 0xFF;
 8002ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	calibData[3] = calibData[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8002efe:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8002f02:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002f06:	4313      	orrs	r3, r2
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	calibData[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8002f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f10:	121b      	asrs	r3, r3, #8
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	calibData[5] = (accel_bias_reg[2])      & 0xFF;
 8002f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	calibData[5] = calibData[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8002f20:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002f24:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

	//Push accelerometer biases to hardware registers
	writeData = calibData[0];
 8002f30:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002f34:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8002f38:	2364      	movs	r3, #100	@ 0x64
 8002f3a:	9302      	str	r3, [sp, #8]
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	9301      	str	r3, [sp, #4]
 8002f40:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	2301      	movs	r3, #1
 8002f48:	2277      	movs	r2, #119	@ 0x77
 8002f4a:	21d0      	movs	r1, #208	@ 0xd0
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f002 fcc7 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8002f52:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8002f56:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8002f5a:	2364      	movs	r3, #100	@ 0x64
 8002f5c:	9302      	str	r3, [sp, #8]
 8002f5e:	2301      	movs	r3, #1
 8002f60:	9301      	str	r3, [sp, #4]
 8002f62:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	2301      	movs	r3, #1
 8002f6a:	2278      	movs	r2, #120	@ 0x78
 8002f6c:	21d0      	movs	r1, #208	@ 0xd0
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f002 fcb6 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8002f74:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8002f78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8002f7c:	2364      	movs	r3, #100	@ 0x64
 8002f7e:	9302      	str	r3, [sp, #8]
 8002f80:	2301      	movs	r3, #1
 8002f82:	9301      	str	r3, [sp, #4]
 8002f84:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	227a      	movs	r2, #122	@ 0x7a
 8002f8e:	21d0      	movs	r1, #208	@ 0xd0
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f002 fca5 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 8002f96:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002f9a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8002f9e:	2364      	movs	r3, #100	@ 0x64
 8002fa0:	9302      	str	r3, [sp, #8]
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	9301      	str	r3, [sp, #4]
 8002fa6:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	2301      	movs	r3, #1
 8002fae:	227b      	movs	r2, #123	@ 0x7b
 8002fb0:	21d0      	movs	r1, #208	@ 0xd0
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f002 fc94 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 8002fb8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002fbc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8002fc0:	2364      	movs	r3, #100	@ 0x64
 8002fc2:	9302      	str	r3, [sp, #8]
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	9301      	str	r3, [sp, #4]
 8002fc8:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	2301      	movs	r3, #1
 8002fd0:	227d      	movs	r2, #125	@ 0x7d
 8002fd2:	21d0      	movs	r1, #208	@ 0xd0
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f002 fc83 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8002fda:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002fde:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8002fe2:	2364      	movs	r3, #100	@ 0x64
 8002fe4:	9302      	str	r3, [sp, #8]
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	227e      	movs	r2, #126	@ 0x7e
 8002ff4:	21d0      	movs	r1, #208	@ 0xd0
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f002 fc72 	bl	80058e0 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest2[0] = (float) accel_bias[0]/(float) accelsensitivity;
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd fe3c 	bl	8000c7c <__aeabi_i2f>
 8003004:	4604      	mov	r4, r0
 8003006:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800300a:	4618      	mov	r0, r3
 800300c:	f7fd fe32 	bl	8000c74 <__aeabi_ui2f>
 8003010:	4603      	mov	r3, r0
 8003012:	4619      	mov	r1, r3
 8003014:	4620      	mov	r0, r4
 8003016:	f7fd ff39 	bl	8000e8c <__aeabi_fdiv>
 800301a:	4603      	mov	r3, r0
 800301c:	461a      	mov	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	601a      	str	r2, [r3, #0]
	dest2[1] = (float) accel_bias[1]/(float) accelsensitivity;
 8003022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003024:	4618      	mov	r0, r3
 8003026:	f7fd fe29 	bl	8000c7c <__aeabi_i2f>
 800302a:	4605      	mov	r5, r0
 800302c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd fe1f 	bl	8000c74 <__aeabi_ui2f>
 8003036:	4602      	mov	r2, r0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	1d1c      	adds	r4, r3, #4
 800303c:	4611      	mov	r1, r2
 800303e:	4628      	mov	r0, r5
 8003040:	f7fd ff24 	bl	8000e8c <__aeabi_fdiv>
 8003044:	4603      	mov	r3, r0
 8003046:	6023      	str	r3, [r4, #0]
	dest2[2] = (float) accel_bias[2]/(float) accelsensitivity;
 8003048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800304a:	4618      	mov	r0, r3
 800304c:	f7fd fe16 	bl	8000c7c <__aeabi_i2f>
 8003050:	4605      	mov	r5, r0
 8003052:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8003056:	4618      	mov	r0, r3
 8003058:	f7fd fe0c 	bl	8000c74 <__aeabi_ui2f>
 800305c:	4602      	mov	r2, r0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f103 0408 	add.w	r4, r3, #8
 8003064:	4611      	mov	r1, r2
 8003066:	4628      	mov	r0, r5
 8003068:	f7fd ff10 	bl	8000e8c <__aeabi_fdiv>
 800306c:	4603      	mov	r3, r0
 800306e:	6023      	str	r3, [r4, #0]

	if(SerialDebugA){
		float accelBiasX = (float) accel_bias[0]/(float) accelsensitivity;
 8003070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003072:	4618      	mov	r0, r3
 8003074:	f7fd fe02 	bl	8000c7c <__aeabi_i2f>
 8003078:	4604      	mov	r4, r0
 800307a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800307e:	4618      	mov	r0, r3
 8003080:	f7fd fdf8 	bl	8000c74 <__aeabi_ui2f>
 8003084:	4603      	mov	r3, r0
 8003086:	4619      	mov	r1, r3
 8003088:	4620      	mov	r0, r4
 800308a:	f7fd feff 	bl	8000e8c <__aeabi_fdiv>
 800308e:	4603      	mov	r3, r0
 8003090:	663b      	str	r3, [r7, #96]	@ 0x60
		float accelBiasY = (float) accel_bias[1]/(float) accelsensitivity;
 8003092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003094:	4618      	mov	r0, r3
 8003096:	f7fd fdf1 	bl	8000c7c <__aeabi_i2f>
 800309a:	4604      	mov	r4, r0
 800309c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fd fde7 	bl	8000c74 <__aeabi_ui2f>
 80030a6:	4603      	mov	r3, r0
 80030a8:	4619      	mov	r1, r3
 80030aa:	4620      	mov	r0, r4
 80030ac:	f7fd feee 	bl	8000e8c <__aeabi_fdiv>
 80030b0:	4603      	mov	r3, r0
 80030b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
		float accelBiasZ = (float) accel_bias[2]/(float) accelsensitivity;
 80030b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fd fde0 	bl	8000c7c <__aeabi_i2f>
 80030bc:	4604      	mov	r4, r0
 80030be:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd fdd6 	bl	8000c74 <__aeabi_ui2f>
 80030c8:	4603      	mov	r3, r0
 80030ca:	4619      	mov	r1, r3
 80030cc:	4620      	mov	r0, r4
 80030ce:	f7fd fedd 	bl	8000e8c <__aeabi_fdiv>
 80030d2:	4603      	mov	r3, r0
 80030d4:	65bb      	str	r3, [r7, #88]	@ 0x58

		printf("Accel bias X: %f\r\n", accelBiasX);
 80030d6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80030d8:	f7fd f99e 	bl	8000418 <__aeabi_f2d>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	480c      	ldr	r0, [pc, #48]	@ (8003114 <calibrateMPU9250+0x9b4>)
 80030e2:	f003 ffdd 	bl	80070a0 <iprintf>
		printf("Accel bias Y: %f\r\n", accelBiasY);
 80030e6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80030e8:	f7fd f996 	bl	8000418 <__aeabi_f2d>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4809      	ldr	r0, [pc, #36]	@ (8003118 <calibrateMPU9250+0x9b8>)
 80030f2:	f003 ffd5 	bl	80070a0 <iprintf>
		printf("Accel bias Z: %f\r\n", accelBiasZ);
 80030f6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80030f8:	f7fd f98e 	bl	8000418 <__aeabi_f2d>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4806      	ldr	r0, [pc, #24]	@ (800311c <calibrateMPU9250+0x9bc>)
 8003102:	f003 ffcd 	bl	80070a0 <iprintf>

		printf("-------------------------\r\n");
 8003106:	4806      	ldr	r0, [pc, #24]	@ (8003120 <calibrateMPU9250+0x9c0>)
 8003108:	f004 f832 	bl	8007170 <puts>
	}
}
 800310c:	bf00      	nop
 800310e:	3780      	adds	r7, #128	@ 0x80
 8003110:	46bd      	mov	sp, r7
 8003112:	bdb0      	pop	{r4, r5, r7, pc}
 8003114:	08009558 	.word	0x08009558
 8003118:	0800956c 	.word	0x0800956c
 800311c:	08009580 	.word	0x08009580
 8003120:	0800946c 	.word	0x0800946c
 8003124:	00000000 	.word	0x00000000

08003128 <MPU9250SelfTest>:


// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(I2C_HandleTypeDef *I2Cx, float * destination) {
 8003128:	b5b0      	push	{r4, r5, r7, lr}
 800312a:	b0b0      	sub	sp, #192	@ 0xc0
 800312c:	af04      	add	r7, sp, #16
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
	uint8_t writeData;

	uint8_t rawTestData[6] = {0, 0, 0, 0, 0, 0};
 8003132:	4aa2      	ldr	r2, [pc, #648]	@ (80033bc <MPU9250SelfTest+0x294>)
 8003134:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003138:	e892 0003 	ldmia.w	r2, {r0, r1}
 800313c:	6018      	str	r0, [r3, #0]
 800313e:	3304      	adds	r3, #4
 8003140:	8019      	strh	r1, [r3, #0]
	uint8_t selfTest[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8003142:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	605a      	str	r2, [r3, #4]
 800314c:	609a      	str	r2, [r3, #8]
 800314e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	605a      	str	r2, [r3, #4]
 8003158:	609a      	str	r2, [r3, #8]
 800315a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	605a      	str	r2, [r3, #4]
 8003164:	609a      	str	r2, [r3, #8]
 8003166:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	605a      	str	r2, [r3, #4]
 8003170:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

	writeData = 0x00;
 8003178:	2300      	movs	r3, #0
 800317a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz
 800317e:	2364      	movs	r3, #100	@ 0x64
 8003180:	9302      	str	r3, [sp, #8]
 8003182:	2301      	movs	r3, #1
 8003184:	9301      	str	r3, [sp, #4]
 8003186:	f107 037b 	add.w	r3, r7, #123	@ 0x7b
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2301      	movs	r3, #1
 800318e:	2219      	movs	r2, #25
 8003190:	21d0      	movs	r1, #208	@ 0xd0
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f002 fba4 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 8003198:	2302      	movs	r3, #2
 800319a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 800319e:	2364      	movs	r3, #100	@ 0x64
 80031a0:	9302      	str	r3, [sp, #8]
 80031a2:	2301      	movs	r3, #1
 80031a4:	9301      	str	r3, [sp, #4]
 80031a6:	f107 037b 	add.w	r3, r7, #123	@ 0x7b
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	2301      	movs	r3, #1
 80031ae:	221a      	movs	r2, #26
 80031b0:	21d0      	movs	r1, #208	@ 0xd0
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f002 fb94 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 80031b8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the gyro to 250 dps
 80031c4:	2364      	movs	r3, #100	@ 0x64
 80031c6:	9302      	str	r3, [sp, #8]
 80031c8:	2301      	movs	r3, #1
 80031ca:	9301      	str	r3, [sp, #4]
 80031cc:	f107 037b 	add.w	r3, r7, #123	@ 0x7b
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	2301      	movs	r3, #1
 80031d4:	221b      	movs	r2, #27
 80031d6:	21d0      	movs	r1, #208	@ 0xd0
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f002 fb81 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 80031de:	2302      	movs	r3, #2
 80031e0:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 80031e4:	2364      	movs	r3, #100	@ 0x64
 80031e6:	9302      	str	r3, [sp, #8]
 80031e8:	2301      	movs	r3, #1
 80031ea:	9301      	str	r3, [sp, #4]
 80031ec:	f107 037b 	add.w	r3, r7, #123	@ 0x7b
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	2301      	movs	r3, #1
 80031f4:	221d      	movs	r2, #29
 80031f6:	21d0      	movs	r1, #208	@ 0xd0
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f002 fb71 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 80031fe:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the accelerometer to 2 g
 800320a:	2364      	movs	r3, #100	@ 0x64
 800320c:	9302      	str	r3, [sp, #8]
 800320e:	2301      	movs	r3, #1
 8003210:	9301      	str	r3, [sp, #4]
 8003212:	f107 037b 	add.w	r3, r7, #123	@ 0x7b
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	2301      	movs	r3, #1
 800321a:	221c      	movs	r2, #28
 800321c:	21d0      	movs	r1, #208	@ 0xd0
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f002 fb5e 	bl	80058e0 <HAL_I2C_Mem_Write>

	//get average current values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 8003224:	2300      	movs	r3, #0
 8003226:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800322a:	e066      	b.n	80032fa <MPU9250SelfTest+0x1d2>

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 800322c:	2364      	movs	r3, #100	@ 0x64
 800322e:	9302      	str	r3, [sp, #8]
 8003230:	2306      	movs	r3, #6
 8003232:	9301      	str	r3, [sp, #4]
 8003234:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	2301      	movs	r3, #1
 800323c:	223b      	movs	r2, #59	@ 0x3b
 800323e:	21d0      	movs	r1, #208	@ 0xd0
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f002 fc47 	bl	8005ad4 <HAL_I2C_Mem_Read>
		aAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8003246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003248:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 800324c:	0212      	lsls	r2, r2, #8
 800324e:	b211      	sxth	r1, r2
 8003250:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 8003254:	b212      	sxth	r2, r2
 8003256:	430a      	orrs	r2, r1
 8003258:	b212      	sxth	r2, r2
 800325a:	4413      	add	r3, r2
 800325c:	657b      	str	r3, [r7, #84]	@ 0x54
		aAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 800325e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003260:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 8003264:	0212      	lsls	r2, r2, #8
 8003266:	b211      	sxth	r1, r2
 8003268:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 800326c:	b212      	sxth	r2, r2
 800326e:	430a      	orrs	r2, r1
 8003270:	b212      	sxth	r2, r2
 8003272:	4413      	add	r3, r2
 8003274:	65bb      	str	r3, [r7, #88]	@ 0x58
		aAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8003276:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003278:	f897 2078 	ldrb.w	r2, [r7, #120]	@ 0x78
 800327c:	0212      	lsls	r2, r2, #8
 800327e:	b211      	sxth	r1, r2
 8003280:	f897 2079 	ldrb.w	r2, [r7, #121]	@ 0x79
 8003284:	b212      	sxth	r2, r2
 8003286:	430a      	orrs	r2, r1
 8003288:	b212      	sxth	r2, r2
 800328a:	4413      	add	r3, r2
 800328c:	65fb      	str	r3, [r7, #92]	@ 0x5c

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 800328e:	2364      	movs	r3, #100	@ 0x64
 8003290:	9302      	str	r3, [sp, #8]
 8003292:	2306      	movs	r3, #6
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	2301      	movs	r3, #1
 800329e:	2243      	movs	r2, #67	@ 0x43
 80032a0:	21d0      	movs	r1, #208	@ 0xd0
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f002 fc16 	bl	8005ad4 <HAL_I2C_Mem_Read>
		gAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80032a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032aa:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 80032ae:	0212      	lsls	r2, r2, #8
 80032b0:	b211      	sxth	r1, r2
 80032b2:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 80032b6:	b212      	sxth	r2, r2
 80032b8:	430a      	orrs	r2, r1
 80032ba:	b212      	sxth	r2, r2
 80032bc:	4413      	add	r3, r2
 80032be:	663b      	str	r3, [r7, #96]	@ 0x60
		gAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 80032c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032c2:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 80032c6:	0212      	lsls	r2, r2, #8
 80032c8:	b211      	sxth	r1, r2
 80032ca:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 80032ce:	b212      	sxth	r2, r2
 80032d0:	430a      	orrs	r2, r1
 80032d2:	b212      	sxth	r2, r2
 80032d4:	4413      	add	r3, r2
 80032d6:	667b      	str	r3, [r7, #100]	@ 0x64
		gAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 80032d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032da:	f897 2078 	ldrb.w	r2, [r7, #120]	@ 0x78
 80032de:	0212      	lsls	r2, r2, #8
 80032e0:	b211      	sxth	r1, r2
 80032e2:	f897 2079 	ldrb.w	r2, [r7, #121]	@ 0x79
 80032e6:	b212      	sxth	r2, r2
 80032e8:	430a      	orrs	r2, r1
 80032ea:	b212      	sxth	r2, r2
 80032ec:	4413      	add	r3, r2
 80032ee:	66bb      	str	r3, [r7, #104]	@ 0x68
	for( int ii = 0; ii < 200; ii++) {
 80032f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032f4:	3301      	adds	r3, #1
 80032f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80032fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032fe:	2bc7      	cmp	r3, #199	@ 0xc7
 8003300:	dd94      	ble.n	800322c <MPU9250SelfTest+0x104>
	}

	//Get average of 200 values and store as average current readings
	for (int ii =0; ii < 3; ii++) {
 8003302:	2300      	movs	r3, #0
 8003304:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003308:	e02c      	b.n	8003364 <MPU9250SelfTest+0x23c>
		aAvg[ii] /= 200;
 800330a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	33b0      	adds	r3, #176	@ 0xb0
 8003312:	443b      	add	r3, r7
 8003314:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8003318:	4a29      	ldr	r2, [pc, #164]	@ (80033c0 <MPU9250SelfTest+0x298>)
 800331a:	fb82 1203 	smull	r1, r2, r2, r3
 800331e:	1192      	asrs	r2, r2, #6
 8003320:	17db      	asrs	r3, r3, #31
 8003322:	1ad2      	subs	r2, r2, r3
 8003324:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	33b0      	adds	r3, #176	@ 0xb0
 800332c:	443b      	add	r3, r7
 800332e:	f843 2c5c 	str.w	r2, [r3, #-92]
		gAvg[ii] /= 200;
 8003332:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	33b0      	adds	r3, #176	@ 0xb0
 800333a:	443b      	add	r3, r7
 800333c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003340:	4a1f      	ldr	r2, [pc, #124]	@ (80033c0 <MPU9250SelfTest+0x298>)
 8003342:	fb82 1203 	smull	r1, r2, r2, r3
 8003346:	1192      	asrs	r2, r2, #6
 8003348:	17db      	asrs	r3, r3, #31
 800334a:	1ad2      	subs	r2, r2, r3
 800334c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	33b0      	adds	r3, #176	@ 0xb0
 8003354:	443b      	add	r3, r7
 8003356:	f843 2c50 	str.w	r2, [r3, #-80]
	for (int ii =0; ii < 3; ii++) {
 800335a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800335e:	3301      	adds	r3, #1
 8003360:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003364:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003368:	2b02      	cmp	r3, #2
 800336a:	ddce      	ble.n	800330a <MPU9250SelfTest+0x1e2>
	}

	//Configure the accelerometer for self-test
	writeData = 0xE0;
 800336c:	23e0      	movs	r3, #224	@ 0xe0
 800336e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set accelerometer range to +/- 2 g
 8003372:	2364      	movs	r3, #100	@ 0x64
 8003374:	9302      	str	r3, [sp, #8]
 8003376:	2301      	movs	r3, #1
 8003378:	9301      	str	r3, [sp, #4]
 800337a:	f107 037b 	add.w	r3, r7, #123	@ 0x7b
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	2301      	movs	r3, #1
 8003382:	221c      	movs	r2, #28
 8003384:	21d0      	movs	r1, #208	@ 0xd0
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f002 faaa 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = 0xE0;
 800338c:	23e0      	movs	r3, #224	@ 0xe0
 800338e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8003392:	2364      	movs	r3, #100	@ 0x64
 8003394:	9302      	str	r3, [sp, #8]
 8003396:	2301      	movs	r3, #1
 8003398:	9301      	str	r3, [sp, #4]
 800339a:	f107 037b 	add.w	r3, r7, #123	@ 0x7b
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	2301      	movs	r3, #1
 80033a2:	221b      	movs	r2, #27
 80033a4:	21d0      	movs	r1, #208	@ 0xd0
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f002 fa9a 	bl	80058e0 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 80033ac:	2019      	movs	r0, #25
 80033ae:	f001 fe95 	bl	80050dc <HAL_Delay>

	//get average self-test values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 80033b2:	2300      	movs	r3, #0
 80033b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80033b8:	e06b      	b.n	8003492 <MPU9250SelfTest+0x36a>
 80033ba:	bf00      	nop
 80033bc:	08009610 	.word	0x08009610
 80033c0:	51eb851f 	.word	0x51eb851f

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 80033c4:	2364      	movs	r3, #100	@ 0x64
 80033c6:	9302      	str	r3, [sp, #8]
 80033c8:	2306      	movs	r3, #6
 80033ca:	9301      	str	r3, [sp, #4]
 80033cc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	2301      	movs	r3, #1
 80033d4:	223b      	movs	r2, #59	@ 0x3b
 80033d6:	21d0      	movs	r1, #208	@ 0xd0
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f002 fb7b 	bl	8005ad4 <HAL_I2C_Mem_Read>
		aSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80033de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033e0:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 80033e4:	0212      	lsls	r2, r2, #8
 80033e6:	b211      	sxth	r1, r2
 80033e8:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 80033ec:	b212      	sxth	r2, r2
 80033ee:	430a      	orrs	r2, r1
 80033f0:	b212      	sxth	r2, r2
 80033f2:	4413      	add	r3, r2
 80033f4:	64bb      	str	r3, [r7, #72]	@ 0x48
		aSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 80033f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033f8:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 80033fc:	0212      	lsls	r2, r2, #8
 80033fe:	b211      	sxth	r1, r2
 8003400:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8003404:	b212      	sxth	r2, r2
 8003406:	430a      	orrs	r2, r1
 8003408:	b212      	sxth	r2, r2
 800340a:	4413      	add	r3, r2
 800340c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		aSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 800340e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003410:	f897 2078 	ldrb.w	r2, [r7, #120]	@ 0x78
 8003414:	0212      	lsls	r2, r2, #8
 8003416:	b211      	sxth	r1, r2
 8003418:	f897 2079 	ldrb.w	r2, [r7, #121]	@ 0x79
 800341c:	b212      	sxth	r2, r2
 800341e:	430a      	orrs	r2, r1
 8003420:	b212      	sxth	r2, r2
 8003422:	4413      	add	r3, r2
 8003424:	653b      	str	r3, [r7, #80]	@ 0x50

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 8003426:	2364      	movs	r3, #100	@ 0x64
 8003428:	9302      	str	r3, [sp, #8]
 800342a:	2306      	movs	r3, #6
 800342c:	9301      	str	r3, [sp, #4]
 800342e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	2301      	movs	r3, #1
 8003436:	2243      	movs	r2, #67	@ 0x43
 8003438:	21d0      	movs	r1, #208	@ 0xd0
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f002 fb4a 	bl	8005ad4 <HAL_I2C_Mem_Read>
		gSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8003440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003442:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 8003446:	0212      	lsls	r2, r2, #8
 8003448:	b211      	sxth	r1, r2
 800344a:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 800344e:	b212      	sxth	r2, r2
 8003450:	430a      	orrs	r2, r1
 8003452:	b212      	sxth	r2, r2
 8003454:	4413      	add	r3, r2
 8003456:	63fb      	str	r3, [r7, #60]	@ 0x3c
		gSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8003458:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800345a:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 800345e:	0212      	lsls	r2, r2, #8
 8003460:	b211      	sxth	r1, r2
 8003462:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8003466:	b212      	sxth	r2, r2
 8003468:	430a      	orrs	r2, r1
 800346a:	b212      	sxth	r2, r2
 800346c:	4413      	add	r3, r2
 800346e:	643b      	str	r3, [r7, #64]	@ 0x40
		gSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8003470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003472:	f897 2078 	ldrb.w	r2, [r7, #120]	@ 0x78
 8003476:	0212      	lsls	r2, r2, #8
 8003478:	b211      	sxth	r1, r2
 800347a:	f897 2079 	ldrb.w	r2, [r7, #121]	@ 0x79
 800347e:	b212      	sxth	r2, r2
 8003480:	430a      	orrs	r2, r1
 8003482:	b212      	sxth	r2, r2
 8003484:	4413      	add	r3, r2
 8003486:	647b      	str	r3, [r7, #68]	@ 0x44
	for( int ii = 0; ii < 200; ii++) {
 8003488:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800348c:	3301      	adds	r3, #1
 800348e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003492:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003496:	2bc7      	cmp	r3, #199	@ 0xc7
 8003498:	dd94      	ble.n	80033c4 <MPU9250SelfTest+0x29c>
	}

	//Get average of 200 values and store as average self-test readings
	for (int ii =0; ii < 3; ii++) {
 800349a:	2300      	movs	r3, #0
 800349c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80034a0:	e02c      	b.n	80034fc <MPU9250SelfTest+0x3d4>
		aSTAvg[ii] /= 200;
 80034a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	33b0      	adds	r3, #176	@ 0xb0
 80034aa:	443b      	add	r3, r7
 80034ac:	f853 3c68 	ldr.w	r3, [r3, #-104]
 80034b0:	4ad7      	ldr	r2, [pc, #860]	@ (8003810 <MPU9250SelfTest+0x6e8>)
 80034b2:	fb82 1203 	smull	r1, r2, r2, r3
 80034b6:	1192      	asrs	r2, r2, #6
 80034b8:	17db      	asrs	r3, r3, #31
 80034ba:	1ad2      	subs	r2, r2, r3
 80034bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	33b0      	adds	r3, #176	@ 0xb0
 80034c4:	443b      	add	r3, r7
 80034c6:	f843 2c68 	str.w	r2, [r3, #-104]
		gSTAvg[ii] /= 200;
 80034ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	33b0      	adds	r3, #176	@ 0xb0
 80034d2:	443b      	add	r3, r7
 80034d4:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80034d8:	4acd      	ldr	r2, [pc, #820]	@ (8003810 <MPU9250SelfTest+0x6e8>)
 80034da:	fb82 1203 	smull	r1, r2, r2, r3
 80034de:	1192      	asrs	r2, r2, #6
 80034e0:	17db      	asrs	r3, r3, #31
 80034e2:	1ad2      	subs	r2, r2, r3
 80034e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	33b0      	adds	r3, #176	@ 0xb0
 80034ec:	443b      	add	r3, r7
 80034ee:	f843 2c74 	str.w	r2, [r3, #-116]
	for (int ii =0; ii < 3; ii++) {
 80034f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034f6:	3301      	adds	r3, #1
 80034f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80034fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003500:	2b02      	cmp	r3, #2
 8003502:	ddce      	ble.n	80034a2 <MPU9250SelfTest+0x37a>
	}

	//Configure the gyro and accelerometer for normal operation
	writeData = 0x00;
 8003504:	2300      	movs	r3, #0
 8003506:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 800350a:	2364      	movs	r3, #100	@ 0x64
 800350c:	9302      	str	r3, [sp, #8]
 800350e:	2301      	movs	r3, #1
 8003510:	9301      	str	r3, [sp, #4]
 8003512:	f107 037b 	add.w	r3, r7, #123	@ 0x7b
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	2301      	movs	r3, #1
 800351a:	221c      	movs	r2, #28
 800351c:	21d0      	movs	r1, #208	@ 0xd0
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f002 f9de 	bl	80058e0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8003524:	2300      	movs	r3, #0
 8003526:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 800352a:	2364      	movs	r3, #100	@ 0x64
 800352c:	9302      	str	r3, [sp, #8]
 800352e:	2301      	movs	r3, #1
 8003530:	9301      	str	r3, [sp, #4]
 8003532:	f107 037b 	add.w	r3, r7, #123	@ 0x7b
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	2301      	movs	r3, #1
 800353a:	221b      	movs	r2, #27
 800353c:	21d0      	movs	r1, #208	@ 0xd0
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f002 f9ce 	bl	80058e0 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 8003544:	2019      	movs	r0, #25
 8003546:	f001 fdc9 	bl	80050dc <HAL_Delay>

	//Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_ACCEL, 1, &selfTest[0], 1, i2c_timeout);// X-axis accel self-test results
 800354a:	2364      	movs	r3, #100	@ 0x64
 800354c:	9302      	str	r3, [sp, #8]
 800354e:	2301      	movs	r3, #1
 8003550:	9301      	str	r3, [sp, #4]
 8003552:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	2301      	movs	r3, #1
 800355a:	220d      	movs	r2, #13
 800355c:	21d0      	movs	r1, #208	@ 0xd0
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f002 fab8 	bl	8005ad4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_ACCEL, 1, &selfTest[1], 1, i2c_timeout);// Y-axis accel self-test results
 8003564:	2364      	movs	r3, #100	@ 0x64
 8003566:	9302      	str	r3, [sp, #8]
 8003568:	2301      	movs	r3, #1
 800356a:	9301      	str	r3, [sp, #4]
 800356c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003570:	3301      	adds	r3, #1
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	2301      	movs	r3, #1
 8003576:	220e      	movs	r2, #14
 8003578:	21d0      	movs	r1, #208	@ 0xd0
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f002 faaa 	bl	8005ad4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_ACCEL, 1, &selfTest[2], 1, i2c_timeout);// Z-axis accel self-test results
 8003580:	2364      	movs	r3, #100	@ 0x64
 8003582:	9302      	str	r3, [sp, #8]
 8003584:	2301      	movs	r3, #1
 8003586:	9301      	str	r3, [sp, #4]
 8003588:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800358c:	3302      	adds	r3, #2
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	2301      	movs	r3, #1
 8003592:	220f      	movs	r2, #15
 8003594:	21d0      	movs	r1, #208	@ 0xd0
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f002 fa9c 	bl	8005ad4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_GYRO, 1, &selfTest[3], 1, i2c_timeout);// X-axis gyro self-test results
 800359c:	2364      	movs	r3, #100	@ 0x64
 800359e:	9302      	str	r3, [sp, #8]
 80035a0:	2301      	movs	r3, #1
 80035a2:	9301      	str	r3, [sp, #4]
 80035a4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80035a8:	3303      	adds	r3, #3
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	2301      	movs	r3, #1
 80035ae:	2200      	movs	r2, #0
 80035b0:	21d0      	movs	r1, #208	@ 0xd0
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f002 fa8e 	bl	8005ad4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_GYRO, 1, &selfTest[4], 1, i2c_timeout);// Y-axis gyro self-test results
 80035b8:	2364      	movs	r3, #100	@ 0x64
 80035ba:	9302      	str	r3, [sp, #8]
 80035bc:	2301      	movs	r3, #1
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80035c4:	3304      	adds	r3, #4
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	2301      	movs	r3, #1
 80035ca:	2201      	movs	r2, #1
 80035cc:	21d0      	movs	r1, #208	@ 0xd0
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f002 fa80 	bl	8005ad4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_GYRO, 1, &selfTest[5], 1, i2c_timeout);// Z-axis gyro self-test results
 80035d4:	2364      	movs	r3, #100	@ 0x64
 80035d6:	9302      	str	r3, [sp, #8]
 80035d8:	2301      	movs	r3, #1
 80035da:	9301      	str	r3, [sp, #4]
 80035dc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80035e0:	3305      	adds	r3, #5
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	2301      	movs	r3, #1
 80035e6:	2202      	movs	r2, #2
 80035e8:	21d0      	movs	r1, #208	@ 0xd0
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f002 fa72 	bl	8005ad4 <HAL_I2C_Mem_Read>

	//Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 80035f0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80035f4:	f640 223c 	movw	r2, #2620	@ 0xa3c
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fd fb3d 	bl	8000c7c <__aeabi_i2f>
 8003602:	4603      	mov	r3, r0
 8003604:	4618      	mov	r0, r3
 8003606:	f7fc ff07 	bl	8000418 <__aeabi_f2d>
 800360a:	4604      	mov	r4, r0
 800360c:	460d      	mov	r5, r1
 800360e:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8003612:	4618      	mov	r0, r3
 8003614:	f7fd fb2e 	bl	8000c74 <__aeabi_ui2f>
 8003618:	4603      	mov	r3, r0
 800361a:	4618      	mov	r0, r3
 800361c:	f7fc fefc 	bl	8000418 <__aeabi_f2d>
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	4b7b      	ldr	r3, [pc, #492]	@ (8003814 <MPU9250SelfTest+0x6ec>)
 8003626:	f7fc fd97 	bl	8000158 <__aeabi_dsub>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	a176      	add	r1, pc, #472	@ (adr r1, 8003808 <MPU9250SelfTest+0x6e0>)
 8003630:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003634:	f004 fc0a 	bl	8007e4c <pow>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4620      	mov	r0, r4
 800363e:	4629      	mov	r1, r5
 8003640:	f7fc ff42 	bl	80004c8 <__aeabi_dmul>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4610      	mov	r0, r2
 800364a:	4619      	mov	r1, r3
 800364c:	f7fd fa0c 	bl	8000a68 <__aeabi_d2f>
 8003650:	4603      	mov	r3, r0
 8003652:	627b      	str	r3, [r7, #36]	@ 0x24
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 8003654:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8003658:	f640 223c 	movw	r2, #2620	@ 0xa3c
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	4618      	mov	r0, r3
 8003662:	f7fd fb0b 	bl	8000c7c <__aeabi_i2f>
 8003666:	4603      	mov	r3, r0
 8003668:	4618      	mov	r0, r3
 800366a:	f7fc fed5 	bl	8000418 <__aeabi_f2d>
 800366e:	4604      	mov	r4, r0
 8003670:	460d      	mov	r5, r1
 8003672:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003676:	4618      	mov	r0, r3
 8003678:	f7fd fafc 	bl	8000c74 <__aeabi_ui2f>
 800367c:	4603      	mov	r3, r0
 800367e:	4618      	mov	r0, r3
 8003680:	f7fc feca 	bl	8000418 <__aeabi_f2d>
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	4b62      	ldr	r3, [pc, #392]	@ (8003814 <MPU9250SelfTest+0x6ec>)
 800368a:	f7fc fd65 	bl	8000158 <__aeabi_dsub>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	a15d      	add	r1, pc, #372	@ (adr r1, 8003808 <MPU9250SelfTest+0x6e0>)
 8003694:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003698:	f004 fbd8 	bl	8007e4c <pow>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4620      	mov	r0, r4
 80036a2:	4629      	mov	r1, r5
 80036a4:	f7fc ff10 	bl	80004c8 <__aeabi_dmul>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4610      	mov	r0, r2
 80036ae:	4619      	mov	r1, r3
 80036b0:	f7fd f9da 	bl	8000a68 <__aeabi_d2f>
 80036b4:	4603      	mov	r3, r0
 80036b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 80036b8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80036bc:	f640 223c 	movw	r2, #2620	@ 0xa3c
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fd fad9 	bl	8000c7c <__aeabi_i2f>
 80036ca:	4603      	mov	r3, r0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fc fea3 	bl	8000418 <__aeabi_f2d>
 80036d2:	4604      	mov	r4, r0
 80036d4:	460d      	mov	r5, r1
 80036d6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fd faca 	bl	8000c74 <__aeabi_ui2f>
 80036e0:	4603      	mov	r3, r0
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fc fe98 	bl	8000418 <__aeabi_f2d>
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	4b49      	ldr	r3, [pc, #292]	@ (8003814 <MPU9250SelfTest+0x6ec>)
 80036ee:	f7fc fd33 	bl	8000158 <__aeabi_dsub>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	a144      	add	r1, pc, #272	@ (adr r1, 8003808 <MPU9250SelfTest+0x6e0>)
 80036f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036fc:	f004 fba6 	bl	8007e4c <pow>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4620      	mov	r0, r4
 8003706:	4629      	mov	r1, r5
 8003708:	f7fc fede 	bl	80004c8 <__aeabi_dmul>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4610      	mov	r0, r2
 8003712:	4619      	mov	r1, r3
 8003714:	f7fd f9a8 	bl	8000a68 <__aeabi_d2f>
 8003718:	4603      	mov	r3, r0
 800371a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 800371c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8003720:	f640 223c 	movw	r2, #2620	@ 0xa3c
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	4618      	mov	r0, r3
 800372a:	f7fd faa7 	bl	8000c7c <__aeabi_i2f>
 800372e:	4603      	mov	r3, r0
 8003730:	4618      	mov	r0, r3
 8003732:	f7fc fe71 	bl	8000418 <__aeabi_f2d>
 8003736:	4604      	mov	r4, r0
 8003738:	460d      	mov	r5, r1
 800373a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800373e:	4618      	mov	r0, r3
 8003740:	f7fd fa98 	bl	8000c74 <__aeabi_ui2f>
 8003744:	4603      	mov	r3, r0
 8003746:	4618      	mov	r0, r3
 8003748:	f7fc fe66 	bl	8000418 <__aeabi_f2d>
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	4b30      	ldr	r3, [pc, #192]	@ (8003814 <MPU9250SelfTest+0x6ec>)
 8003752:	f7fc fd01 	bl	8000158 <__aeabi_dsub>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	a12b      	add	r1, pc, #172	@ (adr r1, 8003808 <MPU9250SelfTest+0x6e0>)
 800375c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003760:	f004 fb74 	bl	8007e4c <pow>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	4620      	mov	r0, r4
 800376a:	4629      	mov	r1, r5
 800376c:	f7fc feac 	bl	80004c8 <__aeabi_dmul>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4610      	mov	r0, r2
 8003776:	4619      	mov	r1, r3
 8003778:	f7fd f976 	bl	8000a68 <__aeabi_d2f>
 800377c:	4603      	mov	r3, r0
 800377e:	633b      	str	r3, [r7, #48]	@ 0x30
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 8003780:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8003784:	f640 223c 	movw	r2, #2620	@ 0xa3c
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	4618      	mov	r0, r3
 800378e:	f7fd fa75 	bl	8000c7c <__aeabi_i2f>
 8003792:	4603      	mov	r3, r0
 8003794:	4618      	mov	r0, r3
 8003796:	f7fc fe3f 	bl	8000418 <__aeabi_f2d>
 800379a:	4604      	mov	r4, r0
 800379c:	460d      	mov	r5, r1
 800379e:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fd fa66 	bl	8000c74 <__aeabi_ui2f>
 80037a8:	4603      	mov	r3, r0
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fc fe34 	bl	8000418 <__aeabi_f2d>
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	4b17      	ldr	r3, [pc, #92]	@ (8003814 <MPU9250SelfTest+0x6ec>)
 80037b6:	f7fc fccf 	bl	8000158 <__aeabi_dsub>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	a112      	add	r1, pc, #72	@ (adr r1, 8003808 <MPU9250SelfTest+0x6e0>)
 80037c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037c4:	f004 fb42 	bl	8007e4c <pow>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4620      	mov	r0, r4
 80037ce:	4629      	mov	r1, r5
 80037d0:	f7fc fe7a 	bl	80004c8 <__aeabi_dmul>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4610      	mov	r0, r2
 80037da:	4619      	mov	r1, r3
 80037dc:	f7fd f944 	bl	8000a68 <__aeabi_d2f>
 80037e0:	4603      	mov	r3, r0
 80037e2:	637b      	str	r3, [r7, #52]	@ 0x34
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 80037e4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80037e8:	f640 223c 	movw	r2, #2620	@ 0xa3c
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fd fa43 	bl	8000c7c <__aeabi_i2f>
 80037f6:	4603      	mov	r3, r0
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fc fe0d 	bl	8000418 <__aeabi_f2d>
 80037fe:	4604      	mov	r4, r0
 8003800:	e00a      	b.n	8003818 <MPU9250SelfTest+0x6f0>
 8003802:	bf00      	nop
 8003804:	f3af 8000 	nop.w
 8003808:	c28f5c29 	.word	0xc28f5c29
 800380c:	3ff028f5 	.word	0x3ff028f5
 8003810:	51eb851f 	.word	0x51eb851f
 8003814:	3ff00000 	.word	0x3ff00000
 8003818:	460d      	mov	r5, r1
 800381a:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 800381e:	4618      	mov	r0, r3
 8003820:	f7fd fa28 	bl	8000c74 <__aeabi_ui2f>
 8003824:	4603      	mov	r3, r0
 8003826:	4618      	mov	r0, r3
 8003828:	f7fc fdf6 	bl	8000418 <__aeabi_f2d>
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	4bdb      	ldr	r3, [pc, #876]	@ (8003ba0 <MPU9250SelfTest+0xa78>)
 8003832:	f7fc fc91 	bl	8000158 <__aeabi_dsub>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	a1d7      	add	r1, pc, #860	@ (adr r1, 8003b98 <MPU9250SelfTest+0xa70>)
 800383c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003840:	f004 fb04 	bl	8007e4c <pow>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4620      	mov	r0, r4
 800384a:	4629      	mov	r1, r5
 800384c:	f7fc fe3c 	bl	80004c8 <__aeabi_dmul>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4610      	mov	r0, r2
 8003856:	4619      	mov	r1, r3
 8003858:	f7fd f906 	bl	8000a68 <__aeabi_d2f>
 800385c:	4603      	mov	r3, r0
 800385e:	63bb      	str	r3, [r7, #56]	@ 0x38

	uint32_t testResults[6];

	//Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	//To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 8003860:	2300      	movs	r3, #0
 8003862:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003866:	e092      	b.n	800398e <MPU9250SelfTest+0x866>
		testResults[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8003868:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	33b0      	adds	r3, #176	@ 0xb0
 8003870:	443b      	add	r3, r7
 8003872:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8003876:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	33b0      	adds	r3, #176	@ 0xb0
 800387e:	443b      	add	r3, r7
 8003880:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	4618      	mov	r0, r3
 8003888:	f7fd f9f8 	bl	8000c7c <__aeabi_i2f>
 800388c:	4603      	mov	r3, r0
 800388e:	4618      	mov	r0, r3
 8003890:	f7fc fdc2 	bl	8000418 <__aeabi_f2d>
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	4bc2      	ldr	r3, [pc, #776]	@ (8003ba4 <MPU9250SelfTest+0xa7c>)
 800389a:	f7fc fe15 	bl	80004c8 <__aeabi_dmul>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4614      	mov	r4, r2
 80038a4:	461d      	mov	r5, r3
 80038a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	33b0      	adds	r3, #176	@ 0xb0
 80038ae:	443b      	add	r3, r7
 80038b0:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fc fdaf 	bl	8000418 <__aeabi_f2d>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4620      	mov	r0, r4
 80038c0:	4629      	mov	r1, r5
 80038c2:	f7fc ff2b 	bl	800071c <__aeabi_ddiv>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4610      	mov	r0, r2
 80038cc:	4619      	mov	r1, r3
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	4bb4      	ldr	r3, [pc, #720]	@ (8003ba4 <MPU9250SelfTest+0xa7c>)
 80038d4:	f7fc fc40 	bl	8000158 <__aeabi_dsub>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4610      	mov	r0, r2
 80038de:	4619      	mov	r1, r3
 80038e0:	f7fd f8a2 	bl	8000a28 <__aeabi_d2uiz>
 80038e4:	4602      	mov	r2, r0
 80038e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	33b0      	adds	r3, #176	@ 0xb0
 80038ee:	443b      	add	r3, r7
 80038f0:	f843 2ca4 	str.w	r2, [r3, #-164]
		testResults[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 80038f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	33b0      	adds	r3, #176	@ 0xb0
 80038fc:	443b      	add	r3, r7
 80038fe:	f853 2c74 	ldr.w	r2, [r3, #-116]
 8003902:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	33b0      	adds	r3, #176	@ 0xb0
 800390a:	443b      	add	r3, r7
 800390c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	4618      	mov	r0, r3
 8003914:	f7fd f9b2 	bl	8000c7c <__aeabi_i2f>
 8003918:	4603      	mov	r3, r0
 800391a:	4618      	mov	r0, r3
 800391c:	f7fc fd7c 	bl	8000418 <__aeabi_f2d>
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	4b9f      	ldr	r3, [pc, #636]	@ (8003ba4 <MPU9250SelfTest+0xa7c>)
 8003926:	f7fc fdcf 	bl	80004c8 <__aeabi_dmul>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	4614      	mov	r4, r2
 8003930:	461d      	mov	r5, r3
 8003932:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003936:	3303      	adds	r3, #3
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	33b0      	adds	r3, #176	@ 0xb0
 800393c:	443b      	add	r3, r7
 800393e:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8003942:	4618      	mov	r0, r3
 8003944:	f7fc fd68 	bl	8000418 <__aeabi_f2d>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4620      	mov	r0, r4
 800394e:	4629      	mov	r1, r5
 8003950:	f7fc fee4 	bl	800071c <__aeabi_ddiv>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4610      	mov	r0, r2
 800395a:	4619      	mov	r1, r3
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	4b90      	ldr	r3, [pc, #576]	@ (8003ba4 <MPU9250SelfTest+0xa7c>)
 8003962:	f7fc fbf9 	bl	8000158 <__aeabi_dsub>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4610      	mov	r0, r2
 800396c:	4619      	mov	r1, r3
 800396e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003972:	1cdc      	adds	r4, r3, #3
 8003974:	f7fd f858 	bl	8000a28 <__aeabi_d2uiz>
 8003978:	4602      	mov	r2, r0
 800397a:	00a3      	lsls	r3, r4, #2
 800397c:	33b0      	adds	r3, #176	@ 0xb0
 800397e:	443b      	add	r3, r7
 8003980:	f843 2ca4 	str.w	r2, [r3, #-164]
	for (int i = 0; i < 3; i++) {
 8003984:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003988:	3301      	adds	r3, #1
 800398a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800398e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003992:	2b02      	cmp	r3, #2
 8003994:	f77f af68 	ble.w	8003868 <MPU9250SelfTest+0x740>
	}

	if(SerialDebugA){
		float testResultAccelX = testResults[0];
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4618      	mov	r0, r3
 800399c:	f7fd f96a 	bl	8000c74 <__aeabi_ui2f>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		float testResultAccelY = testResults[1];
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fd f963 	bl	8000c74 <__aeabi_ui2f>
 80039ae:	4603      	mov	r3, r0
 80039b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		float testResultAccelZ = testResults[2];
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fd f95c 	bl	8000c74 <__aeabi_ui2f>
 80039bc:	4603      	mov	r3, r0
 80039be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		float testResultGyroX = testResults[3];
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fd f955 	bl	8000c74 <__aeabi_ui2f>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		float testResultGyroY = testResults[4];
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fd f94e 	bl	8000c74 <__aeabi_ui2f>
 80039d8:	4603      	mov	r3, r0
 80039da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		float testResultGyroZ = testResults[5];
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fd f947 	bl	8000c74 <__aeabi_ui2f>
 80039e6:	4603      	mov	r3, r0
 80039e8:	67fb      	str	r3, [r7, #124]	@ 0x7c

		printf("Accel Test X: %f\r\n", testResultAccelX);
 80039ea:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80039ee:	f7fc fd13 	bl	8000418 <__aeabi_f2d>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	486c      	ldr	r0, [pc, #432]	@ (8003ba8 <MPU9250SelfTest+0xa80>)
 80039f8:	f003 fb52 	bl	80070a0 <iprintf>
		printf("Accel Test Y: %f\r\n", testResultAccelY);
 80039fc:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8003a00:	f7fc fd0a 	bl	8000418 <__aeabi_f2d>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4868      	ldr	r0, [pc, #416]	@ (8003bac <MPU9250SelfTest+0xa84>)
 8003a0a:	f003 fb49 	bl	80070a0 <iprintf>
		printf("Accel Test Z: %f\r\n", testResultAccelZ);
 8003a0e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003a12:	f7fc fd01 	bl	8000418 <__aeabi_f2d>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4865      	ldr	r0, [pc, #404]	@ (8003bb0 <MPU9250SelfTest+0xa88>)
 8003a1c:	f003 fb40 	bl	80070a0 <iprintf>
		printf("Gyro Test X: %f\r\n", testResultGyroX);
 8003a20:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003a24:	f7fc fcf8 	bl	8000418 <__aeabi_f2d>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4861      	ldr	r0, [pc, #388]	@ (8003bb4 <MPU9250SelfTest+0xa8c>)
 8003a2e:	f003 fb37 	bl	80070a0 <iprintf>
		printf("Gyro Test Y: %f\r\n", testResultGyroY);
 8003a32:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003a36:	f7fc fcef 	bl	8000418 <__aeabi_f2d>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	485e      	ldr	r0, [pc, #376]	@ (8003bb8 <MPU9250SelfTest+0xa90>)
 8003a40:	f003 fb2e 	bl	80070a0 <iprintf>
		printf("Gyro Test Z: %f\r\n", testResultGyroZ);
 8003a44:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8003a46:	f7fc fce7 	bl	8000418 <__aeabi_f2d>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	485b      	ldr	r0, [pc, #364]	@ (8003bbc <MPU9250SelfTest+0xa94>)
 8003a50:	f003 fb26 	bl	80070a0 <iprintf>
		printf("-------------------------\r\n");
 8003a54:	485a      	ldr	r0, [pc, #360]	@ (8003bc0 <MPU9250SelfTest+0xa98>)
 8003a56:	f003 fb8b 	bl	8007170 <puts>
	}

   for (int i = 0; i < 3; i++) {
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a60:	e090      	b.n	8003b84 <MPU9250SelfTest+0xa5c>
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8003a62:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	33b0      	adds	r3, #176	@ 0xb0
 8003a6a:	443b      	add	r3, r7
 8003a6c:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8003a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	33b0      	adds	r3, #176	@ 0xb0
 8003a78:	443b      	add	r3, r7
 8003a7a:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fd f8fb 	bl	8000c7c <__aeabi_i2f>
 8003a86:	4603      	mov	r3, r0
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fc fcc5 	bl	8000418 <__aeabi_f2d>
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	4b44      	ldr	r3, [pc, #272]	@ (8003ba4 <MPU9250SelfTest+0xa7c>)
 8003a94:	f7fc fd18 	bl	80004c8 <__aeabi_dmul>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4614      	mov	r4, r2
 8003a9e:	461d      	mov	r5, r3
 8003aa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	33b0      	adds	r3, #176	@ 0xb0
 8003aa8:	443b      	add	r3, r7
 8003aaa:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fc fcb2 	bl	8000418 <__aeabi_f2d>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4620      	mov	r0, r4
 8003aba:	4629      	mov	r1, r5
 8003abc:	f7fc fe2e 	bl	800071c <__aeabi_ddiv>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	4b35      	ldr	r3, [pc, #212]	@ (8003ba4 <MPU9250SelfTest+0xa7c>)
 8003ace:	f7fc fb43 	bl	8000158 <__aeabi_dsub>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	4619      	mov	r1, r3
 8003ada:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	18d4      	adds	r4, r2, r3
 8003ae4:	f7fc ffc0 	bl	8000a68 <__aeabi_d2f>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	6023      	str	r3, [r4, #0]
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8003aec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	33b0      	adds	r3, #176	@ 0xb0
 8003af4:	443b      	add	r3, r7
 8003af6:	f853 2c74 	ldr.w	r2, [r3, #-116]
 8003afa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	33b0      	adds	r3, #176	@ 0xb0
 8003b02:	443b      	add	r3, r7
 8003b04:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fd f8b6 	bl	8000c7c <__aeabi_i2f>
 8003b10:	4603      	mov	r3, r0
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fc fc80 	bl	8000418 <__aeabi_f2d>
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	4b21      	ldr	r3, [pc, #132]	@ (8003ba4 <MPU9250SelfTest+0xa7c>)
 8003b1e:	f7fc fcd3 	bl	80004c8 <__aeabi_dmul>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4614      	mov	r4, r2
 8003b28:	461d      	mov	r5, r3
 8003b2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b2e:	3303      	adds	r3, #3
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	33b0      	adds	r3, #176	@ 0xb0
 8003b34:	443b      	add	r3, r7
 8003b36:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fc fc6c 	bl	8000418 <__aeabi_f2d>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4620      	mov	r0, r4
 8003b46:	4629      	mov	r1, r5
 8003b48:	f7fc fde8 	bl	800071c <__aeabi_ddiv>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4610      	mov	r0, r2
 8003b52:	4619      	mov	r1, r3
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	4b12      	ldr	r3, [pc, #72]	@ (8003ba4 <MPU9250SelfTest+0xa7c>)
 8003b5a:	f7fc fafd 	bl	8000158 <__aeabi_dsub>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4610      	mov	r0, r2
 8003b64:	4619      	mov	r1, r3
 8003b66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b6a:	3303      	adds	r3, #3
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	18d4      	adds	r4, r2, r3
 8003b72:	f7fc ff79 	bl	8000a68 <__aeabi_d2f>
 8003b76:	4603      	mov	r3, r0
 8003b78:	6023      	str	r3, [r4, #0]
   for (int i = 0; i < 3; i++) {
 8003b7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b7e:	3301      	adds	r3, #1
 8003b80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	f77f af6a 	ble.w	8003a62 <MPU9250SelfTest+0x93a>
   }
}
 8003b8e:	bf00      	nop
 8003b90:	bf00      	nop
 8003b92:	37b0      	adds	r7, #176	@ 0xb0
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bdb0      	pop	{r4, r5, r7, pc}
 8003b98:	c28f5c29 	.word	0xc28f5c29
 8003b9c:	3ff028f5 	.word	0x3ff028f5
 8003ba0:	3ff00000 	.word	0x3ff00000
 8003ba4:	40590000 	.word	0x40590000
 8003ba8:	08009598 	.word	0x08009598
 8003bac:	080095ac 	.word	0x080095ac
 8003bb0:	080095c0 	.word	0x080095c0
 8003bb4:	080095d4 	.word	0x080095d4
 8003bb8:	080095e8 	.word	0x080095e8
 8003bbc:	080095fc 	.word	0x080095fc
 8003bc0:	0800946c 	.word	0x0800946c

08003bc4 <QuaternionUpdate>:

void QuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz){
 8003bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc6:	b0ad      	sub	sp, #180	@ 0xb4
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
 8003bd0:	603b      	str	r3, [r7, #0]
    float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
 8003bd2:	4b8a      	ldr	r3, [pc, #552]	@ (8003dfc <QuaternionUpdate+0x238>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003bda:	4b88      	ldr	r3, [pc, #544]	@ (8003dfc <QuaternionUpdate+0x238>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003be2:	4b86      	ldr	r3, [pc, #536]	@ (8003dfc <QuaternionUpdate+0x238>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003bea:	4b84      	ldr	r3, [pc, #528]	@ (8003dfc <QuaternionUpdate+0x238>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    float _2q1my;
    float _2q1mz;
    float _2q2mx;
    float _4bx;
    float _4bz;
    float _2q1 = 2.0f * q1;
 8003bf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fc ff8b 	bl	8000b14 <__addsf3>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    float _2q2 = 2.0f * q2;
 8003c04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fc ff82 	bl	8000b14 <__addsf3>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    float _2q3 = 2.0f * q3;
 8003c16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fc ff79 	bl	8000b14 <__addsf3>
 8003c22:	4603      	mov	r3, r0
 8003c24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    float _2q4 = 2.0f * q4;
 8003c28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fc ff70 	bl	8000b14 <__addsf3>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    float _2q1q3 = 2.0f * q1 * q3;
 8003c3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fc ff67 	bl	8000b14 <__addsf3>
 8003c46:	4603      	mov	r3, r0
 8003c48:	4619      	mov	r1, r3
 8003c4a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003c4e:	f7fd f869 	bl	8000d24 <__aeabi_fmul>
 8003c52:	4603      	mov	r3, r0
 8003c54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    float _2q3q4 = 2.0f * q3 * q4;
 8003c58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fc ff58 	bl	8000b14 <__addsf3>
 8003c64:	4603      	mov	r3, r0
 8003c66:	4619      	mov	r1, r3
 8003c68:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8003c6c:	f7fd f85a 	bl	8000d24 <__aeabi_fmul>
 8003c70:	4603      	mov	r3, r0
 8003c72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    float q1q1 = q1 * q1;
 8003c76:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8003c7a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8003c7e:	f7fd f851 	bl	8000d24 <__aeabi_fmul>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    float q1q2 = q1 * q2;
 8003c88:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8003c8c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8003c90:	f7fd f848 	bl	8000d24 <__aeabi_fmul>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    float q1q3 = q1 * q3;
 8003c9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c9e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8003ca2:	f7fd f83f 	bl	8000d24 <__aeabi_fmul>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    float q1q4 = q1 * q4;
 8003caa:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8003cae:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8003cb2:	f7fd f837 	bl	8000d24 <__aeabi_fmul>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	67bb      	str	r3, [r7, #120]	@ 0x78
    float q2q2 = q2 * q2;
 8003cba:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8003cbe:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8003cc2:	f7fd f82f 	bl	8000d24 <__aeabi_fmul>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	677b      	str	r3, [r7, #116]	@ 0x74
    float q2q3 = q2 * q3;
 8003cca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003cce:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8003cd2:	f7fd f827 	bl	8000d24 <__aeabi_fmul>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	673b      	str	r3, [r7, #112]	@ 0x70
    float q2q4 = q2 * q4;
 8003cda:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8003cde:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8003ce2:	f7fd f81f 	bl	8000d24 <__aeabi_fmul>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    float q3q3 = q3 * q3;
 8003cea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003cee:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003cf2:	f7fd f817 	bl	8000d24 <__aeabi_fmul>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	66bb      	str	r3, [r7, #104]	@ 0x68
    float q3q4 = q3 * q4;
 8003cfa:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8003cfe:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003d02:	f7fd f80f 	bl	8000d24 <__aeabi_fmul>
 8003d06:	4603      	mov	r3, r0
 8003d08:	667b      	str	r3, [r7, #100]	@ 0x64
    float q4q4 = q4 * q4;
 8003d0a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8003d0e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8003d12:	f7fd f807 	bl	8000d24 <__aeabi_fmul>
 8003d16:	4603      	mov	r3, r0
 8003d18:	663b      	str	r3, [r7, #96]	@ 0x60

    // Normalise accelerometer measurement
    norm = sqrtf(ax * ax + ay * ay + az * az);
 8003d1a:	68f9      	ldr	r1, [r7, #12]
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f7fd f801 	bl	8000d24 <__aeabi_fmul>
 8003d22:	4603      	mov	r3, r0
 8003d24:	461c      	mov	r4, r3
 8003d26:	68b9      	ldr	r1, [r7, #8]
 8003d28:	68b8      	ldr	r0, [r7, #8]
 8003d2a:	f7fc fffb 	bl	8000d24 <__aeabi_fmul>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	4619      	mov	r1, r3
 8003d32:	4620      	mov	r0, r4
 8003d34:	f7fc feee 	bl	8000b14 <__addsf3>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	461c      	mov	r4, r3
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7fc fff0 	bl	8000d24 <__aeabi_fmul>
 8003d44:	4603      	mov	r3, r0
 8003d46:	4619      	mov	r1, r3
 8003d48:	4620      	mov	r0, r4
 8003d4a:	f7fc fee3 	bl	8000b14 <__addsf3>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4618      	mov	r0, r3
 8003d52:	f004 f905 	bl	8007f60 <sqrtf>
 8003d56:	65f8      	str	r0, [r7, #92]	@ 0x5c
    if (norm == 0.0f) return; // handle NaN
 8003d58:	f04f 0100 	mov.w	r1, #0
 8003d5c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003d5e:	f7fd f975 	bl	800104c <__aeabi_fcmpeq>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f040 87e3 	bne.w	8004d30 <QuaternionUpdate+0x116c>
    norm = 1.0f/norm;
 8003d6a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003d6c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003d70:	f7fd f88c 	bl	8000e8c <__aeabi_fdiv>
 8003d74:	4603      	mov	r3, r0
 8003d76:	65fb      	str	r3, [r7, #92]	@ 0x5c
    ax *= norm;
 8003d78:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f7fc ffd2 	bl	8000d24 <__aeabi_fmul>
 8003d80:	4603      	mov	r3, r0
 8003d82:	60fb      	str	r3, [r7, #12]
    ay *= norm;
 8003d84:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003d86:	68b8      	ldr	r0, [r7, #8]
 8003d88:	f7fc ffcc 	bl	8000d24 <__aeabi_fmul>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	60bb      	str	r3, [r7, #8]
    az *= norm;
 8003d90:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fc ffc6 	bl	8000d24 <__aeabi_fmul>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	607b      	str	r3, [r7, #4]

    // Normalise magnetometer measurement
    norm = sqrtf(mx * mx + my * my + mz * mz);
 8003d9c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003da0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8003da4:	f7fc ffbe 	bl	8000d24 <__aeabi_fmul>
 8003da8:	4603      	mov	r3, r0
 8003daa:	461c      	mov	r4, r3
 8003dac:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8003db0:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8003db4:	f7fc ffb6 	bl	8000d24 <__aeabi_fmul>
 8003db8:	4603      	mov	r3, r0
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	f7fc fea9 	bl	8000b14 <__addsf3>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	461c      	mov	r4, r3
 8003dc6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003dca:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8003dce:	f7fc ffa9 	bl	8000d24 <__aeabi_fmul>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	f7fc fe9c 	bl	8000b14 <__addsf3>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	4618      	mov	r0, r3
 8003de0:	f004 f8be 	bl	8007f60 <sqrtf>
 8003de4:	65f8      	str	r0, [r7, #92]	@ 0x5c
    if (norm == 0.0f) return; // handle NaN
 8003de6:	f04f 0100 	mov.w	r1, #0
 8003dea:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003dec:	f7fd f92e 	bl	800104c <__aeabi_fcmpeq>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f040 879e 	bne.w	8004d34 <QuaternionUpdate+0x1170>
 8003df8:	e002      	b.n	8003e00 <QuaternionUpdate+0x23c>
 8003dfa:	bf00      	nop
 8003dfc:	20000008 	.word	0x20000008
    norm = 1.0f/norm;
 8003e00:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003e02:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003e06:	f7fd f841 	bl	8000e8c <__aeabi_fdiv>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    mx *= norm;
 8003e0e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003e10:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8003e14:	f7fc ff86 	bl	8000d24 <__aeabi_fmul>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    my *= norm;
 8003e1e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003e20:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8003e24:	f7fc ff7e 	bl	8000d24 <__aeabi_fmul>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    mz *= norm;
 8003e2e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003e30:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8003e34:	f7fc ff76 	bl	8000d24 <__aeabi_fmul>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

    // Reference direction of Earth's magnetic field
    _2q1mx = 2.0f * q1 * mx;
 8003e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e42:	4619      	mov	r1, r3
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fc fe65 	bl	8000b14 <__addsf3>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8003e52:	f7fc ff67 	bl	8000d24 <__aeabi_fmul>
 8003e56:	4603      	mov	r3, r0
 8003e58:	65bb      	str	r3, [r7, #88]	@ 0x58
    _2q1my = 2.0f * q1 * my;
 8003e5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fc fe57 	bl	8000b14 <__addsf3>
 8003e66:	4603      	mov	r3, r0
 8003e68:	4619      	mov	r1, r3
 8003e6a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8003e6e:	f7fc ff59 	bl	8000d24 <__aeabi_fmul>
 8003e72:	4603      	mov	r3, r0
 8003e74:	657b      	str	r3, [r7, #84]	@ 0x54
    _2q1mz = 2.0f * q1 * mz;
 8003e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fc fe49 	bl	8000b14 <__addsf3>
 8003e82:	4603      	mov	r3, r0
 8003e84:	4619      	mov	r1, r3
 8003e86:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8003e8a:	f7fc ff4b 	bl	8000d24 <__aeabi_fmul>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	653b      	str	r3, [r7, #80]	@ 0x50
    _2q2mx = 2.0f * q2 * mx;
 8003e92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e96:	4619      	mov	r1, r3
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fc fe3b 	bl	8000b14 <__addsf3>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8003ea6:	f7fc ff3d 	bl	8000d24 <__aeabi_fmul>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	64fb      	str	r3, [r7, #76]	@ 0x4c
    hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8003eae:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8003eb2:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8003eb6:	f7fc ff35 	bl	8000d24 <__aeabi_fmul>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	461c      	mov	r4, r3
 8003ebe:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8003ec2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003ec4:	f7fc ff2e 	bl	8000d24 <__aeabi_fmul>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4620      	mov	r0, r4
 8003ece:	f7fc fe1f 	bl	8000b10 <__aeabi_fsub>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	461c      	mov	r4, r3
 8003ed6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003eda:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8003edc:	f7fc ff22 	bl	8000d24 <__aeabi_fmul>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	f7fc fe15 	bl	8000b14 <__addsf3>
 8003eea:	4603      	mov	r3, r0
 8003eec:	461c      	mov	r4, r3
 8003eee:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003ef0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8003ef4:	f7fc ff16 	bl	8000d24 <__aeabi_fmul>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	4619      	mov	r1, r3
 8003efc:	4620      	mov	r0, r4
 8003efe:	f7fc fe09 	bl	8000b14 <__addsf3>
 8003f02:	4603      	mov	r3, r0
 8003f04:	461c      	mov	r4, r3
 8003f06:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8003f0a:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003f0e:	f7fc ff09 	bl	8000d24 <__aeabi_fmul>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fc ff03 	bl	8000d24 <__aeabi_fmul>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4619      	mov	r1, r3
 8003f22:	4620      	mov	r0, r4
 8003f24:	f7fc fdf6 	bl	8000b14 <__addsf3>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	461c      	mov	r4, r3
 8003f2c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003f30:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003f34:	f7fc fef6 	bl	8000d24 <__aeabi_fmul>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fc fef0 	bl	8000d24 <__aeabi_fmul>
 8003f44:	4603      	mov	r3, r0
 8003f46:	4619      	mov	r1, r3
 8003f48:	4620      	mov	r0, r4
 8003f4a:	f7fc fde3 	bl	8000b14 <__addsf3>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	461c      	mov	r4, r3
 8003f52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f54:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8003f58:	f7fc fee4 	bl	8000d24 <__aeabi_fmul>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4620      	mov	r0, r4
 8003f62:	f7fc fdd5 	bl	8000b10 <__aeabi_fsub>
 8003f66:	4603      	mov	r3, r0
 8003f68:	461c      	mov	r4, r3
 8003f6a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8003f6c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8003f70:	f7fc fed8 	bl	8000d24 <__aeabi_fmul>
 8003f74:	4603      	mov	r3, r0
 8003f76:	4619      	mov	r1, r3
 8003f78:	4620      	mov	r0, r4
 8003f7a:	f7fc fdc9 	bl	8000b10 <__aeabi_fsub>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	64bb      	str	r3, [r7, #72]	@ 0x48
    hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 8003f82:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8003f86:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003f88:	f7fc fecc 	bl	8000d24 <__aeabi_fmul>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	461c      	mov	r4, r3
 8003f90:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8003f94:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8003f98:	f7fc fec4 	bl	8000d24 <__aeabi_fmul>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	f7fc fdb7 	bl	8000b14 <__addsf3>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	461c      	mov	r4, r3
 8003faa:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8003fae:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8003fb0:	f7fc feb8 	bl	8000d24 <__aeabi_fmul>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4620      	mov	r0, r4
 8003fba:	f7fc fda9 	bl	8000b10 <__aeabi_fsub>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	461c      	mov	r4, r3
 8003fc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003fc6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003fc8:	f7fc feac 	bl	8000d24 <__aeabi_fmul>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	f7fc fd9f 	bl	8000b14 <__addsf3>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	461c      	mov	r4, r3
 8003fda:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003fdc:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8003fe0:	f7fc fea0 	bl	8000d24 <__aeabi_fmul>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f7fc fd91 	bl	8000b10 <__aeabi_fsub>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	461c      	mov	r4, r3
 8003ff2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ff4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8003ff8:	f7fc fe94 	bl	8000d24 <__aeabi_fmul>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	4619      	mov	r1, r3
 8004000:	4620      	mov	r0, r4
 8004002:	f7fc fd87 	bl	8000b14 <__addsf3>
 8004006:	4603      	mov	r3, r0
 8004008:	461c      	mov	r4, r3
 800400a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800400e:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8004012:	f7fc fe87 	bl	8000d24 <__aeabi_fmul>
 8004016:	4603      	mov	r3, r0
 8004018:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800401c:	4618      	mov	r0, r3
 800401e:	f7fc fe81 	bl	8000d24 <__aeabi_fmul>
 8004022:	4603      	mov	r3, r0
 8004024:	4619      	mov	r1, r3
 8004026:	4620      	mov	r0, r4
 8004028:	f7fc fd74 	bl	8000b14 <__addsf3>
 800402c:	4603      	mov	r3, r0
 800402e:	461c      	mov	r4, r3
 8004030:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004032:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8004036:	f7fc fe75 	bl	8000d24 <__aeabi_fmul>
 800403a:	4603      	mov	r3, r0
 800403c:	4619      	mov	r1, r3
 800403e:	4620      	mov	r0, r4
 8004040:	f7fc fd66 	bl	8000b10 <__aeabi_fsub>
 8004044:	4603      	mov	r3, r0
 8004046:	647b      	str	r3, [r7, #68]	@ 0x44
    _2bx = sqrtf(hx * hx + hy * hy);
 8004048:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800404a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800404c:	f7fc fe6a 	bl	8000d24 <__aeabi_fmul>
 8004050:	4603      	mov	r3, r0
 8004052:	461c      	mov	r4, r3
 8004054:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004056:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8004058:	f7fc fe64 	bl	8000d24 <__aeabi_fmul>
 800405c:	4603      	mov	r3, r0
 800405e:	4619      	mov	r1, r3
 8004060:	4620      	mov	r0, r4
 8004062:	f7fc fd57 	bl	8000b14 <__addsf3>
 8004066:	4603      	mov	r3, r0
 8004068:	4618      	mov	r0, r3
 800406a:	f003 ff79 	bl	8007f60 <sqrtf>
 800406e:	6438      	str	r0, [r7, #64]	@ 0x40
    _2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 8004070:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004072:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004076:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800407a:	4618      	mov	r0, r3
 800407c:	f7fc fe52 	bl	8000d24 <__aeabi_fmul>
 8004080:	4603      	mov	r3, r0
 8004082:	461c      	mov	r4, r3
 8004084:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8004088:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800408a:	f7fc fe4b 	bl	8000d24 <__aeabi_fmul>
 800408e:	4603      	mov	r3, r0
 8004090:	4619      	mov	r1, r3
 8004092:	4620      	mov	r0, r4
 8004094:	f7fc fd3e 	bl	8000b14 <__addsf3>
 8004098:	4603      	mov	r3, r0
 800409a:	461c      	mov	r4, r3
 800409c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80040a0:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80040a4:	f7fc fe3e 	bl	8000d24 <__aeabi_fmul>
 80040a8:	4603      	mov	r3, r0
 80040aa:	4619      	mov	r1, r3
 80040ac:	4620      	mov	r0, r4
 80040ae:	f7fc fd31 	bl	8000b14 <__addsf3>
 80040b2:	4603      	mov	r3, r0
 80040b4:	461c      	mov	r4, r3
 80040b6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80040ba:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80040bc:	f7fc fe32 	bl	8000d24 <__aeabi_fmul>
 80040c0:	4603      	mov	r3, r0
 80040c2:	4619      	mov	r1, r3
 80040c4:	4620      	mov	r0, r4
 80040c6:	f7fc fd25 	bl	8000b14 <__addsf3>
 80040ca:	4603      	mov	r3, r0
 80040cc:	461c      	mov	r4, r3
 80040ce:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80040d0:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80040d4:	f7fc fe26 	bl	8000d24 <__aeabi_fmul>
 80040d8:	4603      	mov	r3, r0
 80040da:	4619      	mov	r1, r3
 80040dc:	4620      	mov	r0, r4
 80040de:	f7fc fd17 	bl	8000b10 <__aeabi_fsub>
 80040e2:	4603      	mov	r3, r0
 80040e4:	461c      	mov	r4, r3
 80040e6:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80040ea:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80040ee:	f7fc fe19 	bl	8000d24 <__aeabi_fmul>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fc fe13 	bl	8000d24 <__aeabi_fmul>
 80040fe:	4603      	mov	r3, r0
 8004100:	4619      	mov	r1, r3
 8004102:	4620      	mov	r0, r4
 8004104:	f7fc fd06 	bl	8000b14 <__addsf3>
 8004108:	4603      	mov	r3, r0
 800410a:	461c      	mov	r4, r3
 800410c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800410e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8004112:	f7fc fe07 	bl	8000d24 <__aeabi_fmul>
 8004116:	4603      	mov	r3, r0
 8004118:	4619      	mov	r1, r3
 800411a:	4620      	mov	r0, r4
 800411c:	f7fc fcf8 	bl	8000b10 <__aeabi_fsub>
 8004120:	4603      	mov	r3, r0
 8004122:	461c      	mov	r4, r3
 8004124:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004126:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 800412a:	f7fc fdfb 	bl	8000d24 <__aeabi_fmul>
 800412e:	4603      	mov	r3, r0
 8004130:	4619      	mov	r1, r3
 8004132:	4620      	mov	r0, r4
 8004134:	f7fc fcee 	bl	8000b14 <__addsf3>
 8004138:	4603      	mov	r3, r0
 800413a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    _4bx = 2.0f * _2bx;
 800413c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800413e:	4619      	mov	r1, r3
 8004140:	4618      	mov	r0, r3
 8004142:	f7fc fce7 	bl	8000b14 <__addsf3>
 8004146:	4603      	mov	r3, r0
 8004148:	63bb      	str	r3, [r7, #56]	@ 0x38
    _4bz = 2.0f * _2bz;
 800414a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800414c:	4619      	mov	r1, r3
 800414e:	4618      	mov	r0, r3
 8004150:	f7fc fce0 	bl	8000b14 <__addsf3>
 8004154:	4603      	mov	r3, r0
 8004156:	637b      	str	r3, [r7, #52]	@ 0x34

    // Gradient decent algorithm corrective step
    s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8004158:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800415c:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8004160:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004162:	4619      	mov	r1, r3
 8004164:	4618      	mov	r0, r3
 8004166:	f7fc fcd5 	bl	8000b14 <__addsf3>
 800416a:	4603      	mov	r3, r0
 800416c:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8004170:	4618      	mov	r0, r3
 8004172:	f7fc fccd 	bl	8000b10 <__aeabi_fsub>
 8004176:	4603      	mov	r3, r0
 8004178:	68f9      	ldr	r1, [r7, #12]
 800417a:	4618      	mov	r0, r3
 800417c:	f7fc fcc8 	bl	8000b10 <__aeabi_fsub>
 8004180:	4603      	mov	r3, r0
 8004182:	4619      	mov	r1, r3
 8004184:	4620      	mov	r0, r4
 8004186:	f7fc fdcd 	bl	8000d24 <__aeabi_fmul>
 800418a:	4603      	mov	r3, r0
 800418c:	461c      	mov	r4, r3
 800418e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004192:	4619      	mov	r1, r3
 8004194:	4618      	mov	r0, r3
 8004196:	f7fc fcbd 	bl	8000b14 <__addsf3>
 800419a:	4603      	mov	r3, r0
 800419c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fc fcb7 	bl	8000b14 <__addsf3>
 80041a6:	4603      	mov	r3, r0
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fc fcb0 	bl	8000b10 <__aeabi_fsub>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fc fdb4 	bl	8000d24 <__aeabi_fmul>
 80041bc:	4603      	mov	r3, r0
 80041be:	4619      	mov	r1, r3
 80041c0:	4620      	mov	r0, r4
 80041c2:	f7fc fca7 	bl	8000b14 <__addsf3>
 80041c6:	4603      	mov	r3, r0
 80041c8:	461c      	mov	r4, r3
 80041ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041ce:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80041d0:	f7fc fda8 	bl	8000d24 <__aeabi_fmul>
 80041d4:	4603      	mov	r3, r0
 80041d6:	461d      	mov	r5, r3
 80041d8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041da:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 80041de:	f7fc fc97 	bl	8000b10 <__aeabi_fsub>
 80041e2:	4603      	mov	r3, r0
 80041e4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fc fc92 	bl	8000b10 <__aeabi_fsub>
 80041ec:	4603      	mov	r3, r0
 80041ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fc fd97 	bl	8000d24 <__aeabi_fmul>
 80041f6:	4603      	mov	r3, r0
 80041f8:	461e      	mov	r6, r3
 80041fa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80041fe:	f7fc fc87 	bl	8000b10 <__aeabi_fsub>
 8004202:	4603      	mov	r3, r0
 8004204:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004206:	4618      	mov	r0, r3
 8004208:	f7fc fd8c 	bl	8000d24 <__aeabi_fmul>
 800420c:	4603      	mov	r3, r0
 800420e:	4619      	mov	r1, r3
 8004210:	4630      	mov	r0, r6
 8004212:	f7fc fc7f 	bl	8000b14 <__addsf3>
 8004216:	4603      	mov	r3, r0
 8004218:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800421c:	4618      	mov	r0, r3
 800421e:	f7fc fc77 	bl	8000b10 <__aeabi_fsub>
 8004222:	4603      	mov	r3, r0
 8004224:	4619      	mov	r1, r3
 8004226:	4628      	mov	r0, r5
 8004228:	f7fc fd7c 	bl	8000d24 <__aeabi_fmul>
 800422c:	4603      	mov	r3, r0
 800422e:	4619      	mov	r1, r3
 8004230:	4620      	mov	r0, r4
 8004232:	f7fc fc6d 	bl	8000b10 <__aeabi_fsub>
 8004236:	4603      	mov	r3, r0
 8004238:	461c      	mov	r4, r3
 800423a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800423c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004240:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8004244:	4618      	mov	r0, r3
 8004246:	f7fc fd6d 	bl	8000d24 <__aeabi_fmul>
 800424a:	4603      	mov	r3, r0
 800424c:	461d      	mov	r5, r3
 800424e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8004252:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004254:	f7fc fd66 	bl	8000d24 <__aeabi_fmul>
 8004258:	4603      	mov	r3, r0
 800425a:	4619      	mov	r1, r3
 800425c:	4628      	mov	r0, r5
 800425e:	f7fc fc59 	bl	8000b14 <__addsf3>
 8004262:	4603      	mov	r3, r0
 8004264:	461d      	mov	r5, r3
 8004266:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004268:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800426a:	f7fc fc51 	bl	8000b10 <__aeabi_fsub>
 800426e:	4603      	mov	r3, r0
 8004270:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004272:	4618      	mov	r0, r3
 8004274:	f7fc fd56 	bl	8000d24 <__aeabi_fmul>
 8004278:	4603      	mov	r3, r0
 800427a:	461e      	mov	r6, r3
 800427c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800427e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8004282:	f7fc fc47 	bl	8000b14 <__addsf3>
 8004286:	4603      	mov	r3, r0
 8004288:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800428a:	4618      	mov	r0, r3
 800428c:	f7fc fd4a 	bl	8000d24 <__aeabi_fmul>
 8004290:	4603      	mov	r3, r0
 8004292:	4619      	mov	r1, r3
 8004294:	4630      	mov	r0, r6
 8004296:	f7fc fc3d 	bl	8000b14 <__addsf3>
 800429a:	4603      	mov	r3, r0
 800429c:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fc fc35 	bl	8000b10 <__aeabi_fsub>
 80042a6:	4603      	mov	r3, r0
 80042a8:	4619      	mov	r1, r3
 80042aa:	4628      	mov	r0, r5
 80042ac:	f7fc fd3a 	bl	8000d24 <__aeabi_fmul>
 80042b0:	4603      	mov	r3, r0
 80042b2:	4619      	mov	r1, r3
 80042b4:	4620      	mov	r0, r4
 80042b6:	f7fc fc2d 	bl	8000b14 <__addsf3>
 80042ba:	4603      	mov	r3, r0
 80042bc:	461c      	mov	r4, r3
 80042be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80042c2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80042c4:	f7fc fd2e 	bl	8000d24 <__aeabi_fmul>
 80042c8:	4603      	mov	r3, r0
 80042ca:	461d      	mov	r5, r3
 80042cc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80042ce:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80042d0:	f7fc fc20 	bl	8000b14 <__addsf3>
 80042d4:	4603      	mov	r3, r0
 80042d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fc fd23 	bl	8000d24 <__aeabi_fmul>
 80042de:	4603      	mov	r3, r0
 80042e0:	461e      	mov	r6, r3
 80042e2:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80042e4:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 80042e8:	f7fc fc12 	bl	8000b10 <__aeabi_fsub>
 80042ec:	4603      	mov	r3, r0
 80042ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fc fc0d 	bl	8000b10 <__aeabi_fsub>
 80042f6:	4603      	mov	r3, r0
 80042f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fc fd12 	bl	8000d24 <__aeabi_fmul>
 8004300:	4603      	mov	r3, r0
 8004302:	4619      	mov	r1, r3
 8004304:	4630      	mov	r0, r6
 8004306:	f7fc fc05 	bl	8000b14 <__addsf3>
 800430a:	4603      	mov	r3, r0
 800430c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8004310:	4618      	mov	r0, r3
 8004312:	f7fc fbfd 	bl	8000b10 <__aeabi_fsub>
 8004316:	4603      	mov	r3, r0
 8004318:	4619      	mov	r1, r3
 800431a:	4628      	mov	r0, r5
 800431c:	f7fc fd02 	bl	8000d24 <__aeabi_fmul>
 8004320:	4603      	mov	r3, r0
 8004322:	4619      	mov	r1, r3
 8004324:	4620      	mov	r0, r4
 8004326:	f7fc fbf5 	bl	8000b14 <__addsf3>
 800432a:	4603      	mov	r3, r0
 800432c:	633b      	str	r3, [r7, #48]	@ 0x30
    s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 800432e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004330:	4619      	mov	r1, r3
 8004332:	4618      	mov	r0, r3
 8004334:	f7fc fbee 	bl	8000b14 <__addsf3>
 8004338:	4603      	mov	r3, r0
 800433a:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800433e:	4618      	mov	r0, r3
 8004340:	f7fc fbe6 	bl	8000b10 <__aeabi_fsub>
 8004344:	4603      	mov	r3, r0
 8004346:	68f9      	ldr	r1, [r7, #12]
 8004348:	4618      	mov	r0, r3
 800434a:	f7fc fbe1 	bl	8000b10 <__aeabi_fsub>
 800434e:	4603      	mov	r3, r0
 8004350:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004354:	4618      	mov	r0, r3
 8004356:	f7fc fce5 	bl	8000d24 <__aeabi_fmul>
 800435a:	4603      	mov	r3, r0
 800435c:	461c      	mov	r4, r3
 800435e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004362:	4619      	mov	r1, r3
 8004364:	4618      	mov	r0, r3
 8004366:	f7fc fbd5 	bl	8000b14 <__addsf3>
 800436a:	4603      	mov	r3, r0
 800436c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8004370:	4618      	mov	r0, r3
 8004372:	f7fc fbcf 	bl	8000b14 <__addsf3>
 8004376:	4603      	mov	r3, r0
 8004378:	68b9      	ldr	r1, [r7, #8]
 800437a:	4618      	mov	r0, r3
 800437c:	f7fc fbc8 	bl	8000b10 <__aeabi_fsub>
 8004380:	4603      	mov	r3, r0
 8004382:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8004386:	4618      	mov	r0, r3
 8004388:	f7fc fccc 	bl	8000d24 <__aeabi_fmul>
 800438c:	4603      	mov	r3, r0
 800438e:	4619      	mov	r1, r3
 8004390:	4620      	mov	r0, r4
 8004392:	f7fc fbbf 	bl	8000b14 <__addsf3>
 8004396:	4603      	mov	r3, r0
 8004398:	461c      	mov	r4, r3
 800439a:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800439e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80043a2:	f7fc fcbf 	bl	8000d24 <__aeabi_fmul>
 80043a6:	4603      	mov	r3, r0
 80043a8:	461d      	mov	r5, r3
 80043aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043ac:	4619      	mov	r1, r3
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fc fbb0 	bl	8000b14 <__addsf3>
 80043b4:	4603      	mov	r3, r0
 80043b6:	4619      	mov	r1, r3
 80043b8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80043bc:	f7fc fba8 	bl	8000b10 <__aeabi_fsub>
 80043c0:	4603      	mov	r3, r0
 80043c2:	461e      	mov	r6, r3
 80043c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043c6:	4619      	mov	r1, r3
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fc fba3 	bl	8000b14 <__addsf3>
 80043ce:	4603      	mov	r3, r0
 80043d0:	4619      	mov	r1, r3
 80043d2:	4630      	mov	r0, r6
 80043d4:	f7fc fb9c 	bl	8000b10 <__aeabi_fsub>
 80043d8:	4603      	mov	r3, r0
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fc fb97 	bl	8000b10 <__aeabi_fsub>
 80043e2:	4603      	mov	r3, r0
 80043e4:	4619      	mov	r1, r3
 80043e6:	4628      	mov	r0, r5
 80043e8:	f7fc fc9c 	bl	8000d24 <__aeabi_fmul>
 80043ec:	4603      	mov	r3, r0
 80043ee:	4619      	mov	r1, r3
 80043f0:	4620      	mov	r0, r4
 80043f2:	f7fc fb8d 	bl	8000b10 <__aeabi_fsub>
 80043f6:	4603      	mov	r3, r0
 80043f8:	461c      	mov	r4, r3
 80043fa:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80043fe:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004400:	f7fc fc90 	bl	8000d24 <__aeabi_fmul>
 8004404:	4603      	mov	r3, r0
 8004406:	461d      	mov	r5, r3
 8004408:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800440a:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 800440e:	f7fc fb7f 	bl	8000b10 <__aeabi_fsub>
 8004412:	4603      	mov	r3, r0
 8004414:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004416:	4618      	mov	r0, r3
 8004418:	f7fc fb7a 	bl	8000b10 <__aeabi_fsub>
 800441c:	4603      	mov	r3, r0
 800441e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004420:	4618      	mov	r0, r3
 8004422:	f7fc fc7f 	bl	8000d24 <__aeabi_fmul>
 8004426:	4603      	mov	r3, r0
 8004428:	461e      	mov	r6, r3
 800442a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800442c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800442e:	f7fc fb6f 	bl	8000b10 <__aeabi_fsub>
 8004432:	4603      	mov	r3, r0
 8004434:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004436:	4618      	mov	r0, r3
 8004438:	f7fc fc74 	bl	8000d24 <__aeabi_fmul>
 800443c:	4603      	mov	r3, r0
 800443e:	4619      	mov	r1, r3
 8004440:	4630      	mov	r0, r6
 8004442:	f7fc fb67 	bl	8000b14 <__addsf3>
 8004446:	4603      	mov	r3, r0
 8004448:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800444c:	4618      	mov	r0, r3
 800444e:	f7fc fb5f 	bl	8000b10 <__aeabi_fsub>
 8004452:	4603      	mov	r3, r0
 8004454:	4619      	mov	r1, r3
 8004456:	4628      	mov	r0, r5
 8004458:	f7fc fc64 	bl	8000d24 <__aeabi_fmul>
 800445c:	4603      	mov	r3, r0
 800445e:	4619      	mov	r1, r3
 8004460:	4620      	mov	r0, r4
 8004462:	f7fc fb57 	bl	8000b14 <__addsf3>
 8004466:	4603      	mov	r3, r0
 8004468:	461c      	mov	r4, r3
 800446a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800446e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8004470:	f7fc fc58 	bl	8000d24 <__aeabi_fmul>
 8004474:	4603      	mov	r3, r0
 8004476:	461d      	mov	r5, r3
 8004478:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800447c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800447e:	f7fc fc51 	bl	8000d24 <__aeabi_fmul>
 8004482:	4603      	mov	r3, r0
 8004484:	4619      	mov	r1, r3
 8004486:	4628      	mov	r0, r5
 8004488:	f7fc fb44 	bl	8000b14 <__addsf3>
 800448c:	4603      	mov	r3, r0
 800448e:	461d      	mov	r5, r3
 8004490:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004492:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004494:	f7fc fb3c 	bl	8000b10 <__aeabi_fsub>
 8004498:	4603      	mov	r3, r0
 800449a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800449c:	4618      	mov	r0, r3
 800449e:	f7fc fc41 	bl	8000d24 <__aeabi_fmul>
 80044a2:	4603      	mov	r3, r0
 80044a4:	461e      	mov	r6, r3
 80044a6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80044a8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80044ac:	f7fc fb32 	bl	8000b14 <__addsf3>
 80044b0:	4603      	mov	r3, r0
 80044b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fc fc35 	bl	8000d24 <__aeabi_fmul>
 80044ba:	4603      	mov	r3, r0
 80044bc:	4619      	mov	r1, r3
 80044be:	4630      	mov	r0, r6
 80044c0:	f7fc fb28 	bl	8000b14 <__addsf3>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fc fb20 	bl	8000b10 <__aeabi_fsub>
 80044d0:	4603      	mov	r3, r0
 80044d2:	4619      	mov	r1, r3
 80044d4:	4628      	mov	r0, r5
 80044d6:	f7fc fc25 	bl	8000d24 <__aeabi_fmul>
 80044da:	4603      	mov	r3, r0
 80044dc:	4619      	mov	r1, r3
 80044de:	4620      	mov	r0, r4
 80044e0:	f7fc fb18 	bl	8000b14 <__addsf3>
 80044e4:	4603      	mov	r3, r0
 80044e6:	461c      	mov	r4, r3
 80044e8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80044ec:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80044ee:	f7fc fc19 	bl	8000d24 <__aeabi_fmul>
 80044f2:	4603      	mov	r3, r0
 80044f4:	461d      	mov	r5, r3
 80044f6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80044fa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80044fc:	f7fc fc12 	bl	8000d24 <__aeabi_fmul>
 8004500:	4603      	mov	r3, r0
 8004502:	4619      	mov	r1, r3
 8004504:	4628      	mov	r0, r5
 8004506:	f7fc fb03 	bl	8000b10 <__aeabi_fsub>
 800450a:	4603      	mov	r3, r0
 800450c:	461d      	mov	r5, r3
 800450e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004510:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004512:	f7fc faff 	bl	8000b14 <__addsf3>
 8004516:	4603      	mov	r3, r0
 8004518:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800451a:	4618      	mov	r0, r3
 800451c:	f7fc fc02 	bl	8000d24 <__aeabi_fmul>
 8004520:	4603      	mov	r3, r0
 8004522:	461e      	mov	r6, r3
 8004524:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8004526:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 800452a:	f7fc faf1 	bl	8000b10 <__aeabi_fsub>
 800452e:	4603      	mov	r3, r0
 8004530:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004532:	4618      	mov	r0, r3
 8004534:	f7fc faec 	bl	8000b10 <__aeabi_fsub>
 8004538:	4603      	mov	r3, r0
 800453a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800453c:	4618      	mov	r0, r3
 800453e:	f7fc fbf1 	bl	8000d24 <__aeabi_fmul>
 8004542:	4603      	mov	r3, r0
 8004544:	4619      	mov	r1, r3
 8004546:	4630      	mov	r0, r6
 8004548:	f7fc fae4 	bl	8000b14 <__addsf3>
 800454c:	4603      	mov	r3, r0
 800454e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8004552:	4618      	mov	r0, r3
 8004554:	f7fc fadc 	bl	8000b10 <__aeabi_fsub>
 8004558:	4603      	mov	r3, r0
 800455a:	4619      	mov	r1, r3
 800455c:	4628      	mov	r0, r5
 800455e:	f7fc fbe1 	bl	8000d24 <__aeabi_fmul>
 8004562:	4603      	mov	r3, r0
 8004564:	4619      	mov	r1, r3
 8004566:	4620      	mov	r0, r4
 8004568:	f7fc fad4 	bl	8000b14 <__addsf3>
 800456c:	4603      	mov	r3, r0
 800456e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8004570:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004574:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8004578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800457a:	4619      	mov	r1, r3
 800457c:	4618      	mov	r0, r3
 800457e:	f7fc fac9 	bl	8000b14 <__addsf3>
 8004582:	4603      	mov	r3, r0
 8004584:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8004588:	4618      	mov	r0, r3
 800458a:	f7fc fac1 	bl	8000b10 <__aeabi_fsub>
 800458e:	4603      	mov	r3, r0
 8004590:	68f9      	ldr	r1, [r7, #12]
 8004592:	4618      	mov	r0, r3
 8004594:	f7fc fabc 	bl	8000b10 <__aeabi_fsub>
 8004598:	4603      	mov	r3, r0
 800459a:	4619      	mov	r1, r3
 800459c:	4620      	mov	r0, r4
 800459e:	f7fc fbc1 	bl	8000d24 <__aeabi_fmul>
 80045a2:	4603      	mov	r3, r0
 80045a4:	461c      	mov	r4, r3
 80045a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045aa:	4619      	mov	r1, r3
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fc fab1 	bl	8000b14 <__addsf3>
 80045b2:	4603      	mov	r3, r0
 80045b4:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fc faab 	bl	8000b14 <__addsf3>
 80045be:	4603      	mov	r3, r0
 80045c0:	68b9      	ldr	r1, [r7, #8]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fc faa4 	bl	8000b10 <__aeabi_fsub>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fc fba8 	bl	8000d24 <__aeabi_fmul>
 80045d4:	4603      	mov	r3, r0
 80045d6:	4619      	mov	r1, r3
 80045d8:	4620      	mov	r0, r4
 80045da:	f7fc fa9b 	bl	8000b14 <__addsf3>
 80045de:	4603      	mov	r3, r0
 80045e0:	461c      	mov	r4, r3
 80045e2:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80045e6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80045ea:	f7fc fb9b 	bl	8000d24 <__aeabi_fmul>
 80045ee:	4603      	mov	r3, r0
 80045f0:	461d      	mov	r5, r3
 80045f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045f4:	4619      	mov	r1, r3
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fc fa8c 	bl	8000b14 <__addsf3>
 80045fc:	4603      	mov	r3, r0
 80045fe:	4619      	mov	r1, r3
 8004600:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004604:	f7fc fa84 	bl	8000b10 <__aeabi_fsub>
 8004608:	4603      	mov	r3, r0
 800460a:	461e      	mov	r6, r3
 800460c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800460e:	4619      	mov	r1, r3
 8004610:	4618      	mov	r0, r3
 8004612:	f7fc fa7f 	bl	8000b14 <__addsf3>
 8004616:	4603      	mov	r3, r0
 8004618:	4619      	mov	r1, r3
 800461a:	4630      	mov	r0, r6
 800461c:	f7fc fa78 	bl	8000b10 <__aeabi_fsub>
 8004620:	4603      	mov	r3, r0
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	4618      	mov	r0, r3
 8004626:	f7fc fa73 	bl	8000b10 <__aeabi_fsub>
 800462a:	4603      	mov	r3, r0
 800462c:	4619      	mov	r1, r3
 800462e:	4628      	mov	r0, r5
 8004630:	f7fc fb78 	bl	8000d24 <__aeabi_fmul>
 8004634:	4603      	mov	r3, r0
 8004636:	4619      	mov	r1, r3
 8004638:	4620      	mov	r0, r4
 800463a:	f7fc fa69 	bl	8000b10 <__aeabi_fsub>
 800463e:	4603      	mov	r3, r0
 8004640:	461c      	mov	r4, r3
 8004642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004644:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004648:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800464c:	4618      	mov	r0, r3
 800464e:	f7fc fb69 	bl	8000d24 <__aeabi_fmul>
 8004652:	4603      	mov	r3, r0
 8004654:	461d      	mov	r5, r3
 8004656:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800465a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800465c:	f7fc fb62 	bl	8000d24 <__aeabi_fmul>
 8004660:	4603      	mov	r3, r0
 8004662:	4619      	mov	r1, r3
 8004664:	4628      	mov	r0, r5
 8004666:	f7fc fa53 	bl	8000b10 <__aeabi_fsub>
 800466a:	4603      	mov	r3, r0
 800466c:	461d      	mov	r5, r3
 800466e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004670:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8004674:	f7fc fa4c 	bl	8000b10 <__aeabi_fsub>
 8004678:	4603      	mov	r3, r0
 800467a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800467c:	4618      	mov	r0, r3
 800467e:	f7fc fa47 	bl	8000b10 <__aeabi_fsub>
 8004682:	4603      	mov	r3, r0
 8004684:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004686:	4618      	mov	r0, r3
 8004688:	f7fc fb4c 	bl	8000d24 <__aeabi_fmul>
 800468c:	4603      	mov	r3, r0
 800468e:	461e      	mov	r6, r3
 8004690:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004692:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004694:	f7fc fa3c 	bl	8000b10 <__aeabi_fsub>
 8004698:	4603      	mov	r3, r0
 800469a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800469c:	4618      	mov	r0, r3
 800469e:	f7fc fb41 	bl	8000d24 <__aeabi_fmul>
 80046a2:	4603      	mov	r3, r0
 80046a4:	4619      	mov	r1, r3
 80046a6:	4630      	mov	r0, r6
 80046a8:	f7fc fa34 	bl	8000b14 <__addsf3>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fc fa2c 	bl	8000b10 <__aeabi_fsub>
 80046b8:	4603      	mov	r3, r0
 80046ba:	4619      	mov	r1, r3
 80046bc:	4628      	mov	r0, r5
 80046be:	f7fc fb31 	bl	8000d24 <__aeabi_fmul>
 80046c2:	4603      	mov	r3, r0
 80046c4:	4619      	mov	r1, r3
 80046c6:	4620      	mov	r0, r4
 80046c8:	f7fc fa24 	bl	8000b14 <__addsf3>
 80046cc:	4603      	mov	r3, r0
 80046ce:	461c      	mov	r4, r3
 80046d0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80046d4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80046d6:	f7fc fb25 	bl	8000d24 <__aeabi_fmul>
 80046da:	4603      	mov	r3, r0
 80046dc:	461d      	mov	r5, r3
 80046de:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80046e2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80046e4:	f7fc fb1e 	bl	8000d24 <__aeabi_fmul>
 80046e8:	4603      	mov	r3, r0
 80046ea:	4619      	mov	r1, r3
 80046ec:	4628      	mov	r0, r5
 80046ee:	f7fc fa11 	bl	8000b14 <__addsf3>
 80046f2:	4603      	mov	r3, r0
 80046f4:	461d      	mov	r5, r3
 80046f6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80046f8:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80046fa:	f7fc fa09 	bl	8000b10 <__aeabi_fsub>
 80046fe:	4603      	mov	r3, r0
 8004700:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004702:	4618      	mov	r0, r3
 8004704:	f7fc fb0e 	bl	8000d24 <__aeabi_fmul>
 8004708:	4603      	mov	r3, r0
 800470a:	461e      	mov	r6, r3
 800470c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800470e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8004712:	f7fc f9ff 	bl	8000b14 <__addsf3>
 8004716:	4603      	mov	r3, r0
 8004718:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800471a:	4618      	mov	r0, r3
 800471c:	f7fc fb02 	bl	8000d24 <__aeabi_fmul>
 8004720:	4603      	mov	r3, r0
 8004722:	4619      	mov	r1, r3
 8004724:	4630      	mov	r0, r6
 8004726:	f7fc f9f5 	bl	8000b14 <__addsf3>
 800472a:	4603      	mov	r3, r0
 800472c:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8004730:	4618      	mov	r0, r3
 8004732:	f7fc f9ed 	bl	8000b10 <__aeabi_fsub>
 8004736:	4603      	mov	r3, r0
 8004738:	4619      	mov	r1, r3
 800473a:	4628      	mov	r0, r5
 800473c:	f7fc faf2 	bl	8000d24 <__aeabi_fmul>
 8004740:	4603      	mov	r3, r0
 8004742:	4619      	mov	r1, r3
 8004744:	4620      	mov	r0, r4
 8004746:	f7fc f9e5 	bl	8000b14 <__addsf3>
 800474a:	4603      	mov	r3, r0
 800474c:	461c      	mov	r4, r3
 800474e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8004752:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8004754:	f7fc fae6 	bl	8000d24 <__aeabi_fmul>
 8004758:	4603      	mov	r3, r0
 800475a:	461d      	mov	r5, r3
 800475c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004760:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004762:	f7fc fadf 	bl	8000d24 <__aeabi_fmul>
 8004766:	4603      	mov	r3, r0
 8004768:	4619      	mov	r1, r3
 800476a:	4628      	mov	r0, r5
 800476c:	f7fc f9d0 	bl	8000b10 <__aeabi_fsub>
 8004770:	4603      	mov	r3, r0
 8004772:	461d      	mov	r5, r3
 8004774:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004776:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004778:	f7fc f9cc 	bl	8000b14 <__addsf3>
 800477c:	4603      	mov	r3, r0
 800477e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004780:	4618      	mov	r0, r3
 8004782:	f7fc facf 	bl	8000d24 <__aeabi_fmul>
 8004786:	4603      	mov	r3, r0
 8004788:	461e      	mov	r6, r3
 800478a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800478c:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8004790:	f7fc f9be 	bl	8000b10 <__aeabi_fsub>
 8004794:	4603      	mov	r3, r0
 8004796:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004798:	4618      	mov	r0, r3
 800479a:	f7fc f9b9 	bl	8000b10 <__aeabi_fsub>
 800479e:	4603      	mov	r3, r0
 80047a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fc fabe 	bl	8000d24 <__aeabi_fmul>
 80047a8:	4603      	mov	r3, r0
 80047aa:	4619      	mov	r1, r3
 80047ac:	4630      	mov	r0, r6
 80047ae:	f7fc f9b1 	bl	8000b14 <__addsf3>
 80047b2:	4603      	mov	r3, r0
 80047b4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fc f9a9 	bl	8000b10 <__aeabi_fsub>
 80047be:	4603      	mov	r3, r0
 80047c0:	4619      	mov	r1, r3
 80047c2:	4628      	mov	r0, r5
 80047c4:	f7fc faae 	bl	8000d24 <__aeabi_fmul>
 80047c8:	4603      	mov	r3, r0
 80047ca:	4619      	mov	r1, r3
 80047cc:	4620      	mov	r0, r4
 80047ce:	f7fc f9a1 	bl	8000b14 <__addsf3>
 80047d2:	4603      	mov	r3, r0
 80047d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80047d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047d8:	4619      	mov	r1, r3
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fc f99a 	bl	8000b14 <__addsf3>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fc f992 	bl	8000b10 <__aeabi_fsub>
 80047ec:	4603      	mov	r3, r0
 80047ee:	68f9      	ldr	r1, [r7, #12]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fc f98d 	bl	8000b10 <__aeabi_fsub>
 80047f6:	4603      	mov	r3, r0
 80047f8:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fc fa91 	bl	8000d24 <__aeabi_fmul>
 8004802:	4603      	mov	r3, r0
 8004804:	461c      	mov	r4, r3
 8004806:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800480a:	4619      	mov	r1, r3
 800480c:	4618      	mov	r0, r3
 800480e:	f7fc f981 	bl	8000b14 <__addsf3>
 8004812:	4603      	mov	r3, r0
 8004814:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8004818:	4618      	mov	r0, r3
 800481a:	f7fc f97b 	bl	8000b14 <__addsf3>
 800481e:	4603      	mov	r3, r0
 8004820:	68b9      	ldr	r1, [r7, #8]
 8004822:	4618      	mov	r0, r3
 8004824:	f7fc f974 	bl	8000b10 <__aeabi_fsub>
 8004828:	4603      	mov	r3, r0
 800482a:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800482e:	4618      	mov	r0, r3
 8004830:	f7fc fa78 	bl	8000d24 <__aeabi_fmul>
 8004834:	4603      	mov	r3, r0
 8004836:	4619      	mov	r1, r3
 8004838:	4620      	mov	r0, r4
 800483a:	f7fc f96b 	bl	8000b14 <__addsf3>
 800483e:	4603      	mov	r3, r0
 8004840:	461c      	mov	r4, r3
 8004842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004844:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004848:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800484c:	4618      	mov	r0, r3
 800484e:	f7fc fa69 	bl	8000d24 <__aeabi_fmul>
 8004852:	4603      	mov	r3, r0
 8004854:	461d      	mov	r5, r3
 8004856:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800485a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800485c:	f7fc fa62 	bl	8000d24 <__aeabi_fmul>
 8004860:	4603      	mov	r3, r0
 8004862:	4619      	mov	r1, r3
 8004864:	4628      	mov	r0, r5
 8004866:	f7fc f955 	bl	8000b14 <__addsf3>
 800486a:	4603      	mov	r3, r0
 800486c:	461d      	mov	r5, r3
 800486e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004870:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8004874:	f7fc f94c 	bl	8000b10 <__aeabi_fsub>
 8004878:	4603      	mov	r3, r0
 800487a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800487c:	4618      	mov	r0, r3
 800487e:	f7fc f947 	bl	8000b10 <__aeabi_fsub>
 8004882:	4603      	mov	r3, r0
 8004884:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004886:	4618      	mov	r0, r3
 8004888:	f7fc fa4c 	bl	8000d24 <__aeabi_fmul>
 800488c:	4603      	mov	r3, r0
 800488e:	461e      	mov	r6, r3
 8004890:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004892:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004894:	f7fc f93c 	bl	8000b10 <__aeabi_fsub>
 8004898:	4603      	mov	r3, r0
 800489a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800489c:	4618      	mov	r0, r3
 800489e:	f7fc fa41 	bl	8000d24 <__aeabi_fmul>
 80048a2:	4603      	mov	r3, r0
 80048a4:	4619      	mov	r1, r3
 80048a6:	4630      	mov	r0, r6
 80048a8:	f7fc f934 	bl	8000b14 <__addsf3>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fc f92c 	bl	8000b10 <__aeabi_fsub>
 80048b8:	4603      	mov	r3, r0
 80048ba:	4619      	mov	r1, r3
 80048bc:	4628      	mov	r0, r5
 80048be:	f7fc fa31 	bl	8000d24 <__aeabi_fmul>
 80048c2:	4603      	mov	r3, r0
 80048c4:	4619      	mov	r1, r3
 80048c6:	4620      	mov	r0, r4
 80048c8:	f7fc f924 	bl	8000b14 <__addsf3>
 80048cc:	4603      	mov	r3, r0
 80048ce:	461c      	mov	r4, r3
 80048d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048d2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80048d6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fc fa22 	bl	8000d24 <__aeabi_fmul>
 80048e0:	4603      	mov	r3, r0
 80048e2:	461d      	mov	r5, r3
 80048e4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80048e8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80048ea:	f7fc fa1b 	bl	8000d24 <__aeabi_fmul>
 80048ee:	4603      	mov	r3, r0
 80048f0:	4619      	mov	r1, r3
 80048f2:	4628      	mov	r0, r5
 80048f4:	f7fc f90e 	bl	8000b14 <__addsf3>
 80048f8:	4603      	mov	r3, r0
 80048fa:	461d      	mov	r5, r3
 80048fc:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80048fe:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004900:	f7fc f906 	bl	8000b10 <__aeabi_fsub>
 8004904:	4603      	mov	r3, r0
 8004906:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004908:	4618      	mov	r0, r3
 800490a:	f7fc fa0b 	bl	8000d24 <__aeabi_fmul>
 800490e:	4603      	mov	r3, r0
 8004910:	461e      	mov	r6, r3
 8004912:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004914:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8004918:	f7fc f8fc 	bl	8000b14 <__addsf3>
 800491c:	4603      	mov	r3, r0
 800491e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004920:	4618      	mov	r0, r3
 8004922:	f7fc f9ff 	bl	8000d24 <__aeabi_fmul>
 8004926:	4603      	mov	r3, r0
 8004928:	4619      	mov	r1, r3
 800492a:	4630      	mov	r0, r6
 800492c:	f7fc f8f2 	bl	8000b14 <__addsf3>
 8004930:	4603      	mov	r3, r0
 8004932:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8004936:	4618      	mov	r0, r3
 8004938:	f7fc f8ea 	bl	8000b10 <__aeabi_fsub>
 800493c:	4603      	mov	r3, r0
 800493e:	4619      	mov	r1, r3
 8004940:	4628      	mov	r0, r5
 8004942:	f7fc f9ef 	bl	8000d24 <__aeabi_fmul>
 8004946:	4603      	mov	r3, r0
 8004948:	4619      	mov	r1, r3
 800494a:	4620      	mov	r0, r4
 800494c:	f7fc f8e2 	bl	8000b14 <__addsf3>
 8004950:	4603      	mov	r3, r0
 8004952:	461c      	mov	r4, r3
 8004954:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8004958:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800495a:	f7fc f9e3 	bl	8000d24 <__aeabi_fmul>
 800495e:	4603      	mov	r3, r0
 8004960:	461d      	mov	r5, r3
 8004962:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004964:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004966:	f7fc f8d5 	bl	8000b14 <__addsf3>
 800496a:	4603      	mov	r3, r0
 800496c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800496e:	4618      	mov	r0, r3
 8004970:	f7fc f9d8 	bl	8000d24 <__aeabi_fmul>
 8004974:	4603      	mov	r3, r0
 8004976:	461e      	mov	r6, r3
 8004978:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800497a:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 800497e:	f7fc f8c7 	bl	8000b10 <__aeabi_fsub>
 8004982:	4603      	mov	r3, r0
 8004984:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004986:	4618      	mov	r0, r3
 8004988:	f7fc f8c2 	bl	8000b10 <__aeabi_fsub>
 800498c:	4603      	mov	r3, r0
 800498e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004990:	4618      	mov	r0, r3
 8004992:	f7fc f9c7 	bl	8000d24 <__aeabi_fmul>
 8004996:	4603      	mov	r3, r0
 8004998:	4619      	mov	r1, r3
 800499a:	4630      	mov	r0, r6
 800499c:	f7fc f8ba 	bl	8000b14 <__addsf3>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fc f8b2 	bl	8000b10 <__aeabi_fsub>
 80049ac:	4603      	mov	r3, r0
 80049ae:	4619      	mov	r1, r3
 80049b0:	4628      	mov	r0, r5
 80049b2:	f7fc f9b7 	bl	8000d24 <__aeabi_fmul>
 80049b6:	4603      	mov	r3, r0
 80049b8:	4619      	mov	r1, r3
 80049ba:	4620      	mov	r0, r4
 80049bc:	f7fc f8aa 	bl	8000b14 <__addsf3>
 80049c0:	4603      	mov	r3, r0
 80049c2:	627b      	str	r3, [r7, #36]	@ 0x24
    norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 80049c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80049c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049c8:	f7fc f9ac 	bl	8000d24 <__aeabi_fmul>
 80049cc:	4603      	mov	r3, r0
 80049ce:	461c      	mov	r4, r3
 80049d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80049d4:	f7fc f9a6 	bl	8000d24 <__aeabi_fmul>
 80049d8:	4603      	mov	r3, r0
 80049da:	4619      	mov	r1, r3
 80049dc:	4620      	mov	r0, r4
 80049de:	f7fc f899 	bl	8000b14 <__addsf3>
 80049e2:	4603      	mov	r3, r0
 80049e4:	461c      	mov	r4, r3
 80049e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049ea:	f7fc f99b 	bl	8000d24 <__aeabi_fmul>
 80049ee:	4603      	mov	r3, r0
 80049f0:	4619      	mov	r1, r3
 80049f2:	4620      	mov	r0, r4
 80049f4:	f7fc f88e 	bl	8000b14 <__addsf3>
 80049f8:	4603      	mov	r3, r0
 80049fa:	461c      	mov	r4, r3
 80049fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a00:	f7fc f990 	bl	8000d24 <__aeabi_fmul>
 8004a04:	4603      	mov	r3, r0
 8004a06:	4619      	mov	r1, r3
 8004a08:	4620      	mov	r0, r4
 8004a0a:	f7fc f883 	bl	8000b14 <__addsf3>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	4618      	mov	r0, r3
 8004a12:	f003 faa5 	bl	8007f60 <sqrtf>
 8004a16:	65f8      	str	r0, [r7, #92]	@ 0x5c
    norm = 1.0f/norm;
 8004a18:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8004a1a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004a1e:	f7fc fa35 	bl	8000e8c <__aeabi_fdiv>
 8004a22:	4603      	mov	r3, r0
 8004a24:	65fb      	str	r3, [r7, #92]	@ 0x5c
    s1 *= norm;
 8004a26:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8004a28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a2a:	f7fc f97b 	bl	8000d24 <__aeabi_fmul>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	633b      	str	r3, [r7, #48]	@ 0x30
    s2 *= norm;
 8004a32:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8004a34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004a36:	f7fc f975 	bl	8000d24 <__aeabi_fmul>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s3 *= norm;
 8004a3e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8004a40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a42:	f7fc f96f 	bl	8000d24 <__aeabi_fmul>
 8004a46:	4603      	mov	r3, r0
 8004a48:	62bb      	str	r3, [r7, #40]	@ 0x28
    s4 *= norm;
 8004a4a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8004a4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a4e:	f7fc f969 	bl	8000d24 <__aeabi_fmul>
 8004a52:	4603      	mov	r3, r0
 8004a54:	627b      	str	r3, [r7, #36]	@ 0x24

    // Compute rate of change of quaternion
    qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8004a56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a5a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004a5e:	6839      	ldr	r1, [r7, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fc f95f 	bl	8000d24 <__aeabi_fmul>
 8004a66:	4603      	mov	r3, r0
 8004a68:	461c      	mov	r4, r3
 8004a6a:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8004a6e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8004a72:	f7fc f957 	bl	8000d24 <__aeabi_fmul>
 8004a76:	4603      	mov	r3, r0
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f7fc f848 	bl	8000b10 <__aeabi_fsub>
 8004a80:	4603      	mov	r3, r0
 8004a82:	461c      	mov	r4, r3
 8004a84:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8004a88:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8004a8c:	f7fc f94a 	bl	8000d24 <__aeabi_fmul>
 8004a90:	4603      	mov	r3, r0
 8004a92:	4619      	mov	r1, r3
 8004a94:	4620      	mov	r0, r4
 8004a96:	f7fc f83b 	bl	8000b10 <__aeabi_fsub>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7fc f93f 	bl	8000d24 <__aeabi_fmul>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	461c      	mov	r4, r3
 8004aaa:	4ba4      	ldr	r3, [pc, #656]	@ (8004d3c <QuaternionUpdate+0x1178>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7fc f937 	bl	8000d24 <__aeabi_fmul>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4620      	mov	r0, r4
 8004abc:	f7fc f828 	bl	8000b10 <__aeabi_fsub>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	623b      	str	r3, [r7, #32]
    qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8004ac4:	6839      	ldr	r1, [r7, #0]
 8004ac6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8004aca:	f7fc f92b 	bl	8000d24 <__aeabi_fmul>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	461c      	mov	r4, r3
 8004ad2:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8004ad6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8004ada:	f7fc f923 	bl	8000d24 <__aeabi_fmul>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	f7fc f816 	bl	8000b14 <__addsf3>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	461c      	mov	r4, r3
 8004aec:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8004af0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8004af4:	f7fc f916 	bl	8000d24 <__aeabi_fmul>
 8004af8:	4603      	mov	r3, r0
 8004afa:	4619      	mov	r1, r3
 8004afc:	4620      	mov	r0, r4
 8004afe:	f7fc f807 	bl	8000b10 <__aeabi_fsub>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fc f90b 	bl	8000d24 <__aeabi_fmul>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	461c      	mov	r4, r3
 8004b12:	4b8a      	ldr	r3, [pc, #552]	@ (8004d3c <QuaternionUpdate+0x1178>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fc f903 	bl	8000d24 <__aeabi_fmul>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	4619      	mov	r1, r3
 8004b22:	4620      	mov	r0, r4
 8004b24:	f7fb fff4 	bl	8000b10 <__aeabi_fsub>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	61fb      	str	r3, [r7, #28]
    qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8004b2c:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8004b30:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8004b34:	f7fc f8f6 	bl	8000d24 <__aeabi_fmul>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	461c      	mov	r4, r3
 8004b3c:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8004b40:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8004b44:	f7fc f8ee 	bl	8000d24 <__aeabi_fmul>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	f7fb ffdf 	bl	8000b10 <__aeabi_fsub>
 8004b52:	4603      	mov	r3, r0
 8004b54:	461c      	mov	r4, r3
 8004b56:	6839      	ldr	r1, [r7, #0]
 8004b58:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8004b5c:	f7fc f8e2 	bl	8000d24 <__aeabi_fmul>
 8004b60:	4603      	mov	r3, r0
 8004b62:	4619      	mov	r1, r3
 8004b64:	4620      	mov	r0, r4
 8004b66:	f7fb ffd5 	bl	8000b14 <__addsf3>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fc f8d7 	bl	8000d24 <__aeabi_fmul>
 8004b76:	4603      	mov	r3, r0
 8004b78:	461c      	mov	r4, r3
 8004b7a:	4b70      	ldr	r3, [pc, #448]	@ (8004d3c <QuaternionUpdate+0x1178>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fc f8cf 	bl	8000d24 <__aeabi_fmul>
 8004b86:	4603      	mov	r3, r0
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	f7fb ffc0 	bl	8000b10 <__aeabi_fsub>
 8004b90:	4603      	mov	r3, r0
 8004b92:	61bb      	str	r3, [r7, #24]
    qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8004b94:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8004b98:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8004b9c:	f7fc f8c2 	bl	8000d24 <__aeabi_fmul>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	461c      	mov	r4, r3
 8004ba4:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8004ba8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8004bac:	f7fc f8ba 	bl	8000d24 <__aeabi_fmul>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	f7fb ffad 	bl	8000b14 <__addsf3>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	461c      	mov	r4, r3
 8004bbe:	6839      	ldr	r1, [r7, #0]
 8004bc0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8004bc4:	f7fc f8ae 	bl	8000d24 <__aeabi_fmul>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	4619      	mov	r1, r3
 8004bcc:	4620      	mov	r0, r4
 8004bce:	f7fb ff9f 	bl	8000b10 <__aeabi_fsub>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fc f8a3 	bl	8000d24 <__aeabi_fmul>
 8004bde:	4603      	mov	r3, r0
 8004be0:	461c      	mov	r4, r3
 8004be2:	4b56      	ldr	r3, [pc, #344]	@ (8004d3c <QuaternionUpdate+0x1178>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7fc f89b 	bl	8000d24 <__aeabi_fmul>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f7fb ff8c 	bl	8000b10 <__aeabi_fsub>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	617b      	str	r3, [r7, #20]

    // Integrate to yield quaternion
    q1 += qDot1 * deltat;
 8004bfc:	4b50      	ldr	r3, [pc, #320]	@ (8004d40 <QuaternionUpdate+0x117c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6a39      	ldr	r1, [r7, #32]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fc f88e 	bl	8000d24 <__aeabi_fmul>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8004c10:	f7fb ff80 	bl	8000b14 <__addsf3>
 8004c14:	4603      	mov	r3, r0
 8004c16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    q2 += qDot2 * deltat;
 8004c1a:	4b49      	ldr	r3, [pc, #292]	@ (8004d40 <QuaternionUpdate+0x117c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69f9      	ldr	r1, [r7, #28]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fc f87f 	bl	8000d24 <__aeabi_fmul>
 8004c26:	4603      	mov	r3, r0
 8004c28:	4619      	mov	r1, r3
 8004c2a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8004c2e:	f7fb ff71 	bl	8000b14 <__addsf3>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    q3 += qDot3 * deltat;
 8004c38:	4b41      	ldr	r3, [pc, #260]	@ (8004d40 <QuaternionUpdate+0x117c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	69b9      	ldr	r1, [r7, #24]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fc f870 	bl	8000d24 <__aeabi_fmul>
 8004c44:	4603      	mov	r3, r0
 8004c46:	4619      	mov	r1, r3
 8004c48:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8004c4c:	f7fb ff62 	bl	8000b14 <__addsf3>
 8004c50:	4603      	mov	r3, r0
 8004c52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    q4 += qDot4 * deltat;
 8004c56:	4b3a      	ldr	r3, [pc, #232]	@ (8004d40 <QuaternionUpdate+0x117c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6979      	ldr	r1, [r7, #20]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fc f861 	bl	8000d24 <__aeabi_fmul>
 8004c62:	4603      	mov	r3, r0
 8004c64:	4619      	mov	r1, r3
 8004c66:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8004c6a:	f7fb ff53 	bl	8000b14 <__addsf3>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 8004c74:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8004c78:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8004c7c:	f7fc f852 	bl	8000d24 <__aeabi_fmul>
 8004c80:	4603      	mov	r3, r0
 8004c82:	461c      	mov	r4, r3
 8004c84:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8004c88:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8004c8c:	f7fc f84a 	bl	8000d24 <__aeabi_fmul>
 8004c90:	4603      	mov	r3, r0
 8004c92:	4619      	mov	r1, r3
 8004c94:	4620      	mov	r0, r4
 8004c96:	f7fb ff3d 	bl	8000b14 <__addsf3>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	461c      	mov	r4, r3
 8004c9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004ca2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8004ca6:	f7fc f83d 	bl	8000d24 <__aeabi_fmul>
 8004caa:	4603      	mov	r3, r0
 8004cac:	4619      	mov	r1, r3
 8004cae:	4620      	mov	r0, r4
 8004cb0:	f7fb ff30 	bl	8000b14 <__addsf3>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	461c      	mov	r4, r3
 8004cb8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8004cbc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8004cc0:	f7fc f830 	bl	8000d24 <__aeabi_fmul>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4620      	mov	r0, r4
 8004cca:	f7fb ff23 	bl	8000b14 <__addsf3>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f003 f945 	bl	8007f60 <sqrtf>
 8004cd6:	65f8      	str	r0, [r7, #92]	@ 0x5c
    norm = 1.0f/norm;
 8004cd8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8004cda:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004cde:	f7fc f8d5 	bl	8000e8c <__aeabi_fdiv>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    q[0] = q1 * norm;
 8004ce6:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8004ce8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8004cec:	f7fc f81a 	bl	8000d24 <__aeabi_fmul>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	4b13      	ldr	r3, [pc, #76]	@ (8004d44 <QuaternionUpdate+0x1180>)
 8004cf6:	601a      	str	r2, [r3, #0]
    q[1] = q2 * norm;
 8004cf8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8004cfa:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8004cfe:	f7fc f811 	bl	8000d24 <__aeabi_fmul>
 8004d02:	4603      	mov	r3, r0
 8004d04:	461a      	mov	r2, r3
 8004d06:	4b0f      	ldr	r3, [pc, #60]	@ (8004d44 <QuaternionUpdate+0x1180>)
 8004d08:	605a      	str	r2, [r3, #4]
    q[2] = q3 * norm;
 8004d0a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8004d0c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8004d10:	f7fc f808 	bl	8000d24 <__aeabi_fmul>
 8004d14:	4603      	mov	r3, r0
 8004d16:	461a      	mov	r2, r3
 8004d18:	4b0a      	ldr	r3, [pc, #40]	@ (8004d44 <QuaternionUpdate+0x1180>)
 8004d1a:	609a      	str	r2, [r3, #8]
    q[3] = q4 * norm;
 8004d1c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8004d1e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8004d22:	f7fb ffff 	bl	8000d24 <__aeabi_fmul>
 8004d26:	4603      	mov	r3, r0
 8004d28:	461a      	mov	r2, r3
 8004d2a:	4b06      	ldr	r3, [pc, #24]	@ (8004d44 <QuaternionUpdate+0x1180>)
 8004d2c:	60da      	str	r2, [r3, #12]
 8004d2e:	e002      	b.n	8004d36 <QuaternionUpdate+0x1172>
    if (norm == 0.0f) return; // handle NaN
 8004d30:	bf00      	nop
 8004d32:	e000      	b.n	8004d36 <QuaternionUpdate+0x1172>
    if (norm == 0.0f) return; // handle NaN
 8004d34:	bf00      	nop

}
 8004d36:	37b4      	adds	r7, #180	@ 0xb4
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d3c:	20000004 	.word	0x20000004
 8004d40:	20001488 	.word	0x20001488
 8004d44:	20000008 	.word	0x20000008

08004d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004d4e:	4b15      	ldr	r3, [pc, #84]	@ (8004da4 <HAL_MspInit+0x5c>)
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	4a14      	ldr	r2, [pc, #80]	@ (8004da4 <HAL_MspInit+0x5c>)
 8004d54:	f043 0301 	orr.w	r3, r3, #1
 8004d58:	6193      	str	r3, [r2, #24]
 8004d5a:	4b12      	ldr	r3, [pc, #72]	@ (8004da4 <HAL_MspInit+0x5c>)
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	60bb      	str	r3, [r7, #8]
 8004d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d66:	4b0f      	ldr	r3, [pc, #60]	@ (8004da4 <HAL_MspInit+0x5c>)
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	4a0e      	ldr	r2, [pc, #56]	@ (8004da4 <HAL_MspInit+0x5c>)
 8004d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d70:	61d3      	str	r3, [r2, #28]
 8004d72:	4b0c      	ldr	r3, [pc, #48]	@ (8004da4 <HAL_MspInit+0x5c>)
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d7a:	607b      	str	r3, [r7, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8004da8 <HAL_MspInit+0x60>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	4a04      	ldr	r2, [pc, #16]	@ (8004da8 <HAL_MspInit+0x60>)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d9a:	bf00      	nop
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr
 8004da4:	40021000 	.word	0x40021000
 8004da8:	40010000 	.word	0x40010000

08004dac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b088      	sub	sp, #32
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004db4:	f107 0310 	add.w	r3, r7, #16
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	605a      	str	r2, [r3, #4]
 8004dbe:	609a      	str	r2, [r3, #8]
 8004dc0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a15      	ldr	r2, [pc, #84]	@ (8004e1c <HAL_I2C_MspInit+0x70>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d123      	bne.n	8004e14 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dcc:	4b14      	ldr	r3, [pc, #80]	@ (8004e20 <HAL_I2C_MspInit+0x74>)
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	4a13      	ldr	r2, [pc, #76]	@ (8004e20 <HAL_I2C_MspInit+0x74>)
 8004dd2:	f043 0308 	orr.w	r3, r3, #8
 8004dd6:	6193      	str	r3, [r2, #24]
 8004dd8:	4b11      	ldr	r3, [pc, #68]	@ (8004e20 <HAL_I2C_MspInit+0x74>)
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004de4:	23c0      	movs	r3, #192	@ 0xc0
 8004de6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004de8:	2312      	movs	r3, #18
 8004dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004dec:	2303      	movs	r3, #3
 8004dee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004df0:	f107 0310 	add.w	r3, r7, #16
 8004df4:	4619      	mov	r1, r3
 8004df6:	480b      	ldr	r0, [pc, #44]	@ (8004e24 <HAL_I2C_MspInit+0x78>)
 8004df8:	f000 fa78 	bl	80052ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004dfc:	4b08      	ldr	r3, [pc, #32]	@ (8004e20 <HAL_I2C_MspInit+0x74>)
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	4a07      	ldr	r2, [pc, #28]	@ (8004e20 <HAL_I2C_MspInit+0x74>)
 8004e02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e06:	61d3      	str	r3, [r2, #28]
 8004e08:	4b05      	ldr	r3, [pc, #20]	@ (8004e20 <HAL_I2C_MspInit+0x74>)
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e10:	60bb      	str	r3, [r7, #8]
 8004e12:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004e14:	bf00      	nop
 8004e16:	3720      	adds	r7, #32
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40005400 	.word	0x40005400
 8004e20:	40021000 	.word	0x40021000
 8004e24:	40010c00 	.word	0x40010c00

08004e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004e2c:	bf00      	nop
 8004e2e:	e7fd      	b.n	8004e2c <NMI_Handler+0x4>

08004e30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e34:	bf00      	nop
 8004e36:	e7fd      	b.n	8004e34 <HardFault_Handler+0x4>

08004e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e3c:	bf00      	nop
 8004e3e:	e7fd      	b.n	8004e3c <MemManage_Handler+0x4>

08004e40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e44:	bf00      	nop
 8004e46:	e7fd      	b.n	8004e44 <BusFault_Handler+0x4>

08004e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e4c:	bf00      	nop
 8004e4e:	e7fd      	b.n	8004e4c <UsageFault_Handler+0x4>

08004e50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e54:	bf00      	nop
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr

08004e5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e60:	bf00      	nop
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bc80      	pop	{r7}
 8004e66:	4770      	bx	lr

08004e68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e6c:	bf00      	nop
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bc80      	pop	{r7}
 8004e72:	4770      	bx	lr

08004e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e78:	f000 f914 	bl	80050a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e7c:	bf00      	nop
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	e00a      	b.n	8004ea8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004e92:	f3af 8000 	nop.w
 8004e96:	4601      	mov	r1, r0
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	60ba      	str	r2, [r7, #8]
 8004e9e:	b2ca      	uxtb	r2, r1
 8004ea0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	dbf0      	blt.n	8004e92 <_read+0x12>
  }

  return len;
 8004eb0:	687b      	ldr	r3, [r7, #4]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b086      	sub	sp, #24
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	60b9      	str	r1, [r7, #8]
 8004ec4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	e009      	b.n	8004ee0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	60ba      	str	r2, [r7, #8]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	3301      	adds	r3, #1
 8004ede:	617b      	str	r3, [r7, #20]
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	dbf1      	blt.n	8004ecc <_write+0x12>
  }
  return len;
 8004ee8:	687b      	ldr	r3, [r7, #4]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <_close>:

int _close(int file)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004efa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr

08004f08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004f18:	605a      	str	r2, [r3, #4]
  return 0;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr

08004f26 <_isatty>:

int _isatty(int file)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004f2e:	2301      	movs	r3, #1
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bc80      	pop	{r7}
 8004f38:	4770      	bx	lr

08004f3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b085      	sub	sp, #20
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr
	...

08004f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f5c:	4a14      	ldr	r2, [pc, #80]	@ (8004fb0 <_sbrk+0x5c>)
 8004f5e:	4b15      	ldr	r3, [pc, #84]	@ (8004fb4 <_sbrk+0x60>)
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f68:	4b13      	ldr	r3, [pc, #76]	@ (8004fb8 <_sbrk+0x64>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d102      	bne.n	8004f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f70:	4b11      	ldr	r3, [pc, #68]	@ (8004fb8 <_sbrk+0x64>)
 8004f72:	4a12      	ldr	r2, [pc, #72]	@ (8004fbc <_sbrk+0x68>)
 8004f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f76:	4b10      	ldr	r3, [pc, #64]	@ (8004fb8 <_sbrk+0x64>)
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d207      	bcs.n	8004f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f84:	f002 fa22 	bl	80073cc <__errno>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	220c      	movs	r2, #12
 8004f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f92:	e009      	b.n	8004fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f94:	4b08      	ldr	r3, [pc, #32]	@ (8004fb8 <_sbrk+0x64>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f9a:	4b07      	ldr	r3, [pc, #28]	@ (8004fb8 <_sbrk+0x64>)
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	4a05      	ldr	r2, [pc, #20]	@ (8004fb8 <_sbrk+0x64>)
 8004fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	20005000 	.word	0x20005000
 8004fb4:	00000400 	.word	0x00000400
 8004fb8:	200014dc 	.word	0x200014dc
 8004fbc:	20001630 	.word	0x20001630

08004fc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004fc4:	bf00      	nop
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr

08004fcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004fcc:	f7ff fff8 	bl	8004fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004fd0:	480b      	ldr	r0, [pc, #44]	@ (8005000 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004fd2:	490c      	ldr	r1, [pc, #48]	@ (8005004 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8005008 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004fd8:	e002      	b.n	8004fe0 <LoopCopyDataInit>

08004fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fde:	3304      	adds	r3, #4

08004fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004fe4:	d3f9      	bcc.n	8004fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004fe6:	4a09      	ldr	r2, [pc, #36]	@ (800500c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004fe8:	4c09      	ldr	r4, [pc, #36]	@ (8005010 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004fec:	e001      	b.n	8004ff2 <LoopFillZerobss>

08004fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ff0:	3204      	adds	r2, #4

08004ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ff4:	d3fb      	bcc.n	8004fee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004ff6:	f002 f9ef 	bl	80073d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004ffa:	f7fc f895 	bl	8001128 <main>
  bx lr
 8004ffe:	4770      	bx	lr
  ldr r0, =_sdata
 8005000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005004:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8005008:	080096e8 	.word	0x080096e8
  ldr r2, =_sbss
 800500c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8005010:	20001630 	.word	0x20001630

08005014 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005014:	e7fe      	b.n	8005014 <ADC1_2_IRQHandler>
	...

08005018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800501c:	4b08      	ldr	r3, [pc, #32]	@ (8005040 <HAL_Init+0x28>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a07      	ldr	r2, [pc, #28]	@ (8005040 <HAL_Init+0x28>)
 8005022:	f043 0310 	orr.w	r3, r3, #16
 8005026:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005028:	2003      	movs	r0, #3
 800502a:	f000 f92b 	bl	8005284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800502e:	200f      	movs	r0, #15
 8005030:	f000 f808 	bl	8005044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005034:	f7ff fe88 	bl	8004d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40022000 	.word	0x40022000

08005044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800504c:	4b12      	ldr	r3, [pc, #72]	@ (8005098 <HAL_InitTick+0x54>)
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	4b12      	ldr	r3, [pc, #72]	@ (800509c <HAL_InitTick+0x58>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	4619      	mov	r1, r3
 8005056:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800505a:	fbb3 f3f1 	udiv	r3, r3, r1
 800505e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005062:	4618      	mov	r0, r3
 8005064:	f000 f935 	bl	80052d2 <HAL_SYSTICK_Config>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e00e      	b.n	8005090 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b0f      	cmp	r3, #15
 8005076:	d80a      	bhi.n	800508e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005078:	2200      	movs	r2, #0
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	f04f 30ff 	mov.w	r0, #4294967295
 8005080:	f000 f90b 	bl	800529a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005084:	4a06      	ldr	r2, [pc, #24]	@ (80050a0 <HAL_InitTick+0x5c>)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	e000      	b.n	8005090 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
}
 8005090:	4618      	mov	r0, r3
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20000018 	.word	0x20000018
 800509c:	20000020 	.word	0x20000020
 80050a0:	2000001c 	.word	0x2000001c

080050a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050a8:	4b05      	ldr	r3, [pc, #20]	@ (80050c0 <HAL_IncTick+0x1c>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	461a      	mov	r2, r3
 80050ae:	4b05      	ldr	r3, [pc, #20]	@ (80050c4 <HAL_IncTick+0x20>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4413      	add	r3, r2
 80050b4:	4a03      	ldr	r2, [pc, #12]	@ (80050c4 <HAL_IncTick+0x20>)
 80050b6:	6013      	str	r3, [r2, #0]
}
 80050b8:	bf00      	nop
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bc80      	pop	{r7}
 80050be:	4770      	bx	lr
 80050c0:	20000020 	.word	0x20000020
 80050c4:	200014e0 	.word	0x200014e0

080050c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  return uwTick;
 80050cc:	4b02      	ldr	r3, [pc, #8]	@ (80050d8 <HAL_GetTick+0x10>)
 80050ce:	681b      	ldr	r3, [r3, #0]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bc80      	pop	{r7}
 80050d6:	4770      	bx	lr
 80050d8:	200014e0 	.word	0x200014e0

080050dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050e4:	f7ff fff0 	bl	80050c8 <HAL_GetTick>
 80050e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f4:	d005      	beq.n	8005102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005120 <HAL_Delay+0x44>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	461a      	mov	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4413      	add	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005102:	bf00      	nop
 8005104:	f7ff ffe0 	bl	80050c8 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	429a      	cmp	r2, r3
 8005112:	d8f7      	bhi.n	8005104 <HAL_Delay+0x28>
  {
  }
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	20000020 	.word	0x20000020

08005124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005134:	4b0c      	ldr	r3, [pc, #48]	@ (8005168 <__NVIC_SetPriorityGrouping+0x44>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005140:	4013      	ands	r3, r2
 8005142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800514c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005156:	4a04      	ldr	r2, [pc, #16]	@ (8005168 <__NVIC_SetPriorityGrouping+0x44>)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	60d3      	str	r3, [r2, #12]
}
 800515c:	bf00      	nop
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	bc80      	pop	{r7}
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	e000ed00 	.word	0xe000ed00

0800516c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005170:	4b04      	ldr	r3, [pc, #16]	@ (8005184 <__NVIC_GetPriorityGrouping+0x18>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	0a1b      	lsrs	r3, r3, #8
 8005176:	f003 0307 	and.w	r3, r3, #7
}
 800517a:	4618      	mov	r0, r3
 800517c:	46bd      	mov	sp, r7
 800517e:	bc80      	pop	{r7}
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	e000ed00 	.word	0xe000ed00

08005188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	6039      	str	r1, [r7, #0]
 8005192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005198:	2b00      	cmp	r3, #0
 800519a:	db0a      	blt.n	80051b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	490c      	ldr	r1, [pc, #48]	@ (80051d4 <__NVIC_SetPriority+0x4c>)
 80051a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a6:	0112      	lsls	r2, r2, #4
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	440b      	add	r3, r1
 80051ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051b0:	e00a      	b.n	80051c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	4908      	ldr	r1, [pc, #32]	@ (80051d8 <__NVIC_SetPriority+0x50>)
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	3b04      	subs	r3, #4
 80051c0:	0112      	lsls	r2, r2, #4
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	440b      	add	r3, r1
 80051c6:	761a      	strb	r2, [r3, #24]
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bc80      	pop	{r7}
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	e000e100 	.word	0xe000e100
 80051d8:	e000ed00 	.word	0xe000ed00

080051dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051dc:	b480      	push	{r7}
 80051de:	b089      	sub	sp, #36	@ 0x24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	f1c3 0307 	rsb	r3, r3, #7
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	bf28      	it	cs
 80051fa:	2304      	movcs	r3, #4
 80051fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	3304      	adds	r3, #4
 8005202:	2b06      	cmp	r3, #6
 8005204:	d902      	bls.n	800520c <NVIC_EncodePriority+0x30>
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	3b03      	subs	r3, #3
 800520a:	e000      	b.n	800520e <NVIC_EncodePriority+0x32>
 800520c:	2300      	movs	r3, #0
 800520e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005210:	f04f 32ff 	mov.w	r2, #4294967295
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	43da      	mvns	r2, r3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	401a      	ands	r2, r3
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005224:	f04f 31ff 	mov.w	r1, #4294967295
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	fa01 f303 	lsl.w	r3, r1, r3
 800522e:	43d9      	mvns	r1, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005234:	4313      	orrs	r3, r2
         );
}
 8005236:	4618      	mov	r0, r3
 8005238:	3724      	adds	r7, #36	@ 0x24
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr

08005240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3b01      	subs	r3, #1
 800524c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005250:	d301      	bcc.n	8005256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005252:	2301      	movs	r3, #1
 8005254:	e00f      	b.n	8005276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005256:	4a0a      	ldr	r2, [pc, #40]	@ (8005280 <SysTick_Config+0x40>)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3b01      	subs	r3, #1
 800525c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800525e:	210f      	movs	r1, #15
 8005260:	f04f 30ff 	mov.w	r0, #4294967295
 8005264:	f7ff ff90 	bl	8005188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005268:	4b05      	ldr	r3, [pc, #20]	@ (8005280 <SysTick_Config+0x40>)
 800526a:	2200      	movs	r2, #0
 800526c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800526e:	4b04      	ldr	r3, [pc, #16]	@ (8005280 <SysTick_Config+0x40>)
 8005270:	2207      	movs	r2, #7
 8005272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	e000e010 	.word	0xe000e010

08005284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7ff ff49 	bl	8005124 <__NVIC_SetPriorityGrouping>
}
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800529a:	b580      	push	{r7, lr}
 800529c:	b086      	sub	sp, #24
 800529e:	af00      	add	r7, sp, #0
 80052a0:	4603      	mov	r3, r0
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	607a      	str	r2, [r7, #4]
 80052a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052ac:	f7ff ff5e 	bl	800516c <__NVIC_GetPriorityGrouping>
 80052b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	6978      	ldr	r0, [r7, #20]
 80052b8:	f7ff ff90 	bl	80051dc <NVIC_EncodePriority>
 80052bc:	4602      	mov	r2, r0
 80052be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052c2:	4611      	mov	r1, r2
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff ff5f 	bl	8005188 <__NVIC_SetPriority>
}
 80052ca:	bf00      	nop
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b082      	sub	sp, #8
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7ff ffb0 	bl	8005240 <SysTick_Config>
 80052e0:	4603      	mov	r3, r0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b08b      	sub	sp, #44	@ 0x2c
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80052f6:	2300      	movs	r3, #0
 80052f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80052fa:	2300      	movs	r3, #0
 80052fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052fe:	e169      	b.n	80055d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005300:	2201      	movs	r2, #1
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	fa02 f303 	lsl.w	r3, r2, r3
 8005308:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	69fa      	ldr	r2, [r7, #28]
 8005310:	4013      	ands	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	429a      	cmp	r2, r3
 800531a:	f040 8158 	bne.w	80055ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	4a9a      	ldr	r2, [pc, #616]	@ (800558c <HAL_GPIO_Init+0x2a0>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d05e      	beq.n	80053e6 <HAL_GPIO_Init+0xfa>
 8005328:	4a98      	ldr	r2, [pc, #608]	@ (800558c <HAL_GPIO_Init+0x2a0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d875      	bhi.n	800541a <HAL_GPIO_Init+0x12e>
 800532e:	4a98      	ldr	r2, [pc, #608]	@ (8005590 <HAL_GPIO_Init+0x2a4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d058      	beq.n	80053e6 <HAL_GPIO_Init+0xfa>
 8005334:	4a96      	ldr	r2, [pc, #600]	@ (8005590 <HAL_GPIO_Init+0x2a4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d86f      	bhi.n	800541a <HAL_GPIO_Init+0x12e>
 800533a:	4a96      	ldr	r2, [pc, #600]	@ (8005594 <HAL_GPIO_Init+0x2a8>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d052      	beq.n	80053e6 <HAL_GPIO_Init+0xfa>
 8005340:	4a94      	ldr	r2, [pc, #592]	@ (8005594 <HAL_GPIO_Init+0x2a8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d869      	bhi.n	800541a <HAL_GPIO_Init+0x12e>
 8005346:	4a94      	ldr	r2, [pc, #592]	@ (8005598 <HAL_GPIO_Init+0x2ac>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d04c      	beq.n	80053e6 <HAL_GPIO_Init+0xfa>
 800534c:	4a92      	ldr	r2, [pc, #584]	@ (8005598 <HAL_GPIO_Init+0x2ac>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d863      	bhi.n	800541a <HAL_GPIO_Init+0x12e>
 8005352:	4a92      	ldr	r2, [pc, #584]	@ (800559c <HAL_GPIO_Init+0x2b0>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d046      	beq.n	80053e6 <HAL_GPIO_Init+0xfa>
 8005358:	4a90      	ldr	r2, [pc, #576]	@ (800559c <HAL_GPIO_Init+0x2b0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d85d      	bhi.n	800541a <HAL_GPIO_Init+0x12e>
 800535e:	2b12      	cmp	r3, #18
 8005360:	d82a      	bhi.n	80053b8 <HAL_GPIO_Init+0xcc>
 8005362:	2b12      	cmp	r3, #18
 8005364:	d859      	bhi.n	800541a <HAL_GPIO_Init+0x12e>
 8005366:	a201      	add	r2, pc, #4	@ (adr r2, 800536c <HAL_GPIO_Init+0x80>)
 8005368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536c:	080053e7 	.word	0x080053e7
 8005370:	080053c1 	.word	0x080053c1
 8005374:	080053d3 	.word	0x080053d3
 8005378:	08005415 	.word	0x08005415
 800537c:	0800541b 	.word	0x0800541b
 8005380:	0800541b 	.word	0x0800541b
 8005384:	0800541b 	.word	0x0800541b
 8005388:	0800541b 	.word	0x0800541b
 800538c:	0800541b 	.word	0x0800541b
 8005390:	0800541b 	.word	0x0800541b
 8005394:	0800541b 	.word	0x0800541b
 8005398:	0800541b 	.word	0x0800541b
 800539c:	0800541b 	.word	0x0800541b
 80053a0:	0800541b 	.word	0x0800541b
 80053a4:	0800541b 	.word	0x0800541b
 80053a8:	0800541b 	.word	0x0800541b
 80053ac:	0800541b 	.word	0x0800541b
 80053b0:	080053c9 	.word	0x080053c9
 80053b4:	080053dd 	.word	0x080053dd
 80053b8:	4a79      	ldr	r2, [pc, #484]	@ (80055a0 <HAL_GPIO_Init+0x2b4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d013      	beq.n	80053e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80053be:	e02c      	b.n	800541a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	623b      	str	r3, [r7, #32]
          break;
 80053c6:	e029      	b.n	800541c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	3304      	adds	r3, #4
 80053ce:	623b      	str	r3, [r7, #32]
          break;
 80053d0:	e024      	b.n	800541c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	3308      	adds	r3, #8
 80053d8:	623b      	str	r3, [r7, #32]
          break;
 80053da:	e01f      	b.n	800541c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	330c      	adds	r3, #12
 80053e2:	623b      	str	r3, [r7, #32]
          break;
 80053e4:	e01a      	b.n	800541c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d102      	bne.n	80053f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80053ee:	2304      	movs	r3, #4
 80053f0:	623b      	str	r3, [r7, #32]
          break;
 80053f2:	e013      	b.n	800541c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d105      	bne.n	8005408 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80053fc:	2308      	movs	r3, #8
 80053fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	69fa      	ldr	r2, [r7, #28]
 8005404:	611a      	str	r2, [r3, #16]
          break;
 8005406:	e009      	b.n	800541c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005408:	2308      	movs	r3, #8
 800540a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	69fa      	ldr	r2, [r7, #28]
 8005410:	615a      	str	r2, [r3, #20]
          break;
 8005412:	e003      	b.n	800541c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005414:	2300      	movs	r3, #0
 8005416:	623b      	str	r3, [r7, #32]
          break;
 8005418:	e000      	b.n	800541c <HAL_GPIO_Init+0x130>
          break;
 800541a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	2bff      	cmp	r3, #255	@ 0xff
 8005420:	d801      	bhi.n	8005426 <HAL_GPIO_Init+0x13a>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	e001      	b.n	800542a <HAL_GPIO_Init+0x13e>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3304      	adds	r3, #4
 800542a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	2bff      	cmp	r3, #255	@ 0xff
 8005430:	d802      	bhi.n	8005438 <HAL_GPIO_Init+0x14c>
 8005432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	e002      	b.n	800543e <HAL_GPIO_Init+0x152>
 8005438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543a:	3b08      	subs	r3, #8
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	210f      	movs	r1, #15
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	fa01 f303 	lsl.w	r3, r1, r3
 800544c:	43db      	mvns	r3, r3
 800544e:	401a      	ands	r2, r3
 8005450:	6a39      	ldr	r1, [r7, #32]
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	fa01 f303 	lsl.w	r3, r1, r3
 8005458:	431a      	orrs	r2, r3
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 80b1 	beq.w	80055ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800546c:	4b4d      	ldr	r3, [pc, #308]	@ (80055a4 <HAL_GPIO_Init+0x2b8>)
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	4a4c      	ldr	r2, [pc, #304]	@ (80055a4 <HAL_GPIO_Init+0x2b8>)
 8005472:	f043 0301 	orr.w	r3, r3, #1
 8005476:	6193      	str	r3, [r2, #24]
 8005478:	4b4a      	ldr	r3, [pc, #296]	@ (80055a4 <HAL_GPIO_Init+0x2b8>)
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	60bb      	str	r3, [r7, #8]
 8005482:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005484:	4a48      	ldr	r2, [pc, #288]	@ (80055a8 <HAL_GPIO_Init+0x2bc>)
 8005486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005488:	089b      	lsrs	r3, r3, #2
 800548a:	3302      	adds	r3, #2
 800548c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005490:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005494:	f003 0303 	and.w	r3, r3, #3
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	220f      	movs	r2, #15
 800549c:	fa02 f303 	lsl.w	r3, r2, r3
 80054a0:	43db      	mvns	r3, r3
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4013      	ands	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a40      	ldr	r2, [pc, #256]	@ (80055ac <HAL_GPIO_Init+0x2c0>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d013      	beq.n	80054d8 <HAL_GPIO_Init+0x1ec>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a3f      	ldr	r2, [pc, #252]	@ (80055b0 <HAL_GPIO_Init+0x2c4>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00d      	beq.n	80054d4 <HAL_GPIO_Init+0x1e8>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a3e      	ldr	r2, [pc, #248]	@ (80055b4 <HAL_GPIO_Init+0x2c8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d007      	beq.n	80054d0 <HAL_GPIO_Init+0x1e4>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a3d      	ldr	r2, [pc, #244]	@ (80055b8 <HAL_GPIO_Init+0x2cc>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d101      	bne.n	80054cc <HAL_GPIO_Init+0x1e0>
 80054c8:	2303      	movs	r3, #3
 80054ca:	e006      	b.n	80054da <HAL_GPIO_Init+0x1ee>
 80054cc:	2304      	movs	r3, #4
 80054ce:	e004      	b.n	80054da <HAL_GPIO_Init+0x1ee>
 80054d0:	2302      	movs	r3, #2
 80054d2:	e002      	b.n	80054da <HAL_GPIO_Init+0x1ee>
 80054d4:	2301      	movs	r3, #1
 80054d6:	e000      	b.n	80054da <HAL_GPIO_Init+0x1ee>
 80054d8:	2300      	movs	r3, #0
 80054da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054dc:	f002 0203 	and.w	r2, r2, #3
 80054e0:	0092      	lsls	r2, r2, #2
 80054e2:	4093      	lsls	r3, r2
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80054ea:	492f      	ldr	r1, [pc, #188]	@ (80055a8 <HAL_GPIO_Init+0x2bc>)
 80054ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ee:	089b      	lsrs	r3, r3, #2
 80054f0:	3302      	adds	r3, #2
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d006      	beq.n	8005512 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005504:	4b2d      	ldr	r3, [pc, #180]	@ (80055bc <HAL_GPIO_Init+0x2d0>)
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	492c      	ldr	r1, [pc, #176]	@ (80055bc <HAL_GPIO_Init+0x2d0>)
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	4313      	orrs	r3, r2
 800550e:	608b      	str	r3, [r1, #8]
 8005510:	e006      	b.n	8005520 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005512:	4b2a      	ldr	r3, [pc, #168]	@ (80055bc <HAL_GPIO_Init+0x2d0>)
 8005514:	689a      	ldr	r2, [r3, #8]
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	43db      	mvns	r3, r3
 800551a:	4928      	ldr	r1, [pc, #160]	@ (80055bc <HAL_GPIO_Init+0x2d0>)
 800551c:	4013      	ands	r3, r2
 800551e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d006      	beq.n	800553a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800552c:	4b23      	ldr	r3, [pc, #140]	@ (80055bc <HAL_GPIO_Init+0x2d0>)
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	4922      	ldr	r1, [pc, #136]	@ (80055bc <HAL_GPIO_Init+0x2d0>)
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	4313      	orrs	r3, r2
 8005536:	60cb      	str	r3, [r1, #12]
 8005538:	e006      	b.n	8005548 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800553a:	4b20      	ldr	r3, [pc, #128]	@ (80055bc <HAL_GPIO_Init+0x2d0>)
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	43db      	mvns	r3, r3
 8005542:	491e      	ldr	r1, [pc, #120]	@ (80055bc <HAL_GPIO_Init+0x2d0>)
 8005544:	4013      	ands	r3, r2
 8005546:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d006      	beq.n	8005562 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005554:	4b19      	ldr	r3, [pc, #100]	@ (80055bc <HAL_GPIO_Init+0x2d0>)
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	4918      	ldr	r1, [pc, #96]	@ (80055bc <HAL_GPIO_Init+0x2d0>)
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	4313      	orrs	r3, r2
 800555e:	604b      	str	r3, [r1, #4]
 8005560:	e006      	b.n	8005570 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005562:	4b16      	ldr	r3, [pc, #88]	@ (80055bc <HAL_GPIO_Init+0x2d0>)
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	43db      	mvns	r3, r3
 800556a:	4914      	ldr	r1, [pc, #80]	@ (80055bc <HAL_GPIO_Init+0x2d0>)
 800556c:	4013      	ands	r3, r2
 800556e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d021      	beq.n	80055c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800557c:	4b0f      	ldr	r3, [pc, #60]	@ (80055bc <HAL_GPIO_Init+0x2d0>)
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	490e      	ldr	r1, [pc, #56]	@ (80055bc <HAL_GPIO_Init+0x2d0>)
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	4313      	orrs	r3, r2
 8005586:	600b      	str	r3, [r1, #0]
 8005588:	e021      	b.n	80055ce <HAL_GPIO_Init+0x2e2>
 800558a:	bf00      	nop
 800558c:	10320000 	.word	0x10320000
 8005590:	10310000 	.word	0x10310000
 8005594:	10220000 	.word	0x10220000
 8005598:	10210000 	.word	0x10210000
 800559c:	10120000 	.word	0x10120000
 80055a0:	10110000 	.word	0x10110000
 80055a4:	40021000 	.word	0x40021000
 80055a8:	40010000 	.word	0x40010000
 80055ac:	40010800 	.word	0x40010800
 80055b0:	40010c00 	.word	0x40010c00
 80055b4:	40011000 	.word	0x40011000
 80055b8:	40011400 	.word	0x40011400
 80055bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80055c0:	4b0b      	ldr	r3, [pc, #44]	@ (80055f0 <HAL_GPIO_Init+0x304>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	43db      	mvns	r3, r3
 80055c8:	4909      	ldr	r1, [pc, #36]	@ (80055f0 <HAL_GPIO_Init+0x304>)
 80055ca:	4013      	ands	r3, r2
 80055cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	3301      	adds	r3, #1
 80055d2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055da:	fa22 f303 	lsr.w	r3, r2, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f47f ae8e 	bne.w	8005300 <HAL_GPIO_Init+0x14>
  }
}
 80055e4:	bf00      	nop
 80055e6:	bf00      	nop
 80055e8:	372c      	adds	r7, #44	@ 0x2c
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bc80      	pop	{r7}
 80055ee:	4770      	bx	lr
 80055f0:	40010400 	.word	0x40010400

080055f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	807b      	strh	r3, [r7, #2]
 8005600:	4613      	mov	r3, r2
 8005602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005604:	787b      	ldrb	r3, [r7, #1]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800560a:	887a      	ldrh	r2, [r7, #2]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005610:	e003      	b.n	800561a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005612:	887b      	ldrh	r3, [r7, #2]
 8005614:	041a      	lsls	r2, r3, #16
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	611a      	str	r2, [r3, #16]
}
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	bc80      	pop	{r7}
 8005622:	4770      	bx	lr

08005624 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005636:	887a      	ldrh	r2, [r7, #2]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4013      	ands	r3, r2
 800563c:	041a      	lsls	r2, r3, #16
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	43d9      	mvns	r1, r3
 8005642:	887b      	ldrh	r3, [r7, #2]
 8005644:	400b      	ands	r3, r1
 8005646:	431a      	orrs	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	611a      	str	r2, [r3, #16]
}
 800564c:	bf00      	nop
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	bc80      	pop	{r7}
 8005654:	4770      	bx	lr
	...

08005658 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e12b      	b.n	80058c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d106      	bne.n	8005684 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff fb94 	bl	8004dac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2224      	movs	r2, #36	@ 0x24
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0201 	bic.w	r2, r2, #1
 800569a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80056bc:	f001 fbfc 	bl	8006eb8 <HAL_RCC_GetPCLK1Freq>
 80056c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	4a81      	ldr	r2, [pc, #516]	@ (80058cc <HAL_I2C_Init+0x274>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d807      	bhi.n	80056dc <HAL_I2C_Init+0x84>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4a80      	ldr	r2, [pc, #512]	@ (80058d0 <HAL_I2C_Init+0x278>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	bf94      	ite	ls
 80056d4:	2301      	movls	r3, #1
 80056d6:	2300      	movhi	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	e006      	b.n	80056ea <HAL_I2C_Init+0x92>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4a7d      	ldr	r2, [pc, #500]	@ (80058d4 <HAL_I2C_Init+0x27c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	bf94      	ite	ls
 80056e4:	2301      	movls	r3, #1
 80056e6:	2300      	movhi	r3, #0
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e0e7      	b.n	80058c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4a78      	ldr	r2, [pc, #480]	@ (80058d8 <HAL_I2C_Init+0x280>)
 80056f6:	fba2 2303 	umull	r2, r3, r2, r3
 80056fa:	0c9b      	lsrs	r3, r3, #18
 80056fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	430a      	orrs	r2, r1
 8005710:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	4a6a      	ldr	r2, [pc, #424]	@ (80058cc <HAL_I2C_Init+0x274>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d802      	bhi.n	800572c <HAL_I2C_Init+0xd4>
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	3301      	adds	r3, #1
 800572a:	e009      	b.n	8005740 <HAL_I2C_Init+0xe8>
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005732:	fb02 f303 	mul.w	r3, r2, r3
 8005736:	4a69      	ldr	r2, [pc, #420]	@ (80058dc <HAL_I2C_Init+0x284>)
 8005738:	fba2 2303 	umull	r2, r3, r2, r3
 800573c:	099b      	lsrs	r3, r3, #6
 800573e:	3301      	adds	r3, #1
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6812      	ldr	r2, [r2, #0]
 8005744:	430b      	orrs	r3, r1
 8005746:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005752:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	495c      	ldr	r1, [pc, #368]	@ (80058cc <HAL_I2C_Init+0x274>)
 800575c:	428b      	cmp	r3, r1
 800575e:	d819      	bhi.n	8005794 <HAL_I2C_Init+0x13c>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	1e59      	subs	r1, r3, #1
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	fbb1 f3f3 	udiv	r3, r1, r3
 800576e:	1c59      	adds	r1, r3, #1
 8005770:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005774:	400b      	ands	r3, r1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00a      	beq.n	8005790 <HAL_I2C_Init+0x138>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	1e59      	subs	r1, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	fbb1 f3f3 	udiv	r3, r1, r3
 8005788:	3301      	adds	r3, #1
 800578a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800578e:	e051      	b.n	8005834 <HAL_I2C_Init+0x1dc>
 8005790:	2304      	movs	r3, #4
 8005792:	e04f      	b.n	8005834 <HAL_I2C_Init+0x1dc>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d111      	bne.n	80057c0 <HAL_I2C_Init+0x168>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	1e58      	subs	r0, r3, #1
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6859      	ldr	r1, [r3, #4]
 80057a4:	460b      	mov	r3, r1
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	440b      	add	r3, r1
 80057aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80057ae:	3301      	adds	r3, #1
 80057b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	bf0c      	ite	eq
 80057b8:	2301      	moveq	r3, #1
 80057ba:	2300      	movne	r3, #0
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	e012      	b.n	80057e6 <HAL_I2C_Init+0x18e>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	1e58      	subs	r0, r3, #1
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6859      	ldr	r1, [r3, #4]
 80057c8:	460b      	mov	r3, r1
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	440b      	add	r3, r1
 80057ce:	0099      	lsls	r1, r3, #2
 80057d0:	440b      	add	r3, r1
 80057d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80057d6:	3301      	adds	r3, #1
 80057d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057dc:	2b00      	cmp	r3, #0
 80057de:	bf0c      	ite	eq
 80057e0:	2301      	moveq	r3, #1
 80057e2:	2300      	movne	r3, #0
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <HAL_I2C_Init+0x196>
 80057ea:	2301      	movs	r3, #1
 80057ec:	e022      	b.n	8005834 <HAL_I2C_Init+0x1dc>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10e      	bne.n	8005814 <HAL_I2C_Init+0x1bc>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	1e58      	subs	r0, r3, #1
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6859      	ldr	r1, [r3, #4]
 80057fe:	460b      	mov	r3, r1
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	440b      	add	r3, r1
 8005804:	fbb0 f3f3 	udiv	r3, r0, r3
 8005808:	3301      	adds	r3, #1
 800580a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800580e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005812:	e00f      	b.n	8005834 <HAL_I2C_Init+0x1dc>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	1e58      	subs	r0, r3, #1
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6859      	ldr	r1, [r3, #4]
 800581c:	460b      	mov	r3, r1
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	440b      	add	r3, r1
 8005822:	0099      	lsls	r1, r3, #2
 8005824:	440b      	add	r3, r1
 8005826:	fbb0 f3f3 	udiv	r3, r0, r3
 800582a:	3301      	adds	r3, #1
 800582c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005830:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005834:	6879      	ldr	r1, [r7, #4]
 8005836:	6809      	ldr	r1, [r1, #0]
 8005838:	4313      	orrs	r3, r2
 800583a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	69da      	ldr	r2, [r3, #28]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	431a      	orrs	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005862:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6911      	ldr	r1, [r2, #16]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	68d2      	ldr	r2, [r2, #12]
 800586e:	4311      	orrs	r1, r2
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6812      	ldr	r2, [r2, #0]
 8005874:	430b      	orrs	r3, r1
 8005876:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	695a      	ldr	r2, [r3, #20]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0201 	orr.w	r2, r2, #1
 80058a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	000186a0 	.word	0x000186a0
 80058d0:	001e847f 	.word	0x001e847f
 80058d4:	003d08ff 	.word	0x003d08ff
 80058d8:	431bde83 	.word	0x431bde83
 80058dc:	10624dd3 	.word	0x10624dd3

080058e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af02      	add	r7, sp, #8
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	4608      	mov	r0, r1
 80058ea:	4611      	mov	r1, r2
 80058ec:	461a      	mov	r2, r3
 80058ee:	4603      	mov	r3, r0
 80058f0:	817b      	strh	r3, [r7, #10]
 80058f2:	460b      	mov	r3, r1
 80058f4:	813b      	strh	r3, [r7, #8]
 80058f6:	4613      	mov	r3, r2
 80058f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058fa:	f7ff fbe5 	bl	80050c8 <HAL_GetTick>
 80058fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b20      	cmp	r3, #32
 800590a:	f040 80d9 	bne.w	8005ac0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	2319      	movs	r3, #25
 8005914:	2201      	movs	r2, #1
 8005916:	496d      	ldr	r1, [pc, #436]	@ (8005acc <HAL_I2C_Mem_Write+0x1ec>)
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 fccd 	bl	80062b8 <I2C_WaitOnFlagUntilTimeout>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005924:	2302      	movs	r3, #2
 8005926:	e0cc      	b.n	8005ac2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800592e:	2b01      	cmp	r3, #1
 8005930:	d101      	bne.n	8005936 <HAL_I2C_Mem_Write+0x56>
 8005932:	2302      	movs	r3, #2
 8005934:	e0c5      	b.n	8005ac2 <HAL_I2C_Mem_Write+0x1e2>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b01      	cmp	r3, #1
 800594a:	d007      	beq.n	800595c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0201 	orr.w	r2, r2, #1
 800595a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800596a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2221      	movs	r2, #33	@ 0x21
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2240      	movs	r2, #64	@ 0x40
 8005978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6a3a      	ldr	r2, [r7, #32]
 8005986:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800598c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005992:	b29a      	uxth	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4a4d      	ldr	r2, [pc, #308]	@ (8005ad0 <HAL_I2C_Mem_Write+0x1f0>)
 800599c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800599e:	88f8      	ldrh	r0, [r7, #6]
 80059a0:	893a      	ldrh	r2, [r7, #8]
 80059a2:	8979      	ldrh	r1, [r7, #10]
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	4603      	mov	r3, r0
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 fb04 	bl	8005fbc <I2C_RequestMemoryWrite>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d052      	beq.n	8005a60 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e081      	b.n	8005ac2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 fd92 	bl	80064ec <I2C_WaitOnTXEFlagUntilTimeout>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00d      	beq.n	80059ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	d107      	bne.n	80059e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e06b      	b.n	8005ac2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ee:	781a      	ldrb	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d11b      	bne.n	8005a60 <HAL_I2C_Mem_Write+0x180>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d017      	beq.n	8005a60 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a34:	781a      	ldrb	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1aa      	bne.n	80059be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 fd85 	bl	800657c <I2C_WaitOnBTFFlagUntilTimeout>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00d      	beq.n	8005a94 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7c:	2b04      	cmp	r3, #4
 8005a7e:	d107      	bne.n	8005a90 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a8e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e016      	b.n	8005ac2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005aa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	e000      	b.n	8005ac2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005ac0:	2302      	movs	r3, #2
  }
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	00100002 	.word	0x00100002
 8005ad0:	ffff0000 	.word	0xffff0000

08005ad4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b08c      	sub	sp, #48	@ 0x30
 8005ad8:	af02      	add	r7, sp, #8
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	4608      	mov	r0, r1
 8005ade:	4611      	mov	r1, r2
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	817b      	strh	r3, [r7, #10]
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	813b      	strh	r3, [r7, #8]
 8005aea:	4613      	mov	r3, r2
 8005aec:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005af2:	f7ff fae9 	bl	80050c8 <HAL_GetTick>
 8005af6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b20      	cmp	r3, #32
 8005b02:	f040 8250 	bne.w	8005fa6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	2319      	movs	r3, #25
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	4982      	ldr	r1, [pc, #520]	@ (8005d18 <HAL_I2C_Mem_Read+0x244>)
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 fbd1 	bl	80062b8 <I2C_WaitOnFlagUntilTimeout>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	e243      	b.n	8005fa8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d101      	bne.n	8005b2e <HAL_I2C_Mem_Read+0x5a>
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	e23c      	b.n	8005fa8 <HAL_I2C_Mem_Read+0x4d4>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d007      	beq.n	8005b54 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0201 	orr.w	r2, r2, #1
 8005b52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2222      	movs	r2, #34	@ 0x22
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2240      	movs	r2, #64	@ 0x40
 8005b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005b84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4a62      	ldr	r2, [pc, #392]	@ (8005d1c <HAL_I2C_Mem_Read+0x248>)
 8005b94:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b96:	88f8      	ldrh	r0, [r7, #6]
 8005b98:	893a      	ldrh	r2, [r7, #8]
 8005b9a:	8979      	ldrh	r1, [r7, #10]
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9e:	9301      	str	r3, [sp, #4]
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 fa9e 	bl	80060e8 <I2C_RequestMemoryRead>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e1f8      	b.n	8005fa8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d113      	bne.n	8005be6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61fb      	str	r3, [r7, #28]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	61fb      	str	r3, [r7, #28]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	61fb      	str	r3, [r7, #28]
 8005bd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	e1cc      	b.n	8005f80 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d11e      	bne.n	8005c2c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bfc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005bfe:	b672      	cpsid	i
}
 8005c00:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c02:	2300      	movs	r3, #0
 8005c04:	61bb      	str	r3, [r7, #24]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	61bb      	str	r3, [r7, #24]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	61bb      	str	r3, [r7, #24]
 8005c16:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005c28:	b662      	cpsie	i
}
 8005c2a:	e035      	b.n	8005c98 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d11e      	bne.n	8005c72 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c44:	b672      	cpsid	i
}
 8005c46:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c48:	2300      	movs	r3, #0
 8005c4a:	617b      	str	r3, [r7, #20]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	617b      	str	r3, [r7, #20]
 8005c5c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005c6e:	b662      	cpsie	i
}
 8005c70:	e012      	b.n	8005c98 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005c80:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c82:	2300      	movs	r3, #0
 8005c84:	613b      	str	r3, [r7, #16]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	613b      	str	r3, [r7, #16]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	613b      	str	r3, [r7, #16]
 8005c96:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005c98:	e172      	b.n	8005f80 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	f200 811f 	bhi.w	8005ee2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d123      	bne.n	8005cf4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 fcab 	bl	800660c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e173      	b.n	8005fa8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	691a      	ldr	r2, [r3, #16]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cca:	b2d2      	uxtb	r2, r2
 8005ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	3b01      	subs	r3, #1
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005cf2:	e145      	b.n	8005f80 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d152      	bne.n	8005da2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d02:	2200      	movs	r2, #0
 8005d04:	4906      	ldr	r1, [pc, #24]	@ (8005d20 <HAL_I2C_Mem_Read+0x24c>)
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 fad6 	bl	80062b8 <I2C_WaitOnFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d008      	beq.n	8005d24 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e148      	b.n	8005fa8 <HAL_I2C_Mem_Read+0x4d4>
 8005d16:	bf00      	nop
 8005d18:	00100002 	.word	0x00100002
 8005d1c:	ffff0000 	.word	0xffff0000
 8005d20:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005d24:	b672      	cpsid	i
}
 8005d26:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	691a      	ldr	r2, [r3, #16]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d54:	3b01      	subs	r3, #1
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	3b01      	subs	r3, #1
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005d6a:	b662      	cpsie	i
}
 8005d6c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d78:	b2d2      	uxtb	r2, r2
 8005d7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005da0:	e0ee      	b.n	8005f80 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da8:	2200      	movs	r2, #0
 8005daa:	4981      	ldr	r1, [pc, #516]	@ (8005fb0 <HAL_I2C_Mem_Read+0x4dc>)
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 fa83 	bl	80062b8 <I2C_WaitOnFlagUntilTimeout>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e0f5      	b.n	8005fa8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005dcc:	b672      	cpsid	i
}
 8005dce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	691a      	ldr	r2, [r3, #16]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dda:	b2d2      	uxtb	r2, r2
 8005ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dec:	3b01      	subs	r3, #1
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e02:	4b6c      	ldr	r3, [pc, #432]	@ (8005fb4 <HAL_I2C_Mem_Read+0x4e0>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	08db      	lsrs	r3, r3, #3
 8005e08:	4a6b      	ldr	r2, [pc, #428]	@ (8005fb8 <HAL_I2C_Mem_Read+0x4e4>)
 8005e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0e:	0a1a      	lsrs	r2, r3, #8
 8005e10:	4613      	mov	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	00da      	lsls	r2, r3, #3
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d118      	bne.n	8005e5a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2220      	movs	r2, #32
 8005e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e42:	f043 0220 	orr.w	r2, r3, #32
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005e4a:	b662      	cpsie	i
}
 8005e4c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e0a6      	b.n	8005fa8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	f003 0304 	and.w	r3, r3, #4
 8005e64:	2b04      	cmp	r3, #4
 8005e66:	d1d9      	bne.n	8005e1c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691a      	ldr	r2, [r3, #16]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005eaa:	b662      	cpsie	i
}
 8005eac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	691a      	ldr	r2, [r3, #16]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb8:	b2d2      	uxtb	r2, r2
 8005eba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ee0:	e04e      	b.n	8005f80 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ee4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 fb90 	bl	800660c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e058      	b.n	8005fa8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	691a      	ldr	r2, [r3, #16]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f00:	b2d2      	uxtb	r2, r2
 8005f02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f12:	3b01      	subs	r3, #1
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	3b01      	subs	r3, #1
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	f003 0304 	and.w	r3, r3, #4
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	d124      	bne.n	8005f80 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	d107      	bne.n	8005f4e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f4c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	691a      	ldr	r2, [r3, #16]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f58:	b2d2      	uxtb	r2, r2
 8005f5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f60:	1c5a      	adds	r2, r3, #1
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f47f ae88 	bne.w	8005c9a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	e000      	b.n	8005fa8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8005fa6:	2302      	movs	r3, #2
  }
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3728      	adds	r7, #40	@ 0x28
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	00010004 	.word	0x00010004
 8005fb4:	20000018 	.word	0x20000018
 8005fb8:	14f8b589 	.word	0x14f8b589

08005fbc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b088      	sub	sp, #32
 8005fc0:	af02      	add	r7, sp, #8
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	4608      	mov	r0, r1
 8005fc6:	4611      	mov	r1, r2
 8005fc8:	461a      	mov	r2, r3
 8005fca:	4603      	mov	r3, r0
 8005fcc:	817b      	strh	r3, [r7, #10]
 8005fce:	460b      	mov	r3, r1
 8005fd0:	813b      	strh	r3, [r7, #8]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fe4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f000 f960 	bl	80062b8 <I2C_WaitOnFlagUntilTimeout>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00d      	beq.n	800601a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006008:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800600c:	d103      	bne.n	8006016 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006014:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e05f      	b.n	80060da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800601a:	897b      	ldrh	r3, [r7, #10]
 800601c:	b2db      	uxtb	r3, r3
 800601e:	461a      	mov	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006028:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800602a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602c:	6a3a      	ldr	r2, [r7, #32]
 800602e:	492d      	ldr	r1, [pc, #180]	@ (80060e4 <I2C_RequestMemoryWrite+0x128>)
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 f9bb 	bl	80063ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e04c      	b.n	80060da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006040:	2300      	movs	r3, #0
 8006042:	617b      	str	r3, [r7, #20]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006058:	6a39      	ldr	r1, [r7, #32]
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 fa46 	bl	80064ec <I2C_WaitOnTXEFlagUntilTimeout>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00d      	beq.n	8006082 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606a:	2b04      	cmp	r3, #4
 800606c:	d107      	bne.n	800607e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800607c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e02b      	b.n	80060da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006082:	88fb      	ldrh	r3, [r7, #6]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d105      	bne.n	8006094 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006088:	893b      	ldrh	r3, [r7, #8]
 800608a:	b2da      	uxtb	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	611a      	str	r2, [r3, #16]
 8006092:	e021      	b.n	80060d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006094:	893b      	ldrh	r3, [r7, #8]
 8006096:	0a1b      	lsrs	r3, r3, #8
 8006098:	b29b      	uxth	r3, r3
 800609a:	b2da      	uxtb	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060a4:	6a39      	ldr	r1, [r7, #32]
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 fa20 	bl	80064ec <I2C_WaitOnTXEFlagUntilTimeout>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00d      	beq.n	80060ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d107      	bne.n	80060ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e005      	b.n	80060da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060ce:	893b      	ldrh	r3, [r7, #8]
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3718      	adds	r7, #24
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	00010002 	.word	0x00010002

080060e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b088      	sub	sp, #32
 80060ec:	af02      	add	r7, sp, #8
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	4608      	mov	r0, r1
 80060f2:	4611      	mov	r1, r2
 80060f4:	461a      	mov	r2, r3
 80060f6:	4603      	mov	r3, r0
 80060f8:	817b      	strh	r3, [r7, #10]
 80060fa:	460b      	mov	r3, r1
 80060fc:	813b      	strh	r3, [r7, #8]
 80060fe:	4613      	mov	r3, r2
 8006100:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006110:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006120:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	6a3b      	ldr	r3, [r7, #32]
 8006128:	2200      	movs	r2, #0
 800612a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 f8c2 	bl	80062b8 <I2C_WaitOnFlagUntilTimeout>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00d      	beq.n	8006156 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006148:	d103      	bne.n	8006152 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006150:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e0aa      	b.n	80062ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006156:	897b      	ldrh	r3, [r7, #10]
 8006158:	b2db      	uxtb	r3, r3
 800615a:	461a      	mov	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006164:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006168:	6a3a      	ldr	r2, [r7, #32]
 800616a:	4952      	ldr	r1, [pc, #328]	@ (80062b4 <I2C_RequestMemoryRead+0x1cc>)
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 f91d 	bl	80063ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e097      	b.n	80062ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800617c:	2300      	movs	r3, #0
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	617b      	str	r3, [r7, #20]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	617b      	str	r3, [r7, #20]
 8006190:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006194:	6a39      	ldr	r1, [r7, #32]
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 f9a8 	bl	80064ec <I2C_WaitOnTXEFlagUntilTimeout>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00d      	beq.n	80061be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d107      	bne.n	80061ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e076      	b.n	80062ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061be:	88fb      	ldrh	r3, [r7, #6]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d105      	bne.n	80061d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061c4:	893b      	ldrh	r3, [r7, #8]
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	611a      	str	r2, [r3, #16]
 80061ce:	e021      	b.n	8006214 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80061d0:	893b      	ldrh	r3, [r7, #8]
 80061d2:	0a1b      	lsrs	r3, r3, #8
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061e0:	6a39      	ldr	r1, [r7, #32]
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 f982 	bl	80064ec <I2C_WaitOnTXEFlagUntilTimeout>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00d      	beq.n	800620a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d107      	bne.n	8006206 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006204:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e050      	b.n	80062ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800620a:	893b      	ldrh	r3, [r7, #8]
 800620c:	b2da      	uxtb	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006216:	6a39      	ldr	r1, [r7, #32]
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 f967 	bl	80064ec <I2C_WaitOnTXEFlagUntilTimeout>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00d      	beq.n	8006240 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006228:	2b04      	cmp	r3, #4
 800622a:	d107      	bne.n	800623c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800623a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e035      	b.n	80062ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800624e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	2200      	movs	r2, #0
 8006258:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 f82b 	bl	80062b8 <I2C_WaitOnFlagUntilTimeout>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00d      	beq.n	8006284 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006272:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006276:	d103      	bne.n	8006280 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800627e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e013      	b.n	80062ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006284:	897b      	ldrh	r3, [r7, #10]
 8006286:	b2db      	uxtb	r3, r3
 8006288:	f043 0301 	orr.w	r3, r3, #1
 800628c:	b2da      	uxtb	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006296:	6a3a      	ldr	r2, [r7, #32]
 8006298:	4906      	ldr	r1, [pc, #24]	@ (80062b4 <I2C_RequestMemoryRead+0x1cc>)
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 f886 	bl	80063ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e000      	b.n	80062ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	00010002 	.word	0x00010002

080062b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	603b      	str	r3, [r7, #0]
 80062c4:	4613      	mov	r3, r2
 80062c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062c8:	e048      	b.n	800635c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d0:	d044      	beq.n	800635c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062d2:	f7fe fef9 	bl	80050c8 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d302      	bcc.n	80062e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d139      	bne.n	800635c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	0c1b      	lsrs	r3, r3, #16
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d10d      	bne.n	800630e <I2C_WaitOnFlagUntilTimeout+0x56>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	43da      	mvns	r2, r3
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	4013      	ands	r3, r2
 80062fe:	b29b      	uxth	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	bf0c      	ite	eq
 8006304:	2301      	moveq	r3, #1
 8006306:	2300      	movne	r3, #0
 8006308:	b2db      	uxtb	r3, r3
 800630a:	461a      	mov	r2, r3
 800630c:	e00c      	b.n	8006328 <I2C_WaitOnFlagUntilTimeout+0x70>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	43da      	mvns	r2, r3
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	4013      	ands	r3, r2
 800631a:	b29b      	uxth	r3, r3
 800631c:	2b00      	cmp	r3, #0
 800631e:	bf0c      	ite	eq
 8006320:	2301      	moveq	r3, #1
 8006322:	2300      	movne	r3, #0
 8006324:	b2db      	uxtb	r3, r3
 8006326:	461a      	mov	r2, r3
 8006328:	79fb      	ldrb	r3, [r7, #7]
 800632a:	429a      	cmp	r2, r3
 800632c:	d116      	bne.n	800635c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2220      	movs	r2, #32
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006348:	f043 0220 	orr.w	r2, r3, #32
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e023      	b.n	80063a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	0c1b      	lsrs	r3, r3, #16
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b01      	cmp	r3, #1
 8006364:	d10d      	bne.n	8006382 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	43da      	mvns	r2, r3
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	4013      	ands	r3, r2
 8006372:	b29b      	uxth	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	bf0c      	ite	eq
 8006378:	2301      	moveq	r3, #1
 800637a:	2300      	movne	r3, #0
 800637c:	b2db      	uxtb	r3, r3
 800637e:	461a      	mov	r2, r3
 8006380:	e00c      	b.n	800639c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	43da      	mvns	r2, r3
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	4013      	ands	r3, r2
 800638e:	b29b      	uxth	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	bf0c      	ite	eq
 8006394:	2301      	moveq	r3, #1
 8006396:	2300      	movne	r3, #0
 8006398:	b2db      	uxtb	r3, r3
 800639a:	461a      	mov	r2, r3
 800639c:	79fb      	ldrb	r3, [r7, #7]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d093      	beq.n	80062ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063ba:	e071      	b.n	80064a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ca:	d123      	bne.n	8006414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80063e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2220      	movs	r2, #32
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006400:	f043 0204 	orr.w	r2, r3, #4
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e067      	b.n	80064e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641a:	d041      	beq.n	80064a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800641c:	f7fe fe54 	bl	80050c8 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	429a      	cmp	r2, r3
 800642a:	d302      	bcc.n	8006432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d136      	bne.n	80064a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	0c1b      	lsrs	r3, r3, #16
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b01      	cmp	r3, #1
 800643a:	d10c      	bne.n	8006456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	43da      	mvns	r2, r3
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4013      	ands	r3, r2
 8006448:	b29b      	uxth	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	bf14      	ite	ne
 800644e:	2301      	movne	r3, #1
 8006450:	2300      	moveq	r3, #0
 8006452:	b2db      	uxtb	r3, r3
 8006454:	e00b      	b.n	800646e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	43da      	mvns	r2, r3
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	4013      	ands	r3, r2
 8006462:	b29b      	uxth	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	bf14      	ite	ne
 8006468:	2301      	movne	r3, #1
 800646a:	2300      	moveq	r3, #0
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d016      	beq.n	80064a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2220      	movs	r2, #32
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800648c:	f043 0220 	orr.w	r2, r3, #32
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e021      	b.n	80064e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	0c1b      	lsrs	r3, r3, #16
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d10c      	bne.n	80064c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	43da      	mvns	r2, r3
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	4013      	ands	r3, r2
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	bf14      	ite	ne
 80064bc:	2301      	movne	r3, #1
 80064be:	2300      	moveq	r3, #0
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	e00b      	b.n	80064dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	43da      	mvns	r2, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	4013      	ands	r3, r2
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	bf14      	ite	ne
 80064d6:	2301      	movne	r3, #1
 80064d8:	2300      	moveq	r3, #0
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f47f af6d 	bne.w	80063bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064f8:	e034      	b.n	8006564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 f8e3 	bl	80066c6 <I2C_IsAcknowledgeFailed>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e034      	b.n	8006574 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006510:	d028      	beq.n	8006564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006512:	f7fe fdd9 	bl	80050c8 <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	429a      	cmp	r2, r3
 8006520:	d302      	bcc.n	8006528 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d11d      	bne.n	8006564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006532:	2b80      	cmp	r3, #128	@ 0x80
 8006534:	d016      	beq.n	8006564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2220      	movs	r2, #32
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006550:	f043 0220 	orr.w	r2, r3, #32
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e007      	b.n	8006574 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800656e:	2b80      	cmp	r3, #128	@ 0x80
 8006570:	d1c3      	bne.n	80064fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006588:	e034      	b.n	80065f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 f89b 	bl	80066c6 <I2C_IsAcknowledgeFailed>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e034      	b.n	8006604 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a0:	d028      	beq.n	80065f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065a2:	f7fe fd91 	bl	80050c8 <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d302      	bcc.n	80065b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d11d      	bne.n	80065f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	f003 0304 	and.w	r3, r3, #4
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	d016      	beq.n	80065f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2220      	movs	r2, #32
 80065d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e0:	f043 0220 	orr.w	r2, r3, #32
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e007      	b.n	8006604 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	f003 0304 	and.w	r3, r3, #4
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d1c3      	bne.n	800658a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006618:	e049      	b.n	80066ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	f003 0310 	and.w	r3, r3, #16
 8006624:	2b10      	cmp	r3, #16
 8006626:	d119      	bne.n	800665c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f06f 0210 	mvn.w	r2, #16
 8006630:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2220      	movs	r2, #32
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e030      	b.n	80066be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800665c:	f7fe fd34 	bl	80050c8 <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	429a      	cmp	r2, r3
 800666a:	d302      	bcc.n	8006672 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d11d      	bne.n	80066ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800667c:	2b40      	cmp	r3, #64	@ 0x40
 800667e:	d016      	beq.n	80066ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2220      	movs	r2, #32
 800668a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800669a:	f043 0220 	orr.w	r2, r3, #32
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e007      	b.n	80066be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066b8:	2b40      	cmp	r3, #64	@ 0x40
 80066ba:	d1ae      	bne.n	800661a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b083      	sub	sp, #12
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066dc:	d11b      	bne.n	8006716 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80066e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2220      	movs	r2, #32
 80066f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006702:	f043 0204 	orr.w	r2, r3, #4
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e000      	b.n	8006718 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	bc80      	pop	{r7}
 8006720:	4770      	bx	lr
	...

08006724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e272      	b.n	8006c1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 8087 	beq.w	8006852 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006744:	4b92      	ldr	r3, [pc, #584]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f003 030c 	and.w	r3, r3, #12
 800674c:	2b04      	cmp	r3, #4
 800674e:	d00c      	beq.n	800676a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006750:	4b8f      	ldr	r3, [pc, #572]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f003 030c 	and.w	r3, r3, #12
 8006758:	2b08      	cmp	r3, #8
 800675a:	d112      	bne.n	8006782 <HAL_RCC_OscConfig+0x5e>
 800675c:	4b8c      	ldr	r3, [pc, #560]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006768:	d10b      	bne.n	8006782 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800676a:	4b89      	ldr	r3, [pc, #548]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d06c      	beq.n	8006850 <HAL_RCC_OscConfig+0x12c>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d168      	bne.n	8006850 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e24c      	b.n	8006c1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800678a:	d106      	bne.n	800679a <HAL_RCC_OscConfig+0x76>
 800678c:	4b80      	ldr	r3, [pc, #512]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a7f      	ldr	r2, [pc, #508]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 8006792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006796:	6013      	str	r3, [r2, #0]
 8006798:	e02e      	b.n	80067f8 <HAL_RCC_OscConfig+0xd4>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10c      	bne.n	80067bc <HAL_RCC_OscConfig+0x98>
 80067a2:	4b7b      	ldr	r3, [pc, #492]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a7a      	ldr	r2, [pc, #488]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 80067a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067ac:	6013      	str	r3, [r2, #0]
 80067ae:	4b78      	ldr	r3, [pc, #480]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a77      	ldr	r2, [pc, #476]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 80067b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067b8:	6013      	str	r3, [r2, #0]
 80067ba:	e01d      	b.n	80067f8 <HAL_RCC_OscConfig+0xd4>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067c4:	d10c      	bne.n	80067e0 <HAL_RCC_OscConfig+0xbc>
 80067c6:	4b72      	ldr	r3, [pc, #456]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a71      	ldr	r2, [pc, #452]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 80067cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067d0:	6013      	str	r3, [r2, #0]
 80067d2:	4b6f      	ldr	r3, [pc, #444]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a6e      	ldr	r2, [pc, #440]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 80067d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067dc:	6013      	str	r3, [r2, #0]
 80067de:	e00b      	b.n	80067f8 <HAL_RCC_OscConfig+0xd4>
 80067e0:	4b6b      	ldr	r3, [pc, #428]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a6a      	ldr	r2, [pc, #424]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 80067e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	4b68      	ldr	r3, [pc, #416]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a67      	ldr	r2, [pc, #412]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 80067f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d013      	beq.n	8006828 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006800:	f7fe fc62 	bl	80050c8 <HAL_GetTick>
 8006804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006806:	e008      	b.n	800681a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006808:	f7fe fc5e 	bl	80050c8 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b64      	cmp	r3, #100	@ 0x64
 8006814:	d901      	bls.n	800681a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e200      	b.n	8006c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800681a:	4b5d      	ldr	r3, [pc, #372]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d0f0      	beq.n	8006808 <HAL_RCC_OscConfig+0xe4>
 8006826:	e014      	b.n	8006852 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006828:	f7fe fc4e 	bl	80050c8 <HAL_GetTick>
 800682c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800682e:	e008      	b.n	8006842 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006830:	f7fe fc4a 	bl	80050c8 <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	2b64      	cmp	r3, #100	@ 0x64
 800683c:	d901      	bls.n	8006842 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e1ec      	b.n	8006c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006842:	4b53      	ldr	r3, [pc, #332]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1f0      	bne.n	8006830 <HAL_RCC_OscConfig+0x10c>
 800684e:	e000      	b.n	8006852 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	2b00      	cmp	r3, #0
 800685c:	d063      	beq.n	8006926 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800685e:	4b4c      	ldr	r3, [pc, #304]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f003 030c 	and.w	r3, r3, #12
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00b      	beq.n	8006882 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800686a:	4b49      	ldr	r3, [pc, #292]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f003 030c 	and.w	r3, r3, #12
 8006872:	2b08      	cmp	r3, #8
 8006874:	d11c      	bne.n	80068b0 <HAL_RCC_OscConfig+0x18c>
 8006876:	4b46      	ldr	r3, [pc, #280]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d116      	bne.n	80068b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006882:	4b43      	ldr	r3, [pc, #268]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d005      	beq.n	800689a <HAL_RCC_OscConfig+0x176>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d001      	beq.n	800689a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e1c0      	b.n	8006c1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800689a:	4b3d      	ldr	r3, [pc, #244]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	4939      	ldr	r1, [pc, #228]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068ae:	e03a      	b.n	8006926 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d020      	beq.n	80068fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068b8:	4b36      	ldr	r3, [pc, #216]	@ (8006994 <HAL_RCC_OscConfig+0x270>)
 80068ba:	2201      	movs	r2, #1
 80068bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068be:	f7fe fc03 	bl	80050c8 <HAL_GetTick>
 80068c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068c4:	e008      	b.n	80068d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068c6:	f7fe fbff 	bl	80050c8 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d901      	bls.n	80068d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e1a1      	b.n	8006c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068d8:	4b2d      	ldr	r3, [pc, #180]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d0f0      	beq.n	80068c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068e4:	4b2a      	ldr	r3, [pc, #168]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	00db      	lsls	r3, r3, #3
 80068f2:	4927      	ldr	r1, [pc, #156]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	600b      	str	r3, [r1, #0]
 80068f8:	e015      	b.n	8006926 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068fa:	4b26      	ldr	r3, [pc, #152]	@ (8006994 <HAL_RCC_OscConfig+0x270>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006900:	f7fe fbe2 	bl	80050c8 <HAL_GetTick>
 8006904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006906:	e008      	b.n	800691a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006908:	f7fe fbde 	bl	80050c8 <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	2b02      	cmp	r3, #2
 8006914:	d901      	bls.n	800691a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e180      	b.n	8006c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800691a:	4b1d      	ldr	r3, [pc, #116]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1f0      	bne.n	8006908 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0308 	and.w	r3, r3, #8
 800692e:	2b00      	cmp	r3, #0
 8006930:	d03a      	beq.n	80069a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d019      	beq.n	800696e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800693a:	4b17      	ldr	r3, [pc, #92]	@ (8006998 <HAL_RCC_OscConfig+0x274>)
 800693c:	2201      	movs	r2, #1
 800693e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006940:	f7fe fbc2 	bl	80050c8 <HAL_GetTick>
 8006944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006946:	e008      	b.n	800695a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006948:	f7fe fbbe 	bl	80050c8 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	2b02      	cmp	r3, #2
 8006954:	d901      	bls.n	800695a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e160      	b.n	8006c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800695a:	4b0d      	ldr	r3, [pc, #52]	@ (8006990 <HAL_RCC_OscConfig+0x26c>)
 800695c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d0f0      	beq.n	8006948 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006966:	2001      	movs	r0, #1
 8006968:	f000 faba 	bl	8006ee0 <RCC_Delay>
 800696c:	e01c      	b.n	80069a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800696e:	4b0a      	ldr	r3, [pc, #40]	@ (8006998 <HAL_RCC_OscConfig+0x274>)
 8006970:	2200      	movs	r2, #0
 8006972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006974:	f7fe fba8 	bl	80050c8 <HAL_GetTick>
 8006978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800697a:	e00f      	b.n	800699c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800697c:	f7fe fba4 	bl	80050c8 <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	2b02      	cmp	r3, #2
 8006988:	d908      	bls.n	800699c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e146      	b.n	8006c1c <HAL_RCC_OscConfig+0x4f8>
 800698e:	bf00      	nop
 8006990:	40021000 	.word	0x40021000
 8006994:	42420000 	.word	0x42420000
 8006998:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800699c:	4b92      	ldr	r3, [pc, #584]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 800699e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e9      	bne.n	800697c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 80a6 	beq.w	8006b02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069b6:	2300      	movs	r3, #0
 80069b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069ba:	4b8b      	ldr	r3, [pc, #556]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10d      	bne.n	80069e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069c6:	4b88      	ldr	r3, [pc, #544]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	4a87      	ldr	r2, [pc, #540]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 80069cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069d0:	61d3      	str	r3, [r2, #28]
 80069d2:	4b85      	ldr	r3, [pc, #532]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069da:	60bb      	str	r3, [r7, #8]
 80069dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069de:	2301      	movs	r3, #1
 80069e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069e2:	4b82      	ldr	r3, [pc, #520]	@ (8006bec <HAL_RCC_OscConfig+0x4c8>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d118      	bne.n	8006a20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069ee:	4b7f      	ldr	r3, [pc, #508]	@ (8006bec <HAL_RCC_OscConfig+0x4c8>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a7e      	ldr	r2, [pc, #504]	@ (8006bec <HAL_RCC_OscConfig+0x4c8>)
 80069f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069fa:	f7fe fb65 	bl	80050c8 <HAL_GetTick>
 80069fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a00:	e008      	b.n	8006a14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a02:	f7fe fb61 	bl	80050c8 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	2b64      	cmp	r3, #100	@ 0x64
 8006a0e:	d901      	bls.n	8006a14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e103      	b.n	8006c1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a14:	4b75      	ldr	r3, [pc, #468]	@ (8006bec <HAL_RCC_OscConfig+0x4c8>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d0f0      	beq.n	8006a02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d106      	bne.n	8006a36 <HAL_RCC_OscConfig+0x312>
 8006a28:	4b6f      	ldr	r3, [pc, #444]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	4a6e      	ldr	r2, [pc, #440]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006a2e:	f043 0301 	orr.w	r3, r3, #1
 8006a32:	6213      	str	r3, [r2, #32]
 8006a34:	e02d      	b.n	8006a92 <HAL_RCC_OscConfig+0x36e>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10c      	bne.n	8006a58 <HAL_RCC_OscConfig+0x334>
 8006a3e:	4b6a      	ldr	r3, [pc, #424]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	4a69      	ldr	r2, [pc, #420]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006a44:	f023 0301 	bic.w	r3, r3, #1
 8006a48:	6213      	str	r3, [r2, #32]
 8006a4a:	4b67      	ldr	r3, [pc, #412]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	4a66      	ldr	r2, [pc, #408]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006a50:	f023 0304 	bic.w	r3, r3, #4
 8006a54:	6213      	str	r3, [r2, #32]
 8006a56:	e01c      	b.n	8006a92 <HAL_RCC_OscConfig+0x36e>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	2b05      	cmp	r3, #5
 8006a5e:	d10c      	bne.n	8006a7a <HAL_RCC_OscConfig+0x356>
 8006a60:	4b61      	ldr	r3, [pc, #388]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	4a60      	ldr	r2, [pc, #384]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006a66:	f043 0304 	orr.w	r3, r3, #4
 8006a6a:	6213      	str	r3, [r2, #32]
 8006a6c:	4b5e      	ldr	r3, [pc, #376]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006a6e:	6a1b      	ldr	r3, [r3, #32]
 8006a70:	4a5d      	ldr	r2, [pc, #372]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006a72:	f043 0301 	orr.w	r3, r3, #1
 8006a76:	6213      	str	r3, [r2, #32]
 8006a78:	e00b      	b.n	8006a92 <HAL_RCC_OscConfig+0x36e>
 8006a7a:	4b5b      	ldr	r3, [pc, #364]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	4a5a      	ldr	r2, [pc, #360]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006a80:	f023 0301 	bic.w	r3, r3, #1
 8006a84:	6213      	str	r3, [r2, #32]
 8006a86:	4b58      	ldr	r3, [pc, #352]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	4a57      	ldr	r2, [pc, #348]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006a8c:	f023 0304 	bic.w	r3, r3, #4
 8006a90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d015      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a9a:	f7fe fb15 	bl	80050c8 <HAL_GetTick>
 8006a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aa0:	e00a      	b.n	8006ab8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aa2:	f7fe fb11 	bl	80050c8 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d901      	bls.n	8006ab8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e0b1      	b.n	8006c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ab8:	4b4b      	ldr	r3, [pc, #300]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	f003 0302 	and.w	r3, r3, #2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d0ee      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x37e>
 8006ac4:	e014      	b.n	8006af0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ac6:	f7fe faff 	bl	80050c8 <HAL_GetTick>
 8006aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006acc:	e00a      	b.n	8006ae4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ace:	f7fe fafb 	bl	80050c8 <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d901      	bls.n	8006ae4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e09b      	b.n	8006c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ae4:	4b40      	ldr	r3, [pc, #256]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	f003 0302 	and.w	r3, r3, #2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1ee      	bne.n	8006ace <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006af0:	7dfb      	ldrb	r3, [r7, #23]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d105      	bne.n	8006b02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006af6:	4b3c      	ldr	r3, [pc, #240]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	4a3b      	ldr	r2, [pc, #236]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006afc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 8087 	beq.w	8006c1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b0c:	4b36      	ldr	r3, [pc, #216]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f003 030c 	and.w	r3, r3, #12
 8006b14:	2b08      	cmp	r3, #8
 8006b16:	d061      	beq.n	8006bdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	69db      	ldr	r3, [r3, #28]
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d146      	bne.n	8006bae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b20:	4b33      	ldr	r3, [pc, #204]	@ (8006bf0 <HAL_RCC_OscConfig+0x4cc>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b26:	f7fe facf 	bl	80050c8 <HAL_GetTick>
 8006b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b2c:	e008      	b.n	8006b40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b2e:	f7fe facb 	bl	80050c8 <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d901      	bls.n	8006b40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e06d      	b.n	8006c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b40:	4b29      	ldr	r3, [pc, #164]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1f0      	bne.n	8006b2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b54:	d108      	bne.n	8006b68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006b56:	4b24      	ldr	r3, [pc, #144]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	4921      	ldr	r1, [pc, #132]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006b64:	4313      	orrs	r3, r2
 8006b66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b68:	4b1f      	ldr	r3, [pc, #124]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a19      	ldr	r1, [r3, #32]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b78:	430b      	orrs	r3, r1
 8006b7a:	491b      	ldr	r1, [pc, #108]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b80:	4b1b      	ldr	r3, [pc, #108]	@ (8006bf0 <HAL_RCC_OscConfig+0x4cc>)
 8006b82:	2201      	movs	r2, #1
 8006b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b86:	f7fe fa9f 	bl	80050c8 <HAL_GetTick>
 8006b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b8c:	e008      	b.n	8006ba0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b8e:	f7fe fa9b 	bl	80050c8 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d901      	bls.n	8006ba0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e03d      	b.n	8006c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ba0:	4b11      	ldr	r3, [pc, #68]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d0f0      	beq.n	8006b8e <HAL_RCC_OscConfig+0x46a>
 8006bac:	e035      	b.n	8006c1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bae:	4b10      	ldr	r3, [pc, #64]	@ (8006bf0 <HAL_RCC_OscConfig+0x4cc>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb4:	f7fe fa88 	bl	80050c8 <HAL_GetTick>
 8006bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bba:	e008      	b.n	8006bce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bbc:	f7fe fa84 	bl	80050c8 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e026      	b.n	8006c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bce:	4b06      	ldr	r3, [pc, #24]	@ (8006be8 <HAL_RCC_OscConfig+0x4c4>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1f0      	bne.n	8006bbc <HAL_RCC_OscConfig+0x498>
 8006bda:	e01e      	b.n	8006c1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	69db      	ldr	r3, [r3, #28]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d107      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e019      	b.n	8006c1c <HAL_RCC_OscConfig+0x4f8>
 8006be8:	40021000 	.word	0x40021000
 8006bec:	40007000 	.word	0x40007000
 8006bf0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8006c24 <HAL_RCC_OscConfig+0x500>)
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d106      	bne.n	8006c16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d001      	beq.n	8006c1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e000      	b.n	8006c1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3718      	adds	r7, #24
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	40021000 	.word	0x40021000

08006c28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e0d0      	b.n	8006dde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c3c:	4b6a      	ldr	r3, [pc, #424]	@ (8006de8 <HAL_RCC_ClockConfig+0x1c0>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0307 	and.w	r3, r3, #7
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d910      	bls.n	8006c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c4a:	4b67      	ldr	r3, [pc, #412]	@ (8006de8 <HAL_RCC_ClockConfig+0x1c0>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f023 0207 	bic.w	r2, r3, #7
 8006c52:	4965      	ldr	r1, [pc, #404]	@ (8006de8 <HAL_RCC_ClockConfig+0x1c0>)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c5a:	4b63      	ldr	r3, [pc, #396]	@ (8006de8 <HAL_RCC_ClockConfig+0x1c0>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0307 	and.w	r3, r3, #7
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d001      	beq.n	8006c6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e0b8      	b.n	8006dde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d020      	beq.n	8006cba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0304 	and.w	r3, r3, #4
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d005      	beq.n	8006c90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c84:	4b59      	ldr	r3, [pc, #356]	@ (8006dec <HAL_RCC_ClockConfig+0x1c4>)
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	4a58      	ldr	r2, [pc, #352]	@ (8006dec <HAL_RCC_ClockConfig+0x1c4>)
 8006c8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006c8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0308 	and.w	r3, r3, #8
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d005      	beq.n	8006ca8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c9c:	4b53      	ldr	r3, [pc, #332]	@ (8006dec <HAL_RCC_ClockConfig+0x1c4>)
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	4a52      	ldr	r2, [pc, #328]	@ (8006dec <HAL_RCC_ClockConfig+0x1c4>)
 8006ca2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006ca6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ca8:	4b50      	ldr	r3, [pc, #320]	@ (8006dec <HAL_RCC_ClockConfig+0x1c4>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	494d      	ldr	r1, [pc, #308]	@ (8006dec <HAL_RCC_ClockConfig+0x1c4>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d040      	beq.n	8006d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d107      	bne.n	8006cde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cce:	4b47      	ldr	r3, [pc, #284]	@ (8006dec <HAL_RCC_ClockConfig+0x1c4>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d115      	bne.n	8006d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e07f      	b.n	8006dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d107      	bne.n	8006cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ce6:	4b41      	ldr	r3, [pc, #260]	@ (8006dec <HAL_RCC_ClockConfig+0x1c4>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d109      	bne.n	8006d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e073      	b.n	8006dde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cf6:	4b3d      	ldr	r3, [pc, #244]	@ (8006dec <HAL_RCC_ClockConfig+0x1c4>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e06b      	b.n	8006dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d06:	4b39      	ldr	r3, [pc, #228]	@ (8006dec <HAL_RCC_ClockConfig+0x1c4>)
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f023 0203 	bic.w	r2, r3, #3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	4936      	ldr	r1, [pc, #216]	@ (8006dec <HAL_RCC_ClockConfig+0x1c4>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d18:	f7fe f9d6 	bl	80050c8 <HAL_GetTick>
 8006d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d1e:	e00a      	b.n	8006d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d20:	f7fe f9d2 	bl	80050c8 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d901      	bls.n	8006d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e053      	b.n	8006dde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d36:	4b2d      	ldr	r3, [pc, #180]	@ (8006dec <HAL_RCC_ClockConfig+0x1c4>)
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f003 020c 	and.w	r2, r3, #12
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d1eb      	bne.n	8006d20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d48:	4b27      	ldr	r3, [pc, #156]	@ (8006de8 <HAL_RCC_ClockConfig+0x1c0>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0307 	and.w	r3, r3, #7
 8006d50:	683a      	ldr	r2, [r7, #0]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d210      	bcs.n	8006d78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d56:	4b24      	ldr	r3, [pc, #144]	@ (8006de8 <HAL_RCC_ClockConfig+0x1c0>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f023 0207 	bic.w	r2, r3, #7
 8006d5e:	4922      	ldr	r1, [pc, #136]	@ (8006de8 <HAL_RCC_ClockConfig+0x1c0>)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d66:	4b20      	ldr	r3, [pc, #128]	@ (8006de8 <HAL_RCC_ClockConfig+0x1c0>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0307 	and.w	r3, r3, #7
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d001      	beq.n	8006d78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e032      	b.n	8006dde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0304 	and.w	r3, r3, #4
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d008      	beq.n	8006d96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d84:	4b19      	ldr	r3, [pc, #100]	@ (8006dec <HAL_RCC_ClockConfig+0x1c4>)
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	4916      	ldr	r1, [pc, #88]	@ (8006dec <HAL_RCC_ClockConfig+0x1c4>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0308 	and.w	r3, r3, #8
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d009      	beq.n	8006db6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006da2:	4b12      	ldr	r3, [pc, #72]	@ (8006dec <HAL_RCC_ClockConfig+0x1c4>)
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	00db      	lsls	r3, r3, #3
 8006db0:	490e      	ldr	r1, [pc, #56]	@ (8006dec <HAL_RCC_ClockConfig+0x1c4>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006db6:	f000 f821 	bl	8006dfc <HAL_RCC_GetSysClockFreq>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8006dec <HAL_RCC_ClockConfig+0x1c4>)
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	091b      	lsrs	r3, r3, #4
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	490a      	ldr	r1, [pc, #40]	@ (8006df0 <HAL_RCC_ClockConfig+0x1c8>)
 8006dc8:	5ccb      	ldrb	r3, [r1, r3]
 8006dca:	fa22 f303 	lsr.w	r3, r2, r3
 8006dce:	4a09      	ldr	r2, [pc, #36]	@ (8006df4 <HAL_RCC_ClockConfig+0x1cc>)
 8006dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006dd2:	4b09      	ldr	r3, [pc, #36]	@ (8006df8 <HAL_RCC_ClockConfig+0x1d0>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fe f934 	bl	8005044 <HAL_InitTick>

  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	40022000 	.word	0x40022000
 8006dec:	40021000 	.word	0x40021000
 8006df0:	08009618 	.word	0x08009618
 8006df4:	20000018 	.word	0x20000018
 8006df8:	2000001c 	.word	0x2000001c

08006dfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	60fb      	str	r3, [r7, #12]
 8006e06:	2300      	movs	r3, #0
 8006e08:	60bb      	str	r3, [r7, #8]
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	617b      	str	r3, [r7, #20]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006e12:	2300      	movs	r3, #0
 8006e14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006e16:	4b1e      	ldr	r3, [pc, #120]	@ (8006e90 <HAL_RCC_GetSysClockFreq+0x94>)
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f003 030c 	and.w	r3, r3, #12
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	d002      	beq.n	8006e2c <HAL_RCC_GetSysClockFreq+0x30>
 8006e26:	2b08      	cmp	r3, #8
 8006e28:	d003      	beq.n	8006e32 <HAL_RCC_GetSysClockFreq+0x36>
 8006e2a:	e027      	b.n	8006e7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006e2c:	4b19      	ldr	r3, [pc, #100]	@ (8006e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8006e2e:	613b      	str	r3, [r7, #16]
      break;
 8006e30:	e027      	b.n	8006e82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	0c9b      	lsrs	r3, r3, #18
 8006e36:	f003 030f 	and.w	r3, r3, #15
 8006e3a:	4a17      	ldr	r2, [pc, #92]	@ (8006e98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006e3c:	5cd3      	ldrb	r3, [r2, r3]
 8006e3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d010      	beq.n	8006e6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006e4a:	4b11      	ldr	r3, [pc, #68]	@ (8006e90 <HAL_RCC_GetSysClockFreq+0x94>)
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	0c5b      	lsrs	r3, r3, #17
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	4a11      	ldr	r2, [pc, #68]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006e56:	5cd3      	ldrb	r3, [r2, r3]
 8006e58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8006e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8006e5e:	fb03 f202 	mul.w	r2, r3, r2
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e68:	617b      	str	r3, [r7, #20]
 8006e6a:	e004      	b.n	8006e76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8006ea0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006e70:	fb02 f303 	mul.w	r3, r2, r3
 8006e74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	613b      	str	r3, [r7, #16]
      break;
 8006e7a:	e002      	b.n	8006e82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006e7c:	4b05      	ldr	r3, [pc, #20]	@ (8006e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8006e7e:	613b      	str	r3, [r7, #16]
      break;
 8006e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e82:	693b      	ldr	r3, [r7, #16]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	371c      	adds	r7, #28
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bc80      	pop	{r7}
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	40021000 	.word	0x40021000
 8006e94:	007a1200 	.word	0x007a1200
 8006e98:	08009630 	.word	0x08009630
 8006e9c:	08009640 	.word	0x08009640
 8006ea0:	003d0900 	.word	0x003d0900

08006ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ea8:	4b02      	ldr	r3, [pc, #8]	@ (8006eb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bc80      	pop	{r7}
 8006eb2:	4770      	bx	lr
 8006eb4:	20000018 	.word	0x20000018

08006eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ebc:	f7ff fff2 	bl	8006ea4 <HAL_RCC_GetHCLKFreq>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	4b05      	ldr	r3, [pc, #20]	@ (8006ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	0a1b      	lsrs	r3, r3, #8
 8006ec8:	f003 0307 	and.w	r3, r3, #7
 8006ecc:	4903      	ldr	r1, [pc, #12]	@ (8006edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ece:	5ccb      	ldrb	r3, [r1, r3]
 8006ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	40021000 	.word	0x40021000
 8006edc:	08009628 	.word	0x08009628

08006ee0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8006f14 <RCC_Delay+0x34>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a0a      	ldr	r2, [pc, #40]	@ (8006f18 <RCC_Delay+0x38>)
 8006eee:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef2:	0a5b      	lsrs	r3, r3, #9
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	fb02 f303 	mul.w	r3, r2, r3
 8006efa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006efc:	bf00      	nop
  }
  while (Delay --);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	1e5a      	subs	r2, r3, #1
 8006f02:	60fa      	str	r2, [r7, #12]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1f9      	bne.n	8006efc <RCC_Delay+0x1c>
}
 8006f08:	bf00      	nop
 8006f0a:	bf00      	nop
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bc80      	pop	{r7}
 8006f12:	4770      	bx	lr
 8006f14:	20000018 	.word	0x20000018
 8006f18:	10624dd3 	.word	0x10624dd3

08006f1c <std>:
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	b510      	push	{r4, lr}
 8006f20:	4604      	mov	r4, r0
 8006f22:	e9c0 3300 	strd	r3, r3, [r0]
 8006f26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f2a:	6083      	str	r3, [r0, #8]
 8006f2c:	8181      	strh	r1, [r0, #12]
 8006f2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006f30:	81c2      	strh	r2, [r0, #14]
 8006f32:	6183      	str	r3, [r0, #24]
 8006f34:	4619      	mov	r1, r3
 8006f36:	2208      	movs	r2, #8
 8006f38:	305c      	adds	r0, #92	@ 0x5c
 8006f3a:	f000 f9f9 	bl	8007330 <memset>
 8006f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f74 <std+0x58>)
 8006f40:	6224      	str	r4, [r4, #32]
 8006f42:	6263      	str	r3, [r4, #36]	@ 0x24
 8006f44:	4b0c      	ldr	r3, [pc, #48]	@ (8006f78 <std+0x5c>)
 8006f46:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006f48:	4b0c      	ldr	r3, [pc, #48]	@ (8006f7c <std+0x60>)
 8006f4a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f80 <std+0x64>)
 8006f4e:	6323      	str	r3, [r4, #48]	@ 0x30
 8006f50:	4b0c      	ldr	r3, [pc, #48]	@ (8006f84 <std+0x68>)
 8006f52:	429c      	cmp	r4, r3
 8006f54:	d006      	beq.n	8006f64 <std+0x48>
 8006f56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006f5a:	4294      	cmp	r4, r2
 8006f5c:	d002      	beq.n	8006f64 <std+0x48>
 8006f5e:	33d0      	adds	r3, #208	@ 0xd0
 8006f60:	429c      	cmp	r4, r3
 8006f62:	d105      	bne.n	8006f70 <std+0x54>
 8006f64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f6c:	f000 ba58 	b.w	8007420 <__retarget_lock_init_recursive>
 8006f70:	bd10      	pop	{r4, pc}
 8006f72:	bf00      	nop
 8006f74:	08007181 	.word	0x08007181
 8006f78:	080071a3 	.word	0x080071a3
 8006f7c:	080071db 	.word	0x080071db
 8006f80:	080071ff 	.word	0x080071ff
 8006f84:	200014e4 	.word	0x200014e4

08006f88 <stdio_exit_handler>:
 8006f88:	4a02      	ldr	r2, [pc, #8]	@ (8006f94 <stdio_exit_handler+0xc>)
 8006f8a:	4903      	ldr	r1, [pc, #12]	@ (8006f98 <stdio_exit_handler+0x10>)
 8006f8c:	4803      	ldr	r0, [pc, #12]	@ (8006f9c <stdio_exit_handler+0x14>)
 8006f8e:	f000 b869 	b.w	8007064 <_fwalk_sglue>
 8006f92:	bf00      	nop
 8006f94:	20000024 	.word	0x20000024
 8006f98:	08007cb9 	.word	0x08007cb9
 8006f9c:	20000034 	.word	0x20000034

08006fa0 <cleanup_stdio>:
 8006fa0:	6841      	ldr	r1, [r0, #4]
 8006fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8006fd4 <cleanup_stdio+0x34>)
 8006fa4:	b510      	push	{r4, lr}
 8006fa6:	4299      	cmp	r1, r3
 8006fa8:	4604      	mov	r4, r0
 8006faa:	d001      	beq.n	8006fb0 <cleanup_stdio+0x10>
 8006fac:	f000 fe84 	bl	8007cb8 <_fflush_r>
 8006fb0:	68a1      	ldr	r1, [r4, #8]
 8006fb2:	4b09      	ldr	r3, [pc, #36]	@ (8006fd8 <cleanup_stdio+0x38>)
 8006fb4:	4299      	cmp	r1, r3
 8006fb6:	d002      	beq.n	8006fbe <cleanup_stdio+0x1e>
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f000 fe7d 	bl	8007cb8 <_fflush_r>
 8006fbe:	68e1      	ldr	r1, [r4, #12]
 8006fc0:	4b06      	ldr	r3, [pc, #24]	@ (8006fdc <cleanup_stdio+0x3c>)
 8006fc2:	4299      	cmp	r1, r3
 8006fc4:	d004      	beq.n	8006fd0 <cleanup_stdio+0x30>
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fcc:	f000 be74 	b.w	8007cb8 <_fflush_r>
 8006fd0:	bd10      	pop	{r4, pc}
 8006fd2:	bf00      	nop
 8006fd4:	200014e4 	.word	0x200014e4
 8006fd8:	2000154c 	.word	0x2000154c
 8006fdc:	200015b4 	.word	0x200015b4

08006fe0 <global_stdio_init.part.0>:
 8006fe0:	b510      	push	{r4, lr}
 8006fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8007010 <global_stdio_init.part.0+0x30>)
 8006fe4:	4c0b      	ldr	r4, [pc, #44]	@ (8007014 <global_stdio_init.part.0+0x34>)
 8006fe6:	4a0c      	ldr	r2, [pc, #48]	@ (8007018 <global_stdio_init.part.0+0x38>)
 8006fe8:	4620      	mov	r0, r4
 8006fea:	601a      	str	r2, [r3, #0]
 8006fec:	2104      	movs	r1, #4
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f7ff ff94 	bl	8006f1c <std>
 8006ff4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	2109      	movs	r1, #9
 8006ffc:	f7ff ff8e 	bl	8006f1c <std>
 8007000:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007004:	2202      	movs	r2, #2
 8007006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800700a:	2112      	movs	r1, #18
 800700c:	f7ff bf86 	b.w	8006f1c <std>
 8007010:	2000161c 	.word	0x2000161c
 8007014:	200014e4 	.word	0x200014e4
 8007018:	08006f89 	.word	0x08006f89

0800701c <__sfp_lock_acquire>:
 800701c:	4801      	ldr	r0, [pc, #4]	@ (8007024 <__sfp_lock_acquire+0x8>)
 800701e:	f000 ba00 	b.w	8007422 <__retarget_lock_acquire_recursive>
 8007022:	bf00      	nop
 8007024:	20001625 	.word	0x20001625

08007028 <__sfp_lock_release>:
 8007028:	4801      	ldr	r0, [pc, #4]	@ (8007030 <__sfp_lock_release+0x8>)
 800702a:	f000 b9fb 	b.w	8007424 <__retarget_lock_release_recursive>
 800702e:	bf00      	nop
 8007030:	20001625 	.word	0x20001625

08007034 <__sinit>:
 8007034:	b510      	push	{r4, lr}
 8007036:	4604      	mov	r4, r0
 8007038:	f7ff fff0 	bl	800701c <__sfp_lock_acquire>
 800703c:	6a23      	ldr	r3, [r4, #32]
 800703e:	b11b      	cbz	r3, 8007048 <__sinit+0x14>
 8007040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007044:	f7ff bff0 	b.w	8007028 <__sfp_lock_release>
 8007048:	4b04      	ldr	r3, [pc, #16]	@ (800705c <__sinit+0x28>)
 800704a:	6223      	str	r3, [r4, #32]
 800704c:	4b04      	ldr	r3, [pc, #16]	@ (8007060 <__sinit+0x2c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1f5      	bne.n	8007040 <__sinit+0xc>
 8007054:	f7ff ffc4 	bl	8006fe0 <global_stdio_init.part.0>
 8007058:	e7f2      	b.n	8007040 <__sinit+0xc>
 800705a:	bf00      	nop
 800705c:	08006fa1 	.word	0x08006fa1
 8007060:	2000161c 	.word	0x2000161c

08007064 <_fwalk_sglue>:
 8007064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007068:	4607      	mov	r7, r0
 800706a:	4688      	mov	r8, r1
 800706c:	4614      	mov	r4, r2
 800706e:	2600      	movs	r6, #0
 8007070:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007074:	f1b9 0901 	subs.w	r9, r9, #1
 8007078:	d505      	bpl.n	8007086 <_fwalk_sglue+0x22>
 800707a:	6824      	ldr	r4, [r4, #0]
 800707c:	2c00      	cmp	r4, #0
 800707e:	d1f7      	bne.n	8007070 <_fwalk_sglue+0xc>
 8007080:	4630      	mov	r0, r6
 8007082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007086:	89ab      	ldrh	r3, [r5, #12]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d907      	bls.n	800709c <_fwalk_sglue+0x38>
 800708c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007090:	3301      	adds	r3, #1
 8007092:	d003      	beq.n	800709c <_fwalk_sglue+0x38>
 8007094:	4629      	mov	r1, r5
 8007096:	4638      	mov	r0, r7
 8007098:	47c0      	blx	r8
 800709a:	4306      	orrs	r6, r0
 800709c:	3568      	adds	r5, #104	@ 0x68
 800709e:	e7e9      	b.n	8007074 <_fwalk_sglue+0x10>

080070a0 <iprintf>:
 80070a0:	b40f      	push	{r0, r1, r2, r3}
 80070a2:	b507      	push	{r0, r1, r2, lr}
 80070a4:	4906      	ldr	r1, [pc, #24]	@ (80070c0 <iprintf+0x20>)
 80070a6:	ab04      	add	r3, sp, #16
 80070a8:	6808      	ldr	r0, [r1, #0]
 80070aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80070ae:	6881      	ldr	r1, [r0, #8]
 80070b0:	9301      	str	r3, [sp, #4]
 80070b2:	f000 fad7 	bl	8007664 <_vfiprintf_r>
 80070b6:	b003      	add	sp, #12
 80070b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80070bc:	b004      	add	sp, #16
 80070be:	4770      	bx	lr
 80070c0:	20000030 	.word	0x20000030

080070c4 <_puts_r>:
 80070c4:	6a03      	ldr	r3, [r0, #32]
 80070c6:	b570      	push	{r4, r5, r6, lr}
 80070c8:	4605      	mov	r5, r0
 80070ca:	460e      	mov	r6, r1
 80070cc:	6884      	ldr	r4, [r0, #8]
 80070ce:	b90b      	cbnz	r3, 80070d4 <_puts_r+0x10>
 80070d0:	f7ff ffb0 	bl	8007034 <__sinit>
 80070d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80070d6:	07db      	lsls	r3, r3, #31
 80070d8:	d405      	bmi.n	80070e6 <_puts_r+0x22>
 80070da:	89a3      	ldrh	r3, [r4, #12]
 80070dc:	0598      	lsls	r0, r3, #22
 80070de:	d402      	bmi.n	80070e6 <_puts_r+0x22>
 80070e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070e2:	f000 f99e 	bl	8007422 <__retarget_lock_acquire_recursive>
 80070e6:	89a3      	ldrh	r3, [r4, #12]
 80070e8:	0719      	lsls	r1, r3, #28
 80070ea:	d502      	bpl.n	80070f2 <_puts_r+0x2e>
 80070ec:	6923      	ldr	r3, [r4, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d135      	bne.n	800715e <_puts_r+0x9a>
 80070f2:	4621      	mov	r1, r4
 80070f4:	4628      	mov	r0, r5
 80070f6:	f000 f8c5 	bl	8007284 <__swsetup_r>
 80070fa:	b380      	cbz	r0, 800715e <_puts_r+0x9a>
 80070fc:	f04f 35ff 	mov.w	r5, #4294967295
 8007100:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007102:	07da      	lsls	r2, r3, #31
 8007104:	d405      	bmi.n	8007112 <_puts_r+0x4e>
 8007106:	89a3      	ldrh	r3, [r4, #12]
 8007108:	059b      	lsls	r3, r3, #22
 800710a:	d402      	bmi.n	8007112 <_puts_r+0x4e>
 800710c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800710e:	f000 f989 	bl	8007424 <__retarget_lock_release_recursive>
 8007112:	4628      	mov	r0, r5
 8007114:	bd70      	pop	{r4, r5, r6, pc}
 8007116:	2b00      	cmp	r3, #0
 8007118:	da04      	bge.n	8007124 <_puts_r+0x60>
 800711a:	69a2      	ldr	r2, [r4, #24]
 800711c:	429a      	cmp	r2, r3
 800711e:	dc17      	bgt.n	8007150 <_puts_r+0x8c>
 8007120:	290a      	cmp	r1, #10
 8007122:	d015      	beq.n	8007150 <_puts_r+0x8c>
 8007124:	6823      	ldr	r3, [r4, #0]
 8007126:	1c5a      	adds	r2, r3, #1
 8007128:	6022      	str	r2, [r4, #0]
 800712a:	7019      	strb	r1, [r3, #0]
 800712c:	68a3      	ldr	r3, [r4, #8]
 800712e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007132:	3b01      	subs	r3, #1
 8007134:	60a3      	str	r3, [r4, #8]
 8007136:	2900      	cmp	r1, #0
 8007138:	d1ed      	bne.n	8007116 <_puts_r+0x52>
 800713a:	2b00      	cmp	r3, #0
 800713c:	da11      	bge.n	8007162 <_puts_r+0x9e>
 800713e:	4622      	mov	r2, r4
 8007140:	210a      	movs	r1, #10
 8007142:	4628      	mov	r0, r5
 8007144:	f000 f85f 	bl	8007206 <__swbuf_r>
 8007148:	3001      	adds	r0, #1
 800714a:	d0d7      	beq.n	80070fc <_puts_r+0x38>
 800714c:	250a      	movs	r5, #10
 800714e:	e7d7      	b.n	8007100 <_puts_r+0x3c>
 8007150:	4622      	mov	r2, r4
 8007152:	4628      	mov	r0, r5
 8007154:	f000 f857 	bl	8007206 <__swbuf_r>
 8007158:	3001      	adds	r0, #1
 800715a:	d1e7      	bne.n	800712c <_puts_r+0x68>
 800715c:	e7ce      	b.n	80070fc <_puts_r+0x38>
 800715e:	3e01      	subs	r6, #1
 8007160:	e7e4      	b.n	800712c <_puts_r+0x68>
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	1c5a      	adds	r2, r3, #1
 8007166:	6022      	str	r2, [r4, #0]
 8007168:	220a      	movs	r2, #10
 800716a:	701a      	strb	r2, [r3, #0]
 800716c:	e7ee      	b.n	800714c <_puts_r+0x88>
	...

08007170 <puts>:
 8007170:	4b02      	ldr	r3, [pc, #8]	@ (800717c <puts+0xc>)
 8007172:	4601      	mov	r1, r0
 8007174:	6818      	ldr	r0, [r3, #0]
 8007176:	f7ff bfa5 	b.w	80070c4 <_puts_r>
 800717a:	bf00      	nop
 800717c:	20000030 	.word	0x20000030

08007180 <__sread>:
 8007180:	b510      	push	{r4, lr}
 8007182:	460c      	mov	r4, r1
 8007184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007188:	f000 f8fc 	bl	8007384 <_read_r>
 800718c:	2800      	cmp	r0, #0
 800718e:	bfab      	itete	ge
 8007190:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007192:	89a3      	ldrhlt	r3, [r4, #12]
 8007194:	181b      	addge	r3, r3, r0
 8007196:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800719a:	bfac      	ite	ge
 800719c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800719e:	81a3      	strhlt	r3, [r4, #12]
 80071a0:	bd10      	pop	{r4, pc}

080071a2 <__swrite>:
 80071a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071a6:	461f      	mov	r7, r3
 80071a8:	898b      	ldrh	r3, [r1, #12]
 80071aa:	4605      	mov	r5, r0
 80071ac:	05db      	lsls	r3, r3, #23
 80071ae:	460c      	mov	r4, r1
 80071b0:	4616      	mov	r6, r2
 80071b2:	d505      	bpl.n	80071c0 <__swrite+0x1e>
 80071b4:	2302      	movs	r3, #2
 80071b6:	2200      	movs	r2, #0
 80071b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071bc:	f000 f8d0 	bl	8007360 <_lseek_r>
 80071c0:	89a3      	ldrh	r3, [r4, #12]
 80071c2:	4632      	mov	r2, r6
 80071c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071c8:	81a3      	strh	r3, [r4, #12]
 80071ca:	4628      	mov	r0, r5
 80071cc:	463b      	mov	r3, r7
 80071ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071d6:	f000 b8e7 	b.w	80073a8 <_write_r>

080071da <__sseek>:
 80071da:	b510      	push	{r4, lr}
 80071dc:	460c      	mov	r4, r1
 80071de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e2:	f000 f8bd 	bl	8007360 <_lseek_r>
 80071e6:	1c43      	adds	r3, r0, #1
 80071e8:	89a3      	ldrh	r3, [r4, #12]
 80071ea:	bf15      	itete	ne
 80071ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80071ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80071f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80071f6:	81a3      	strheq	r3, [r4, #12]
 80071f8:	bf18      	it	ne
 80071fa:	81a3      	strhne	r3, [r4, #12]
 80071fc:	bd10      	pop	{r4, pc}

080071fe <__sclose>:
 80071fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007202:	f000 b89d 	b.w	8007340 <_close_r>

08007206 <__swbuf_r>:
 8007206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007208:	460e      	mov	r6, r1
 800720a:	4614      	mov	r4, r2
 800720c:	4605      	mov	r5, r0
 800720e:	b118      	cbz	r0, 8007218 <__swbuf_r+0x12>
 8007210:	6a03      	ldr	r3, [r0, #32]
 8007212:	b90b      	cbnz	r3, 8007218 <__swbuf_r+0x12>
 8007214:	f7ff ff0e 	bl	8007034 <__sinit>
 8007218:	69a3      	ldr	r3, [r4, #24]
 800721a:	60a3      	str	r3, [r4, #8]
 800721c:	89a3      	ldrh	r3, [r4, #12]
 800721e:	071a      	lsls	r2, r3, #28
 8007220:	d501      	bpl.n	8007226 <__swbuf_r+0x20>
 8007222:	6923      	ldr	r3, [r4, #16]
 8007224:	b943      	cbnz	r3, 8007238 <__swbuf_r+0x32>
 8007226:	4621      	mov	r1, r4
 8007228:	4628      	mov	r0, r5
 800722a:	f000 f82b 	bl	8007284 <__swsetup_r>
 800722e:	b118      	cbz	r0, 8007238 <__swbuf_r+0x32>
 8007230:	f04f 37ff 	mov.w	r7, #4294967295
 8007234:	4638      	mov	r0, r7
 8007236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	6922      	ldr	r2, [r4, #16]
 800723c:	b2f6      	uxtb	r6, r6
 800723e:	1a98      	subs	r0, r3, r2
 8007240:	6963      	ldr	r3, [r4, #20]
 8007242:	4637      	mov	r7, r6
 8007244:	4283      	cmp	r3, r0
 8007246:	dc05      	bgt.n	8007254 <__swbuf_r+0x4e>
 8007248:	4621      	mov	r1, r4
 800724a:	4628      	mov	r0, r5
 800724c:	f000 fd34 	bl	8007cb8 <_fflush_r>
 8007250:	2800      	cmp	r0, #0
 8007252:	d1ed      	bne.n	8007230 <__swbuf_r+0x2a>
 8007254:	68a3      	ldr	r3, [r4, #8]
 8007256:	3b01      	subs	r3, #1
 8007258:	60a3      	str	r3, [r4, #8]
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	1c5a      	adds	r2, r3, #1
 800725e:	6022      	str	r2, [r4, #0]
 8007260:	701e      	strb	r6, [r3, #0]
 8007262:	6962      	ldr	r2, [r4, #20]
 8007264:	1c43      	adds	r3, r0, #1
 8007266:	429a      	cmp	r2, r3
 8007268:	d004      	beq.n	8007274 <__swbuf_r+0x6e>
 800726a:	89a3      	ldrh	r3, [r4, #12]
 800726c:	07db      	lsls	r3, r3, #31
 800726e:	d5e1      	bpl.n	8007234 <__swbuf_r+0x2e>
 8007270:	2e0a      	cmp	r6, #10
 8007272:	d1df      	bne.n	8007234 <__swbuf_r+0x2e>
 8007274:	4621      	mov	r1, r4
 8007276:	4628      	mov	r0, r5
 8007278:	f000 fd1e 	bl	8007cb8 <_fflush_r>
 800727c:	2800      	cmp	r0, #0
 800727e:	d0d9      	beq.n	8007234 <__swbuf_r+0x2e>
 8007280:	e7d6      	b.n	8007230 <__swbuf_r+0x2a>
	...

08007284 <__swsetup_r>:
 8007284:	b538      	push	{r3, r4, r5, lr}
 8007286:	4b29      	ldr	r3, [pc, #164]	@ (800732c <__swsetup_r+0xa8>)
 8007288:	4605      	mov	r5, r0
 800728a:	6818      	ldr	r0, [r3, #0]
 800728c:	460c      	mov	r4, r1
 800728e:	b118      	cbz	r0, 8007298 <__swsetup_r+0x14>
 8007290:	6a03      	ldr	r3, [r0, #32]
 8007292:	b90b      	cbnz	r3, 8007298 <__swsetup_r+0x14>
 8007294:	f7ff fece 	bl	8007034 <__sinit>
 8007298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800729c:	0719      	lsls	r1, r3, #28
 800729e:	d422      	bmi.n	80072e6 <__swsetup_r+0x62>
 80072a0:	06da      	lsls	r2, r3, #27
 80072a2:	d407      	bmi.n	80072b4 <__swsetup_r+0x30>
 80072a4:	2209      	movs	r2, #9
 80072a6:	602a      	str	r2, [r5, #0]
 80072a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072ac:	f04f 30ff 	mov.w	r0, #4294967295
 80072b0:	81a3      	strh	r3, [r4, #12]
 80072b2:	e033      	b.n	800731c <__swsetup_r+0x98>
 80072b4:	0758      	lsls	r0, r3, #29
 80072b6:	d512      	bpl.n	80072de <__swsetup_r+0x5a>
 80072b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072ba:	b141      	cbz	r1, 80072ce <__swsetup_r+0x4a>
 80072bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80072c0:	4299      	cmp	r1, r3
 80072c2:	d002      	beq.n	80072ca <__swsetup_r+0x46>
 80072c4:	4628      	mov	r0, r5
 80072c6:	f000 f8af 	bl	8007428 <_free_r>
 80072ca:	2300      	movs	r3, #0
 80072cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80072ce:	89a3      	ldrh	r3, [r4, #12]
 80072d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80072d4:	81a3      	strh	r3, [r4, #12]
 80072d6:	2300      	movs	r3, #0
 80072d8:	6063      	str	r3, [r4, #4]
 80072da:	6923      	ldr	r3, [r4, #16]
 80072dc:	6023      	str	r3, [r4, #0]
 80072de:	89a3      	ldrh	r3, [r4, #12]
 80072e0:	f043 0308 	orr.w	r3, r3, #8
 80072e4:	81a3      	strh	r3, [r4, #12]
 80072e6:	6923      	ldr	r3, [r4, #16]
 80072e8:	b94b      	cbnz	r3, 80072fe <__swsetup_r+0x7a>
 80072ea:	89a3      	ldrh	r3, [r4, #12]
 80072ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80072f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072f4:	d003      	beq.n	80072fe <__swsetup_r+0x7a>
 80072f6:	4621      	mov	r1, r4
 80072f8:	4628      	mov	r0, r5
 80072fa:	f000 fd2a 	bl	8007d52 <__smakebuf_r>
 80072fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007302:	f013 0201 	ands.w	r2, r3, #1
 8007306:	d00a      	beq.n	800731e <__swsetup_r+0x9a>
 8007308:	2200      	movs	r2, #0
 800730a:	60a2      	str	r2, [r4, #8]
 800730c:	6962      	ldr	r2, [r4, #20]
 800730e:	4252      	negs	r2, r2
 8007310:	61a2      	str	r2, [r4, #24]
 8007312:	6922      	ldr	r2, [r4, #16]
 8007314:	b942      	cbnz	r2, 8007328 <__swsetup_r+0xa4>
 8007316:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800731a:	d1c5      	bne.n	80072a8 <__swsetup_r+0x24>
 800731c:	bd38      	pop	{r3, r4, r5, pc}
 800731e:	0799      	lsls	r1, r3, #30
 8007320:	bf58      	it	pl
 8007322:	6962      	ldrpl	r2, [r4, #20]
 8007324:	60a2      	str	r2, [r4, #8]
 8007326:	e7f4      	b.n	8007312 <__swsetup_r+0x8e>
 8007328:	2000      	movs	r0, #0
 800732a:	e7f7      	b.n	800731c <__swsetup_r+0x98>
 800732c:	20000030 	.word	0x20000030

08007330 <memset>:
 8007330:	4603      	mov	r3, r0
 8007332:	4402      	add	r2, r0
 8007334:	4293      	cmp	r3, r2
 8007336:	d100      	bne.n	800733a <memset+0xa>
 8007338:	4770      	bx	lr
 800733a:	f803 1b01 	strb.w	r1, [r3], #1
 800733e:	e7f9      	b.n	8007334 <memset+0x4>

08007340 <_close_r>:
 8007340:	b538      	push	{r3, r4, r5, lr}
 8007342:	2300      	movs	r3, #0
 8007344:	4d05      	ldr	r5, [pc, #20]	@ (800735c <_close_r+0x1c>)
 8007346:	4604      	mov	r4, r0
 8007348:	4608      	mov	r0, r1
 800734a:	602b      	str	r3, [r5, #0]
 800734c:	f7fd fdd1 	bl	8004ef2 <_close>
 8007350:	1c43      	adds	r3, r0, #1
 8007352:	d102      	bne.n	800735a <_close_r+0x1a>
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	b103      	cbz	r3, 800735a <_close_r+0x1a>
 8007358:	6023      	str	r3, [r4, #0]
 800735a:	bd38      	pop	{r3, r4, r5, pc}
 800735c:	20001620 	.word	0x20001620

08007360 <_lseek_r>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	4604      	mov	r4, r0
 8007364:	4608      	mov	r0, r1
 8007366:	4611      	mov	r1, r2
 8007368:	2200      	movs	r2, #0
 800736a:	4d05      	ldr	r5, [pc, #20]	@ (8007380 <_lseek_r+0x20>)
 800736c:	602a      	str	r2, [r5, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	f7fd fde3 	bl	8004f3a <_lseek>
 8007374:	1c43      	adds	r3, r0, #1
 8007376:	d102      	bne.n	800737e <_lseek_r+0x1e>
 8007378:	682b      	ldr	r3, [r5, #0]
 800737a:	b103      	cbz	r3, 800737e <_lseek_r+0x1e>
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	bd38      	pop	{r3, r4, r5, pc}
 8007380:	20001620 	.word	0x20001620

08007384 <_read_r>:
 8007384:	b538      	push	{r3, r4, r5, lr}
 8007386:	4604      	mov	r4, r0
 8007388:	4608      	mov	r0, r1
 800738a:	4611      	mov	r1, r2
 800738c:	2200      	movs	r2, #0
 800738e:	4d05      	ldr	r5, [pc, #20]	@ (80073a4 <_read_r+0x20>)
 8007390:	602a      	str	r2, [r5, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	f7fd fd74 	bl	8004e80 <_read>
 8007398:	1c43      	adds	r3, r0, #1
 800739a:	d102      	bne.n	80073a2 <_read_r+0x1e>
 800739c:	682b      	ldr	r3, [r5, #0]
 800739e:	b103      	cbz	r3, 80073a2 <_read_r+0x1e>
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	bd38      	pop	{r3, r4, r5, pc}
 80073a4:	20001620 	.word	0x20001620

080073a8 <_write_r>:
 80073a8:	b538      	push	{r3, r4, r5, lr}
 80073aa:	4604      	mov	r4, r0
 80073ac:	4608      	mov	r0, r1
 80073ae:	4611      	mov	r1, r2
 80073b0:	2200      	movs	r2, #0
 80073b2:	4d05      	ldr	r5, [pc, #20]	@ (80073c8 <_write_r+0x20>)
 80073b4:	602a      	str	r2, [r5, #0]
 80073b6:	461a      	mov	r2, r3
 80073b8:	f7fd fd7f 	bl	8004eba <_write>
 80073bc:	1c43      	adds	r3, r0, #1
 80073be:	d102      	bne.n	80073c6 <_write_r+0x1e>
 80073c0:	682b      	ldr	r3, [r5, #0]
 80073c2:	b103      	cbz	r3, 80073c6 <_write_r+0x1e>
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	bd38      	pop	{r3, r4, r5, pc}
 80073c8:	20001620 	.word	0x20001620

080073cc <__errno>:
 80073cc:	4b01      	ldr	r3, [pc, #4]	@ (80073d4 <__errno+0x8>)
 80073ce:	6818      	ldr	r0, [r3, #0]
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	20000030 	.word	0x20000030

080073d8 <__libc_init_array>:
 80073d8:	b570      	push	{r4, r5, r6, lr}
 80073da:	2600      	movs	r6, #0
 80073dc:	4d0c      	ldr	r5, [pc, #48]	@ (8007410 <__libc_init_array+0x38>)
 80073de:	4c0d      	ldr	r4, [pc, #52]	@ (8007414 <__libc_init_array+0x3c>)
 80073e0:	1b64      	subs	r4, r4, r5
 80073e2:	10a4      	asrs	r4, r4, #2
 80073e4:	42a6      	cmp	r6, r4
 80073e6:	d109      	bne.n	80073fc <__libc_init_array+0x24>
 80073e8:	f001 ffca 	bl	8009380 <_init>
 80073ec:	2600      	movs	r6, #0
 80073ee:	4d0a      	ldr	r5, [pc, #40]	@ (8007418 <__libc_init_array+0x40>)
 80073f0:	4c0a      	ldr	r4, [pc, #40]	@ (800741c <__libc_init_array+0x44>)
 80073f2:	1b64      	subs	r4, r4, r5
 80073f4:	10a4      	asrs	r4, r4, #2
 80073f6:	42a6      	cmp	r6, r4
 80073f8:	d105      	bne.n	8007406 <__libc_init_array+0x2e>
 80073fa:	bd70      	pop	{r4, r5, r6, pc}
 80073fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007400:	4798      	blx	r3
 8007402:	3601      	adds	r6, #1
 8007404:	e7ee      	b.n	80073e4 <__libc_init_array+0xc>
 8007406:	f855 3b04 	ldr.w	r3, [r5], #4
 800740a:	4798      	blx	r3
 800740c:	3601      	adds	r6, #1
 800740e:	e7f2      	b.n	80073f6 <__libc_init_array+0x1e>
 8007410:	080096e0 	.word	0x080096e0
 8007414:	080096e0 	.word	0x080096e0
 8007418:	080096e0 	.word	0x080096e0
 800741c:	080096e4 	.word	0x080096e4

08007420 <__retarget_lock_init_recursive>:
 8007420:	4770      	bx	lr

08007422 <__retarget_lock_acquire_recursive>:
 8007422:	4770      	bx	lr

08007424 <__retarget_lock_release_recursive>:
 8007424:	4770      	bx	lr
	...

08007428 <_free_r>:
 8007428:	b538      	push	{r3, r4, r5, lr}
 800742a:	4605      	mov	r5, r0
 800742c:	2900      	cmp	r1, #0
 800742e:	d040      	beq.n	80074b2 <_free_r+0x8a>
 8007430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007434:	1f0c      	subs	r4, r1, #4
 8007436:	2b00      	cmp	r3, #0
 8007438:	bfb8      	it	lt
 800743a:	18e4      	addlt	r4, r4, r3
 800743c:	f000 f8de 	bl	80075fc <__malloc_lock>
 8007440:	4a1c      	ldr	r2, [pc, #112]	@ (80074b4 <_free_r+0x8c>)
 8007442:	6813      	ldr	r3, [r2, #0]
 8007444:	b933      	cbnz	r3, 8007454 <_free_r+0x2c>
 8007446:	6063      	str	r3, [r4, #4]
 8007448:	6014      	str	r4, [r2, #0]
 800744a:	4628      	mov	r0, r5
 800744c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007450:	f000 b8da 	b.w	8007608 <__malloc_unlock>
 8007454:	42a3      	cmp	r3, r4
 8007456:	d908      	bls.n	800746a <_free_r+0x42>
 8007458:	6820      	ldr	r0, [r4, #0]
 800745a:	1821      	adds	r1, r4, r0
 800745c:	428b      	cmp	r3, r1
 800745e:	bf01      	itttt	eq
 8007460:	6819      	ldreq	r1, [r3, #0]
 8007462:	685b      	ldreq	r3, [r3, #4]
 8007464:	1809      	addeq	r1, r1, r0
 8007466:	6021      	streq	r1, [r4, #0]
 8007468:	e7ed      	b.n	8007446 <_free_r+0x1e>
 800746a:	461a      	mov	r2, r3
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	b10b      	cbz	r3, 8007474 <_free_r+0x4c>
 8007470:	42a3      	cmp	r3, r4
 8007472:	d9fa      	bls.n	800746a <_free_r+0x42>
 8007474:	6811      	ldr	r1, [r2, #0]
 8007476:	1850      	adds	r0, r2, r1
 8007478:	42a0      	cmp	r0, r4
 800747a:	d10b      	bne.n	8007494 <_free_r+0x6c>
 800747c:	6820      	ldr	r0, [r4, #0]
 800747e:	4401      	add	r1, r0
 8007480:	1850      	adds	r0, r2, r1
 8007482:	4283      	cmp	r3, r0
 8007484:	6011      	str	r1, [r2, #0]
 8007486:	d1e0      	bne.n	800744a <_free_r+0x22>
 8007488:	6818      	ldr	r0, [r3, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	4408      	add	r0, r1
 800748e:	6010      	str	r0, [r2, #0]
 8007490:	6053      	str	r3, [r2, #4]
 8007492:	e7da      	b.n	800744a <_free_r+0x22>
 8007494:	d902      	bls.n	800749c <_free_r+0x74>
 8007496:	230c      	movs	r3, #12
 8007498:	602b      	str	r3, [r5, #0]
 800749a:	e7d6      	b.n	800744a <_free_r+0x22>
 800749c:	6820      	ldr	r0, [r4, #0]
 800749e:	1821      	adds	r1, r4, r0
 80074a0:	428b      	cmp	r3, r1
 80074a2:	bf01      	itttt	eq
 80074a4:	6819      	ldreq	r1, [r3, #0]
 80074a6:	685b      	ldreq	r3, [r3, #4]
 80074a8:	1809      	addeq	r1, r1, r0
 80074aa:	6021      	streq	r1, [r4, #0]
 80074ac:	6063      	str	r3, [r4, #4]
 80074ae:	6054      	str	r4, [r2, #4]
 80074b0:	e7cb      	b.n	800744a <_free_r+0x22>
 80074b2:	bd38      	pop	{r3, r4, r5, pc}
 80074b4:	2000162c 	.word	0x2000162c

080074b8 <sbrk_aligned>:
 80074b8:	b570      	push	{r4, r5, r6, lr}
 80074ba:	4e0f      	ldr	r6, [pc, #60]	@ (80074f8 <sbrk_aligned+0x40>)
 80074bc:	460c      	mov	r4, r1
 80074be:	6831      	ldr	r1, [r6, #0]
 80074c0:	4605      	mov	r5, r0
 80074c2:	b911      	cbnz	r1, 80074ca <sbrk_aligned+0x12>
 80074c4:	f000 fca4 	bl	8007e10 <_sbrk_r>
 80074c8:	6030      	str	r0, [r6, #0]
 80074ca:	4621      	mov	r1, r4
 80074cc:	4628      	mov	r0, r5
 80074ce:	f000 fc9f 	bl	8007e10 <_sbrk_r>
 80074d2:	1c43      	adds	r3, r0, #1
 80074d4:	d103      	bne.n	80074de <sbrk_aligned+0x26>
 80074d6:	f04f 34ff 	mov.w	r4, #4294967295
 80074da:	4620      	mov	r0, r4
 80074dc:	bd70      	pop	{r4, r5, r6, pc}
 80074de:	1cc4      	adds	r4, r0, #3
 80074e0:	f024 0403 	bic.w	r4, r4, #3
 80074e4:	42a0      	cmp	r0, r4
 80074e6:	d0f8      	beq.n	80074da <sbrk_aligned+0x22>
 80074e8:	1a21      	subs	r1, r4, r0
 80074ea:	4628      	mov	r0, r5
 80074ec:	f000 fc90 	bl	8007e10 <_sbrk_r>
 80074f0:	3001      	adds	r0, #1
 80074f2:	d1f2      	bne.n	80074da <sbrk_aligned+0x22>
 80074f4:	e7ef      	b.n	80074d6 <sbrk_aligned+0x1e>
 80074f6:	bf00      	nop
 80074f8:	20001628 	.word	0x20001628

080074fc <_malloc_r>:
 80074fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007500:	1ccd      	adds	r5, r1, #3
 8007502:	f025 0503 	bic.w	r5, r5, #3
 8007506:	3508      	adds	r5, #8
 8007508:	2d0c      	cmp	r5, #12
 800750a:	bf38      	it	cc
 800750c:	250c      	movcc	r5, #12
 800750e:	2d00      	cmp	r5, #0
 8007510:	4606      	mov	r6, r0
 8007512:	db01      	blt.n	8007518 <_malloc_r+0x1c>
 8007514:	42a9      	cmp	r1, r5
 8007516:	d904      	bls.n	8007522 <_malloc_r+0x26>
 8007518:	230c      	movs	r3, #12
 800751a:	6033      	str	r3, [r6, #0]
 800751c:	2000      	movs	r0, #0
 800751e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007522:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075f8 <_malloc_r+0xfc>
 8007526:	f000 f869 	bl	80075fc <__malloc_lock>
 800752a:	f8d8 3000 	ldr.w	r3, [r8]
 800752e:	461c      	mov	r4, r3
 8007530:	bb44      	cbnz	r4, 8007584 <_malloc_r+0x88>
 8007532:	4629      	mov	r1, r5
 8007534:	4630      	mov	r0, r6
 8007536:	f7ff ffbf 	bl	80074b8 <sbrk_aligned>
 800753a:	1c43      	adds	r3, r0, #1
 800753c:	4604      	mov	r4, r0
 800753e:	d158      	bne.n	80075f2 <_malloc_r+0xf6>
 8007540:	f8d8 4000 	ldr.w	r4, [r8]
 8007544:	4627      	mov	r7, r4
 8007546:	2f00      	cmp	r7, #0
 8007548:	d143      	bne.n	80075d2 <_malloc_r+0xd6>
 800754a:	2c00      	cmp	r4, #0
 800754c:	d04b      	beq.n	80075e6 <_malloc_r+0xea>
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	4639      	mov	r1, r7
 8007552:	4630      	mov	r0, r6
 8007554:	eb04 0903 	add.w	r9, r4, r3
 8007558:	f000 fc5a 	bl	8007e10 <_sbrk_r>
 800755c:	4581      	cmp	r9, r0
 800755e:	d142      	bne.n	80075e6 <_malloc_r+0xea>
 8007560:	6821      	ldr	r1, [r4, #0]
 8007562:	4630      	mov	r0, r6
 8007564:	1a6d      	subs	r5, r5, r1
 8007566:	4629      	mov	r1, r5
 8007568:	f7ff ffa6 	bl	80074b8 <sbrk_aligned>
 800756c:	3001      	adds	r0, #1
 800756e:	d03a      	beq.n	80075e6 <_malloc_r+0xea>
 8007570:	6823      	ldr	r3, [r4, #0]
 8007572:	442b      	add	r3, r5
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	f8d8 3000 	ldr.w	r3, [r8]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	bb62      	cbnz	r2, 80075d8 <_malloc_r+0xdc>
 800757e:	f8c8 7000 	str.w	r7, [r8]
 8007582:	e00f      	b.n	80075a4 <_malloc_r+0xa8>
 8007584:	6822      	ldr	r2, [r4, #0]
 8007586:	1b52      	subs	r2, r2, r5
 8007588:	d420      	bmi.n	80075cc <_malloc_r+0xd0>
 800758a:	2a0b      	cmp	r2, #11
 800758c:	d917      	bls.n	80075be <_malloc_r+0xc2>
 800758e:	1961      	adds	r1, r4, r5
 8007590:	42a3      	cmp	r3, r4
 8007592:	6025      	str	r5, [r4, #0]
 8007594:	bf18      	it	ne
 8007596:	6059      	strne	r1, [r3, #4]
 8007598:	6863      	ldr	r3, [r4, #4]
 800759a:	bf08      	it	eq
 800759c:	f8c8 1000 	streq.w	r1, [r8]
 80075a0:	5162      	str	r2, [r4, r5]
 80075a2:	604b      	str	r3, [r1, #4]
 80075a4:	4630      	mov	r0, r6
 80075a6:	f000 f82f 	bl	8007608 <__malloc_unlock>
 80075aa:	f104 000b 	add.w	r0, r4, #11
 80075ae:	1d23      	adds	r3, r4, #4
 80075b0:	f020 0007 	bic.w	r0, r0, #7
 80075b4:	1ac2      	subs	r2, r0, r3
 80075b6:	bf1c      	itt	ne
 80075b8:	1a1b      	subne	r3, r3, r0
 80075ba:	50a3      	strne	r3, [r4, r2]
 80075bc:	e7af      	b.n	800751e <_malloc_r+0x22>
 80075be:	6862      	ldr	r2, [r4, #4]
 80075c0:	42a3      	cmp	r3, r4
 80075c2:	bf0c      	ite	eq
 80075c4:	f8c8 2000 	streq.w	r2, [r8]
 80075c8:	605a      	strne	r2, [r3, #4]
 80075ca:	e7eb      	b.n	80075a4 <_malloc_r+0xa8>
 80075cc:	4623      	mov	r3, r4
 80075ce:	6864      	ldr	r4, [r4, #4]
 80075d0:	e7ae      	b.n	8007530 <_malloc_r+0x34>
 80075d2:	463c      	mov	r4, r7
 80075d4:	687f      	ldr	r7, [r7, #4]
 80075d6:	e7b6      	b.n	8007546 <_malloc_r+0x4a>
 80075d8:	461a      	mov	r2, r3
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	42a3      	cmp	r3, r4
 80075de:	d1fb      	bne.n	80075d8 <_malloc_r+0xdc>
 80075e0:	2300      	movs	r3, #0
 80075e2:	6053      	str	r3, [r2, #4]
 80075e4:	e7de      	b.n	80075a4 <_malloc_r+0xa8>
 80075e6:	230c      	movs	r3, #12
 80075e8:	4630      	mov	r0, r6
 80075ea:	6033      	str	r3, [r6, #0]
 80075ec:	f000 f80c 	bl	8007608 <__malloc_unlock>
 80075f0:	e794      	b.n	800751c <_malloc_r+0x20>
 80075f2:	6005      	str	r5, [r0, #0]
 80075f4:	e7d6      	b.n	80075a4 <_malloc_r+0xa8>
 80075f6:	bf00      	nop
 80075f8:	2000162c 	.word	0x2000162c

080075fc <__malloc_lock>:
 80075fc:	4801      	ldr	r0, [pc, #4]	@ (8007604 <__malloc_lock+0x8>)
 80075fe:	f7ff bf10 	b.w	8007422 <__retarget_lock_acquire_recursive>
 8007602:	bf00      	nop
 8007604:	20001624 	.word	0x20001624

08007608 <__malloc_unlock>:
 8007608:	4801      	ldr	r0, [pc, #4]	@ (8007610 <__malloc_unlock+0x8>)
 800760a:	f7ff bf0b 	b.w	8007424 <__retarget_lock_release_recursive>
 800760e:	bf00      	nop
 8007610:	20001624 	.word	0x20001624

08007614 <__sfputc_r>:
 8007614:	6893      	ldr	r3, [r2, #8]
 8007616:	b410      	push	{r4}
 8007618:	3b01      	subs	r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	6093      	str	r3, [r2, #8]
 800761e:	da07      	bge.n	8007630 <__sfputc_r+0x1c>
 8007620:	6994      	ldr	r4, [r2, #24]
 8007622:	42a3      	cmp	r3, r4
 8007624:	db01      	blt.n	800762a <__sfputc_r+0x16>
 8007626:	290a      	cmp	r1, #10
 8007628:	d102      	bne.n	8007630 <__sfputc_r+0x1c>
 800762a:	bc10      	pop	{r4}
 800762c:	f7ff bdeb 	b.w	8007206 <__swbuf_r>
 8007630:	6813      	ldr	r3, [r2, #0]
 8007632:	1c58      	adds	r0, r3, #1
 8007634:	6010      	str	r0, [r2, #0]
 8007636:	7019      	strb	r1, [r3, #0]
 8007638:	4608      	mov	r0, r1
 800763a:	bc10      	pop	{r4}
 800763c:	4770      	bx	lr

0800763e <__sfputs_r>:
 800763e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007640:	4606      	mov	r6, r0
 8007642:	460f      	mov	r7, r1
 8007644:	4614      	mov	r4, r2
 8007646:	18d5      	adds	r5, r2, r3
 8007648:	42ac      	cmp	r4, r5
 800764a:	d101      	bne.n	8007650 <__sfputs_r+0x12>
 800764c:	2000      	movs	r0, #0
 800764e:	e007      	b.n	8007660 <__sfputs_r+0x22>
 8007650:	463a      	mov	r2, r7
 8007652:	4630      	mov	r0, r6
 8007654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007658:	f7ff ffdc 	bl	8007614 <__sfputc_r>
 800765c:	1c43      	adds	r3, r0, #1
 800765e:	d1f3      	bne.n	8007648 <__sfputs_r+0xa>
 8007660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007664 <_vfiprintf_r>:
 8007664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007668:	460d      	mov	r5, r1
 800766a:	4614      	mov	r4, r2
 800766c:	4698      	mov	r8, r3
 800766e:	4606      	mov	r6, r0
 8007670:	b09d      	sub	sp, #116	@ 0x74
 8007672:	b118      	cbz	r0, 800767c <_vfiprintf_r+0x18>
 8007674:	6a03      	ldr	r3, [r0, #32]
 8007676:	b90b      	cbnz	r3, 800767c <_vfiprintf_r+0x18>
 8007678:	f7ff fcdc 	bl	8007034 <__sinit>
 800767c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800767e:	07d9      	lsls	r1, r3, #31
 8007680:	d405      	bmi.n	800768e <_vfiprintf_r+0x2a>
 8007682:	89ab      	ldrh	r3, [r5, #12]
 8007684:	059a      	lsls	r2, r3, #22
 8007686:	d402      	bmi.n	800768e <_vfiprintf_r+0x2a>
 8007688:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800768a:	f7ff feca 	bl	8007422 <__retarget_lock_acquire_recursive>
 800768e:	89ab      	ldrh	r3, [r5, #12]
 8007690:	071b      	lsls	r3, r3, #28
 8007692:	d501      	bpl.n	8007698 <_vfiprintf_r+0x34>
 8007694:	692b      	ldr	r3, [r5, #16]
 8007696:	b99b      	cbnz	r3, 80076c0 <_vfiprintf_r+0x5c>
 8007698:	4629      	mov	r1, r5
 800769a:	4630      	mov	r0, r6
 800769c:	f7ff fdf2 	bl	8007284 <__swsetup_r>
 80076a0:	b170      	cbz	r0, 80076c0 <_vfiprintf_r+0x5c>
 80076a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076a4:	07dc      	lsls	r4, r3, #31
 80076a6:	d504      	bpl.n	80076b2 <_vfiprintf_r+0x4e>
 80076a8:	f04f 30ff 	mov.w	r0, #4294967295
 80076ac:	b01d      	add	sp, #116	@ 0x74
 80076ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b2:	89ab      	ldrh	r3, [r5, #12]
 80076b4:	0598      	lsls	r0, r3, #22
 80076b6:	d4f7      	bmi.n	80076a8 <_vfiprintf_r+0x44>
 80076b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076ba:	f7ff feb3 	bl	8007424 <__retarget_lock_release_recursive>
 80076be:	e7f3      	b.n	80076a8 <_vfiprintf_r+0x44>
 80076c0:	2300      	movs	r3, #0
 80076c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80076c4:	2320      	movs	r3, #32
 80076c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076ca:	2330      	movs	r3, #48	@ 0x30
 80076cc:	f04f 0901 	mov.w	r9, #1
 80076d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80076d4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007880 <_vfiprintf_r+0x21c>
 80076d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076dc:	4623      	mov	r3, r4
 80076de:	469a      	mov	sl, r3
 80076e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076e4:	b10a      	cbz	r2, 80076ea <_vfiprintf_r+0x86>
 80076e6:	2a25      	cmp	r2, #37	@ 0x25
 80076e8:	d1f9      	bne.n	80076de <_vfiprintf_r+0x7a>
 80076ea:	ebba 0b04 	subs.w	fp, sl, r4
 80076ee:	d00b      	beq.n	8007708 <_vfiprintf_r+0xa4>
 80076f0:	465b      	mov	r3, fp
 80076f2:	4622      	mov	r2, r4
 80076f4:	4629      	mov	r1, r5
 80076f6:	4630      	mov	r0, r6
 80076f8:	f7ff ffa1 	bl	800763e <__sfputs_r>
 80076fc:	3001      	adds	r0, #1
 80076fe:	f000 80a7 	beq.w	8007850 <_vfiprintf_r+0x1ec>
 8007702:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007704:	445a      	add	r2, fp
 8007706:	9209      	str	r2, [sp, #36]	@ 0x24
 8007708:	f89a 3000 	ldrb.w	r3, [sl]
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 809f 	beq.w	8007850 <_vfiprintf_r+0x1ec>
 8007712:	2300      	movs	r3, #0
 8007714:	f04f 32ff 	mov.w	r2, #4294967295
 8007718:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800771c:	f10a 0a01 	add.w	sl, sl, #1
 8007720:	9304      	str	r3, [sp, #16]
 8007722:	9307      	str	r3, [sp, #28]
 8007724:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007728:	931a      	str	r3, [sp, #104]	@ 0x68
 800772a:	4654      	mov	r4, sl
 800772c:	2205      	movs	r2, #5
 800772e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007732:	4853      	ldr	r0, [pc, #332]	@ (8007880 <_vfiprintf_r+0x21c>)
 8007734:	f000 fb7c 	bl	8007e30 <memchr>
 8007738:	9a04      	ldr	r2, [sp, #16]
 800773a:	b9d8      	cbnz	r0, 8007774 <_vfiprintf_r+0x110>
 800773c:	06d1      	lsls	r1, r2, #27
 800773e:	bf44      	itt	mi
 8007740:	2320      	movmi	r3, #32
 8007742:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007746:	0713      	lsls	r3, r2, #28
 8007748:	bf44      	itt	mi
 800774a:	232b      	movmi	r3, #43	@ 0x2b
 800774c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007750:	f89a 3000 	ldrb.w	r3, [sl]
 8007754:	2b2a      	cmp	r3, #42	@ 0x2a
 8007756:	d015      	beq.n	8007784 <_vfiprintf_r+0x120>
 8007758:	4654      	mov	r4, sl
 800775a:	2000      	movs	r0, #0
 800775c:	f04f 0c0a 	mov.w	ip, #10
 8007760:	9a07      	ldr	r2, [sp, #28]
 8007762:	4621      	mov	r1, r4
 8007764:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007768:	3b30      	subs	r3, #48	@ 0x30
 800776a:	2b09      	cmp	r3, #9
 800776c:	d94b      	bls.n	8007806 <_vfiprintf_r+0x1a2>
 800776e:	b1b0      	cbz	r0, 800779e <_vfiprintf_r+0x13a>
 8007770:	9207      	str	r2, [sp, #28]
 8007772:	e014      	b.n	800779e <_vfiprintf_r+0x13a>
 8007774:	eba0 0308 	sub.w	r3, r0, r8
 8007778:	fa09 f303 	lsl.w	r3, r9, r3
 800777c:	4313      	orrs	r3, r2
 800777e:	46a2      	mov	sl, r4
 8007780:	9304      	str	r3, [sp, #16]
 8007782:	e7d2      	b.n	800772a <_vfiprintf_r+0xc6>
 8007784:	9b03      	ldr	r3, [sp, #12]
 8007786:	1d19      	adds	r1, r3, #4
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	9103      	str	r1, [sp, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	bfbb      	ittet	lt
 8007790:	425b      	neglt	r3, r3
 8007792:	f042 0202 	orrlt.w	r2, r2, #2
 8007796:	9307      	strge	r3, [sp, #28]
 8007798:	9307      	strlt	r3, [sp, #28]
 800779a:	bfb8      	it	lt
 800779c:	9204      	strlt	r2, [sp, #16]
 800779e:	7823      	ldrb	r3, [r4, #0]
 80077a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80077a2:	d10a      	bne.n	80077ba <_vfiprintf_r+0x156>
 80077a4:	7863      	ldrb	r3, [r4, #1]
 80077a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80077a8:	d132      	bne.n	8007810 <_vfiprintf_r+0x1ac>
 80077aa:	9b03      	ldr	r3, [sp, #12]
 80077ac:	3402      	adds	r4, #2
 80077ae:	1d1a      	adds	r2, r3, #4
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	9203      	str	r2, [sp, #12]
 80077b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077b8:	9305      	str	r3, [sp, #20]
 80077ba:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007884 <_vfiprintf_r+0x220>
 80077be:	2203      	movs	r2, #3
 80077c0:	4650      	mov	r0, sl
 80077c2:	7821      	ldrb	r1, [r4, #0]
 80077c4:	f000 fb34 	bl	8007e30 <memchr>
 80077c8:	b138      	cbz	r0, 80077da <_vfiprintf_r+0x176>
 80077ca:	2240      	movs	r2, #64	@ 0x40
 80077cc:	9b04      	ldr	r3, [sp, #16]
 80077ce:	eba0 000a 	sub.w	r0, r0, sl
 80077d2:	4082      	lsls	r2, r0
 80077d4:	4313      	orrs	r3, r2
 80077d6:	3401      	adds	r4, #1
 80077d8:	9304      	str	r3, [sp, #16]
 80077da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077de:	2206      	movs	r2, #6
 80077e0:	4829      	ldr	r0, [pc, #164]	@ (8007888 <_vfiprintf_r+0x224>)
 80077e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077e6:	f000 fb23 	bl	8007e30 <memchr>
 80077ea:	2800      	cmp	r0, #0
 80077ec:	d03f      	beq.n	800786e <_vfiprintf_r+0x20a>
 80077ee:	4b27      	ldr	r3, [pc, #156]	@ (800788c <_vfiprintf_r+0x228>)
 80077f0:	bb1b      	cbnz	r3, 800783a <_vfiprintf_r+0x1d6>
 80077f2:	9b03      	ldr	r3, [sp, #12]
 80077f4:	3307      	adds	r3, #7
 80077f6:	f023 0307 	bic.w	r3, r3, #7
 80077fa:	3308      	adds	r3, #8
 80077fc:	9303      	str	r3, [sp, #12]
 80077fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007800:	443b      	add	r3, r7
 8007802:	9309      	str	r3, [sp, #36]	@ 0x24
 8007804:	e76a      	b.n	80076dc <_vfiprintf_r+0x78>
 8007806:	460c      	mov	r4, r1
 8007808:	2001      	movs	r0, #1
 800780a:	fb0c 3202 	mla	r2, ip, r2, r3
 800780e:	e7a8      	b.n	8007762 <_vfiprintf_r+0xfe>
 8007810:	2300      	movs	r3, #0
 8007812:	f04f 0c0a 	mov.w	ip, #10
 8007816:	4619      	mov	r1, r3
 8007818:	3401      	adds	r4, #1
 800781a:	9305      	str	r3, [sp, #20]
 800781c:	4620      	mov	r0, r4
 800781e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007822:	3a30      	subs	r2, #48	@ 0x30
 8007824:	2a09      	cmp	r2, #9
 8007826:	d903      	bls.n	8007830 <_vfiprintf_r+0x1cc>
 8007828:	2b00      	cmp	r3, #0
 800782a:	d0c6      	beq.n	80077ba <_vfiprintf_r+0x156>
 800782c:	9105      	str	r1, [sp, #20]
 800782e:	e7c4      	b.n	80077ba <_vfiprintf_r+0x156>
 8007830:	4604      	mov	r4, r0
 8007832:	2301      	movs	r3, #1
 8007834:	fb0c 2101 	mla	r1, ip, r1, r2
 8007838:	e7f0      	b.n	800781c <_vfiprintf_r+0x1b8>
 800783a:	ab03      	add	r3, sp, #12
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	462a      	mov	r2, r5
 8007840:	4630      	mov	r0, r6
 8007842:	4b13      	ldr	r3, [pc, #76]	@ (8007890 <_vfiprintf_r+0x22c>)
 8007844:	a904      	add	r1, sp, #16
 8007846:	f3af 8000 	nop.w
 800784a:	4607      	mov	r7, r0
 800784c:	1c78      	adds	r0, r7, #1
 800784e:	d1d6      	bne.n	80077fe <_vfiprintf_r+0x19a>
 8007850:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007852:	07d9      	lsls	r1, r3, #31
 8007854:	d405      	bmi.n	8007862 <_vfiprintf_r+0x1fe>
 8007856:	89ab      	ldrh	r3, [r5, #12]
 8007858:	059a      	lsls	r2, r3, #22
 800785a:	d402      	bmi.n	8007862 <_vfiprintf_r+0x1fe>
 800785c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800785e:	f7ff fde1 	bl	8007424 <__retarget_lock_release_recursive>
 8007862:	89ab      	ldrh	r3, [r5, #12]
 8007864:	065b      	lsls	r3, r3, #25
 8007866:	f53f af1f 	bmi.w	80076a8 <_vfiprintf_r+0x44>
 800786a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800786c:	e71e      	b.n	80076ac <_vfiprintf_r+0x48>
 800786e:	ab03      	add	r3, sp, #12
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	462a      	mov	r2, r5
 8007874:	4630      	mov	r0, r6
 8007876:	4b06      	ldr	r3, [pc, #24]	@ (8007890 <_vfiprintf_r+0x22c>)
 8007878:	a904      	add	r1, sp, #16
 800787a:	f000 f87d 	bl	8007978 <_printf_i>
 800787e:	e7e4      	b.n	800784a <_vfiprintf_r+0x1e6>
 8007880:	08009642 	.word	0x08009642
 8007884:	08009648 	.word	0x08009648
 8007888:	0800964c 	.word	0x0800964c
 800788c:	00000000 	.word	0x00000000
 8007890:	0800763f 	.word	0x0800763f

08007894 <_printf_common>:
 8007894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007898:	4616      	mov	r6, r2
 800789a:	4698      	mov	r8, r3
 800789c:	688a      	ldr	r2, [r1, #8]
 800789e:	690b      	ldr	r3, [r1, #16]
 80078a0:	4607      	mov	r7, r0
 80078a2:	4293      	cmp	r3, r2
 80078a4:	bfb8      	it	lt
 80078a6:	4613      	movlt	r3, r2
 80078a8:	6033      	str	r3, [r6, #0]
 80078aa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80078ae:	460c      	mov	r4, r1
 80078b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078b4:	b10a      	cbz	r2, 80078ba <_printf_common+0x26>
 80078b6:	3301      	adds	r3, #1
 80078b8:	6033      	str	r3, [r6, #0]
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	0699      	lsls	r1, r3, #26
 80078be:	bf42      	ittt	mi
 80078c0:	6833      	ldrmi	r3, [r6, #0]
 80078c2:	3302      	addmi	r3, #2
 80078c4:	6033      	strmi	r3, [r6, #0]
 80078c6:	6825      	ldr	r5, [r4, #0]
 80078c8:	f015 0506 	ands.w	r5, r5, #6
 80078cc:	d106      	bne.n	80078dc <_printf_common+0x48>
 80078ce:	f104 0a19 	add.w	sl, r4, #25
 80078d2:	68e3      	ldr	r3, [r4, #12]
 80078d4:	6832      	ldr	r2, [r6, #0]
 80078d6:	1a9b      	subs	r3, r3, r2
 80078d8:	42ab      	cmp	r3, r5
 80078da:	dc2b      	bgt.n	8007934 <_printf_common+0xa0>
 80078dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078e0:	6822      	ldr	r2, [r4, #0]
 80078e2:	3b00      	subs	r3, #0
 80078e4:	bf18      	it	ne
 80078e6:	2301      	movne	r3, #1
 80078e8:	0692      	lsls	r2, r2, #26
 80078ea:	d430      	bmi.n	800794e <_printf_common+0xba>
 80078ec:	4641      	mov	r1, r8
 80078ee:	4638      	mov	r0, r7
 80078f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078f4:	47c8      	blx	r9
 80078f6:	3001      	adds	r0, #1
 80078f8:	d023      	beq.n	8007942 <_printf_common+0xae>
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	6922      	ldr	r2, [r4, #16]
 80078fe:	f003 0306 	and.w	r3, r3, #6
 8007902:	2b04      	cmp	r3, #4
 8007904:	bf14      	ite	ne
 8007906:	2500      	movne	r5, #0
 8007908:	6833      	ldreq	r3, [r6, #0]
 800790a:	f04f 0600 	mov.w	r6, #0
 800790e:	bf08      	it	eq
 8007910:	68e5      	ldreq	r5, [r4, #12]
 8007912:	f104 041a 	add.w	r4, r4, #26
 8007916:	bf08      	it	eq
 8007918:	1aed      	subeq	r5, r5, r3
 800791a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800791e:	bf08      	it	eq
 8007920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007924:	4293      	cmp	r3, r2
 8007926:	bfc4      	itt	gt
 8007928:	1a9b      	subgt	r3, r3, r2
 800792a:	18ed      	addgt	r5, r5, r3
 800792c:	42b5      	cmp	r5, r6
 800792e:	d11a      	bne.n	8007966 <_printf_common+0xd2>
 8007930:	2000      	movs	r0, #0
 8007932:	e008      	b.n	8007946 <_printf_common+0xb2>
 8007934:	2301      	movs	r3, #1
 8007936:	4652      	mov	r2, sl
 8007938:	4641      	mov	r1, r8
 800793a:	4638      	mov	r0, r7
 800793c:	47c8      	blx	r9
 800793e:	3001      	adds	r0, #1
 8007940:	d103      	bne.n	800794a <_printf_common+0xb6>
 8007942:	f04f 30ff 	mov.w	r0, #4294967295
 8007946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800794a:	3501      	adds	r5, #1
 800794c:	e7c1      	b.n	80078d2 <_printf_common+0x3e>
 800794e:	2030      	movs	r0, #48	@ 0x30
 8007950:	18e1      	adds	r1, r4, r3
 8007952:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800795c:	4422      	add	r2, r4
 800795e:	3302      	adds	r3, #2
 8007960:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007964:	e7c2      	b.n	80078ec <_printf_common+0x58>
 8007966:	2301      	movs	r3, #1
 8007968:	4622      	mov	r2, r4
 800796a:	4641      	mov	r1, r8
 800796c:	4638      	mov	r0, r7
 800796e:	47c8      	blx	r9
 8007970:	3001      	adds	r0, #1
 8007972:	d0e6      	beq.n	8007942 <_printf_common+0xae>
 8007974:	3601      	adds	r6, #1
 8007976:	e7d9      	b.n	800792c <_printf_common+0x98>

08007978 <_printf_i>:
 8007978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800797c:	7e0f      	ldrb	r7, [r1, #24]
 800797e:	4691      	mov	r9, r2
 8007980:	2f78      	cmp	r7, #120	@ 0x78
 8007982:	4680      	mov	r8, r0
 8007984:	460c      	mov	r4, r1
 8007986:	469a      	mov	sl, r3
 8007988:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800798a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800798e:	d807      	bhi.n	80079a0 <_printf_i+0x28>
 8007990:	2f62      	cmp	r7, #98	@ 0x62
 8007992:	d80a      	bhi.n	80079aa <_printf_i+0x32>
 8007994:	2f00      	cmp	r7, #0
 8007996:	f000 80d3 	beq.w	8007b40 <_printf_i+0x1c8>
 800799a:	2f58      	cmp	r7, #88	@ 0x58
 800799c:	f000 80ba 	beq.w	8007b14 <_printf_i+0x19c>
 80079a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80079a8:	e03a      	b.n	8007a20 <_printf_i+0xa8>
 80079aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80079ae:	2b15      	cmp	r3, #21
 80079b0:	d8f6      	bhi.n	80079a0 <_printf_i+0x28>
 80079b2:	a101      	add	r1, pc, #4	@ (adr r1, 80079b8 <_printf_i+0x40>)
 80079b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079b8:	08007a11 	.word	0x08007a11
 80079bc:	08007a25 	.word	0x08007a25
 80079c0:	080079a1 	.word	0x080079a1
 80079c4:	080079a1 	.word	0x080079a1
 80079c8:	080079a1 	.word	0x080079a1
 80079cc:	080079a1 	.word	0x080079a1
 80079d0:	08007a25 	.word	0x08007a25
 80079d4:	080079a1 	.word	0x080079a1
 80079d8:	080079a1 	.word	0x080079a1
 80079dc:	080079a1 	.word	0x080079a1
 80079e0:	080079a1 	.word	0x080079a1
 80079e4:	08007b27 	.word	0x08007b27
 80079e8:	08007a4f 	.word	0x08007a4f
 80079ec:	08007ae1 	.word	0x08007ae1
 80079f0:	080079a1 	.word	0x080079a1
 80079f4:	080079a1 	.word	0x080079a1
 80079f8:	08007b49 	.word	0x08007b49
 80079fc:	080079a1 	.word	0x080079a1
 8007a00:	08007a4f 	.word	0x08007a4f
 8007a04:	080079a1 	.word	0x080079a1
 8007a08:	080079a1 	.word	0x080079a1
 8007a0c:	08007ae9 	.word	0x08007ae9
 8007a10:	6833      	ldr	r3, [r6, #0]
 8007a12:	1d1a      	adds	r2, r3, #4
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6032      	str	r2, [r6, #0]
 8007a18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a20:	2301      	movs	r3, #1
 8007a22:	e09e      	b.n	8007b62 <_printf_i+0x1ea>
 8007a24:	6833      	ldr	r3, [r6, #0]
 8007a26:	6820      	ldr	r0, [r4, #0]
 8007a28:	1d19      	adds	r1, r3, #4
 8007a2a:	6031      	str	r1, [r6, #0]
 8007a2c:	0606      	lsls	r6, r0, #24
 8007a2e:	d501      	bpl.n	8007a34 <_printf_i+0xbc>
 8007a30:	681d      	ldr	r5, [r3, #0]
 8007a32:	e003      	b.n	8007a3c <_printf_i+0xc4>
 8007a34:	0645      	lsls	r5, r0, #25
 8007a36:	d5fb      	bpl.n	8007a30 <_printf_i+0xb8>
 8007a38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a3c:	2d00      	cmp	r5, #0
 8007a3e:	da03      	bge.n	8007a48 <_printf_i+0xd0>
 8007a40:	232d      	movs	r3, #45	@ 0x2d
 8007a42:	426d      	negs	r5, r5
 8007a44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a48:	230a      	movs	r3, #10
 8007a4a:	4859      	ldr	r0, [pc, #356]	@ (8007bb0 <_printf_i+0x238>)
 8007a4c:	e011      	b.n	8007a72 <_printf_i+0xfa>
 8007a4e:	6821      	ldr	r1, [r4, #0]
 8007a50:	6833      	ldr	r3, [r6, #0]
 8007a52:	0608      	lsls	r0, r1, #24
 8007a54:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a58:	d402      	bmi.n	8007a60 <_printf_i+0xe8>
 8007a5a:	0649      	lsls	r1, r1, #25
 8007a5c:	bf48      	it	mi
 8007a5e:	b2ad      	uxthmi	r5, r5
 8007a60:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a62:	6033      	str	r3, [r6, #0]
 8007a64:	bf14      	ite	ne
 8007a66:	230a      	movne	r3, #10
 8007a68:	2308      	moveq	r3, #8
 8007a6a:	4851      	ldr	r0, [pc, #324]	@ (8007bb0 <_printf_i+0x238>)
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a72:	6866      	ldr	r6, [r4, #4]
 8007a74:	2e00      	cmp	r6, #0
 8007a76:	bfa8      	it	ge
 8007a78:	6821      	ldrge	r1, [r4, #0]
 8007a7a:	60a6      	str	r6, [r4, #8]
 8007a7c:	bfa4      	itt	ge
 8007a7e:	f021 0104 	bicge.w	r1, r1, #4
 8007a82:	6021      	strge	r1, [r4, #0]
 8007a84:	b90d      	cbnz	r5, 8007a8a <_printf_i+0x112>
 8007a86:	2e00      	cmp	r6, #0
 8007a88:	d04b      	beq.n	8007b22 <_printf_i+0x1aa>
 8007a8a:	4616      	mov	r6, r2
 8007a8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a90:	fb03 5711 	mls	r7, r3, r1, r5
 8007a94:	5dc7      	ldrb	r7, [r0, r7]
 8007a96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a9a:	462f      	mov	r7, r5
 8007a9c:	42bb      	cmp	r3, r7
 8007a9e:	460d      	mov	r5, r1
 8007aa0:	d9f4      	bls.n	8007a8c <_printf_i+0x114>
 8007aa2:	2b08      	cmp	r3, #8
 8007aa4:	d10b      	bne.n	8007abe <_printf_i+0x146>
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	07df      	lsls	r7, r3, #31
 8007aaa:	d508      	bpl.n	8007abe <_printf_i+0x146>
 8007aac:	6923      	ldr	r3, [r4, #16]
 8007aae:	6861      	ldr	r1, [r4, #4]
 8007ab0:	4299      	cmp	r1, r3
 8007ab2:	bfde      	ittt	le
 8007ab4:	2330      	movle	r3, #48	@ 0x30
 8007ab6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007aba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007abe:	1b92      	subs	r2, r2, r6
 8007ac0:	6122      	str	r2, [r4, #16]
 8007ac2:	464b      	mov	r3, r9
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	4640      	mov	r0, r8
 8007ac8:	f8cd a000 	str.w	sl, [sp]
 8007acc:	aa03      	add	r2, sp, #12
 8007ace:	f7ff fee1 	bl	8007894 <_printf_common>
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	d14a      	bne.n	8007b6c <_printf_i+0x1f4>
 8007ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8007ada:	b004      	add	sp, #16
 8007adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae0:	6823      	ldr	r3, [r4, #0]
 8007ae2:	f043 0320 	orr.w	r3, r3, #32
 8007ae6:	6023      	str	r3, [r4, #0]
 8007ae8:	2778      	movs	r7, #120	@ 0x78
 8007aea:	4832      	ldr	r0, [pc, #200]	@ (8007bb4 <_printf_i+0x23c>)
 8007aec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	6831      	ldr	r1, [r6, #0]
 8007af4:	061f      	lsls	r7, r3, #24
 8007af6:	f851 5b04 	ldr.w	r5, [r1], #4
 8007afa:	d402      	bmi.n	8007b02 <_printf_i+0x18a>
 8007afc:	065f      	lsls	r7, r3, #25
 8007afe:	bf48      	it	mi
 8007b00:	b2ad      	uxthmi	r5, r5
 8007b02:	6031      	str	r1, [r6, #0]
 8007b04:	07d9      	lsls	r1, r3, #31
 8007b06:	bf44      	itt	mi
 8007b08:	f043 0320 	orrmi.w	r3, r3, #32
 8007b0c:	6023      	strmi	r3, [r4, #0]
 8007b0e:	b11d      	cbz	r5, 8007b18 <_printf_i+0x1a0>
 8007b10:	2310      	movs	r3, #16
 8007b12:	e7ab      	b.n	8007a6c <_printf_i+0xf4>
 8007b14:	4826      	ldr	r0, [pc, #152]	@ (8007bb0 <_printf_i+0x238>)
 8007b16:	e7e9      	b.n	8007aec <_printf_i+0x174>
 8007b18:	6823      	ldr	r3, [r4, #0]
 8007b1a:	f023 0320 	bic.w	r3, r3, #32
 8007b1e:	6023      	str	r3, [r4, #0]
 8007b20:	e7f6      	b.n	8007b10 <_printf_i+0x198>
 8007b22:	4616      	mov	r6, r2
 8007b24:	e7bd      	b.n	8007aa2 <_printf_i+0x12a>
 8007b26:	6833      	ldr	r3, [r6, #0]
 8007b28:	6825      	ldr	r5, [r4, #0]
 8007b2a:	1d18      	adds	r0, r3, #4
 8007b2c:	6961      	ldr	r1, [r4, #20]
 8007b2e:	6030      	str	r0, [r6, #0]
 8007b30:	062e      	lsls	r6, r5, #24
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	d501      	bpl.n	8007b3a <_printf_i+0x1c2>
 8007b36:	6019      	str	r1, [r3, #0]
 8007b38:	e002      	b.n	8007b40 <_printf_i+0x1c8>
 8007b3a:	0668      	lsls	r0, r5, #25
 8007b3c:	d5fb      	bpl.n	8007b36 <_printf_i+0x1be>
 8007b3e:	8019      	strh	r1, [r3, #0]
 8007b40:	2300      	movs	r3, #0
 8007b42:	4616      	mov	r6, r2
 8007b44:	6123      	str	r3, [r4, #16]
 8007b46:	e7bc      	b.n	8007ac2 <_printf_i+0x14a>
 8007b48:	6833      	ldr	r3, [r6, #0]
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	1d1a      	adds	r2, r3, #4
 8007b4e:	6032      	str	r2, [r6, #0]
 8007b50:	681e      	ldr	r6, [r3, #0]
 8007b52:	6862      	ldr	r2, [r4, #4]
 8007b54:	4630      	mov	r0, r6
 8007b56:	f000 f96b 	bl	8007e30 <memchr>
 8007b5a:	b108      	cbz	r0, 8007b60 <_printf_i+0x1e8>
 8007b5c:	1b80      	subs	r0, r0, r6
 8007b5e:	6060      	str	r0, [r4, #4]
 8007b60:	6863      	ldr	r3, [r4, #4]
 8007b62:	6123      	str	r3, [r4, #16]
 8007b64:	2300      	movs	r3, #0
 8007b66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b6a:	e7aa      	b.n	8007ac2 <_printf_i+0x14a>
 8007b6c:	4632      	mov	r2, r6
 8007b6e:	4649      	mov	r1, r9
 8007b70:	4640      	mov	r0, r8
 8007b72:	6923      	ldr	r3, [r4, #16]
 8007b74:	47d0      	blx	sl
 8007b76:	3001      	adds	r0, #1
 8007b78:	d0ad      	beq.n	8007ad6 <_printf_i+0x15e>
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	079b      	lsls	r3, r3, #30
 8007b7e:	d413      	bmi.n	8007ba8 <_printf_i+0x230>
 8007b80:	68e0      	ldr	r0, [r4, #12]
 8007b82:	9b03      	ldr	r3, [sp, #12]
 8007b84:	4298      	cmp	r0, r3
 8007b86:	bfb8      	it	lt
 8007b88:	4618      	movlt	r0, r3
 8007b8a:	e7a6      	b.n	8007ada <_printf_i+0x162>
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	4632      	mov	r2, r6
 8007b90:	4649      	mov	r1, r9
 8007b92:	4640      	mov	r0, r8
 8007b94:	47d0      	blx	sl
 8007b96:	3001      	adds	r0, #1
 8007b98:	d09d      	beq.n	8007ad6 <_printf_i+0x15e>
 8007b9a:	3501      	adds	r5, #1
 8007b9c:	68e3      	ldr	r3, [r4, #12]
 8007b9e:	9903      	ldr	r1, [sp, #12]
 8007ba0:	1a5b      	subs	r3, r3, r1
 8007ba2:	42ab      	cmp	r3, r5
 8007ba4:	dcf2      	bgt.n	8007b8c <_printf_i+0x214>
 8007ba6:	e7eb      	b.n	8007b80 <_printf_i+0x208>
 8007ba8:	2500      	movs	r5, #0
 8007baa:	f104 0619 	add.w	r6, r4, #25
 8007bae:	e7f5      	b.n	8007b9c <_printf_i+0x224>
 8007bb0:	08009653 	.word	0x08009653
 8007bb4:	08009664 	.word	0x08009664

08007bb8 <__sflush_r>:
 8007bb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bbe:	0716      	lsls	r6, r2, #28
 8007bc0:	4605      	mov	r5, r0
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	d454      	bmi.n	8007c70 <__sflush_r+0xb8>
 8007bc6:	684b      	ldr	r3, [r1, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	dc02      	bgt.n	8007bd2 <__sflush_r+0x1a>
 8007bcc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	dd48      	ble.n	8007c64 <__sflush_r+0xac>
 8007bd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bd4:	2e00      	cmp	r6, #0
 8007bd6:	d045      	beq.n	8007c64 <__sflush_r+0xac>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007bde:	682f      	ldr	r7, [r5, #0]
 8007be0:	6a21      	ldr	r1, [r4, #32]
 8007be2:	602b      	str	r3, [r5, #0]
 8007be4:	d030      	beq.n	8007c48 <__sflush_r+0x90>
 8007be6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007be8:	89a3      	ldrh	r3, [r4, #12]
 8007bea:	0759      	lsls	r1, r3, #29
 8007bec:	d505      	bpl.n	8007bfa <__sflush_r+0x42>
 8007bee:	6863      	ldr	r3, [r4, #4]
 8007bf0:	1ad2      	subs	r2, r2, r3
 8007bf2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007bf4:	b10b      	cbz	r3, 8007bfa <__sflush_r+0x42>
 8007bf6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007bf8:	1ad2      	subs	r2, r2, r3
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c00:	6a21      	ldr	r1, [r4, #32]
 8007c02:	47b0      	blx	r6
 8007c04:	1c43      	adds	r3, r0, #1
 8007c06:	89a3      	ldrh	r3, [r4, #12]
 8007c08:	d106      	bne.n	8007c18 <__sflush_r+0x60>
 8007c0a:	6829      	ldr	r1, [r5, #0]
 8007c0c:	291d      	cmp	r1, #29
 8007c0e:	d82b      	bhi.n	8007c68 <__sflush_r+0xb0>
 8007c10:	4a28      	ldr	r2, [pc, #160]	@ (8007cb4 <__sflush_r+0xfc>)
 8007c12:	410a      	asrs	r2, r1
 8007c14:	07d6      	lsls	r6, r2, #31
 8007c16:	d427      	bmi.n	8007c68 <__sflush_r+0xb0>
 8007c18:	2200      	movs	r2, #0
 8007c1a:	6062      	str	r2, [r4, #4]
 8007c1c:	6922      	ldr	r2, [r4, #16]
 8007c1e:	04d9      	lsls	r1, r3, #19
 8007c20:	6022      	str	r2, [r4, #0]
 8007c22:	d504      	bpl.n	8007c2e <__sflush_r+0x76>
 8007c24:	1c42      	adds	r2, r0, #1
 8007c26:	d101      	bne.n	8007c2c <__sflush_r+0x74>
 8007c28:	682b      	ldr	r3, [r5, #0]
 8007c2a:	b903      	cbnz	r3, 8007c2e <__sflush_r+0x76>
 8007c2c:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c2e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c30:	602f      	str	r7, [r5, #0]
 8007c32:	b1b9      	cbz	r1, 8007c64 <__sflush_r+0xac>
 8007c34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c38:	4299      	cmp	r1, r3
 8007c3a:	d002      	beq.n	8007c42 <__sflush_r+0x8a>
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f7ff fbf3 	bl	8007428 <_free_r>
 8007c42:	2300      	movs	r3, #0
 8007c44:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c46:	e00d      	b.n	8007c64 <__sflush_r+0xac>
 8007c48:	2301      	movs	r3, #1
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	47b0      	blx	r6
 8007c4e:	4602      	mov	r2, r0
 8007c50:	1c50      	adds	r0, r2, #1
 8007c52:	d1c9      	bne.n	8007be8 <__sflush_r+0x30>
 8007c54:	682b      	ldr	r3, [r5, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d0c6      	beq.n	8007be8 <__sflush_r+0x30>
 8007c5a:	2b1d      	cmp	r3, #29
 8007c5c:	d001      	beq.n	8007c62 <__sflush_r+0xaa>
 8007c5e:	2b16      	cmp	r3, #22
 8007c60:	d11d      	bne.n	8007c9e <__sflush_r+0xe6>
 8007c62:	602f      	str	r7, [r5, #0]
 8007c64:	2000      	movs	r0, #0
 8007c66:	e021      	b.n	8007cac <__sflush_r+0xf4>
 8007c68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c6c:	b21b      	sxth	r3, r3
 8007c6e:	e01a      	b.n	8007ca6 <__sflush_r+0xee>
 8007c70:	690f      	ldr	r7, [r1, #16]
 8007c72:	2f00      	cmp	r7, #0
 8007c74:	d0f6      	beq.n	8007c64 <__sflush_r+0xac>
 8007c76:	0793      	lsls	r3, r2, #30
 8007c78:	bf18      	it	ne
 8007c7a:	2300      	movne	r3, #0
 8007c7c:	680e      	ldr	r6, [r1, #0]
 8007c7e:	bf08      	it	eq
 8007c80:	694b      	ldreq	r3, [r1, #20]
 8007c82:	1bf6      	subs	r6, r6, r7
 8007c84:	600f      	str	r7, [r1, #0]
 8007c86:	608b      	str	r3, [r1, #8]
 8007c88:	2e00      	cmp	r6, #0
 8007c8a:	ddeb      	ble.n	8007c64 <__sflush_r+0xac>
 8007c8c:	4633      	mov	r3, r6
 8007c8e:	463a      	mov	r2, r7
 8007c90:	4628      	mov	r0, r5
 8007c92:	6a21      	ldr	r1, [r4, #32]
 8007c94:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007c98:	47e0      	blx	ip
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	dc07      	bgt.n	8007cae <__sflush_r+0xf6>
 8007c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ca2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8007caa:	81a3      	strh	r3, [r4, #12]
 8007cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cae:	4407      	add	r7, r0
 8007cb0:	1a36      	subs	r6, r6, r0
 8007cb2:	e7e9      	b.n	8007c88 <__sflush_r+0xd0>
 8007cb4:	dfbffffe 	.word	0xdfbffffe

08007cb8 <_fflush_r>:
 8007cb8:	b538      	push	{r3, r4, r5, lr}
 8007cba:	690b      	ldr	r3, [r1, #16]
 8007cbc:	4605      	mov	r5, r0
 8007cbe:	460c      	mov	r4, r1
 8007cc0:	b913      	cbnz	r3, 8007cc8 <_fflush_r+0x10>
 8007cc2:	2500      	movs	r5, #0
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	bd38      	pop	{r3, r4, r5, pc}
 8007cc8:	b118      	cbz	r0, 8007cd2 <_fflush_r+0x1a>
 8007cca:	6a03      	ldr	r3, [r0, #32]
 8007ccc:	b90b      	cbnz	r3, 8007cd2 <_fflush_r+0x1a>
 8007cce:	f7ff f9b1 	bl	8007034 <__sinit>
 8007cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d0f3      	beq.n	8007cc2 <_fflush_r+0xa>
 8007cda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007cdc:	07d0      	lsls	r0, r2, #31
 8007cde:	d404      	bmi.n	8007cea <_fflush_r+0x32>
 8007ce0:	0599      	lsls	r1, r3, #22
 8007ce2:	d402      	bmi.n	8007cea <_fflush_r+0x32>
 8007ce4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ce6:	f7ff fb9c 	bl	8007422 <__retarget_lock_acquire_recursive>
 8007cea:	4628      	mov	r0, r5
 8007cec:	4621      	mov	r1, r4
 8007cee:	f7ff ff63 	bl	8007bb8 <__sflush_r>
 8007cf2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cf4:	4605      	mov	r5, r0
 8007cf6:	07da      	lsls	r2, r3, #31
 8007cf8:	d4e4      	bmi.n	8007cc4 <_fflush_r+0xc>
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	059b      	lsls	r3, r3, #22
 8007cfe:	d4e1      	bmi.n	8007cc4 <_fflush_r+0xc>
 8007d00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d02:	f7ff fb8f 	bl	8007424 <__retarget_lock_release_recursive>
 8007d06:	e7dd      	b.n	8007cc4 <_fflush_r+0xc>

08007d08 <__swhatbuf_r>:
 8007d08:	b570      	push	{r4, r5, r6, lr}
 8007d0a:	460c      	mov	r4, r1
 8007d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d10:	4615      	mov	r5, r2
 8007d12:	2900      	cmp	r1, #0
 8007d14:	461e      	mov	r6, r3
 8007d16:	b096      	sub	sp, #88	@ 0x58
 8007d18:	da0c      	bge.n	8007d34 <__swhatbuf_r+0x2c>
 8007d1a:	89a3      	ldrh	r3, [r4, #12]
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d22:	bf14      	ite	ne
 8007d24:	2340      	movne	r3, #64	@ 0x40
 8007d26:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	6031      	str	r1, [r6, #0]
 8007d2e:	602b      	str	r3, [r5, #0]
 8007d30:	b016      	add	sp, #88	@ 0x58
 8007d32:	bd70      	pop	{r4, r5, r6, pc}
 8007d34:	466a      	mov	r2, sp
 8007d36:	f000 f849 	bl	8007dcc <_fstat_r>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	dbed      	blt.n	8007d1a <__swhatbuf_r+0x12>
 8007d3e:	9901      	ldr	r1, [sp, #4]
 8007d40:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007d44:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d48:	4259      	negs	r1, r3
 8007d4a:	4159      	adcs	r1, r3
 8007d4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d50:	e7eb      	b.n	8007d2a <__swhatbuf_r+0x22>

08007d52 <__smakebuf_r>:
 8007d52:	898b      	ldrh	r3, [r1, #12]
 8007d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d56:	079d      	lsls	r5, r3, #30
 8007d58:	4606      	mov	r6, r0
 8007d5a:	460c      	mov	r4, r1
 8007d5c:	d507      	bpl.n	8007d6e <__smakebuf_r+0x1c>
 8007d5e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007d62:	6023      	str	r3, [r4, #0]
 8007d64:	6123      	str	r3, [r4, #16]
 8007d66:	2301      	movs	r3, #1
 8007d68:	6163      	str	r3, [r4, #20]
 8007d6a:	b003      	add	sp, #12
 8007d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d6e:	466a      	mov	r2, sp
 8007d70:	ab01      	add	r3, sp, #4
 8007d72:	f7ff ffc9 	bl	8007d08 <__swhatbuf_r>
 8007d76:	9f00      	ldr	r7, [sp, #0]
 8007d78:	4605      	mov	r5, r0
 8007d7a:	4639      	mov	r1, r7
 8007d7c:	4630      	mov	r0, r6
 8007d7e:	f7ff fbbd 	bl	80074fc <_malloc_r>
 8007d82:	b948      	cbnz	r0, 8007d98 <__smakebuf_r+0x46>
 8007d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d88:	059a      	lsls	r2, r3, #22
 8007d8a:	d4ee      	bmi.n	8007d6a <__smakebuf_r+0x18>
 8007d8c:	f023 0303 	bic.w	r3, r3, #3
 8007d90:	f043 0302 	orr.w	r3, r3, #2
 8007d94:	81a3      	strh	r3, [r4, #12]
 8007d96:	e7e2      	b.n	8007d5e <__smakebuf_r+0xc>
 8007d98:	89a3      	ldrh	r3, [r4, #12]
 8007d9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007da2:	81a3      	strh	r3, [r4, #12]
 8007da4:	9b01      	ldr	r3, [sp, #4]
 8007da6:	6020      	str	r0, [r4, #0]
 8007da8:	b15b      	cbz	r3, 8007dc2 <__smakebuf_r+0x70>
 8007daa:	4630      	mov	r0, r6
 8007dac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007db0:	f000 f81e 	bl	8007df0 <_isatty_r>
 8007db4:	b128      	cbz	r0, 8007dc2 <__smakebuf_r+0x70>
 8007db6:	89a3      	ldrh	r3, [r4, #12]
 8007db8:	f023 0303 	bic.w	r3, r3, #3
 8007dbc:	f043 0301 	orr.w	r3, r3, #1
 8007dc0:	81a3      	strh	r3, [r4, #12]
 8007dc2:	89a3      	ldrh	r3, [r4, #12]
 8007dc4:	431d      	orrs	r5, r3
 8007dc6:	81a5      	strh	r5, [r4, #12]
 8007dc8:	e7cf      	b.n	8007d6a <__smakebuf_r+0x18>
	...

08007dcc <_fstat_r>:
 8007dcc:	b538      	push	{r3, r4, r5, lr}
 8007dce:	2300      	movs	r3, #0
 8007dd0:	4d06      	ldr	r5, [pc, #24]	@ (8007dec <_fstat_r+0x20>)
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	4608      	mov	r0, r1
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	602b      	str	r3, [r5, #0]
 8007dda:	f7fd f895 	bl	8004f08 <_fstat>
 8007dde:	1c43      	adds	r3, r0, #1
 8007de0:	d102      	bne.n	8007de8 <_fstat_r+0x1c>
 8007de2:	682b      	ldr	r3, [r5, #0]
 8007de4:	b103      	cbz	r3, 8007de8 <_fstat_r+0x1c>
 8007de6:	6023      	str	r3, [r4, #0]
 8007de8:	bd38      	pop	{r3, r4, r5, pc}
 8007dea:	bf00      	nop
 8007dec:	20001620 	.word	0x20001620

08007df0 <_isatty_r>:
 8007df0:	b538      	push	{r3, r4, r5, lr}
 8007df2:	2300      	movs	r3, #0
 8007df4:	4d05      	ldr	r5, [pc, #20]	@ (8007e0c <_isatty_r+0x1c>)
 8007df6:	4604      	mov	r4, r0
 8007df8:	4608      	mov	r0, r1
 8007dfa:	602b      	str	r3, [r5, #0]
 8007dfc:	f7fd f893 	bl	8004f26 <_isatty>
 8007e00:	1c43      	adds	r3, r0, #1
 8007e02:	d102      	bne.n	8007e0a <_isatty_r+0x1a>
 8007e04:	682b      	ldr	r3, [r5, #0]
 8007e06:	b103      	cbz	r3, 8007e0a <_isatty_r+0x1a>
 8007e08:	6023      	str	r3, [r4, #0]
 8007e0a:	bd38      	pop	{r3, r4, r5, pc}
 8007e0c:	20001620 	.word	0x20001620

08007e10 <_sbrk_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	2300      	movs	r3, #0
 8007e14:	4d05      	ldr	r5, [pc, #20]	@ (8007e2c <_sbrk_r+0x1c>)
 8007e16:	4604      	mov	r4, r0
 8007e18:	4608      	mov	r0, r1
 8007e1a:	602b      	str	r3, [r5, #0]
 8007e1c:	f7fd f89a 	bl	8004f54 <_sbrk>
 8007e20:	1c43      	adds	r3, r0, #1
 8007e22:	d102      	bne.n	8007e2a <_sbrk_r+0x1a>
 8007e24:	682b      	ldr	r3, [r5, #0]
 8007e26:	b103      	cbz	r3, 8007e2a <_sbrk_r+0x1a>
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	bd38      	pop	{r3, r4, r5, pc}
 8007e2c:	20001620 	.word	0x20001620

08007e30 <memchr>:
 8007e30:	4603      	mov	r3, r0
 8007e32:	b510      	push	{r4, lr}
 8007e34:	b2c9      	uxtb	r1, r1
 8007e36:	4402      	add	r2, r0
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	d101      	bne.n	8007e42 <memchr+0x12>
 8007e3e:	2000      	movs	r0, #0
 8007e40:	e003      	b.n	8007e4a <memchr+0x1a>
 8007e42:	7804      	ldrb	r4, [r0, #0]
 8007e44:	3301      	adds	r3, #1
 8007e46:	428c      	cmp	r4, r1
 8007e48:	d1f6      	bne.n	8007e38 <memchr+0x8>
 8007e4a:	bd10      	pop	{r4, pc}

08007e4c <pow>:
 8007e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e50:	4614      	mov	r4, r2
 8007e52:	461d      	mov	r5, r3
 8007e54:	4680      	mov	r8, r0
 8007e56:	4689      	mov	r9, r1
 8007e58:	f000 f91a 	bl	8008090 <__ieee754_pow>
 8007e5c:	4622      	mov	r2, r4
 8007e5e:	4606      	mov	r6, r0
 8007e60:	460f      	mov	r7, r1
 8007e62:	462b      	mov	r3, r5
 8007e64:	4620      	mov	r0, r4
 8007e66:	4629      	mov	r1, r5
 8007e68:	f7f8 fdc8 	bl	80009fc <__aeabi_dcmpun>
 8007e6c:	bbc8      	cbnz	r0, 8007ee2 <pow+0x96>
 8007e6e:	2200      	movs	r2, #0
 8007e70:	2300      	movs	r3, #0
 8007e72:	4640      	mov	r0, r8
 8007e74:	4649      	mov	r1, r9
 8007e76:	f7f8 fd8f 	bl	8000998 <__aeabi_dcmpeq>
 8007e7a:	b1b8      	cbz	r0, 8007eac <pow+0x60>
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2300      	movs	r3, #0
 8007e80:	4620      	mov	r0, r4
 8007e82:	4629      	mov	r1, r5
 8007e84:	f7f8 fd88 	bl	8000998 <__aeabi_dcmpeq>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	d141      	bne.n	8007f10 <pow+0xc4>
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	4629      	mov	r1, r5
 8007e90:	f000 f883 	bl	8007f9a <finite>
 8007e94:	b328      	cbz	r0, 8007ee2 <pow+0x96>
 8007e96:	2200      	movs	r2, #0
 8007e98:	2300      	movs	r3, #0
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	4629      	mov	r1, r5
 8007e9e:	f7f8 fd85 	bl	80009ac <__aeabi_dcmplt>
 8007ea2:	b1f0      	cbz	r0, 8007ee2 <pow+0x96>
 8007ea4:	f7ff fa92 	bl	80073cc <__errno>
 8007ea8:	2322      	movs	r3, #34	@ 0x22
 8007eaa:	e019      	b.n	8007ee0 <pow+0x94>
 8007eac:	4630      	mov	r0, r6
 8007eae:	4639      	mov	r1, r7
 8007eb0:	f000 f873 	bl	8007f9a <finite>
 8007eb4:	b9c8      	cbnz	r0, 8007eea <pow+0x9e>
 8007eb6:	4640      	mov	r0, r8
 8007eb8:	4649      	mov	r1, r9
 8007eba:	f000 f86e 	bl	8007f9a <finite>
 8007ebe:	b1a0      	cbz	r0, 8007eea <pow+0x9e>
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	4629      	mov	r1, r5
 8007ec4:	f000 f869 	bl	8007f9a <finite>
 8007ec8:	b178      	cbz	r0, 8007eea <pow+0x9e>
 8007eca:	4632      	mov	r2, r6
 8007ecc:	463b      	mov	r3, r7
 8007ece:	4630      	mov	r0, r6
 8007ed0:	4639      	mov	r1, r7
 8007ed2:	f7f8 fd93 	bl	80009fc <__aeabi_dcmpun>
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	d0e4      	beq.n	8007ea4 <pow+0x58>
 8007eda:	f7ff fa77 	bl	80073cc <__errno>
 8007ede:	2321      	movs	r3, #33	@ 0x21
 8007ee0:	6003      	str	r3, [r0, #0]
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	4639      	mov	r1, r7
 8007ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eea:	2200      	movs	r2, #0
 8007eec:	2300      	movs	r3, #0
 8007eee:	4630      	mov	r0, r6
 8007ef0:	4639      	mov	r1, r7
 8007ef2:	f7f8 fd51 	bl	8000998 <__aeabi_dcmpeq>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	d0f3      	beq.n	8007ee2 <pow+0x96>
 8007efa:	4640      	mov	r0, r8
 8007efc:	4649      	mov	r1, r9
 8007efe:	f000 f84c 	bl	8007f9a <finite>
 8007f02:	2800      	cmp	r0, #0
 8007f04:	d0ed      	beq.n	8007ee2 <pow+0x96>
 8007f06:	4620      	mov	r0, r4
 8007f08:	4629      	mov	r1, r5
 8007f0a:	f000 f846 	bl	8007f9a <finite>
 8007f0e:	e7c8      	b.n	8007ea2 <pow+0x56>
 8007f10:	2600      	movs	r6, #0
 8007f12:	4f01      	ldr	r7, [pc, #4]	@ (8007f18 <pow+0xcc>)
 8007f14:	e7e5      	b.n	8007ee2 <pow+0x96>
 8007f16:	bf00      	nop
 8007f18:	3ff00000 	.word	0x3ff00000

08007f1c <asinf>:
 8007f1c:	b538      	push	{r3, r4, r5, lr}
 8007f1e:	4604      	mov	r4, r0
 8007f20:	f000 fde2 	bl	8008ae8 <__ieee754_asinf>
 8007f24:	4621      	mov	r1, r4
 8007f26:	4605      	mov	r5, r0
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f7f9 f8c1 	bl	80010b0 <__aeabi_fcmpun>
 8007f2e:	b980      	cbnz	r0, 8007f52 <asinf+0x36>
 8007f30:	4620      	mov	r0, r4
 8007f32:	f000 f82f 	bl	8007f94 <fabsf>
 8007f36:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007f3a:	f7f9 f8af 	bl	800109c <__aeabi_fcmpgt>
 8007f3e:	b140      	cbz	r0, 8007f52 <asinf+0x36>
 8007f40:	f7ff fa44 	bl	80073cc <__errno>
 8007f44:	2321      	movs	r3, #33	@ 0x21
 8007f46:	6003      	str	r3, [r0, #0]
 8007f48:	4803      	ldr	r0, [pc, #12]	@ (8007f58 <asinf+0x3c>)
 8007f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f4e:	f000 b82b 	b.w	8007fa8 <nanf>
 8007f52:	4628      	mov	r0, r5
 8007f54:	bd38      	pop	{r3, r4, r5, pc}
 8007f56:	bf00      	nop
 8007f58:	08009647 	.word	0x08009647

08007f5c <atan2f>:
 8007f5c:	f000 bf06 	b.w	8008d6c <__ieee754_atan2f>

08007f60 <sqrtf>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4605      	mov	r5, r0
 8007f64:	f000 f824 	bl	8007fb0 <__ieee754_sqrtf>
 8007f68:	4629      	mov	r1, r5
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	f7f9 f89f 	bl	80010b0 <__aeabi_fcmpun>
 8007f72:	b968      	cbnz	r0, 8007f90 <sqrtf+0x30>
 8007f74:	2100      	movs	r1, #0
 8007f76:	4628      	mov	r0, r5
 8007f78:	f7f9 f872 	bl	8001060 <__aeabi_fcmplt>
 8007f7c:	b140      	cbz	r0, 8007f90 <sqrtf+0x30>
 8007f7e:	f7ff fa25 	bl	80073cc <__errno>
 8007f82:	2321      	movs	r3, #33	@ 0x21
 8007f84:	2100      	movs	r1, #0
 8007f86:	6003      	str	r3, [r0, #0]
 8007f88:	4608      	mov	r0, r1
 8007f8a:	f7f8 ff7f 	bl	8000e8c <__aeabi_fdiv>
 8007f8e:	4604      	mov	r4, r0
 8007f90:	4620      	mov	r0, r4
 8007f92:	bd38      	pop	{r3, r4, r5, pc}

08007f94 <fabsf>:
 8007f94:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007f98:	4770      	bx	lr

08007f9a <finite>:
 8007f9a:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8007f9e:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007fa2:	0fc0      	lsrs	r0, r0, #31
 8007fa4:	4770      	bx	lr
	...

08007fa8 <nanf>:
 8007fa8:	4800      	ldr	r0, [pc, #0]	@ (8007fac <nanf+0x4>)
 8007faa:	4770      	bx	lr
 8007fac:	7fc00000 	.word	0x7fc00000

08007fb0 <__ieee754_sqrtf>:
 8007fb0:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8007fb4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	d30a      	bcc.n	8007fd8 <__ieee754_sqrtf+0x28>
 8007fc2:	4601      	mov	r1, r0
 8007fc4:	f7f8 feae 	bl	8000d24 <__aeabi_fmul>
 8007fc8:	4601      	mov	r1, r0
 8007fca:	4620      	mov	r0, r4
 8007fcc:	f7f8 fda2 	bl	8000b14 <__addsf3>
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fd8:	2a00      	cmp	r2, #0
 8007fda:	d0fa      	beq.n	8007fd2 <__ieee754_sqrtf+0x22>
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	da06      	bge.n	8007fee <__ieee754_sqrtf+0x3e>
 8007fe0:	4601      	mov	r1, r0
 8007fe2:	f7f8 fd95 	bl	8000b10 <__aeabi_fsub>
 8007fe6:	4601      	mov	r1, r0
 8007fe8:	f7f8 ff50 	bl	8000e8c <__aeabi_fdiv>
 8007fec:	e7f0      	b.n	8007fd0 <__ieee754_sqrtf+0x20>
 8007fee:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 8007ff2:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8007ff6:	d03e      	beq.n	8008076 <__ieee754_sqrtf+0xc6>
 8007ff8:	2400      	movs	r4, #0
 8007ffa:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 8007ffe:	07ca      	lsls	r2, r1, #31
 8008000:	f04f 0019 	mov.w	r0, #25
 8008004:	4626      	mov	r6, r4
 8008006:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800800a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800800e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008012:	bf58      	it	pl
 8008014:	005b      	lslpl	r3, r3, #1
 8008016:	106d      	asrs	r5, r5, #1
 8008018:	005b      	lsls	r3, r3, #1
 800801a:	1872      	adds	r2, r6, r1
 800801c:	429a      	cmp	r2, r3
 800801e:	bfcf      	iteee	gt
 8008020:	461a      	movgt	r2, r3
 8008022:	1856      	addle	r6, r2, r1
 8008024:	1864      	addle	r4, r4, r1
 8008026:	1a9a      	suble	r2, r3, r2
 8008028:	3801      	subs	r0, #1
 800802a:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800802e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008032:	d1f2      	bne.n	800801a <__ieee754_sqrtf+0x6a>
 8008034:	b1ba      	cbz	r2, 8008066 <__ieee754_sqrtf+0xb6>
 8008036:	4e14      	ldr	r6, [pc, #80]	@ (8008088 <__ieee754_sqrtf+0xd8>)
 8008038:	4f14      	ldr	r7, [pc, #80]	@ (800808c <__ieee754_sqrtf+0xdc>)
 800803a:	6830      	ldr	r0, [r6, #0]
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	f7f8 fd67 	bl	8000b10 <__aeabi_fsub>
 8008042:	f8d6 8000 	ldr.w	r8, [r6]
 8008046:	4601      	mov	r1, r0
 8008048:	4640      	mov	r0, r8
 800804a:	f7f9 f813 	bl	8001074 <__aeabi_fcmple>
 800804e:	b150      	cbz	r0, 8008066 <__ieee754_sqrtf+0xb6>
 8008050:	6830      	ldr	r0, [r6, #0]
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	f7f8 fd5e 	bl	8000b14 <__addsf3>
 8008058:	6836      	ldr	r6, [r6, #0]
 800805a:	4601      	mov	r1, r0
 800805c:	4630      	mov	r0, r6
 800805e:	f7f8 ffff 	bl	8001060 <__aeabi_fcmplt>
 8008062:	b168      	cbz	r0, 8008080 <__ieee754_sqrtf+0xd0>
 8008064:	3402      	adds	r4, #2
 8008066:	1064      	asrs	r4, r4, #1
 8008068:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800806c:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8008070:	e7af      	b.n	8007fd2 <__ieee754_sqrtf+0x22>
 8008072:	005b      	lsls	r3, r3, #1
 8008074:	3201      	adds	r2, #1
 8008076:	0218      	lsls	r0, r3, #8
 8008078:	d5fb      	bpl.n	8008072 <__ieee754_sqrtf+0xc2>
 800807a:	3a01      	subs	r2, #1
 800807c:	1a89      	subs	r1, r1, r2
 800807e:	e7bb      	b.n	8007ff8 <__ieee754_sqrtf+0x48>
 8008080:	3401      	adds	r4, #1
 8008082:	f024 0401 	bic.w	r4, r4, #1
 8008086:	e7ee      	b.n	8008066 <__ieee754_sqrtf+0xb6>
 8008088:	20000084 	.word	0x20000084
 800808c:	20000080 	.word	0x20000080

08008090 <__ieee754_pow>:
 8008090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008094:	b091      	sub	sp, #68	@ 0x44
 8008096:	e9cd 2300 	strd	r2, r3, [sp]
 800809a:	468b      	mov	fp, r1
 800809c:	e9dd 1800 	ldrd	r1, r8, [sp]
 80080a0:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 80080a4:	4682      	mov	sl, r0
 80080a6:	ea57 0001 	orrs.w	r0, r7, r1
 80080aa:	d112      	bne.n	80080d2 <__ieee754_pow+0x42>
 80080ac:	4653      	mov	r3, sl
 80080ae:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 80080b2:	18db      	adds	r3, r3, r3
 80080b4:	4152      	adcs	r2, r2
 80080b6:	4298      	cmp	r0, r3
 80080b8:	4b91      	ldr	r3, [pc, #580]	@ (8008300 <__ieee754_pow+0x270>)
 80080ba:	4193      	sbcs	r3, r2
 80080bc:	f080 84ce 	bcs.w	8008a5c <__ieee754_pow+0x9cc>
 80080c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080c4:	4650      	mov	r0, sl
 80080c6:	4659      	mov	r1, fp
 80080c8:	f7f8 f848 	bl	800015c <__adddf3>
 80080cc:	b011      	add	sp, #68	@ 0x44
 80080ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d2:	4b8c      	ldr	r3, [pc, #560]	@ (8008304 <__ieee754_pow+0x274>)
 80080d4:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 80080d8:	429e      	cmp	r6, r3
 80080da:	465d      	mov	r5, fp
 80080dc:	46d1      	mov	r9, sl
 80080de:	d807      	bhi.n	80080f0 <__ieee754_pow+0x60>
 80080e0:	d102      	bne.n	80080e8 <__ieee754_pow+0x58>
 80080e2:	f1ba 0f00 	cmp.w	sl, #0
 80080e6:	d1eb      	bne.n	80080c0 <__ieee754_pow+0x30>
 80080e8:	429f      	cmp	r7, r3
 80080ea:	d801      	bhi.n	80080f0 <__ieee754_pow+0x60>
 80080ec:	d10f      	bne.n	800810e <__ieee754_pow+0x7e>
 80080ee:	b171      	cbz	r1, 800810e <__ieee754_pow+0x7e>
 80080f0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80080f4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80080f8:	ea55 0509 	orrs.w	r5, r5, r9
 80080fc:	d1e0      	bne.n	80080c0 <__ieee754_pow+0x30>
 80080fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008102:	18db      	adds	r3, r3, r3
 8008104:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8008108:	4152      	adcs	r2, r2
 800810a:	429d      	cmp	r5, r3
 800810c:	e7d4      	b.n	80080b8 <__ieee754_pow+0x28>
 800810e:	2d00      	cmp	r5, #0
 8008110:	4633      	mov	r3, r6
 8008112:	da39      	bge.n	8008188 <__ieee754_pow+0xf8>
 8008114:	4a7c      	ldr	r2, [pc, #496]	@ (8008308 <__ieee754_pow+0x278>)
 8008116:	4297      	cmp	r7, r2
 8008118:	d84e      	bhi.n	80081b8 <__ieee754_pow+0x128>
 800811a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800811e:	4297      	cmp	r7, r2
 8008120:	f240 84ab 	bls.w	8008a7a <__ieee754_pow+0x9ea>
 8008124:	153a      	asrs	r2, r7, #20
 8008126:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800812a:	2a14      	cmp	r2, #20
 800812c:	dd0f      	ble.n	800814e <__ieee754_pow+0xbe>
 800812e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8008132:	fa21 f402 	lsr.w	r4, r1, r2
 8008136:	fa04 f202 	lsl.w	r2, r4, r2
 800813a:	428a      	cmp	r2, r1
 800813c:	f040 849d 	bne.w	8008a7a <__ieee754_pow+0x9ea>
 8008140:	f004 0401 	and.w	r4, r4, #1
 8008144:	f1c4 0402 	rsb	r4, r4, #2
 8008148:	2900      	cmp	r1, #0
 800814a:	d15a      	bne.n	8008202 <__ieee754_pow+0x172>
 800814c:	e00e      	b.n	800816c <__ieee754_pow+0xdc>
 800814e:	2900      	cmp	r1, #0
 8008150:	d156      	bne.n	8008200 <__ieee754_pow+0x170>
 8008152:	f1c2 0214 	rsb	r2, r2, #20
 8008156:	fa47 f402 	asr.w	r4, r7, r2
 800815a:	fa04 f202 	lsl.w	r2, r4, r2
 800815e:	42ba      	cmp	r2, r7
 8008160:	f040 8488 	bne.w	8008a74 <__ieee754_pow+0x9e4>
 8008164:	f004 0401 	and.w	r4, r4, #1
 8008168:	f1c4 0402 	rsb	r4, r4, #2
 800816c:	4a67      	ldr	r2, [pc, #412]	@ (800830c <__ieee754_pow+0x27c>)
 800816e:	4297      	cmp	r7, r2
 8008170:	d130      	bne.n	80081d4 <__ieee754_pow+0x144>
 8008172:	f1b8 0f00 	cmp.w	r8, #0
 8008176:	f280 8479 	bge.w	8008a6c <__ieee754_pow+0x9dc>
 800817a:	4652      	mov	r2, sl
 800817c:	465b      	mov	r3, fp
 800817e:	2000      	movs	r0, #0
 8008180:	4962      	ldr	r1, [pc, #392]	@ (800830c <__ieee754_pow+0x27c>)
 8008182:	f7f8 facb 	bl	800071c <__aeabi_ddiv>
 8008186:	e7a1      	b.n	80080cc <__ieee754_pow+0x3c>
 8008188:	2400      	movs	r4, #0
 800818a:	2900      	cmp	r1, #0
 800818c:	d139      	bne.n	8008202 <__ieee754_pow+0x172>
 800818e:	4a5d      	ldr	r2, [pc, #372]	@ (8008304 <__ieee754_pow+0x274>)
 8008190:	4297      	cmp	r7, r2
 8008192:	d1eb      	bne.n	800816c <__ieee754_pow+0xdc>
 8008194:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8008198:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800819c:	ea53 0309 	orrs.w	r3, r3, r9
 80081a0:	f000 845c 	beq.w	8008a5c <__ieee754_pow+0x9cc>
 80081a4:	4b5a      	ldr	r3, [pc, #360]	@ (8008310 <__ieee754_pow+0x280>)
 80081a6:	429e      	cmp	r6, r3
 80081a8:	d908      	bls.n	80081bc <__ieee754_pow+0x12c>
 80081aa:	f1b8 0f00 	cmp.w	r8, #0
 80081ae:	f2c0 8459 	blt.w	8008a64 <__ieee754_pow+0x9d4>
 80081b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081b6:	e789      	b.n	80080cc <__ieee754_pow+0x3c>
 80081b8:	2402      	movs	r4, #2
 80081ba:	e7e6      	b.n	800818a <__ieee754_pow+0xfa>
 80081bc:	f1b8 0f00 	cmp.w	r8, #0
 80081c0:	f04f 0000 	mov.w	r0, #0
 80081c4:	f04f 0100 	mov.w	r1, #0
 80081c8:	da80      	bge.n	80080cc <__ieee754_pow+0x3c>
 80081ca:	e9dd 0300 	ldrd	r0, r3, [sp]
 80081ce:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80081d2:	e77b      	b.n	80080cc <__ieee754_pow+0x3c>
 80081d4:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 80081d8:	d106      	bne.n	80081e8 <__ieee754_pow+0x158>
 80081da:	4652      	mov	r2, sl
 80081dc:	465b      	mov	r3, fp
 80081de:	4650      	mov	r0, sl
 80081e0:	4659      	mov	r1, fp
 80081e2:	f7f8 f971 	bl	80004c8 <__aeabi_dmul>
 80081e6:	e771      	b.n	80080cc <__ieee754_pow+0x3c>
 80081e8:	4a4a      	ldr	r2, [pc, #296]	@ (8008314 <__ieee754_pow+0x284>)
 80081ea:	4590      	cmp	r8, r2
 80081ec:	d109      	bne.n	8008202 <__ieee754_pow+0x172>
 80081ee:	2d00      	cmp	r5, #0
 80081f0:	db07      	blt.n	8008202 <__ieee754_pow+0x172>
 80081f2:	4650      	mov	r0, sl
 80081f4:	4659      	mov	r1, fp
 80081f6:	b011      	add	sp, #68	@ 0x44
 80081f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fc:	f000 bfea 	b.w	80091d4 <__ieee754_sqrt>
 8008200:	2400      	movs	r4, #0
 8008202:	4650      	mov	r0, sl
 8008204:	4659      	mov	r1, fp
 8008206:	9302      	str	r3, [sp, #8]
 8008208:	f000 fc6a 	bl	8008ae0 <fabs>
 800820c:	9b02      	ldr	r3, [sp, #8]
 800820e:	f1b9 0f00 	cmp.w	r9, #0
 8008212:	d127      	bne.n	8008264 <__ieee754_pow+0x1d4>
 8008214:	4a3d      	ldr	r2, [pc, #244]	@ (800830c <__ieee754_pow+0x27c>)
 8008216:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800821a:	4594      	cmp	ip, r2
 800821c:	d000      	beq.n	8008220 <__ieee754_pow+0x190>
 800821e:	bb0e      	cbnz	r6, 8008264 <__ieee754_pow+0x1d4>
 8008220:	f1b8 0f00 	cmp.w	r8, #0
 8008224:	da05      	bge.n	8008232 <__ieee754_pow+0x1a2>
 8008226:	4602      	mov	r2, r0
 8008228:	460b      	mov	r3, r1
 800822a:	2000      	movs	r0, #0
 800822c:	4937      	ldr	r1, [pc, #220]	@ (800830c <__ieee754_pow+0x27c>)
 800822e:	f7f8 fa75 	bl	800071c <__aeabi_ddiv>
 8008232:	2d00      	cmp	r5, #0
 8008234:	f6bf af4a 	bge.w	80080cc <__ieee754_pow+0x3c>
 8008238:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800823c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8008240:	4326      	orrs	r6, r4
 8008242:	d108      	bne.n	8008256 <__ieee754_pow+0x1c6>
 8008244:	4602      	mov	r2, r0
 8008246:	460b      	mov	r3, r1
 8008248:	4610      	mov	r0, r2
 800824a:	4619      	mov	r1, r3
 800824c:	f7f7 ff84 	bl	8000158 <__aeabi_dsub>
 8008250:	4602      	mov	r2, r0
 8008252:	460b      	mov	r3, r1
 8008254:	e795      	b.n	8008182 <__ieee754_pow+0xf2>
 8008256:	2c01      	cmp	r4, #1
 8008258:	f47f af38 	bne.w	80080cc <__ieee754_pow+0x3c>
 800825c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008260:	4619      	mov	r1, r3
 8008262:	e733      	b.n	80080cc <__ieee754_pow+0x3c>
 8008264:	0fea      	lsrs	r2, r5, #31
 8008266:	3a01      	subs	r2, #1
 8008268:	ea52 0c04 	orrs.w	ip, r2, r4
 800826c:	d102      	bne.n	8008274 <__ieee754_pow+0x1e4>
 800826e:	4652      	mov	r2, sl
 8008270:	465b      	mov	r3, fp
 8008272:	e7e9      	b.n	8008248 <__ieee754_pow+0x1b8>
 8008274:	f04f 0900 	mov.w	r9, #0
 8008278:	3c01      	subs	r4, #1
 800827a:	4314      	orrs	r4, r2
 800827c:	bf14      	ite	ne
 800827e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800830c <__ieee754_pow+0x27c>
 8008282:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8008318 <__ieee754_pow+0x288>
 8008286:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800828a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800828e:	f240 8107 	bls.w	80084a0 <__ieee754_pow+0x410>
 8008292:	4b22      	ldr	r3, [pc, #136]	@ (800831c <__ieee754_pow+0x28c>)
 8008294:	429f      	cmp	r7, r3
 8008296:	4b1e      	ldr	r3, [pc, #120]	@ (8008310 <__ieee754_pow+0x280>)
 8008298:	d913      	bls.n	80082c2 <__ieee754_pow+0x232>
 800829a:	429e      	cmp	r6, r3
 800829c:	d808      	bhi.n	80082b0 <__ieee754_pow+0x220>
 800829e:	f1b8 0f00 	cmp.w	r8, #0
 80082a2:	da08      	bge.n	80082b6 <__ieee754_pow+0x226>
 80082a4:	2000      	movs	r0, #0
 80082a6:	b011      	add	sp, #68	@ 0x44
 80082a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ac:	f000 bf8c 	b.w	80091c8 <__math_oflow>
 80082b0:	f1b8 0f00 	cmp.w	r8, #0
 80082b4:	dcf6      	bgt.n	80082a4 <__ieee754_pow+0x214>
 80082b6:	2000      	movs	r0, #0
 80082b8:	b011      	add	sp, #68	@ 0x44
 80082ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082be:	f000 bf7e 	b.w	80091be <__math_uflow>
 80082c2:	429e      	cmp	r6, r3
 80082c4:	d20c      	bcs.n	80082e0 <__ieee754_pow+0x250>
 80082c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ca:	2200      	movs	r2, #0
 80082cc:	2300      	movs	r3, #0
 80082ce:	f7f8 fb6d 	bl	80009ac <__aeabi_dcmplt>
 80082d2:	3800      	subs	r0, #0
 80082d4:	bf18      	it	ne
 80082d6:	2001      	movne	r0, #1
 80082d8:	f1b8 0f00 	cmp.w	r8, #0
 80082dc:	daec      	bge.n	80082b8 <__ieee754_pow+0x228>
 80082de:	e7e2      	b.n	80082a6 <__ieee754_pow+0x216>
 80082e0:	4b0a      	ldr	r3, [pc, #40]	@ (800830c <__ieee754_pow+0x27c>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	429e      	cmp	r6, r3
 80082e6:	d91b      	bls.n	8008320 <__ieee754_pow+0x290>
 80082e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ec:	2300      	movs	r3, #0
 80082ee:	f7f8 fb5d 	bl	80009ac <__aeabi_dcmplt>
 80082f2:	3800      	subs	r0, #0
 80082f4:	bf18      	it	ne
 80082f6:	2001      	movne	r0, #1
 80082f8:	f1b8 0f00 	cmp.w	r8, #0
 80082fc:	dcd3      	bgt.n	80082a6 <__ieee754_pow+0x216>
 80082fe:	e7db      	b.n	80082b8 <__ieee754_pow+0x228>
 8008300:	fff00000 	.word	0xfff00000
 8008304:	7ff00000 	.word	0x7ff00000
 8008308:	433fffff 	.word	0x433fffff
 800830c:	3ff00000 	.word	0x3ff00000
 8008310:	3fefffff 	.word	0x3fefffff
 8008314:	3fe00000 	.word	0x3fe00000
 8008318:	bff00000 	.word	0xbff00000
 800831c:	43f00000 	.word	0x43f00000
 8008320:	4b5b      	ldr	r3, [pc, #364]	@ (8008490 <__ieee754_pow+0x400>)
 8008322:	f7f7 ff19 	bl	8000158 <__aeabi_dsub>
 8008326:	a352      	add	r3, pc, #328	@ (adr r3, 8008470 <__ieee754_pow+0x3e0>)
 8008328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832c:	4604      	mov	r4, r0
 800832e:	460d      	mov	r5, r1
 8008330:	f7f8 f8ca 	bl	80004c8 <__aeabi_dmul>
 8008334:	a350      	add	r3, pc, #320	@ (adr r3, 8008478 <__ieee754_pow+0x3e8>)
 8008336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833a:	4606      	mov	r6, r0
 800833c:	460f      	mov	r7, r1
 800833e:	4620      	mov	r0, r4
 8008340:	4629      	mov	r1, r5
 8008342:	f7f8 f8c1 	bl	80004c8 <__aeabi_dmul>
 8008346:	2200      	movs	r2, #0
 8008348:	4682      	mov	sl, r0
 800834a:	468b      	mov	fp, r1
 800834c:	4620      	mov	r0, r4
 800834e:	4629      	mov	r1, r5
 8008350:	4b50      	ldr	r3, [pc, #320]	@ (8008494 <__ieee754_pow+0x404>)
 8008352:	f7f8 f8b9 	bl	80004c8 <__aeabi_dmul>
 8008356:	4602      	mov	r2, r0
 8008358:	460b      	mov	r3, r1
 800835a:	a149      	add	r1, pc, #292	@ (adr r1, 8008480 <__ieee754_pow+0x3f0>)
 800835c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008360:	f7f7 fefa 	bl	8000158 <__aeabi_dsub>
 8008364:	4622      	mov	r2, r4
 8008366:	462b      	mov	r3, r5
 8008368:	f7f8 f8ae 	bl	80004c8 <__aeabi_dmul>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	2000      	movs	r0, #0
 8008372:	4949      	ldr	r1, [pc, #292]	@ (8008498 <__ieee754_pow+0x408>)
 8008374:	f7f7 fef0 	bl	8000158 <__aeabi_dsub>
 8008378:	4622      	mov	r2, r4
 800837a:	4680      	mov	r8, r0
 800837c:	4689      	mov	r9, r1
 800837e:	462b      	mov	r3, r5
 8008380:	4620      	mov	r0, r4
 8008382:	4629      	mov	r1, r5
 8008384:	f7f8 f8a0 	bl	80004c8 <__aeabi_dmul>
 8008388:	4602      	mov	r2, r0
 800838a:	460b      	mov	r3, r1
 800838c:	4640      	mov	r0, r8
 800838e:	4649      	mov	r1, r9
 8008390:	f7f8 f89a 	bl	80004c8 <__aeabi_dmul>
 8008394:	a33c      	add	r3, pc, #240	@ (adr r3, 8008488 <__ieee754_pow+0x3f8>)
 8008396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839a:	f7f8 f895 	bl	80004c8 <__aeabi_dmul>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	4650      	mov	r0, sl
 80083a4:	4659      	mov	r1, fp
 80083a6:	f7f7 fed7 	bl	8000158 <__aeabi_dsub>
 80083aa:	2400      	movs	r4, #0
 80083ac:	4602      	mov	r2, r0
 80083ae:	460b      	mov	r3, r1
 80083b0:	4680      	mov	r8, r0
 80083b2:	4689      	mov	r9, r1
 80083b4:	4630      	mov	r0, r6
 80083b6:	4639      	mov	r1, r7
 80083b8:	f7f7 fed0 	bl	800015c <__adddf3>
 80083bc:	4632      	mov	r2, r6
 80083be:	463b      	mov	r3, r7
 80083c0:	4620      	mov	r0, r4
 80083c2:	460d      	mov	r5, r1
 80083c4:	f7f7 fec8 	bl	8000158 <__aeabi_dsub>
 80083c8:	4602      	mov	r2, r0
 80083ca:	460b      	mov	r3, r1
 80083cc:	4640      	mov	r0, r8
 80083ce:	4649      	mov	r1, r9
 80083d0:	f7f7 fec2 	bl	8000158 <__aeabi_dsub>
 80083d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80083dc:	2300      	movs	r3, #0
 80083de:	9304      	str	r3, [sp, #16]
 80083e0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80083e4:	4606      	mov	r6, r0
 80083e6:	460f      	mov	r7, r1
 80083e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083ec:	4652      	mov	r2, sl
 80083ee:	465b      	mov	r3, fp
 80083f0:	f7f7 feb2 	bl	8000158 <__aeabi_dsub>
 80083f4:	4622      	mov	r2, r4
 80083f6:	462b      	mov	r3, r5
 80083f8:	f7f8 f866 	bl	80004c8 <__aeabi_dmul>
 80083fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008400:	4680      	mov	r8, r0
 8008402:	4689      	mov	r9, r1
 8008404:	4630      	mov	r0, r6
 8008406:	4639      	mov	r1, r7
 8008408:	f7f8 f85e 	bl	80004c8 <__aeabi_dmul>
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	4640      	mov	r0, r8
 8008412:	4649      	mov	r1, r9
 8008414:	f7f7 fea2 	bl	800015c <__adddf3>
 8008418:	4652      	mov	r2, sl
 800841a:	465b      	mov	r3, fp
 800841c:	4606      	mov	r6, r0
 800841e:	460f      	mov	r7, r1
 8008420:	4620      	mov	r0, r4
 8008422:	4629      	mov	r1, r5
 8008424:	f7f8 f850 	bl	80004c8 <__aeabi_dmul>
 8008428:	460b      	mov	r3, r1
 800842a:	4602      	mov	r2, r0
 800842c:	4680      	mov	r8, r0
 800842e:	4689      	mov	r9, r1
 8008430:	4630      	mov	r0, r6
 8008432:	4639      	mov	r1, r7
 8008434:	f7f7 fe92 	bl	800015c <__adddf3>
 8008438:	4b18      	ldr	r3, [pc, #96]	@ (800849c <__ieee754_pow+0x40c>)
 800843a:	4604      	mov	r4, r0
 800843c:	4299      	cmp	r1, r3
 800843e:	460d      	mov	r5, r1
 8008440:	468a      	mov	sl, r1
 8008442:	468b      	mov	fp, r1
 8008444:	f340 82e0 	ble.w	8008a08 <__ieee754_pow+0x978>
 8008448:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800844c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008450:	4303      	orrs	r3, r0
 8008452:	f000 81df 	beq.w	8008814 <__ieee754_pow+0x784>
 8008456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800845a:	2200      	movs	r2, #0
 800845c:	2300      	movs	r3, #0
 800845e:	f7f8 faa5 	bl	80009ac <__aeabi_dcmplt>
 8008462:	3800      	subs	r0, #0
 8008464:	bf18      	it	ne
 8008466:	2001      	movne	r0, #1
 8008468:	e71d      	b.n	80082a6 <__ieee754_pow+0x216>
 800846a:	bf00      	nop
 800846c:	f3af 8000 	nop.w
 8008470:	60000000 	.word	0x60000000
 8008474:	3ff71547 	.word	0x3ff71547
 8008478:	f85ddf44 	.word	0xf85ddf44
 800847c:	3e54ae0b 	.word	0x3e54ae0b
 8008480:	55555555 	.word	0x55555555
 8008484:	3fd55555 	.word	0x3fd55555
 8008488:	652b82fe 	.word	0x652b82fe
 800848c:	3ff71547 	.word	0x3ff71547
 8008490:	3ff00000 	.word	0x3ff00000
 8008494:	3fd00000 	.word	0x3fd00000
 8008498:	3fe00000 	.word	0x3fe00000
 800849c:	408fffff 	.word	0x408fffff
 80084a0:	4ad3      	ldr	r2, [pc, #844]	@ (80087f0 <__ieee754_pow+0x760>)
 80084a2:	402a      	ands	r2, r5
 80084a4:	2a00      	cmp	r2, #0
 80084a6:	f040 817a 	bne.w	800879e <__ieee754_pow+0x70e>
 80084aa:	4bd2      	ldr	r3, [pc, #840]	@ (80087f4 <__ieee754_pow+0x764>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	f7f8 f80b 	bl	80004c8 <__aeabi_dmul>
 80084b2:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 80084b6:	460b      	mov	r3, r1
 80084b8:	151a      	asrs	r2, r3, #20
 80084ba:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80084be:	4422      	add	r2, r4
 80084c0:	920a      	str	r2, [sp, #40]	@ 0x28
 80084c2:	4acd      	ldr	r2, [pc, #820]	@ (80087f8 <__ieee754_pow+0x768>)
 80084c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084c8:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 80084cc:	4293      	cmp	r3, r2
 80084ce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80084d2:	dd08      	ble.n	80084e6 <__ieee754_pow+0x456>
 80084d4:	4ac9      	ldr	r2, [pc, #804]	@ (80087fc <__ieee754_pow+0x76c>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	f340 8163 	ble.w	80087a2 <__ieee754_pow+0x712>
 80084dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084de:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80084e2:	3301      	adds	r3, #1
 80084e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80084e6:	2600      	movs	r6, #0
 80084e8:	00f3      	lsls	r3, r6, #3
 80084ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084ec:	4bc4      	ldr	r3, [pc, #784]	@ (8008800 <__ieee754_pow+0x770>)
 80084ee:	4629      	mov	r1, r5
 80084f0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80084f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084f8:	461a      	mov	r2, r3
 80084fa:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80084fe:	4623      	mov	r3, r4
 8008500:	4682      	mov	sl, r0
 8008502:	f7f7 fe29 	bl	8000158 <__aeabi_dsub>
 8008506:	4652      	mov	r2, sl
 8008508:	462b      	mov	r3, r5
 800850a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800850e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008512:	f7f7 fe23 	bl	800015c <__adddf3>
 8008516:	4602      	mov	r2, r0
 8008518:	460b      	mov	r3, r1
 800851a:	2000      	movs	r0, #0
 800851c:	49b9      	ldr	r1, [pc, #740]	@ (8008804 <__ieee754_pow+0x774>)
 800851e:	f7f8 f8fd 	bl	800071c <__aeabi_ddiv>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800852a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800852e:	f7f7 ffcb 	bl	80004c8 <__aeabi_dmul>
 8008532:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008536:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800853a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800853e:	2300      	movs	r3, #0
 8008540:	2200      	movs	r2, #0
 8008542:	46ab      	mov	fp, r5
 8008544:	106d      	asrs	r5, r5, #1
 8008546:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800854a:	9304      	str	r3, [sp, #16]
 800854c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008550:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008554:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008558:	4640      	mov	r0, r8
 800855a:	4649      	mov	r1, r9
 800855c:	4614      	mov	r4, r2
 800855e:	461d      	mov	r5, r3
 8008560:	f7f7 ffb2 	bl	80004c8 <__aeabi_dmul>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800856c:	f7f7 fdf4 	bl	8000158 <__aeabi_dsub>
 8008570:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008574:	4606      	mov	r6, r0
 8008576:	460f      	mov	r7, r1
 8008578:	4620      	mov	r0, r4
 800857a:	4629      	mov	r1, r5
 800857c:	f7f7 fdec 	bl	8000158 <__aeabi_dsub>
 8008580:	4602      	mov	r2, r0
 8008582:	460b      	mov	r3, r1
 8008584:	4650      	mov	r0, sl
 8008586:	4659      	mov	r1, fp
 8008588:	f7f7 fde6 	bl	8000158 <__aeabi_dsub>
 800858c:	4642      	mov	r2, r8
 800858e:	464b      	mov	r3, r9
 8008590:	f7f7 ff9a 	bl	80004c8 <__aeabi_dmul>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4630      	mov	r0, r6
 800859a:	4639      	mov	r1, r7
 800859c:	f7f7 fddc 	bl	8000158 <__aeabi_dsub>
 80085a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80085a4:	f7f7 ff90 	bl	80004c8 <__aeabi_dmul>
 80085a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80085b0:	4610      	mov	r0, r2
 80085b2:	4619      	mov	r1, r3
 80085b4:	f7f7 ff88 	bl	80004c8 <__aeabi_dmul>
 80085b8:	a37b      	add	r3, pc, #492	@ (adr r3, 80087a8 <__ieee754_pow+0x718>)
 80085ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085be:	4604      	mov	r4, r0
 80085c0:	460d      	mov	r5, r1
 80085c2:	f7f7 ff81 	bl	80004c8 <__aeabi_dmul>
 80085c6:	a37a      	add	r3, pc, #488	@ (adr r3, 80087b0 <__ieee754_pow+0x720>)
 80085c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085cc:	f7f7 fdc6 	bl	800015c <__adddf3>
 80085d0:	4622      	mov	r2, r4
 80085d2:	462b      	mov	r3, r5
 80085d4:	f7f7 ff78 	bl	80004c8 <__aeabi_dmul>
 80085d8:	a377      	add	r3, pc, #476	@ (adr r3, 80087b8 <__ieee754_pow+0x728>)
 80085da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085de:	f7f7 fdbd 	bl	800015c <__adddf3>
 80085e2:	4622      	mov	r2, r4
 80085e4:	462b      	mov	r3, r5
 80085e6:	f7f7 ff6f 	bl	80004c8 <__aeabi_dmul>
 80085ea:	a375      	add	r3, pc, #468	@ (adr r3, 80087c0 <__ieee754_pow+0x730>)
 80085ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f0:	f7f7 fdb4 	bl	800015c <__adddf3>
 80085f4:	4622      	mov	r2, r4
 80085f6:	462b      	mov	r3, r5
 80085f8:	f7f7 ff66 	bl	80004c8 <__aeabi_dmul>
 80085fc:	a372      	add	r3, pc, #456	@ (adr r3, 80087c8 <__ieee754_pow+0x738>)
 80085fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008602:	f7f7 fdab 	bl	800015c <__adddf3>
 8008606:	4622      	mov	r2, r4
 8008608:	462b      	mov	r3, r5
 800860a:	f7f7 ff5d 	bl	80004c8 <__aeabi_dmul>
 800860e:	a370      	add	r3, pc, #448	@ (adr r3, 80087d0 <__ieee754_pow+0x740>)
 8008610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008614:	f7f7 fda2 	bl	800015c <__adddf3>
 8008618:	4622      	mov	r2, r4
 800861a:	4606      	mov	r6, r0
 800861c:	460f      	mov	r7, r1
 800861e:	462b      	mov	r3, r5
 8008620:	4620      	mov	r0, r4
 8008622:	4629      	mov	r1, r5
 8008624:	f7f7 ff50 	bl	80004c8 <__aeabi_dmul>
 8008628:	4602      	mov	r2, r0
 800862a:	460b      	mov	r3, r1
 800862c:	4630      	mov	r0, r6
 800862e:	4639      	mov	r1, r7
 8008630:	f7f7 ff4a 	bl	80004c8 <__aeabi_dmul>
 8008634:	4604      	mov	r4, r0
 8008636:	460d      	mov	r5, r1
 8008638:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800863c:	4642      	mov	r2, r8
 800863e:	464b      	mov	r3, r9
 8008640:	f7f7 fd8c 	bl	800015c <__adddf3>
 8008644:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008648:	f7f7 ff3e 	bl	80004c8 <__aeabi_dmul>
 800864c:	4622      	mov	r2, r4
 800864e:	462b      	mov	r3, r5
 8008650:	f7f7 fd84 	bl	800015c <__adddf3>
 8008654:	4642      	mov	r2, r8
 8008656:	4682      	mov	sl, r0
 8008658:	468b      	mov	fp, r1
 800865a:	464b      	mov	r3, r9
 800865c:	4640      	mov	r0, r8
 800865e:	4649      	mov	r1, r9
 8008660:	f7f7 ff32 	bl	80004c8 <__aeabi_dmul>
 8008664:	2200      	movs	r2, #0
 8008666:	4b68      	ldr	r3, [pc, #416]	@ (8008808 <__ieee754_pow+0x778>)
 8008668:	4606      	mov	r6, r0
 800866a:	460f      	mov	r7, r1
 800866c:	f7f7 fd76 	bl	800015c <__adddf3>
 8008670:	4652      	mov	r2, sl
 8008672:	465b      	mov	r3, fp
 8008674:	f7f7 fd72 	bl	800015c <__adddf3>
 8008678:	2400      	movs	r4, #0
 800867a:	460d      	mov	r5, r1
 800867c:	4622      	mov	r2, r4
 800867e:	460b      	mov	r3, r1
 8008680:	4640      	mov	r0, r8
 8008682:	4649      	mov	r1, r9
 8008684:	f7f7 ff20 	bl	80004c8 <__aeabi_dmul>
 8008688:	2200      	movs	r2, #0
 800868a:	4680      	mov	r8, r0
 800868c:	4689      	mov	r9, r1
 800868e:	4620      	mov	r0, r4
 8008690:	4629      	mov	r1, r5
 8008692:	4b5d      	ldr	r3, [pc, #372]	@ (8008808 <__ieee754_pow+0x778>)
 8008694:	f7f7 fd60 	bl	8000158 <__aeabi_dsub>
 8008698:	4632      	mov	r2, r6
 800869a:	463b      	mov	r3, r7
 800869c:	f7f7 fd5c 	bl	8000158 <__aeabi_dsub>
 80086a0:	4602      	mov	r2, r0
 80086a2:	460b      	mov	r3, r1
 80086a4:	4650      	mov	r0, sl
 80086a6:	4659      	mov	r1, fp
 80086a8:	f7f7 fd56 	bl	8000158 <__aeabi_dsub>
 80086ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086b0:	f7f7 ff0a 	bl	80004c8 <__aeabi_dmul>
 80086b4:	4622      	mov	r2, r4
 80086b6:	4606      	mov	r6, r0
 80086b8:	460f      	mov	r7, r1
 80086ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80086be:	462b      	mov	r3, r5
 80086c0:	f7f7 ff02 	bl	80004c8 <__aeabi_dmul>
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	4630      	mov	r0, r6
 80086ca:	4639      	mov	r1, r7
 80086cc:	f7f7 fd46 	bl	800015c <__adddf3>
 80086d0:	2400      	movs	r4, #0
 80086d2:	4606      	mov	r6, r0
 80086d4:	460f      	mov	r7, r1
 80086d6:	4602      	mov	r2, r0
 80086d8:	460b      	mov	r3, r1
 80086da:	4640      	mov	r0, r8
 80086dc:	4649      	mov	r1, r9
 80086de:	f7f7 fd3d 	bl	800015c <__adddf3>
 80086e2:	a33d      	add	r3, pc, #244	@ (adr r3, 80087d8 <__ieee754_pow+0x748>)
 80086e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e8:	4620      	mov	r0, r4
 80086ea:	460d      	mov	r5, r1
 80086ec:	f7f7 feec 	bl	80004c8 <__aeabi_dmul>
 80086f0:	4642      	mov	r2, r8
 80086f2:	464b      	mov	r3, r9
 80086f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80086f8:	4620      	mov	r0, r4
 80086fa:	4629      	mov	r1, r5
 80086fc:	f7f7 fd2c 	bl	8000158 <__aeabi_dsub>
 8008700:	4602      	mov	r2, r0
 8008702:	460b      	mov	r3, r1
 8008704:	4630      	mov	r0, r6
 8008706:	4639      	mov	r1, r7
 8008708:	f7f7 fd26 	bl	8000158 <__aeabi_dsub>
 800870c:	a334      	add	r3, pc, #208	@ (adr r3, 80087e0 <__ieee754_pow+0x750>)
 800870e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008712:	f7f7 fed9 	bl	80004c8 <__aeabi_dmul>
 8008716:	a334      	add	r3, pc, #208	@ (adr r3, 80087e8 <__ieee754_pow+0x758>)
 8008718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871c:	4606      	mov	r6, r0
 800871e:	460f      	mov	r7, r1
 8008720:	4620      	mov	r0, r4
 8008722:	4629      	mov	r1, r5
 8008724:	f7f7 fed0 	bl	80004c8 <__aeabi_dmul>
 8008728:	4602      	mov	r2, r0
 800872a:	460b      	mov	r3, r1
 800872c:	4630      	mov	r0, r6
 800872e:	4639      	mov	r1, r7
 8008730:	f7f7 fd14 	bl	800015c <__adddf3>
 8008734:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008736:	4b35      	ldr	r3, [pc, #212]	@ (800880c <__ieee754_pow+0x77c>)
 8008738:	2400      	movs	r4, #0
 800873a:	4413      	add	r3, r2
 800873c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008740:	f7f7 fd0c 	bl	800015c <__adddf3>
 8008744:	4682      	mov	sl, r0
 8008746:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008748:	468b      	mov	fp, r1
 800874a:	f7f7 fe53 	bl	80003f4 <__aeabi_i2d>
 800874e:	4606      	mov	r6, r0
 8008750:	460f      	mov	r7, r1
 8008752:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008754:	4b2e      	ldr	r3, [pc, #184]	@ (8008810 <__ieee754_pow+0x780>)
 8008756:	4413      	add	r3, r2
 8008758:	e9d3 8900 	ldrd	r8, r9, [r3]
 800875c:	4652      	mov	r2, sl
 800875e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008762:	465b      	mov	r3, fp
 8008764:	f7f7 fcfa 	bl	800015c <__adddf3>
 8008768:	4642      	mov	r2, r8
 800876a:	464b      	mov	r3, r9
 800876c:	f7f7 fcf6 	bl	800015c <__adddf3>
 8008770:	4632      	mov	r2, r6
 8008772:	463b      	mov	r3, r7
 8008774:	f7f7 fcf2 	bl	800015c <__adddf3>
 8008778:	4632      	mov	r2, r6
 800877a:	463b      	mov	r3, r7
 800877c:	4620      	mov	r0, r4
 800877e:	460d      	mov	r5, r1
 8008780:	f7f7 fcea 	bl	8000158 <__aeabi_dsub>
 8008784:	4642      	mov	r2, r8
 8008786:	464b      	mov	r3, r9
 8008788:	f7f7 fce6 	bl	8000158 <__aeabi_dsub>
 800878c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008790:	f7f7 fce2 	bl	8000158 <__aeabi_dsub>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	4650      	mov	r0, sl
 800879a:	4659      	mov	r1, fp
 800879c:	e618      	b.n	80083d0 <__ieee754_pow+0x340>
 800879e:	2400      	movs	r4, #0
 80087a0:	e68a      	b.n	80084b8 <__ieee754_pow+0x428>
 80087a2:	2601      	movs	r6, #1
 80087a4:	e6a0      	b.n	80084e8 <__ieee754_pow+0x458>
 80087a6:	bf00      	nop
 80087a8:	4a454eef 	.word	0x4a454eef
 80087ac:	3fca7e28 	.word	0x3fca7e28
 80087b0:	93c9db65 	.word	0x93c9db65
 80087b4:	3fcd864a 	.word	0x3fcd864a
 80087b8:	a91d4101 	.word	0xa91d4101
 80087bc:	3fd17460 	.word	0x3fd17460
 80087c0:	518f264d 	.word	0x518f264d
 80087c4:	3fd55555 	.word	0x3fd55555
 80087c8:	db6fabff 	.word	0xdb6fabff
 80087cc:	3fdb6db6 	.word	0x3fdb6db6
 80087d0:	33333303 	.word	0x33333303
 80087d4:	3fe33333 	.word	0x3fe33333
 80087d8:	e0000000 	.word	0xe0000000
 80087dc:	3feec709 	.word	0x3feec709
 80087e0:	dc3a03fd 	.word	0xdc3a03fd
 80087e4:	3feec709 	.word	0x3feec709
 80087e8:	145b01f5 	.word	0x145b01f5
 80087ec:	be3e2fe0 	.word	0xbe3e2fe0
 80087f0:	7ff00000 	.word	0x7ff00000
 80087f4:	43400000 	.word	0x43400000
 80087f8:	0003988e 	.word	0x0003988e
 80087fc:	000bb679 	.word	0x000bb679
 8008800:	08009698 	.word	0x08009698
 8008804:	3ff00000 	.word	0x3ff00000
 8008808:	40080000 	.word	0x40080000
 800880c:	08009678 	.word	0x08009678
 8008810:	08009688 	.word	0x08009688
 8008814:	a39a      	add	r3, pc, #616	@ (adr r3, 8008a80 <__ieee754_pow+0x9f0>)
 8008816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881a:	4630      	mov	r0, r6
 800881c:	4639      	mov	r1, r7
 800881e:	f7f7 fc9d 	bl	800015c <__adddf3>
 8008822:	4642      	mov	r2, r8
 8008824:	e9cd 0100 	strd	r0, r1, [sp]
 8008828:	464b      	mov	r3, r9
 800882a:	4620      	mov	r0, r4
 800882c:	4629      	mov	r1, r5
 800882e:	f7f7 fc93 	bl	8000158 <__aeabi_dsub>
 8008832:	4602      	mov	r2, r0
 8008834:	460b      	mov	r3, r1
 8008836:	e9dd 0100 	ldrd	r0, r1, [sp]
 800883a:	f7f8 f8d5 	bl	80009e8 <__aeabi_dcmpgt>
 800883e:	2800      	cmp	r0, #0
 8008840:	f47f ae09 	bne.w	8008456 <__ieee754_pow+0x3c6>
 8008844:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008848:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800884c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8008850:	fa43 fa0a 	asr.w	sl, r3, sl
 8008854:	44da      	add	sl, fp
 8008856:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800885a:	489b      	ldr	r0, [pc, #620]	@ (8008ac8 <__ieee754_pow+0xa38>)
 800885c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008860:	4108      	asrs	r0, r1
 8008862:	ea00 030a 	and.w	r3, r0, sl
 8008866:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800886a:	f1c1 0114 	rsb	r1, r1, #20
 800886e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008872:	4640      	mov	r0, r8
 8008874:	fa4a fa01 	asr.w	sl, sl, r1
 8008878:	f1bb 0f00 	cmp.w	fp, #0
 800887c:	4649      	mov	r1, r9
 800887e:	f04f 0200 	mov.w	r2, #0
 8008882:	bfb8      	it	lt
 8008884:	f1ca 0a00 	rsblt	sl, sl, #0
 8008888:	f7f7 fc66 	bl	8000158 <__aeabi_dsub>
 800888c:	4680      	mov	r8, r0
 800888e:	4689      	mov	r9, r1
 8008890:	2400      	movs	r4, #0
 8008892:	4632      	mov	r2, r6
 8008894:	463b      	mov	r3, r7
 8008896:	4640      	mov	r0, r8
 8008898:	4649      	mov	r1, r9
 800889a:	f7f7 fc5f 	bl	800015c <__adddf3>
 800889e:	a37a      	add	r3, pc, #488	@ (adr r3, 8008a88 <__ieee754_pow+0x9f8>)
 80088a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a4:	4620      	mov	r0, r4
 80088a6:	460d      	mov	r5, r1
 80088a8:	f7f7 fe0e 	bl	80004c8 <__aeabi_dmul>
 80088ac:	4642      	mov	r2, r8
 80088ae:	464b      	mov	r3, r9
 80088b0:	e9cd 0100 	strd	r0, r1, [sp]
 80088b4:	4620      	mov	r0, r4
 80088b6:	4629      	mov	r1, r5
 80088b8:	f7f7 fc4e 	bl	8000158 <__aeabi_dsub>
 80088bc:	4602      	mov	r2, r0
 80088be:	460b      	mov	r3, r1
 80088c0:	4630      	mov	r0, r6
 80088c2:	4639      	mov	r1, r7
 80088c4:	f7f7 fc48 	bl	8000158 <__aeabi_dsub>
 80088c8:	a371      	add	r3, pc, #452	@ (adr r3, 8008a90 <__ieee754_pow+0xa00>)
 80088ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ce:	f7f7 fdfb 	bl	80004c8 <__aeabi_dmul>
 80088d2:	a371      	add	r3, pc, #452	@ (adr r3, 8008a98 <__ieee754_pow+0xa08>)
 80088d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d8:	4680      	mov	r8, r0
 80088da:	4689      	mov	r9, r1
 80088dc:	4620      	mov	r0, r4
 80088de:	4629      	mov	r1, r5
 80088e0:	f7f7 fdf2 	bl	80004c8 <__aeabi_dmul>
 80088e4:	4602      	mov	r2, r0
 80088e6:	460b      	mov	r3, r1
 80088e8:	4640      	mov	r0, r8
 80088ea:	4649      	mov	r1, r9
 80088ec:	f7f7 fc36 	bl	800015c <__adddf3>
 80088f0:	4604      	mov	r4, r0
 80088f2:	460d      	mov	r5, r1
 80088f4:	4602      	mov	r2, r0
 80088f6:	460b      	mov	r3, r1
 80088f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088fc:	f7f7 fc2e 	bl	800015c <__adddf3>
 8008900:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008904:	4680      	mov	r8, r0
 8008906:	4689      	mov	r9, r1
 8008908:	f7f7 fc26 	bl	8000158 <__aeabi_dsub>
 800890c:	4602      	mov	r2, r0
 800890e:	460b      	mov	r3, r1
 8008910:	4620      	mov	r0, r4
 8008912:	4629      	mov	r1, r5
 8008914:	f7f7 fc20 	bl	8000158 <__aeabi_dsub>
 8008918:	4642      	mov	r2, r8
 800891a:	4606      	mov	r6, r0
 800891c:	460f      	mov	r7, r1
 800891e:	464b      	mov	r3, r9
 8008920:	4640      	mov	r0, r8
 8008922:	4649      	mov	r1, r9
 8008924:	f7f7 fdd0 	bl	80004c8 <__aeabi_dmul>
 8008928:	a35d      	add	r3, pc, #372	@ (adr r3, 8008aa0 <__ieee754_pow+0xa10>)
 800892a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892e:	4604      	mov	r4, r0
 8008930:	460d      	mov	r5, r1
 8008932:	f7f7 fdc9 	bl	80004c8 <__aeabi_dmul>
 8008936:	a35c      	add	r3, pc, #368	@ (adr r3, 8008aa8 <__ieee754_pow+0xa18>)
 8008938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893c:	f7f7 fc0c 	bl	8000158 <__aeabi_dsub>
 8008940:	4622      	mov	r2, r4
 8008942:	462b      	mov	r3, r5
 8008944:	f7f7 fdc0 	bl	80004c8 <__aeabi_dmul>
 8008948:	a359      	add	r3, pc, #356	@ (adr r3, 8008ab0 <__ieee754_pow+0xa20>)
 800894a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894e:	f7f7 fc05 	bl	800015c <__adddf3>
 8008952:	4622      	mov	r2, r4
 8008954:	462b      	mov	r3, r5
 8008956:	f7f7 fdb7 	bl	80004c8 <__aeabi_dmul>
 800895a:	a357      	add	r3, pc, #348	@ (adr r3, 8008ab8 <__ieee754_pow+0xa28>)
 800895c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008960:	f7f7 fbfa 	bl	8000158 <__aeabi_dsub>
 8008964:	4622      	mov	r2, r4
 8008966:	462b      	mov	r3, r5
 8008968:	f7f7 fdae 	bl	80004c8 <__aeabi_dmul>
 800896c:	a354      	add	r3, pc, #336	@ (adr r3, 8008ac0 <__ieee754_pow+0xa30>)
 800896e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008972:	f7f7 fbf3 	bl	800015c <__adddf3>
 8008976:	4622      	mov	r2, r4
 8008978:	462b      	mov	r3, r5
 800897a:	f7f7 fda5 	bl	80004c8 <__aeabi_dmul>
 800897e:	4602      	mov	r2, r0
 8008980:	460b      	mov	r3, r1
 8008982:	4640      	mov	r0, r8
 8008984:	4649      	mov	r1, r9
 8008986:	f7f7 fbe7 	bl	8000158 <__aeabi_dsub>
 800898a:	4604      	mov	r4, r0
 800898c:	460d      	mov	r5, r1
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	4640      	mov	r0, r8
 8008994:	4649      	mov	r1, r9
 8008996:	f7f7 fd97 	bl	80004c8 <__aeabi_dmul>
 800899a:	2200      	movs	r2, #0
 800899c:	e9cd 0100 	strd	r0, r1, [sp]
 80089a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80089a4:	4620      	mov	r0, r4
 80089a6:	4629      	mov	r1, r5
 80089a8:	f7f7 fbd6 	bl	8000158 <__aeabi_dsub>
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089b4:	f7f7 feb2 	bl	800071c <__aeabi_ddiv>
 80089b8:	4632      	mov	r2, r6
 80089ba:	4604      	mov	r4, r0
 80089bc:	460d      	mov	r5, r1
 80089be:	463b      	mov	r3, r7
 80089c0:	4640      	mov	r0, r8
 80089c2:	4649      	mov	r1, r9
 80089c4:	f7f7 fd80 	bl	80004c8 <__aeabi_dmul>
 80089c8:	4632      	mov	r2, r6
 80089ca:	463b      	mov	r3, r7
 80089cc:	f7f7 fbc6 	bl	800015c <__adddf3>
 80089d0:	4602      	mov	r2, r0
 80089d2:	460b      	mov	r3, r1
 80089d4:	4620      	mov	r0, r4
 80089d6:	4629      	mov	r1, r5
 80089d8:	f7f7 fbbe 	bl	8000158 <__aeabi_dsub>
 80089dc:	4642      	mov	r2, r8
 80089de:	464b      	mov	r3, r9
 80089e0:	f7f7 fbba 	bl	8000158 <__aeabi_dsub>
 80089e4:	4602      	mov	r2, r0
 80089e6:	460b      	mov	r3, r1
 80089e8:	2000      	movs	r0, #0
 80089ea:	4938      	ldr	r1, [pc, #224]	@ (8008acc <__ieee754_pow+0xa3c>)
 80089ec:	f7f7 fbb4 	bl	8000158 <__aeabi_dsub>
 80089f0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80089f4:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 80089f8:	da2e      	bge.n	8008a58 <__ieee754_pow+0x9c8>
 80089fa:	4652      	mov	r2, sl
 80089fc:	f000 fb4c 	bl	8009098 <scalbn>
 8008a00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a04:	f7ff bbed 	b.w	80081e2 <__ieee754_pow+0x152>
 8008a08:	4c31      	ldr	r4, [pc, #196]	@ (8008ad0 <__ieee754_pow+0xa40>)
 8008a0a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008a0e:	42a3      	cmp	r3, r4
 8008a10:	d91a      	bls.n	8008a48 <__ieee754_pow+0x9b8>
 8008a12:	4b30      	ldr	r3, [pc, #192]	@ (8008ad4 <__ieee754_pow+0xa44>)
 8008a14:	440b      	add	r3, r1
 8008a16:	4303      	orrs	r3, r0
 8008a18:	d009      	beq.n	8008a2e <__ieee754_pow+0x99e>
 8008a1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	2300      	movs	r3, #0
 8008a22:	f7f7 ffc3 	bl	80009ac <__aeabi_dcmplt>
 8008a26:	3800      	subs	r0, #0
 8008a28:	bf18      	it	ne
 8008a2a:	2001      	movne	r0, #1
 8008a2c:	e444      	b.n	80082b8 <__ieee754_pow+0x228>
 8008a2e:	4642      	mov	r2, r8
 8008a30:	464b      	mov	r3, r9
 8008a32:	f7f7 fb91 	bl	8000158 <__aeabi_dsub>
 8008a36:	4632      	mov	r2, r6
 8008a38:	463b      	mov	r3, r7
 8008a3a:	f7f7 ffcb 	bl	80009d4 <__aeabi_dcmpge>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	d1eb      	bne.n	8008a1a <__ieee754_pow+0x98a>
 8008a42:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8008ad8 <__ieee754_pow+0xa48>
 8008a46:	e6fd      	b.n	8008844 <__ieee754_pow+0x7b4>
 8008a48:	469a      	mov	sl, r3
 8008a4a:	4b24      	ldr	r3, [pc, #144]	@ (8008adc <__ieee754_pow+0xa4c>)
 8008a4c:	459a      	cmp	sl, r3
 8008a4e:	f63f aef9 	bhi.w	8008844 <__ieee754_pow+0x7b4>
 8008a52:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008a56:	e71b      	b.n	8008890 <__ieee754_pow+0x800>
 8008a58:	4621      	mov	r1, r4
 8008a5a:	e7d1      	b.n	8008a00 <__ieee754_pow+0x970>
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	491b      	ldr	r1, [pc, #108]	@ (8008acc <__ieee754_pow+0xa3c>)
 8008a60:	f7ff bb34 	b.w	80080cc <__ieee754_pow+0x3c>
 8008a64:	2000      	movs	r0, #0
 8008a66:	2100      	movs	r1, #0
 8008a68:	f7ff bb30 	b.w	80080cc <__ieee754_pow+0x3c>
 8008a6c:	4650      	mov	r0, sl
 8008a6e:	4659      	mov	r1, fp
 8008a70:	f7ff bb2c 	b.w	80080cc <__ieee754_pow+0x3c>
 8008a74:	460c      	mov	r4, r1
 8008a76:	f7ff bb79 	b.w	800816c <__ieee754_pow+0xdc>
 8008a7a:	2400      	movs	r4, #0
 8008a7c:	f7ff bb64 	b.w	8008148 <__ieee754_pow+0xb8>
 8008a80:	652b82fe 	.word	0x652b82fe
 8008a84:	3c971547 	.word	0x3c971547
 8008a88:	00000000 	.word	0x00000000
 8008a8c:	3fe62e43 	.word	0x3fe62e43
 8008a90:	fefa39ef 	.word	0xfefa39ef
 8008a94:	3fe62e42 	.word	0x3fe62e42
 8008a98:	0ca86c39 	.word	0x0ca86c39
 8008a9c:	be205c61 	.word	0xbe205c61
 8008aa0:	72bea4d0 	.word	0x72bea4d0
 8008aa4:	3e663769 	.word	0x3e663769
 8008aa8:	c5d26bf1 	.word	0xc5d26bf1
 8008aac:	3ebbbd41 	.word	0x3ebbbd41
 8008ab0:	af25de2c 	.word	0xaf25de2c
 8008ab4:	3f11566a 	.word	0x3f11566a
 8008ab8:	16bebd93 	.word	0x16bebd93
 8008abc:	3f66c16c 	.word	0x3f66c16c
 8008ac0:	5555553e 	.word	0x5555553e
 8008ac4:	3fc55555 	.word	0x3fc55555
 8008ac8:	fff00000 	.word	0xfff00000
 8008acc:	3ff00000 	.word	0x3ff00000
 8008ad0:	4090cbff 	.word	0x4090cbff
 8008ad4:	3f6f3400 	.word	0x3f6f3400
 8008ad8:	4090cc00 	.word	0x4090cc00
 8008adc:	3fe00000 	.word	0x3fe00000

08008ae0 <fabs>:
 8008ae0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	4770      	bx	lr

08008ae8 <__ieee754_asinf>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8008af0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8008af4:	4604      	mov	r4, r0
 8008af6:	4605      	mov	r5, r0
 8008af8:	d10c      	bne.n	8008b14 <__ieee754_asinf+0x2c>
 8008afa:	498c      	ldr	r1, [pc, #560]	@ (8008d2c <__ieee754_asinf+0x244>)
 8008afc:	f7f8 f912 	bl	8000d24 <__aeabi_fmul>
 8008b00:	498b      	ldr	r1, [pc, #556]	@ (8008d30 <__ieee754_asinf+0x248>)
 8008b02:	4605      	mov	r5, r0
 8008b04:	4620      	mov	r0, r4
 8008b06:	f7f8 f90d 	bl	8000d24 <__aeabi_fmul>
 8008b0a:	4601      	mov	r1, r0
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	f7f8 f801 	bl	8000b14 <__addsf3>
 8008b12:	e006      	b.n	8008b22 <__ieee754_asinf+0x3a>
 8008b14:	d909      	bls.n	8008b2a <__ieee754_asinf+0x42>
 8008b16:	4601      	mov	r1, r0
 8008b18:	f7f7 fffa 	bl	8000b10 <__aeabi_fsub>
 8008b1c:	4601      	mov	r1, r0
 8008b1e:	f7f8 f9b5 	bl	8000e8c <__aeabi_fdiv>
 8008b22:	4604      	mov	r4, r0
 8008b24:	4620      	mov	r0, r4
 8008b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b2a:	f1b8 5f7c 	cmp.w	r8, #1056964608	@ 0x3f000000
 8008b2e:	d20b      	bcs.n	8008b48 <__ieee754_asinf+0x60>
 8008b30:	f1b8 5f48 	cmp.w	r8, #838860800	@ 0x32000000
 8008b34:	d273      	bcs.n	8008c1e <__ieee754_asinf+0x136>
 8008b36:	497f      	ldr	r1, [pc, #508]	@ (8008d34 <__ieee754_asinf+0x24c>)
 8008b38:	f7f7 ffec 	bl	8000b14 <__addsf3>
 8008b3c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008b40:	f7f8 faac 	bl	800109c <__aeabi_fcmpgt>
 8008b44:	2800      	cmp	r0, #0
 8008b46:	d1ed      	bne.n	8008b24 <__ieee754_asinf+0x3c>
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f7ff fa23 	bl	8007f94 <fabsf>
 8008b4e:	4601      	mov	r1, r0
 8008b50:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8008b54:	f7f7 ffdc 	bl	8000b10 <__aeabi_fsub>
 8008b58:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8008b5c:	f7f8 f8e2 	bl	8000d24 <__aeabi_fmul>
 8008b60:	4606      	mov	r6, r0
 8008b62:	4975      	ldr	r1, [pc, #468]	@ (8008d38 <__ieee754_asinf+0x250>)
 8008b64:	f7f8 f8de 	bl	8000d24 <__aeabi_fmul>
 8008b68:	4974      	ldr	r1, [pc, #464]	@ (8008d3c <__ieee754_asinf+0x254>)
 8008b6a:	f7f7 ffd3 	bl	8000b14 <__addsf3>
 8008b6e:	4631      	mov	r1, r6
 8008b70:	f7f8 f8d8 	bl	8000d24 <__aeabi_fmul>
 8008b74:	4972      	ldr	r1, [pc, #456]	@ (8008d40 <__ieee754_asinf+0x258>)
 8008b76:	f7f7 ffcb 	bl	8000b10 <__aeabi_fsub>
 8008b7a:	4631      	mov	r1, r6
 8008b7c:	f7f8 f8d2 	bl	8000d24 <__aeabi_fmul>
 8008b80:	4970      	ldr	r1, [pc, #448]	@ (8008d44 <__ieee754_asinf+0x25c>)
 8008b82:	f7f7 ffc7 	bl	8000b14 <__addsf3>
 8008b86:	4631      	mov	r1, r6
 8008b88:	f7f8 f8cc 	bl	8000d24 <__aeabi_fmul>
 8008b8c:	496e      	ldr	r1, [pc, #440]	@ (8008d48 <__ieee754_asinf+0x260>)
 8008b8e:	f7f7 ffbf 	bl	8000b10 <__aeabi_fsub>
 8008b92:	4631      	mov	r1, r6
 8008b94:	f7f8 f8c6 	bl	8000d24 <__aeabi_fmul>
 8008b98:	496c      	ldr	r1, [pc, #432]	@ (8008d4c <__ieee754_asinf+0x264>)
 8008b9a:	f7f7 ffbb 	bl	8000b14 <__addsf3>
 8008b9e:	4631      	mov	r1, r6
 8008ba0:	f7f8 f8c0 	bl	8000d24 <__aeabi_fmul>
 8008ba4:	496a      	ldr	r1, [pc, #424]	@ (8008d50 <__ieee754_asinf+0x268>)
 8008ba6:	4681      	mov	r9, r0
 8008ba8:	4630      	mov	r0, r6
 8008baa:	f7f8 f8bb 	bl	8000d24 <__aeabi_fmul>
 8008bae:	4969      	ldr	r1, [pc, #420]	@ (8008d54 <__ieee754_asinf+0x26c>)
 8008bb0:	f7f7 ffae 	bl	8000b10 <__aeabi_fsub>
 8008bb4:	4631      	mov	r1, r6
 8008bb6:	f7f8 f8b5 	bl	8000d24 <__aeabi_fmul>
 8008bba:	4967      	ldr	r1, [pc, #412]	@ (8008d58 <__ieee754_asinf+0x270>)
 8008bbc:	f7f7 ffaa 	bl	8000b14 <__addsf3>
 8008bc0:	4631      	mov	r1, r6
 8008bc2:	f7f8 f8af 	bl	8000d24 <__aeabi_fmul>
 8008bc6:	4965      	ldr	r1, [pc, #404]	@ (8008d5c <__ieee754_asinf+0x274>)
 8008bc8:	f7f7 ffa2 	bl	8000b10 <__aeabi_fsub>
 8008bcc:	4631      	mov	r1, r6
 8008bce:	f7f8 f8a9 	bl	8000d24 <__aeabi_fmul>
 8008bd2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008bd6:	f7f7 ff9d 	bl	8000b14 <__addsf3>
 8008bda:	4682      	mov	sl, r0
 8008bdc:	4630      	mov	r0, r6
 8008bde:	f7ff f9e7 	bl	8007fb0 <__ieee754_sqrtf>
 8008be2:	4b5f      	ldr	r3, [pc, #380]	@ (8008d60 <__ieee754_asinf+0x278>)
 8008be4:	4607      	mov	r7, r0
 8008be6:	4598      	cmp	r8, r3
 8008be8:	d963      	bls.n	8008cb2 <__ieee754_asinf+0x1ca>
 8008bea:	4651      	mov	r1, sl
 8008bec:	4648      	mov	r0, r9
 8008bee:	f7f8 f94d 	bl	8000e8c <__aeabi_fdiv>
 8008bf2:	4639      	mov	r1, r7
 8008bf4:	f7f8 f896 	bl	8000d24 <__aeabi_fmul>
 8008bf8:	4639      	mov	r1, r7
 8008bfa:	f7f7 ff8b 	bl	8000b14 <__addsf3>
 8008bfe:	4601      	mov	r1, r0
 8008c00:	f7f7 ff88 	bl	8000b14 <__addsf3>
 8008c04:	4957      	ldr	r1, [pc, #348]	@ (8008d64 <__ieee754_asinf+0x27c>)
 8008c06:	f7f7 ff85 	bl	8000b14 <__addsf3>
 8008c0a:	4601      	mov	r1, r0
 8008c0c:	4847      	ldr	r0, [pc, #284]	@ (8008d2c <__ieee754_asinf+0x244>)
 8008c0e:	f7f7 ff7f 	bl	8000b10 <__aeabi_fsub>
 8008c12:	2d00      	cmp	r5, #0
 8008c14:	4604      	mov	r4, r0
 8008c16:	bfd8      	it	le
 8008c18:	f100 4400 	addle.w	r4, r0, #2147483648	@ 0x80000000
 8008c1c:	e782      	b.n	8008b24 <__ieee754_asinf+0x3c>
 8008c1e:	4601      	mov	r1, r0
 8008c20:	f7f8 f880 	bl	8000d24 <__aeabi_fmul>
 8008c24:	4605      	mov	r5, r0
 8008c26:	4944      	ldr	r1, [pc, #272]	@ (8008d38 <__ieee754_asinf+0x250>)
 8008c28:	f7f8 f87c 	bl	8000d24 <__aeabi_fmul>
 8008c2c:	4943      	ldr	r1, [pc, #268]	@ (8008d3c <__ieee754_asinf+0x254>)
 8008c2e:	f7f7 ff71 	bl	8000b14 <__addsf3>
 8008c32:	4629      	mov	r1, r5
 8008c34:	f7f8 f876 	bl	8000d24 <__aeabi_fmul>
 8008c38:	4941      	ldr	r1, [pc, #260]	@ (8008d40 <__ieee754_asinf+0x258>)
 8008c3a:	f7f7 ff69 	bl	8000b10 <__aeabi_fsub>
 8008c3e:	4629      	mov	r1, r5
 8008c40:	f7f8 f870 	bl	8000d24 <__aeabi_fmul>
 8008c44:	493f      	ldr	r1, [pc, #252]	@ (8008d44 <__ieee754_asinf+0x25c>)
 8008c46:	f7f7 ff65 	bl	8000b14 <__addsf3>
 8008c4a:	4629      	mov	r1, r5
 8008c4c:	f7f8 f86a 	bl	8000d24 <__aeabi_fmul>
 8008c50:	493d      	ldr	r1, [pc, #244]	@ (8008d48 <__ieee754_asinf+0x260>)
 8008c52:	f7f7 ff5d 	bl	8000b10 <__aeabi_fsub>
 8008c56:	4629      	mov	r1, r5
 8008c58:	f7f8 f864 	bl	8000d24 <__aeabi_fmul>
 8008c5c:	493b      	ldr	r1, [pc, #236]	@ (8008d4c <__ieee754_asinf+0x264>)
 8008c5e:	f7f7 ff59 	bl	8000b14 <__addsf3>
 8008c62:	4629      	mov	r1, r5
 8008c64:	f7f8 f85e 	bl	8000d24 <__aeabi_fmul>
 8008c68:	4939      	ldr	r1, [pc, #228]	@ (8008d50 <__ieee754_asinf+0x268>)
 8008c6a:	4606      	mov	r6, r0
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	f7f8 f859 	bl	8000d24 <__aeabi_fmul>
 8008c72:	4938      	ldr	r1, [pc, #224]	@ (8008d54 <__ieee754_asinf+0x26c>)
 8008c74:	f7f7 ff4c 	bl	8000b10 <__aeabi_fsub>
 8008c78:	4629      	mov	r1, r5
 8008c7a:	f7f8 f853 	bl	8000d24 <__aeabi_fmul>
 8008c7e:	4936      	ldr	r1, [pc, #216]	@ (8008d58 <__ieee754_asinf+0x270>)
 8008c80:	f7f7 ff48 	bl	8000b14 <__addsf3>
 8008c84:	4629      	mov	r1, r5
 8008c86:	f7f8 f84d 	bl	8000d24 <__aeabi_fmul>
 8008c8a:	4934      	ldr	r1, [pc, #208]	@ (8008d5c <__ieee754_asinf+0x274>)
 8008c8c:	f7f7 ff40 	bl	8000b10 <__aeabi_fsub>
 8008c90:	4629      	mov	r1, r5
 8008c92:	f7f8 f847 	bl	8000d24 <__aeabi_fmul>
 8008c96:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008c9a:	f7f7 ff3b 	bl	8000b14 <__addsf3>
 8008c9e:	4601      	mov	r1, r0
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	f7f8 f8f3 	bl	8000e8c <__aeabi_fdiv>
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	f7f8 f83c 	bl	8000d24 <__aeabi_fmul>
 8008cac:	4601      	mov	r1, r0
 8008cae:	4620      	mov	r0, r4
 8008cb0:	e72d      	b.n	8008b0e <__ieee754_asinf+0x26>
 8008cb2:	4601      	mov	r1, r0
 8008cb4:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 8008cb8:	f7f7 ff2c 	bl	8000b14 <__addsf3>
 8008cbc:	4651      	mov	r1, sl
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	4648      	mov	r0, r9
 8008cc2:	f7f8 f8e3 	bl	8000e8c <__aeabi_fdiv>
 8008cc6:	4601      	mov	r1, r0
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f7f8 f82b 	bl	8000d24 <__aeabi_fmul>
 8008cce:	f028 080f 	bic.w	r8, r8, #15
 8008cd2:	4681      	mov	r9, r0
 8008cd4:	4641      	mov	r1, r8
 8008cd6:	4640      	mov	r0, r8
 8008cd8:	f7f8 f824 	bl	8000d24 <__aeabi_fmul>
 8008cdc:	4601      	mov	r1, r0
 8008cde:	4630      	mov	r0, r6
 8008ce0:	f7f7 ff16 	bl	8000b10 <__aeabi_fsub>
 8008ce4:	4641      	mov	r1, r8
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	4638      	mov	r0, r7
 8008cea:	f7f7 ff13 	bl	8000b14 <__addsf3>
 8008cee:	4601      	mov	r1, r0
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f7f8 f8cb 	bl	8000e8c <__aeabi_fdiv>
 8008cf6:	4601      	mov	r1, r0
 8008cf8:	f7f7 ff0c 	bl	8000b14 <__addsf3>
 8008cfc:	4601      	mov	r1, r0
 8008cfe:	480c      	ldr	r0, [pc, #48]	@ (8008d30 <__ieee754_asinf+0x248>)
 8008d00:	f7f7 ff06 	bl	8000b10 <__aeabi_fsub>
 8008d04:	4601      	mov	r1, r0
 8008d06:	4648      	mov	r0, r9
 8008d08:	f7f7 ff02 	bl	8000b10 <__aeabi_fsub>
 8008d0c:	4641      	mov	r1, r8
 8008d0e:	4604      	mov	r4, r0
 8008d10:	4640      	mov	r0, r8
 8008d12:	f7f7 feff 	bl	8000b14 <__addsf3>
 8008d16:	4601      	mov	r1, r0
 8008d18:	4813      	ldr	r0, [pc, #76]	@ (8008d68 <__ieee754_asinf+0x280>)
 8008d1a:	f7f7 fef9 	bl	8000b10 <__aeabi_fsub>
 8008d1e:	4601      	mov	r1, r0
 8008d20:	4620      	mov	r0, r4
 8008d22:	f7f7 fef5 	bl	8000b10 <__aeabi_fsub>
 8008d26:	4601      	mov	r1, r0
 8008d28:	480f      	ldr	r0, [pc, #60]	@ (8008d68 <__ieee754_asinf+0x280>)
 8008d2a:	e770      	b.n	8008c0e <__ieee754_asinf+0x126>
 8008d2c:	3fc90fdb 	.word	0x3fc90fdb
 8008d30:	b33bbd2e 	.word	0xb33bbd2e
 8008d34:	7149f2ca 	.word	0x7149f2ca
 8008d38:	3811ef08 	.word	0x3811ef08
 8008d3c:	3a4f7f04 	.word	0x3a4f7f04
 8008d40:	3d241146 	.word	0x3d241146
 8008d44:	3e4e0aa8 	.word	0x3e4e0aa8
 8008d48:	3ea6b090 	.word	0x3ea6b090
 8008d4c:	3e2aaaab 	.word	0x3e2aaaab
 8008d50:	3d9dc62e 	.word	0x3d9dc62e
 8008d54:	3f303361 	.word	0x3f303361
 8008d58:	4001572d 	.word	0x4001572d
 8008d5c:	4019d139 	.word	0x4019d139
 8008d60:	3f799999 	.word	0x3f799999
 8008d64:	333bbd2e 	.word	0x333bbd2e
 8008d68:	3f490fdb 	.word	0x3f490fdb

08008d6c <__ieee754_atan2f>:
 8008d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8008d72:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8008d76:	4603      	mov	r3, r0
 8008d78:	d805      	bhi.n	8008d86 <__ieee754_atan2f+0x1a>
 8008d7a:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8008d7e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008d82:	4607      	mov	r7, r0
 8008d84:	d904      	bls.n	8008d90 <__ieee754_atan2f+0x24>
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7f7 fec4 	bl	8000b14 <__addsf3>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	e010      	b.n	8008db2 <__ieee754_atan2f+0x46>
 8008d90:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 8008d94:	d103      	bne.n	8008d9e <__ieee754_atan2f+0x32>
 8008d96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d9a:	f000 b86f 	b.w	8008e7c <atanf>
 8008d9e:	178c      	asrs	r4, r1, #30
 8008da0:	f004 0402 	and.w	r4, r4, #2
 8008da4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008da8:	b92a      	cbnz	r2, 8008db6 <__ieee754_atan2f+0x4a>
 8008daa:	2c02      	cmp	r4, #2
 8008dac:	d04b      	beq.n	8008e46 <__ieee754_atan2f+0xda>
 8008dae:	2c03      	cmp	r4, #3
 8008db0:	d04b      	beq.n	8008e4a <__ieee754_atan2f+0xde>
 8008db2:	4618      	mov	r0, r3
 8008db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008db6:	b91e      	cbnz	r6, 8008dc0 <__ieee754_atan2f+0x54>
 8008db8:	2f00      	cmp	r7, #0
 8008dba:	da4c      	bge.n	8008e56 <__ieee754_atan2f+0xea>
 8008dbc:	4b27      	ldr	r3, [pc, #156]	@ (8008e5c <__ieee754_atan2f+0xf0>)
 8008dbe:	e7f8      	b.n	8008db2 <__ieee754_atan2f+0x46>
 8008dc0:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8008dc4:	d10e      	bne.n	8008de4 <__ieee754_atan2f+0x78>
 8008dc6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008dca:	f104 34ff 	add.w	r4, r4, #4294967295
 8008dce:	d105      	bne.n	8008ddc <__ieee754_atan2f+0x70>
 8008dd0:	2c02      	cmp	r4, #2
 8008dd2:	d83c      	bhi.n	8008e4e <__ieee754_atan2f+0xe2>
 8008dd4:	4b22      	ldr	r3, [pc, #136]	@ (8008e60 <__ieee754_atan2f+0xf4>)
 8008dd6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008dda:	e7ea      	b.n	8008db2 <__ieee754_atan2f+0x46>
 8008ddc:	2c02      	cmp	r4, #2
 8008dde:	d838      	bhi.n	8008e52 <__ieee754_atan2f+0xe6>
 8008de0:	4b20      	ldr	r3, [pc, #128]	@ (8008e64 <__ieee754_atan2f+0xf8>)
 8008de2:	e7f8      	b.n	8008dd6 <__ieee754_atan2f+0x6a>
 8008de4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008de8:	d0e6      	beq.n	8008db8 <__ieee754_atan2f+0x4c>
 8008dea:	1b92      	subs	r2, r2, r6
 8008dec:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 8008df0:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8008df4:	da17      	bge.n	8008e26 <__ieee754_atan2f+0xba>
 8008df6:	2900      	cmp	r1, #0
 8008df8:	da01      	bge.n	8008dfe <__ieee754_atan2f+0x92>
 8008dfa:	303c      	adds	r0, #60	@ 0x3c
 8008dfc:	db15      	blt.n	8008e2a <__ieee754_atan2f+0xbe>
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7f8 f844 	bl	8000e8c <__aeabi_fdiv>
 8008e04:	f7ff f8c6 	bl	8007f94 <fabsf>
 8008e08:	f000 f838 	bl	8008e7c <atanf>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2c01      	cmp	r4, #1
 8008e10:	d00d      	beq.n	8008e2e <__ieee754_atan2f+0xc2>
 8008e12:	2c02      	cmp	r4, #2
 8008e14:	d00e      	beq.n	8008e34 <__ieee754_atan2f+0xc8>
 8008e16:	2c00      	cmp	r4, #0
 8008e18:	d0cb      	beq.n	8008db2 <__ieee754_atan2f+0x46>
 8008e1a:	4913      	ldr	r1, [pc, #76]	@ (8008e68 <__ieee754_atan2f+0xfc>)
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7f7 fe79 	bl	8000b14 <__addsf3>
 8008e22:	4912      	ldr	r1, [pc, #72]	@ (8008e6c <__ieee754_atan2f+0x100>)
 8008e24:	e00c      	b.n	8008e40 <__ieee754_atan2f+0xd4>
 8008e26:	4b12      	ldr	r3, [pc, #72]	@ (8008e70 <__ieee754_atan2f+0x104>)
 8008e28:	e7f1      	b.n	8008e0e <__ieee754_atan2f+0xa2>
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	e7ef      	b.n	8008e0e <__ieee754_atan2f+0xa2>
 8008e2e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008e32:	e7be      	b.n	8008db2 <__ieee754_atan2f+0x46>
 8008e34:	490c      	ldr	r1, [pc, #48]	@ (8008e68 <__ieee754_atan2f+0xfc>)
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7f7 fe6c 	bl	8000b14 <__addsf3>
 8008e3c:	4601      	mov	r1, r0
 8008e3e:	480b      	ldr	r0, [pc, #44]	@ (8008e6c <__ieee754_atan2f+0x100>)
 8008e40:	f7f7 fe66 	bl	8000b10 <__aeabi_fsub>
 8008e44:	e7a2      	b.n	8008d8c <__ieee754_atan2f+0x20>
 8008e46:	4b09      	ldr	r3, [pc, #36]	@ (8008e6c <__ieee754_atan2f+0x100>)
 8008e48:	e7b3      	b.n	8008db2 <__ieee754_atan2f+0x46>
 8008e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8008e74 <__ieee754_atan2f+0x108>)
 8008e4c:	e7b1      	b.n	8008db2 <__ieee754_atan2f+0x46>
 8008e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8008e78 <__ieee754_atan2f+0x10c>)
 8008e50:	e7af      	b.n	8008db2 <__ieee754_atan2f+0x46>
 8008e52:	2300      	movs	r3, #0
 8008e54:	e7ad      	b.n	8008db2 <__ieee754_atan2f+0x46>
 8008e56:	4b06      	ldr	r3, [pc, #24]	@ (8008e70 <__ieee754_atan2f+0x104>)
 8008e58:	e7ab      	b.n	8008db2 <__ieee754_atan2f+0x46>
 8008e5a:	bf00      	nop
 8008e5c:	bfc90fdb 	.word	0xbfc90fdb
 8008e60:	080096b4 	.word	0x080096b4
 8008e64:	080096a8 	.word	0x080096a8
 8008e68:	33bbbd2e 	.word	0x33bbbd2e
 8008e6c:	40490fdb 	.word	0x40490fdb
 8008e70:	3fc90fdb 	.word	0x3fc90fdb
 8008e74:	c0490fdb 	.word	0xc0490fdb
 8008e78:	3f490fdb 	.word	0x3f490fdb

08008e7c <atanf>:
 8008e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e80:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8008e84:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 8008e88:	4604      	mov	r4, r0
 8008e8a:	4680      	mov	r8, r0
 8008e8c:	d30e      	bcc.n	8008eac <atanf+0x30>
 8008e8e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8008e92:	d904      	bls.n	8008e9e <atanf+0x22>
 8008e94:	4601      	mov	r1, r0
 8008e96:	f7f7 fe3d 	bl	8000b14 <__addsf3>
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	e003      	b.n	8008ea6 <atanf+0x2a>
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	f340 80ce 	ble.w	8009040 <atanf+0x1c4>
 8008ea4:	4c67      	ldr	r4, [pc, #412]	@ (8009044 <atanf+0x1c8>)
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eac:	4b66      	ldr	r3, [pc, #408]	@ (8009048 <atanf+0x1cc>)
 8008eae:	429d      	cmp	r5, r3
 8008eb0:	d80e      	bhi.n	8008ed0 <atanf+0x54>
 8008eb2:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 8008eb6:	d208      	bcs.n	8008eca <atanf+0x4e>
 8008eb8:	4964      	ldr	r1, [pc, #400]	@ (800904c <atanf+0x1d0>)
 8008eba:	f7f7 fe2b 	bl	8000b14 <__addsf3>
 8008ebe:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008ec2:	f7f8 f8eb 	bl	800109c <__aeabi_fcmpgt>
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	d1ed      	bne.n	8008ea6 <atanf+0x2a>
 8008eca:	f04f 36ff 	mov.w	r6, #4294967295
 8008ece:	e01c      	b.n	8008f0a <atanf+0x8e>
 8008ed0:	f7ff f860 	bl	8007f94 <fabsf>
 8008ed4:	4b5e      	ldr	r3, [pc, #376]	@ (8009050 <atanf+0x1d4>)
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	429d      	cmp	r5, r3
 8008eda:	d87c      	bhi.n	8008fd6 <atanf+0x15a>
 8008edc:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8008ee0:	429d      	cmp	r5, r3
 8008ee2:	d867      	bhi.n	8008fb4 <atanf+0x138>
 8008ee4:	4601      	mov	r1, r0
 8008ee6:	f7f7 fe15 	bl	8000b14 <__addsf3>
 8008eea:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008eee:	f7f7 fe0f 	bl	8000b10 <__aeabi_fsub>
 8008ef2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008ef6:	4605      	mov	r5, r0
 8008ef8:	4620      	mov	r0, r4
 8008efa:	f7f7 fe0b 	bl	8000b14 <__addsf3>
 8008efe:	4601      	mov	r1, r0
 8008f00:	4628      	mov	r0, r5
 8008f02:	f7f7 ffc3 	bl	8000e8c <__aeabi_fdiv>
 8008f06:	2600      	movs	r6, #0
 8008f08:	4604      	mov	r4, r0
 8008f0a:	4621      	mov	r1, r4
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	f7f7 ff09 	bl	8000d24 <__aeabi_fmul>
 8008f12:	4601      	mov	r1, r0
 8008f14:	4607      	mov	r7, r0
 8008f16:	f7f7 ff05 	bl	8000d24 <__aeabi_fmul>
 8008f1a:	4605      	mov	r5, r0
 8008f1c:	494d      	ldr	r1, [pc, #308]	@ (8009054 <atanf+0x1d8>)
 8008f1e:	f7f7 ff01 	bl	8000d24 <__aeabi_fmul>
 8008f22:	494d      	ldr	r1, [pc, #308]	@ (8009058 <atanf+0x1dc>)
 8008f24:	f7f7 fdf6 	bl	8000b14 <__addsf3>
 8008f28:	4629      	mov	r1, r5
 8008f2a:	f7f7 fefb 	bl	8000d24 <__aeabi_fmul>
 8008f2e:	494b      	ldr	r1, [pc, #300]	@ (800905c <atanf+0x1e0>)
 8008f30:	f7f7 fdf0 	bl	8000b14 <__addsf3>
 8008f34:	4629      	mov	r1, r5
 8008f36:	f7f7 fef5 	bl	8000d24 <__aeabi_fmul>
 8008f3a:	4949      	ldr	r1, [pc, #292]	@ (8009060 <atanf+0x1e4>)
 8008f3c:	f7f7 fdea 	bl	8000b14 <__addsf3>
 8008f40:	4629      	mov	r1, r5
 8008f42:	f7f7 feef 	bl	8000d24 <__aeabi_fmul>
 8008f46:	4947      	ldr	r1, [pc, #284]	@ (8009064 <atanf+0x1e8>)
 8008f48:	f7f7 fde4 	bl	8000b14 <__addsf3>
 8008f4c:	4629      	mov	r1, r5
 8008f4e:	f7f7 fee9 	bl	8000d24 <__aeabi_fmul>
 8008f52:	4945      	ldr	r1, [pc, #276]	@ (8009068 <atanf+0x1ec>)
 8008f54:	f7f7 fdde 	bl	8000b14 <__addsf3>
 8008f58:	4639      	mov	r1, r7
 8008f5a:	f7f7 fee3 	bl	8000d24 <__aeabi_fmul>
 8008f5e:	4943      	ldr	r1, [pc, #268]	@ (800906c <atanf+0x1f0>)
 8008f60:	4607      	mov	r7, r0
 8008f62:	4628      	mov	r0, r5
 8008f64:	f7f7 fede 	bl	8000d24 <__aeabi_fmul>
 8008f68:	4941      	ldr	r1, [pc, #260]	@ (8009070 <atanf+0x1f4>)
 8008f6a:	f7f7 fdd1 	bl	8000b10 <__aeabi_fsub>
 8008f6e:	4629      	mov	r1, r5
 8008f70:	f7f7 fed8 	bl	8000d24 <__aeabi_fmul>
 8008f74:	493f      	ldr	r1, [pc, #252]	@ (8009074 <atanf+0x1f8>)
 8008f76:	f7f7 fdcb 	bl	8000b10 <__aeabi_fsub>
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	f7f7 fed2 	bl	8000d24 <__aeabi_fmul>
 8008f80:	493d      	ldr	r1, [pc, #244]	@ (8009078 <atanf+0x1fc>)
 8008f82:	f7f7 fdc5 	bl	8000b10 <__aeabi_fsub>
 8008f86:	4629      	mov	r1, r5
 8008f88:	f7f7 fecc 	bl	8000d24 <__aeabi_fmul>
 8008f8c:	493b      	ldr	r1, [pc, #236]	@ (800907c <atanf+0x200>)
 8008f8e:	f7f7 fdbf 	bl	8000b10 <__aeabi_fsub>
 8008f92:	4629      	mov	r1, r5
 8008f94:	f7f7 fec6 	bl	8000d24 <__aeabi_fmul>
 8008f98:	4601      	mov	r1, r0
 8008f9a:	4638      	mov	r0, r7
 8008f9c:	f7f7 fdba 	bl	8000b14 <__addsf3>
 8008fa0:	4621      	mov	r1, r4
 8008fa2:	f7f7 febf 	bl	8000d24 <__aeabi_fmul>
 8008fa6:	1c73      	adds	r3, r6, #1
 8008fa8:	4601      	mov	r1, r0
 8008faa:	d133      	bne.n	8009014 <atanf+0x198>
 8008fac:	4620      	mov	r0, r4
 8008fae:	f7f7 fdaf 	bl	8000b10 <__aeabi_fsub>
 8008fb2:	e772      	b.n	8008e9a <atanf+0x1e>
 8008fb4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008fb8:	f7f7 fdaa 	bl	8000b10 <__aeabi_fsub>
 8008fbc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008fc0:	4605      	mov	r5, r0
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f7f7 fda6 	bl	8000b14 <__addsf3>
 8008fc8:	4601      	mov	r1, r0
 8008fca:	4628      	mov	r0, r5
 8008fcc:	f7f7 ff5e 	bl	8000e8c <__aeabi_fdiv>
 8008fd0:	2601      	movs	r6, #1
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	e799      	b.n	8008f0a <atanf+0x8e>
 8008fd6:	4b2a      	ldr	r3, [pc, #168]	@ (8009080 <atanf+0x204>)
 8008fd8:	429d      	cmp	r5, r3
 8008fda:	d814      	bhi.n	8009006 <atanf+0x18a>
 8008fdc:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8008fe0:	f7f7 fd96 	bl	8000b10 <__aeabi_fsub>
 8008fe4:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8008fe8:	4605      	mov	r5, r0
 8008fea:	4620      	mov	r0, r4
 8008fec:	f7f7 fe9a 	bl	8000d24 <__aeabi_fmul>
 8008ff0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008ff4:	f7f7 fd8e 	bl	8000b14 <__addsf3>
 8008ff8:	4601      	mov	r1, r0
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	f7f7 ff46 	bl	8000e8c <__aeabi_fdiv>
 8009000:	2602      	movs	r6, #2
 8009002:	4604      	mov	r4, r0
 8009004:	e781      	b.n	8008f0a <atanf+0x8e>
 8009006:	4601      	mov	r1, r0
 8009008:	481e      	ldr	r0, [pc, #120]	@ (8009084 <atanf+0x208>)
 800900a:	f7f7 ff3f 	bl	8000e8c <__aeabi_fdiv>
 800900e:	2603      	movs	r6, #3
 8009010:	4604      	mov	r4, r0
 8009012:	e77a      	b.n	8008f0a <atanf+0x8e>
 8009014:	4b1c      	ldr	r3, [pc, #112]	@ (8009088 <atanf+0x20c>)
 8009016:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800901a:	f7f7 fd79 	bl	8000b10 <__aeabi_fsub>
 800901e:	4621      	mov	r1, r4
 8009020:	f7f7 fd76 	bl	8000b10 <__aeabi_fsub>
 8009024:	4b19      	ldr	r3, [pc, #100]	@ (800908c <atanf+0x210>)
 8009026:	4601      	mov	r1, r0
 8009028:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800902c:	f7f7 fd70 	bl	8000b10 <__aeabi_fsub>
 8009030:	f1b8 0f00 	cmp.w	r8, #0
 8009034:	4604      	mov	r4, r0
 8009036:	f6bf af36 	bge.w	8008ea6 <atanf+0x2a>
 800903a:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800903e:	e732      	b.n	8008ea6 <atanf+0x2a>
 8009040:	4c13      	ldr	r4, [pc, #76]	@ (8009090 <atanf+0x214>)
 8009042:	e730      	b.n	8008ea6 <atanf+0x2a>
 8009044:	3fc90fdb 	.word	0x3fc90fdb
 8009048:	3edfffff 	.word	0x3edfffff
 800904c:	7149f2ca 	.word	0x7149f2ca
 8009050:	3f97ffff 	.word	0x3f97ffff
 8009054:	3c8569d7 	.word	0x3c8569d7
 8009058:	3d4bda59 	.word	0x3d4bda59
 800905c:	3d886b35 	.word	0x3d886b35
 8009060:	3dba2e6e 	.word	0x3dba2e6e
 8009064:	3e124925 	.word	0x3e124925
 8009068:	3eaaaaab 	.word	0x3eaaaaab
 800906c:	bd15a221 	.word	0xbd15a221
 8009070:	3d6ef16b 	.word	0x3d6ef16b
 8009074:	3d9d8795 	.word	0x3d9d8795
 8009078:	3de38e38 	.word	0x3de38e38
 800907c:	3e4ccccd 	.word	0x3e4ccccd
 8009080:	401bffff 	.word	0x401bffff
 8009084:	bf800000 	.word	0xbf800000
 8009088:	080096c0 	.word	0x080096c0
 800908c:	080096d0 	.word	0x080096d0
 8009090:	bfc90fdb 	.word	0xbfc90fdb
 8009094:	00000000 	.word	0x00000000

08009098 <scalbn>:
 8009098:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800909c:	4616      	mov	r6, r2
 800909e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80090a2:	4683      	mov	fp, r0
 80090a4:	468c      	mov	ip, r1
 80090a6:	460b      	mov	r3, r1
 80090a8:	b982      	cbnz	r2, 80090cc <scalbn+0x34>
 80090aa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80090ae:	4303      	orrs	r3, r0
 80090b0:	d039      	beq.n	8009126 <scalbn+0x8e>
 80090b2:	4b2f      	ldr	r3, [pc, #188]	@ (8009170 <scalbn+0xd8>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	f7f7 fa07 	bl	80004c8 <__aeabi_dmul>
 80090ba:	4b2e      	ldr	r3, [pc, #184]	@ (8009174 <scalbn+0xdc>)
 80090bc:	4683      	mov	fp, r0
 80090be:	429e      	cmp	r6, r3
 80090c0:	468c      	mov	ip, r1
 80090c2:	da0d      	bge.n	80090e0 <scalbn+0x48>
 80090c4:	a326      	add	r3, pc, #152	@ (adr r3, 8009160 <scalbn+0xc8>)
 80090c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ca:	e01b      	b.n	8009104 <scalbn+0x6c>
 80090cc:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 80090d0:	42ba      	cmp	r2, r7
 80090d2:	d109      	bne.n	80090e8 <scalbn+0x50>
 80090d4:	4602      	mov	r2, r0
 80090d6:	f7f7 f841 	bl	800015c <__adddf3>
 80090da:	4683      	mov	fp, r0
 80090dc:	468c      	mov	ip, r1
 80090de:	e022      	b.n	8009126 <scalbn+0x8e>
 80090e0:	460b      	mov	r3, r1
 80090e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80090e6:	3a36      	subs	r2, #54	@ 0x36
 80090e8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80090ec:	428e      	cmp	r6, r1
 80090ee:	dd0c      	ble.n	800910a <scalbn+0x72>
 80090f0:	a31d      	add	r3, pc, #116	@ (adr r3, 8009168 <scalbn+0xd0>)
 80090f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f6:	461c      	mov	r4, r3
 80090f8:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 80090fc:	f361 74df 	bfi	r4, r1, #31, #1
 8009100:	4621      	mov	r1, r4
 8009102:	481d      	ldr	r0, [pc, #116]	@ (8009178 <scalbn+0xe0>)
 8009104:	f7f7 f9e0 	bl	80004c8 <__aeabi_dmul>
 8009108:	e7e7      	b.n	80090da <scalbn+0x42>
 800910a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800910e:	4432      	add	r2, r6
 8009110:	428a      	cmp	r2, r1
 8009112:	dced      	bgt.n	80090f0 <scalbn+0x58>
 8009114:	2a00      	cmp	r2, #0
 8009116:	dd0a      	ble.n	800912e <scalbn+0x96>
 8009118:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800911c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009120:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009124:	46ac      	mov	ip, r5
 8009126:	4658      	mov	r0, fp
 8009128:	4661      	mov	r1, ip
 800912a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800912e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009132:	da09      	bge.n	8009148 <scalbn+0xb0>
 8009134:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8009138:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800913c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8009140:	480e      	ldr	r0, [pc, #56]	@ (800917c <scalbn+0xe4>)
 8009142:	f041 011f 	orr.w	r1, r1, #31
 8009146:	e7bd      	b.n	80090c4 <scalbn+0x2c>
 8009148:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800914c:	3236      	adds	r2, #54	@ 0x36
 800914e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009152:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009156:	4658      	mov	r0, fp
 8009158:	4629      	mov	r1, r5
 800915a:	2200      	movs	r2, #0
 800915c:	4b08      	ldr	r3, [pc, #32]	@ (8009180 <scalbn+0xe8>)
 800915e:	e7d1      	b.n	8009104 <scalbn+0x6c>
 8009160:	c2f8f359 	.word	0xc2f8f359
 8009164:	01a56e1f 	.word	0x01a56e1f
 8009168:	8800759c 	.word	0x8800759c
 800916c:	7e37e43c 	.word	0x7e37e43c
 8009170:	43500000 	.word	0x43500000
 8009174:	ffff3cb0 	.word	0xffff3cb0
 8009178:	8800759c 	.word	0x8800759c
 800917c:	c2f8f359 	.word	0xc2f8f359
 8009180:	3c900000 	.word	0x3c900000

08009184 <with_errno>:
 8009184:	b570      	push	{r4, r5, r6, lr}
 8009186:	4604      	mov	r4, r0
 8009188:	460d      	mov	r5, r1
 800918a:	4616      	mov	r6, r2
 800918c:	f7fe f91e 	bl	80073cc <__errno>
 8009190:	4629      	mov	r1, r5
 8009192:	6006      	str	r6, [r0, #0]
 8009194:	4620      	mov	r0, r4
 8009196:	bd70      	pop	{r4, r5, r6, pc}

08009198 <xflow>:
 8009198:	b513      	push	{r0, r1, r4, lr}
 800919a:	4604      	mov	r4, r0
 800919c:	4619      	mov	r1, r3
 800919e:	4610      	mov	r0, r2
 80091a0:	b10c      	cbz	r4, 80091a6 <xflow+0xe>
 80091a2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80091a6:	e9cd 2300 	strd	r2, r3, [sp]
 80091aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091ae:	f7f7 f98b 	bl	80004c8 <__aeabi_dmul>
 80091b2:	2222      	movs	r2, #34	@ 0x22
 80091b4:	b002      	add	sp, #8
 80091b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091ba:	f7ff bfe3 	b.w	8009184 <with_errno>

080091be <__math_uflow>:
 80091be:	2200      	movs	r2, #0
 80091c0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80091c4:	f7ff bfe8 	b.w	8009198 <xflow>

080091c8 <__math_oflow>:
 80091c8:	2200      	movs	r2, #0
 80091ca:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80091ce:	f7ff bfe3 	b.w	8009198 <xflow>
	...

080091d4 <__ieee754_sqrt>:
 80091d4:	4a67      	ldr	r2, [pc, #412]	@ (8009374 <__ieee754_sqrt+0x1a0>)
 80091d6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091da:	438a      	bics	r2, r1
 80091dc:	4606      	mov	r6, r0
 80091de:	460f      	mov	r7, r1
 80091e0:	460b      	mov	r3, r1
 80091e2:	4604      	mov	r4, r0
 80091e4:	d10e      	bne.n	8009204 <__ieee754_sqrt+0x30>
 80091e6:	4602      	mov	r2, r0
 80091e8:	f7f7 f96e 	bl	80004c8 <__aeabi_dmul>
 80091ec:	4602      	mov	r2, r0
 80091ee:	460b      	mov	r3, r1
 80091f0:	4630      	mov	r0, r6
 80091f2:	4639      	mov	r1, r7
 80091f4:	f7f6 ffb2 	bl	800015c <__adddf3>
 80091f8:	4606      	mov	r6, r0
 80091fa:	460f      	mov	r7, r1
 80091fc:	4630      	mov	r0, r6
 80091fe:	4639      	mov	r1, r7
 8009200:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009204:	2900      	cmp	r1, #0
 8009206:	dc0c      	bgt.n	8009222 <__ieee754_sqrt+0x4e>
 8009208:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800920c:	4302      	orrs	r2, r0
 800920e:	d0f5      	beq.n	80091fc <__ieee754_sqrt+0x28>
 8009210:	b189      	cbz	r1, 8009236 <__ieee754_sqrt+0x62>
 8009212:	4602      	mov	r2, r0
 8009214:	f7f6 ffa0 	bl	8000158 <__aeabi_dsub>
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	f7f7 fa7e 	bl	800071c <__aeabi_ddiv>
 8009220:	e7ea      	b.n	80091f8 <__ieee754_sqrt+0x24>
 8009222:	150a      	asrs	r2, r1, #20
 8009224:	d115      	bne.n	8009252 <__ieee754_sqrt+0x7e>
 8009226:	2100      	movs	r1, #0
 8009228:	e009      	b.n	800923e <__ieee754_sqrt+0x6a>
 800922a:	0ae3      	lsrs	r3, r4, #11
 800922c:	3a15      	subs	r2, #21
 800922e:	0564      	lsls	r4, r4, #21
 8009230:	2b00      	cmp	r3, #0
 8009232:	d0fa      	beq.n	800922a <__ieee754_sqrt+0x56>
 8009234:	e7f7      	b.n	8009226 <__ieee754_sqrt+0x52>
 8009236:	460a      	mov	r2, r1
 8009238:	e7fa      	b.n	8009230 <__ieee754_sqrt+0x5c>
 800923a:	005b      	lsls	r3, r3, #1
 800923c:	3101      	adds	r1, #1
 800923e:	02d8      	lsls	r0, r3, #11
 8009240:	d5fb      	bpl.n	800923a <__ieee754_sqrt+0x66>
 8009242:	1e48      	subs	r0, r1, #1
 8009244:	1a12      	subs	r2, r2, r0
 8009246:	f1c1 0020 	rsb	r0, r1, #32
 800924a:	fa24 f000 	lsr.w	r0, r4, r0
 800924e:	4303      	orrs	r3, r0
 8009250:	408c      	lsls	r4, r1
 8009252:	2600      	movs	r6, #0
 8009254:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8009258:	2116      	movs	r1, #22
 800925a:	07d2      	lsls	r2, r2, #31
 800925c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009260:	4632      	mov	r2, r6
 8009262:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009266:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800926a:	bf5c      	itt	pl
 800926c:	005b      	lslpl	r3, r3, #1
 800926e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009272:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009276:	bf58      	it	pl
 8009278:	0064      	lslpl	r4, r4, #1
 800927a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800927e:	107f      	asrs	r7, r7, #1
 8009280:	0064      	lsls	r4, r4, #1
 8009282:	1815      	adds	r5, r2, r0
 8009284:	429d      	cmp	r5, r3
 8009286:	bfde      	ittt	le
 8009288:	182a      	addle	r2, r5, r0
 800928a:	1b5b      	suble	r3, r3, r5
 800928c:	1836      	addle	r6, r6, r0
 800928e:	0fe5      	lsrs	r5, r4, #31
 8009290:	3901      	subs	r1, #1
 8009292:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8009296:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800929a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800929e:	d1f0      	bne.n	8009282 <__ieee754_sqrt+0xae>
 80092a0:	460d      	mov	r5, r1
 80092a2:	f04f 0a20 	mov.w	sl, #32
 80092a6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80092aa:	429a      	cmp	r2, r3
 80092ac:	eb01 0c00 	add.w	ip, r1, r0
 80092b0:	db02      	blt.n	80092b8 <__ieee754_sqrt+0xe4>
 80092b2:	d113      	bne.n	80092dc <__ieee754_sqrt+0x108>
 80092b4:	45a4      	cmp	ip, r4
 80092b6:	d811      	bhi.n	80092dc <__ieee754_sqrt+0x108>
 80092b8:	f1bc 0f00 	cmp.w	ip, #0
 80092bc:	eb0c 0100 	add.w	r1, ip, r0
 80092c0:	da42      	bge.n	8009348 <__ieee754_sqrt+0x174>
 80092c2:	2900      	cmp	r1, #0
 80092c4:	db40      	blt.n	8009348 <__ieee754_sqrt+0x174>
 80092c6:	f102 0e01 	add.w	lr, r2, #1
 80092ca:	1a9b      	subs	r3, r3, r2
 80092cc:	4672      	mov	r2, lr
 80092ce:	45a4      	cmp	ip, r4
 80092d0:	bf88      	it	hi
 80092d2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80092d6:	eba4 040c 	sub.w	r4, r4, ip
 80092da:	4405      	add	r5, r0
 80092dc:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80092e0:	f1ba 0a01 	subs.w	sl, sl, #1
 80092e4:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80092e8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80092ec:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80092f0:	d1db      	bne.n	80092aa <__ieee754_sqrt+0xd6>
 80092f2:	431c      	orrs	r4, r3
 80092f4:	d01a      	beq.n	800932c <__ieee754_sqrt+0x158>
 80092f6:	4c20      	ldr	r4, [pc, #128]	@ (8009378 <__ieee754_sqrt+0x1a4>)
 80092f8:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800937c <__ieee754_sqrt+0x1a8>
 80092fc:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009300:	e9db 2300 	ldrd	r2, r3, [fp]
 8009304:	f7f6 ff28 	bl	8000158 <__aeabi_dsub>
 8009308:	e9d4 8900 	ldrd	r8, r9, [r4]
 800930c:	4602      	mov	r2, r0
 800930e:	460b      	mov	r3, r1
 8009310:	4640      	mov	r0, r8
 8009312:	4649      	mov	r1, r9
 8009314:	f7f7 fb54 	bl	80009c0 <__aeabi_dcmple>
 8009318:	b140      	cbz	r0, 800932c <__ieee754_sqrt+0x158>
 800931a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800931e:	e9db 2300 	ldrd	r2, r3, [fp]
 8009322:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009326:	d111      	bne.n	800934c <__ieee754_sqrt+0x178>
 8009328:	4655      	mov	r5, sl
 800932a:	3601      	adds	r6, #1
 800932c:	1072      	asrs	r2, r6, #1
 800932e:	086b      	lsrs	r3, r5, #1
 8009330:	07f1      	lsls	r1, r6, #31
 8009332:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009336:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800933a:	bf48      	it	mi
 800933c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009340:	4618      	mov	r0, r3
 8009342:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8009346:	e757      	b.n	80091f8 <__ieee754_sqrt+0x24>
 8009348:	4696      	mov	lr, r2
 800934a:	e7be      	b.n	80092ca <__ieee754_sqrt+0xf6>
 800934c:	f7f6 ff06 	bl	800015c <__adddf3>
 8009350:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009354:	4602      	mov	r2, r0
 8009356:	460b      	mov	r3, r1
 8009358:	4640      	mov	r0, r8
 800935a:	4649      	mov	r1, r9
 800935c:	f7f7 fb26 	bl	80009ac <__aeabi_dcmplt>
 8009360:	b120      	cbz	r0, 800936c <__ieee754_sqrt+0x198>
 8009362:	1ca8      	adds	r0, r5, #2
 8009364:	bf08      	it	eq
 8009366:	3601      	addeq	r6, #1
 8009368:	3502      	adds	r5, #2
 800936a:	e7df      	b.n	800932c <__ieee754_sqrt+0x158>
 800936c:	1c6b      	adds	r3, r5, #1
 800936e:	f023 0501 	bic.w	r5, r3, #1
 8009372:	e7db      	b.n	800932c <__ieee754_sqrt+0x158>
 8009374:	7ff00000 	.word	0x7ff00000
 8009378:	20000090 	.word	0x20000090
 800937c:	20000088 	.word	0x20000088

08009380 <_init>:
 8009380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009382:	bf00      	nop
 8009384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009386:	bc08      	pop	{r3}
 8009388:	469e      	mov	lr, r3
 800938a:	4770      	bx	lr

0800938c <_fini>:
 800938c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938e:	bf00      	nop
 8009390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009392:	bc08      	pop	{r3}
 8009394:	469e      	mov	lr, r3
 8009396:	4770      	bx	lr
